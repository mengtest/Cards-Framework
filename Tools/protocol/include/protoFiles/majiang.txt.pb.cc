// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: majiang.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "majiang.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GMMJRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMMJRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMHandCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMHandCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMHandCard_PlayerBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMHandCard_PlayerBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMHandCard_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMHandCard_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_HuiTouData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_HuiTouData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_XiaJingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_XiaJingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PlayerHandCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PlayerHandCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_MJCanOperator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_MJCanOperator_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_OperatorData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_OperatorData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_MJOperator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_MJOperator_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_HUOperator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_HUOperator_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_HuHandCardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_HuHandCardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_AskFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_AskFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_AutoInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_AutoInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ReconnectMJData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ReconnectMJData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ReconnectPlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ReconnectPlayerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ReconnectCloseRoomData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ReconnectCloseRoomData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ReconnectFunHandCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ReconnectFunHandCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PlayerFunHandCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PlayerFunHandCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_MJCardRoomResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_MJCardRoomResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_MJCardRoomOneData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_MJCardRoomOneData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PlayerResultInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PlayerResultInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PlayerRollRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PlayerRollRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PlayerRecivePack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PlayerRecivePack_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_majiang_2etxt() {
  protobuf_AddDesc_majiang_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "majiang.txt");
  GOOGLE_CHECK(file != NULL);
  GMMJRequest_descriptor_ = file->message_type(0);
  static const int GMMJRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMJRequest, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMJRequest, m_fbtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMJRequest, m_fbplayway_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMJRequest, m_roomcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMJRequest, m_playercount_),
  };
  GMMJRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMMJRequest_descriptor_,
      GMMJRequest::default_instance_,
      GMMJRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMJRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMJRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMMJRequest));
  GMHandCard_descriptor_ = file->message_type(1);
  static const int GMHandCard_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard, m_bankerpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard, m_zheng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard, m_fu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard, m_zhengid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard, m_xiazheng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard, m_xiafu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard, m_xiazhengid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard, m_xiajingdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard, m_playerpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard, m_cardpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard, m_jingpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard, m_lefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard, m_leftcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard, m_totalcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard, m_huitoudata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard, m_handcard_),
  };
  GMHandCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMHandCard_descriptor_,
      GMHandCard::default_instance_,
      GMHandCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMHandCard));
  GMHandCard_PlayerBack_descriptor_ = file->message_type(2);
  static const int GMHandCard_PlayerBack_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard_PlayerBack, m_bankerpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard_PlayerBack, m_zheng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard_PlayerBack, m_fu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard_PlayerBack, m_zhengid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard_PlayerBack, m_xiazheng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard_PlayerBack, m_xiafu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard_PlayerBack, m_xiazhengid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard_PlayerBack, m_xiajingdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard_PlayerBack, m_playerpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard_PlayerBack, m_cardpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard_PlayerBack, m_jingpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard_PlayerBack, m_lefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard_PlayerBack, m_leftcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard_PlayerBack, m_totalcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard_PlayerBack, m_huitoudata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard_PlayerBack, m_fbtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard_PlayerBack, m_fbplayway_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard_PlayerBack, m_playercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard_PlayerBack, m_roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard_PlayerBack, m_handcarddata_),
  };
  GMHandCard_PlayerBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMHandCard_PlayerBack_descriptor_,
      GMHandCard_PlayerBack::default_instance_,
      GMHandCard_PlayerBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard_PlayerBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard_PlayerBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMHandCard_PlayerBack));
  GMHandCard_Info_descriptor_ = file->message_type(3);
  static const int GMHandCard_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard_Info, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard_Info, m_handcard_),
  };
  GMHandCard_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMHandCard_Info_descriptor_,
      GMHandCard_Info::default_instance_,
      GMHandCard_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHandCard_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMHandCard_Info));
  GM_HuiTouData_descriptor_ = file->message_type(4);
  static const int GM_HuiTouData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HuiTouData, m_huitouzhen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HuiTouData, m_huitoufu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HuiTouData, m_huitouinfo_),
  };
  GM_HuiTouData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_HuiTouData_descriptor_,
      GM_HuiTouData::default_instance_,
      GM_HuiTouData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HuiTouData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HuiTouData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_HuiTouData));
  GM_XiaJingInfo_descriptor_ = file->message_type(5);
  static const int GM_XiaJingInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_XiaJingInfo, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_XiaJingInfo, m_xiazhunum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_XiaJingInfo, m_xiafunum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_XiaJingInfo, m_sorce_),
  };
  GM_XiaJingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_XiaJingInfo_descriptor_,
      GM_XiaJingInfo::default_instance_,
      GM_XiaJingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_XiaJingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_XiaJingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_XiaJingInfo));
  GM_PlayerHandCard_descriptor_ = file->message_type(6);
  static const int GM_PlayerHandCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerHandCard, m_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerHandCard, m_type_),
  };
  GM_PlayerHandCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PlayerHandCard_descriptor_,
      GM_PlayerHandCard::default_instance_,
      GM_PlayerHandCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerHandCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerHandCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PlayerHandCard));
  GM_MJCanOperator_descriptor_ = file->message_type(7);
  static const int GM_MJCanOperator_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MJCanOperator, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MJCanOperator, m_operator_),
  };
  GM_MJCanOperator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_MJCanOperator_descriptor_,
      GM_MJCanOperator::default_instance_,
      GM_MJCanOperator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MJCanOperator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MJCanOperator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_MJCanOperator));
  GM_OperatorData_descriptor_ = file->message_type(8);
  static const int GM_OperatorData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OperatorData, m_operatortype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OperatorData, m_funid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OperatorData, m_operatorcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OperatorData, m_rolevoice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OperatorData, m_cardvoice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OperatorData, m_handcard_),
  };
  GM_OperatorData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_OperatorData_descriptor_,
      GM_OperatorData::default_instance_,
      GM_OperatorData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OperatorData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OperatorData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_OperatorData));
  GM_MJOperator_descriptor_ = file->message_type(9);
  static const int GM_MJOperator_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MJOperator, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MJOperator, m_operatortype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MJOperator, m_rolevoice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MJOperator, m_cardvoice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MJOperator, m_lastcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MJOperator, m_handcard_),
  };
  GM_MJOperator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_MJOperator_descriptor_,
      GM_MJOperator::default_instance_,
      GM_MJOperator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MJOperator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MJOperator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_MJOperator));
  GM_HUOperator_descriptor_ = file->message_type(10);
  static const int GM_HUOperator_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HUOperator, m_huroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HUOperator, m_hutype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HUOperator, m_fpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HUOperator, m_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HUOperator, m_rolevoice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HUOperator, m_cardvoice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HUOperator, m_hucard_),
  };
  GM_HUOperator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_HUOperator_descriptor_,
      GM_HUOperator::default_instance_,
      GM_HUOperator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HUOperator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HUOperator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_HUOperator));
  GM_HuHandCardData_descriptor_ = file->message_type(11);
  static const int GM_HuHandCardData_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HuHandCardData, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HuHandCardData, m_handcardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HuHandCardData, m_xiajing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HuHandCardData, m_shangjing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HuHandCardData, m_hufeng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HuHandCardData, m_goldnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HuHandCardData, m_isbawang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HuHandCardData, m_iscongguan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HuHandCardData, m_huitouscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HuHandCardData, m_maileiscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HuHandCardData, m_tongscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HuHandCardData, m_gangscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HuHandCardData, m_xiacgbw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HuHandCardData, m_huicgbw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HuHandCardData, m_maicgbw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HuHandCardData, m_tongcgbw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HuHandCardData, m_czscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HuHandCardData, m_hdfzscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HuHandCardData, m_plrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HuHandCardData, m_angangtype_),
  };
  GM_HuHandCardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_HuHandCardData_descriptor_,
      GM_HuHandCardData::default_instance_,
      GM_HuHandCardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HuHandCardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HuHandCardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_HuHandCardData));
  GM_AskFriend_descriptor_ = file->message_type(12);
  static const int GM_AskFriend_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AskFriend, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AskFriend, m_beinvited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AskFriend, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AskFriend, m_fbid_),
  };
  GM_AskFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_AskFriend_descriptor_,
      GM_AskFriend::default_instance_,
      GM_AskFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AskFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AskFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_AskFriend));
  GM_AutoInfo_descriptor_ = file->message_type(13);
  static const int GM_AutoInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AutoInfo, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AutoInfo, m_autoflag_),
  };
  GM_AutoInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_AutoInfo_descriptor_,
      GM_AutoInfo::default_instance_,
      GM_AutoInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AutoInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AutoInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_AutoInfo));
  GM_ReconnectMJData_descriptor_ = file->message_type(14);
  static const int GM_ReconnectMJData_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectMJData, m_bankerpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectMJData, m_zheng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectMJData, m_fu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectMJData, m_zhengid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectMJData, m_jingpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectMJData, m_roommasterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectMJData, m_firstpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectMJData, m_secondpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectMJData, m_freecard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectMJData, m_lefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectMJData, m_leftcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectMJData, m_totalcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectMJData, m_playway_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectMJData, m_xiazheng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectMJData, m_xiafu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectMJData, m_rollcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectMJData, m_playercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectMJData, m_lastoutcardroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectMJData, m_closeroomlefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectMJData, m_handcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectMJData, m_alldata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectMJData, m_closeroomdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectMJData, m_huoperatordata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectMJData, m_hulastcard_),
  };
  GM_ReconnectMJData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ReconnectMJData_descriptor_,
      GM_ReconnectMJData::default_instance_,
      GM_ReconnectMJData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectMJData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectMJData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ReconnectMJData));
  GM_ReconnectPlayerData_descriptor_ = file->message_type(15);
  static const int GM_ReconnectPlayerData_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectPlayerData, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectPlayerData, m_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectPlayerData, m_headphoto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectPlayerData, m_catatertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectPlayerData, m_postion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectPlayerData, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectPlayerData, m_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectPlayerData, m_handcardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectPlayerData, m_headframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectPlayerData, m_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectPlayerData, m_headphotourl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectPlayerData, m_isauto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectPlayerData, m_totalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectPlayerData, m_isready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectPlayerData, m_rolevoice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectPlayerData, m_cardvoice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectPlayerData, m_longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectPlayerData, m_latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectPlayerData, m_reallypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectPlayerData, m_dingstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectPlayerData, m_outhandcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectPlayerData, m_funhandcardlist_),
  };
  GM_ReconnectPlayerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ReconnectPlayerData_descriptor_,
      GM_ReconnectPlayerData::default_instance_,
      GM_ReconnectPlayerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectPlayerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectPlayerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ReconnectPlayerData));
  GM_ReconnectCloseRoomData_descriptor_ = file->message_type(16);
  static const int GM_ReconnectCloseRoomData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectCloseRoomData, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectCloseRoomData, m_state_),
  };
  GM_ReconnectCloseRoomData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ReconnectCloseRoomData_descriptor_,
      GM_ReconnectCloseRoomData::default_instance_,
      GM_ReconnectCloseRoomData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectCloseRoomData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectCloseRoomData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ReconnectCloseRoomData));
  GM_ReconnectFunHandCard_descriptor_ = file->message_type(17);
  static const int GM_ReconnectFunHandCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectFunHandCard, m_operatortype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectFunHandCard, m_funhandcard_),
  };
  GM_ReconnectFunHandCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ReconnectFunHandCard_descriptor_,
      GM_ReconnectFunHandCard::default_instance_,
      GM_ReconnectFunHandCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectFunHandCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReconnectFunHandCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ReconnectFunHandCard));
  GM_PlayerFunHandCard_descriptor_ = file->message_type(18);
  static const int GM_PlayerFunHandCard_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerFunHandCard, m_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerFunHandCard, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerFunHandCard, m_roleid_),
  };
  GM_PlayerFunHandCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PlayerFunHandCard_descriptor_,
      GM_PlayerFunHandCard::default_instance_,
      GM_PlayerFunHandCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerFunHandCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerFunHandCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PlayerFunHandCard));
  GM_MJCardRoomResult_descriptor_ = file->message_type(19);
  static const int GM_MJCardRoomResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MJCardRoomResult, m_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MJCardRoomResult, m_onedata_),
  };
  GM_MJCardRoomResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_MJCardRoomResult_descriptor_,
      GM_MJCardRoomResult::default_instance_,
      GM_MJCardRoomResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MJCardRoomResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MJCardRoomResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_MJCardRoomResult));
  GM_MJCardRoomOneData_descriptor_ = file->message_type(20);
  static const int GM_MJCardRoomOneData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MJCardRoomOneData, m_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MJCardRoomOneData, m_resultinfo_),
  };
  GM_MJCardRoomOneData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_MJCardRoomOneData_descriptor_,
      GM_MJCardRoomOneData::default_instance_,
      GM_MJCardRoomOneData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MJCardRoomOneData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MJCardRoomOneData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_MJCardRoomOneData));
  GM_PlayerResultInfo_descriptor_ = file->message_type(21);
  static const int GM_PlayerResultInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerResultInfo, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerResultInfo, m_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerResultInfo, m_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerResultInfo, m_congguan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerResultInfo, m_bawang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerResultInfo, m_viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerResultInfo, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerResultInfo, m_headurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerResultInfo, m_id_),
  };
  GM_PlayerResultInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PlayerResultInfo_descriptor_,
      GM_PlayerResultInfo::default_instance_,
      GM_PlayerResultInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerResultInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerResultInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PlayerResultInfo));
  GM_PlayerRollRequest_descriptor_ = file->message_type(22);
  static const int GM_PlayerRollRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerRollRequest, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerRollRequest, m_pos_),
  };
  GM_PlayerRollRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PlayerRollRequest_descriptor_,
      GM_PlayerRollRequest::default_instance_,
      GM_PlayerRollRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerRollRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerRollRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PlayerRollRequest));
  GM_PlayerRecivePack_descriptor_ = file->message_type(23);
  static const int GM_PlayerRecivePack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerRecivePack, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerRecivePack, m_packflag_),
  };
  GM_PlayerRecivePack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PlayerRecivePack_descriptor_,
      GM_PlayerRecivePack::default_instance_,
      GM_PlayerRecivePack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerRecivePack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerRecivePack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PlayerRecivePack));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_majiang_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMMJRequest_descriptor_, &GMMJRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMHandCard_descriptor_, &GMHandCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMHandCard_PlayerBack_descriptor_, &GMHandCard_PlayerBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMHandCard_Info_descriptor_, &GMHandCard_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_HuiTouData_descriptor_, &GM_HuiTouData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_XiaJingInfo_descriptor_, &GM_XiaJingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PlayerHandCard_descriptor_, &GM_PlayerHandCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_MJCanOperator_descriptor_, &GM_MJCanOperator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_OperatorData_descriptor_, &GM_OperatorData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_MJOperator_descriptor_, &GM_MJOperator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_HUOperator_descriptor_, &GM_HUOperator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_HuHandCardData_descriptor_, &GM_HuHandCardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_AskFriend_descriptor_, &GM_AskFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_AutoInfo_descriptor_, &GM_AutoInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ReconnectMJData_descriptor_, &GM_ReconnectMJData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ReconnectPlayerData_descriptor_, &GM_ReconnectPlayerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ReconnectCloseRoomData_descriptor_, &GM_ReconnectCloseRoomData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ReconnectFunHandCard_descriptor_, &GM_ReconnectFunHandCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PlayerFunHandCard_descriptor_, &GM_PlayerFunHandCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_MJCardRoomResult_descriptor_, &GM_MJCardRoomResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_MJCardRoomOneData_descriptor_, &GM_MJCardRoomOneData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PlayerResultInfo_descriptor_, &GM_PlayerResultInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PlayerRollRequest_descriptor_, &GM_PlayerRollRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PlayerRecivePack_descriptor_, &GM_PlayerRecivePack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_majiang_2etxt() {
  delete GMMJRequest::default_instance_;
  delete GMMJRequest_reflection_;
  delete GMHandCard::default_instance_;
  delete GMHandCard_reflection_;
  delete GMHandCard_PlayerBack::default_instance_;
  delete GMHandCard_PlayerBack_reflection_;
  delete GMHandCard_Info::default_instance_;
  delete GMHandCard_Info_reflection_;
  delete GM_HuiTouData::default_instance_;
  delete GM_HuiTouData_reflection_;
  delete GM_XiaJingInfo::default_instance_;
  delete GM_XiaJingInfo_reflection_;
  delete GM_PlayerHandCard::default_instance_;
  delete GM_PlayerHandCard_reflection_;
  delete GM_MJCanOperator::default_instance_;
  delete GM_MJCanOperator_reflection_;
  delete GM_OperatorData::default_instance_;
  delete GM_OperatorData_reflection_;
  delete GM_MJOperator::default_instance_;
  delete GM_MJOperator_reflection_;
  delete GM_HUOperator::default_instance_;
  delete GM_HUOperator_reflection_;
  delete GM_HuHandCardData::default_instance_;
  delete GM_HuHandCardData_reflection_;
  delete GM_AskFriend::default_instance_;
  delete GM_AskFriend_reflection_;
  delete GM_AutoInfo::default_instance_;
  delete GM_AutoInfo_reflection_;
  delete GM_ReconnectMJData::default_instance_;
  delete GM_ReconnectMJData_reflection_;
  delete GM_ReconnectPlayerData::default_instance_;
  delete GM_ReconnectPlayerData_reflection_;
  delete GM_ReconnectCloseRoomData::default_instance_;
  delete GM_ReconnectCloseRoomData_reflection_;
  delete GM_ReconnectFunHandCard::default_instance_;
  delete GM_ReconnectFunHandCard_reflection_;
  delete GM_PlayerFunHandCard::default_instance_;
  delete GM_PlayerFunHandCard_reflection_;
  delete GM_MJCardRoomResult::default_instance_;
  delete GM_MJCardRoomResult_reflection_;
  delete GM_MJCardRoomOneData::default_instance_;
  delete GM_MJCardRoomOneData_reflection_;
  delete GM_PlayerResultInfo::default_instance_;
  delete GM_PlayerResultInfo_reflection_;
  delete GM_PlayerRollRequest::default_instance_;
  delete GM_PlayerRollRequest_reflection_;
  delete GM_PlayerRecivePack::default_instance_;
  delete GM_PlayerRecivePack_reflection_;
}

void protobuf_AddDesc_majiang_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013majiang.txt\"t\n\013GMMJRequest\022\020\n\010m_roleid"
    "\030\001 \002(\005\022\022\n\nm_fbtypeid\030\002 \001(\005\022\023\n\013m_fbplaywa"
    "y\030\003 \001(\t\022\023\n\013m_roomcount\030\004 \001(\005\022\025\n\rm_player"
    "Count\030\005 \001(\005\"\376\002\n\nGMHandCard\022\023\n\013m_bankerPo"
    "s\030\001 \002(\005\022\017\n\007m_zheng\030\002 \001(\005\022\014\n\004m_fu\030\003 \001(\005\022\021"
    "\n\tm_zhengid\030\004 \001(\005\022\022\n\nm_xiazheng\030\005 \001(\005\022\017\n"
    "\007m_xiafu\030\006 \001(\005\022\024\n\014m_xiazhengid\030\007 \001(\005\022&\n\r"
    "m_xiaJingData\030\010 \003(\0132\017.GM_XiaJingInfo\022\023\n\013"
    "m_playerpos\030\t \001(\005\022\021\n\tm_cardpos\030\n \001(\005\022\021\n\t"
    "m_jingpos\030\013 \001(\005\022\022\n\nm_leftTime\030\014 \001(\005\022\023\n\013m"
    "_leftCount\030\r \001(\005\022\024\n\014m_totalCount\030\016 \001(\005\022$"
    "\n\014m_huiTouData\030\017 \001(\0132\016.GM_HuiTouData\022&\n\n"
    "m_HandCard\030\024 \003(\0132\022.GM_PlayerHandCard\"\335\003\n"
    "\025GMHandCard_PlayerBack\022\023\n\013m_bankerPos\030\001 "
    "\002(\005\022\017\n\007m_zheng\030\002 \001(\005\022\014\n\004m_fu\030\003 \001(\005\022\021\n\tm_"
    "zhengid\030\004 \001(\005\022\022\n\nm_xiazheng\030\005 \001(\005\022\017\n\007m_x"
    "iafu\030\006 \001(\005\022\024\n\014m_xiazhengid\030\007 \001(\005\022&\n\rm_xi"
    "aJingData\030\010 \003(\0132\017.GM_XiaJingInfo\022\023\n\013m_pl"
    "ayerpos\030\t \001(\005\022\021\n\tm_cardpos\030\n \001(\005\022\021\n\tm_ji"
    "ngpos\030\013 \001(\005\022\022\n\nm_leftTime\030\014 \001(\005\022\023\n\013m_lef"
    "tCount\030\r \001(\005\022\024\n\014m_totalCount\030\016 \001(\005\022$\n\014m_"
    "huiTouData\030\017 \001(\0132\016.GM_HuiTouData\022\022\n\nm_fb"
    "typeid\030\020 \001(\005\022\023\n\013m_fbplayway\030\021 \001(\t\022\025\n\rm_p"
    "layerCount\030\022 \001(\005\022\020\n\010m_roomid\030\023 \001(\005\022(\n\016m_"
    "handCardData\030\024 \003(\0132\020.GMHandCard_Info\"K\n\017"
    "GMHandCard_Info\022\020\n\010m_roleid\030\001 \002(\005\022&\n\nm_H"
    "andCard\030\024 \003(\0132\022.GM_PlayerHandCard\"`\n\rGM_"
    "HuiTouData\022\024\n\014m_huitouZhen\030\001 \002(\005\022\022\n\nm_hu"
    "itouFu\030\002 \001(\005\022%\n\014m_huitouInfo\030\n \003(\0132\017.GM_"
    "XiaJingInfo\"\\\n\016GM_XiaJingInfo\022\020\n\010m_rolei"
    "d\030\001 \002(\005\022\023\n\013m_xiazhuNum\030\002 \001(\005\022\022\n\nm_xiafuN"
    "um\030\003 \001(\005\022\017\n\007m_sorce\030\004 \001(\005\"4\n\021GM_PlayerHa"
    "ndCard\022\017\n\007m_Index\030\001 \002(\005\022\016\n\006m_Type\030\002 \001(\005\""
    "J\n\020GM_MJCanOperator\022\020\n\010m_roleid\030\001 \002(\005\022$\n"
    "\nm_Operator\030\002 \003(\0132\020.GM_OperatorData\"\244\001\n\017"
    "GM_OperatorData\022\026\n\016m_OperatorType\030\001 \002(\005\022"
    "\017\n\007m_FunID\030\002 \001(\005\022\026\n\016m_OperatorCard\030\003 \001(\005"
    "\022\023\n\013m_RoleVoice\030\004 \001(\005\022\023\n\013m_CardVoice\030\005 \001"
    "(\005\022&\n\nm_HandCard\030\n \003(\0132\022.GM_PlayerHandCa"
    "rd\"\263\001\n\rGM_MJOperator\022\020\n\010m_roleid\030\001 \002(\005\022\026"
    "\n\016m_OperatorType\030\002 \001(\005\022\023\n\013m_RoleVoice\030\003 "
    "\001(\005\022\023\n\013m_CardVoice\030\004 \001(\005\022&\n\nm_LastCard\030\005"
    " \001(\0132\022.GM_PlayerHandCard\022&\n\nm_HandCard\030\n"
    " \003(\0132\022.GM_PlayerHandCard\"\271\001\n\rGM_HUOperat"
    "or\022\022\n\nm_huRoleid\030\001 \002(\005\022\020\n\010m_huType\030\002 \001(\005"
    "\022\016\n\006m_fpid\030\003 \001(\005\022\"\n\006m_Data\030\004 \003(\0132\022.GM_Hu"
    "HandCardData\022\023\n\013m_RoleVoice\030\005 \001(\005\022\023\n\013m_C"
    "ardVoice\030\006 \001(\005\022$\n\010m_huCard\030\007 \001(\0132\022.GM_Pl"
    "ayerHandCard\"\251\003\n\021GM_HuHandCardData\022\020\n\010m_"
    "roleid\030\001 \002(\005\022\026\n\016m_HandCardType\030\002 \003(\005\022\021\n\t"
    "m_xiaJing\030\003 \001(\005\022\023\n\013m_ShangJing\030\004 \001(\005\022\020\n\010"
    "m_Hufeng\030\005 \001(\005\022\021\n\tm_GoldNum\030\006 \001(\005\022\022\n\nm_i"
    "sBaWang\030\007 \001(\005\022\024\n\014m_isCongGuan\030\010 \001(\005\022\025\n\rm"
    "_huitouScore\030\t \001(\005\022\025\n\rm_maileiScore\030\n \001("
    "\005\022\023\n\013m_tongScore\030\013 \001(\005\022\023\n\013m_gangScore\030\014 "
    "\001(\005\022\021\n\tm_xiaCGBW\030\r \001(\005\022\021\n\tm_huiCGBW\030\016 \001("
    "\005\022\021\n\tm_maiCGBW\030\017 \001(\005\022\022\n\nm_tongCGBW\030\020 \001(\005"
    "\022\021\n\tm_CZScore\030\021 \001(\005\022\023\n\013m_HDFZScore\030\022 \001(\005"
    "\022\020\n\010m_PLRate\030\023 \001(\005\022\024\n\014m_AnGangType\030\024 \003(\005"
    "\"U\n\014GM_AskFriend\022\020\n\010m_Roleid\030\001 \002(\005\022\023\n\013m_"
    "Beinvited\030\002 \001(\005\022\016\n\006m_Name\030\003 \001(\t\022\016\n\006m_FBI"
    "D\030\004 \001(\005\"3\n\013GM_AutoInfo\022\020\n\010m_Roleid\030\001 \002(\005"
    "\022\022\n\nm_AutoFlag\030\002 \001(\005\"\351\004\n\022GM_ReconnectMJD"
    "ata\022\023\n\013m_bankerPos\030\001 \002(\005\022\017\n\007m_zheng\030\002 \001("
    "\005\022\014\n\004m_fu\030\003 \001(\005\022\021\n\tm_zhengid\030\004 \001(\005\022\021\n\tm_"
    "jingpos\030\005 \001(\005\022\026\n\016m_RoomMasterID\030\006 \001(\005\022\022\n"
    "\nm_FirstPos\030\007 \001(\005\022\023\n\013m_SecondPos\030\010 \001(\005\022\022"
    "\n\nm_FreeCard\030\t \001(\005\022\022\n\nm_leftTime\030\n \001(\005\022\023"
    "\n\013m_leftCount\030\013 \001(\005\022\024\n\014m_totalCount\030\014 \001("
    "\005\022\021\n\tm_playWay\030\r \001(\t\022\022\n\nm_xiazheng\030\016 \001(\005"
    "\022\017\n\007m_xiafu\030\017 \001(\005\022\023\n\013m_rollCount\030\020 \001(\005\022\025"
    "\n\rm_playerCount\030\021 \001(\005\022\033\n\023m_lastOutCardRo"
    "leId\030\022 \001(\005\022\033\n\023m_closeRoomLeftTime\030\023 \001(\005\022"
    "&\n\nm_HandCard\030\024 \003(\0132\022.GM_PlayerHandCard\022"
    "*\n\tm_AllData\030\025 \003(\0132\027.GM_ReconnectPlayerD"
    "ata\0223\n\017m_CloseRoomData\030\026 \003(\0132\032.GM_Reconn"
    "ectCloseRoomData\022(\n\020m_huOperatorData\030\027 \001"
    "(\0132\016.GM_HUOperator\022\024\n\014m_huLastCard\030\030 \001(\005"
    "\"\210\004\n\026GM_ReconnectPlayerData\022\020\n\010m_roleid\030"
    "\001 \002(\005\022\016\n\006m_Gold\030\002 \001(\003\022\023\n\013m_HeadPhoto\030\003 \001"
    "(\005\022\025\n\rm_CataterType\030\004 \001(\005\022\021\n\tm_Postion\030\005"
    " \001(\005\022\016\n\006m_Name\030\006 \001(\t\022\r\n\005m_Sex\030\007 \001(\005\022\025\n\rm"
    "_handCardNum\030\010 \001(\005\022\023\n\013m_HeadFrame\030\t \001(\005\022"
    "\022\n\nm_NickName\030\n \001(\t\022\026\n\016m_HeadPhotoUrl\030\013 "
    "\001(\t\022\020\n\010m_IsAuto\030\014 \001(\005\022\024\n\014m_TotalScore\030\r "
    "\001(\005\022\021\n\tm_IsReady\030\016 \001(\005\022\023\n\013m_RoleVoice\030\017 "
    "\001(\005\022\023\n\013m_CardVoice\030\020 \001(\005\022\023\n\013m_Longitude\030"
    "\021 \001(\001\022\022\n\nm_Latitude\030\022 \001(\001\022\023\n\013m_reallyPos"
    "\030\023 \001(\t\022\023\n\013m_DingState\030\024 \001(\005\022)\n\rm_OutHand"
    "Card\030\031 \003(\0132\022.GM_PlayerHandCard\0223\n\021m_FunH"
    "andCardList\030\032 \003(\0132\030.GM_ReconnectFunHandC"
    "ard\">\n\031GM_ReconnectCloseRoomData\022\020\n\010m_ro"
    "leid\030\001 \002(\005\022\017\n\007m_state\030\002 \001(\005\"_\n\027GM_Reconn"
    "ectFunHandCard\022\026\n\016m_OperatorType\030\001 \002(\005\022,"
    "\n\rm_FunHandCard\030\002 \003(\0132\025.GM_PlayerFunHand"
    "Card\"I\n\024GM_PlayerFunHandCard\022\017\n\007m_Index\030"
    "\001 \002(\005\022\016\n\006m_Type\030\002 \001(\005\022\020\n\010m_RoleId\030\003 \001(\005\""
    "P\n\023GM_MJCardRoomResult\022\017\n\007m_count\030\001 \002(\005\022"
    "(\n\tm_OneData\030\002 \003(\0132\025.GM_MJCardRoomOneDat"
    "a\"S\n\024GM_MJCardRoomOneData\022\017\n\007m_count\030\001 \002"
    "(\005\022*\n\014m_ResultInfo\030\002 \003(\0132\024.GM_PlayerResu"
    "ltInfo\"\262\001\n\023GM_PlayerResultInfo\022\020\n\010m_role"
    "id\030\001 \002(\005\022\017\n\007m_score\030\002 \001(\005\022\r\n\005m_sex\030\003 \001(\005"
    "\022\022\n\nm_congguan\030\004 \001(\005\022\020\n\010m_bawang\030\005 \001(\005\022\022"
    "\n\nm_vipLevel\030\006 \001(\005\022\016\n\006m_name\030\007 \001(\t\022\021\n\tm_"
    "headUrl\030\010 \001(\t\022\014\n\004m_id\030\t \001(\t\"7\n\024GM_Player"
    "RollRequest\022\020\n\010m_roleid\030\001 \002(\005\022\r\n\005m_pos\030\002"
    " \001(\005\";\n\023GM_PlayerRecivePack\022\020\n\010m_roleid\030"
    "\001 \002(\005\022\022\n\nm_packFlag\030\002 \001(\005", 4345);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "majiang.txt", &protobuf_RegisterTypes);
  GMMJRequest::default_instance_ = new GMMJRequest();
  GMHandCard::default_instance_ = new GMHandCard();
  GMHandCard_PlayerBack::default_instance_ = new GMHandCard_PlayerBack();
  GMHandCard_Info::default_instance_ = new GMHandCard_Info();
  GM_HuiTouData::default_instance_ = new GM_HuiTouData();
  GM_XiaJingInfo::default_instance_ = new GM_XiaJingInfo();
  GM_PlayerHandCard::default_instance_ = new GM_PlayerHandCard();
  GM_MJCanOperator::default_instance_ = new GM_MJCanOperator();
  GM_OperatorData::default_instance_ = new GM_OperatorData();
  GM_MJOperator::default_instance_ = new GM_MJOperator();
  GM_HUOperator::default_instance_ = new GM_HUOperator();
  GM_HuHandCardData::default_instance_ = new GM_HuHandCardData();
  GM_AskFriend::default_instance_ = new GM_AskFriend();
  GM_AutoInfo::default_instance_ = new GM_AutoInfo();
  GM_ReconnectMJData::default_instance_ = new GM_ReconnectMJData();
  GM_ReconnectPlayerData::default_instance_ = new GM_ReconnectPlayerData();
  GM_ReconnectCloseRoomData::default_instance_ = new GM_ReconnectCloseRoomData();
  GM_ReconnectFunHandCard::default_instance_ = new GM_ReconnectFunHandCard();
  GM_PlayerFunHandCard::default_instance_ = new GM_PlayerFunHandCard();
  GM_MJCardRoomResult::default_instance_ = new GM_MJCardRoomResult();
  GM_MJCardRoomOneData::default_instance_ = new GM_MJCardRoomOneData();
  GM_PlayerResultInfo::default_instance_ = new GM_PlayerResultInfo();
  GM_PlayerRollRequest::default_instance_ = new GM_PlayerRollRequest();
  GM_PlayerRecivePack::default_instance_ = new GM_PlayerRecivePack();
  GMMJRequest::default_instance_->InitAsDefaultInstance();
  GMHandCard::default_instance_->InitAsDefaultInstance();
  GMHandCard_PlayerBack::default_instance_->InitAsDefaultInstance();
  GMHandCard_Info::default_instance_->InitAsDefaultInstance();
  GM_HuiTouData::default_instance_->InitAsDefaultInstance();
  GM_XiaJingInfo::default_instance_->InitAsDefaultInstance();
  GM_PlayerHandCard::default_instance_->InitAsDefaultInstance();
  GM_MJCanOperator::default_instance_->InitAsDefaultInstance();
  GM_OperatorData::default_instance_->InitAsDefaultInstance();
  GM_MJOperator::default_instance_->InitAsDefaultInstance();
  GM_HUOperator::default_instance_->InitAsDefaultInstance();
  GM_HuHandCardData::default_instance_->InitAsDefaultInstance();
  GM_AskFriend::default_instance_->InitAsDefaultInstance();
  GM_AutoInfo::default_instance_->InitAsDefaultInstance();
  GM_ReconnectMJData::default_instance_->InitAsDefaultInstance();
  GM_ReconnectPlayerData::default_instance_->InitAsDefaultInstance();
  GM_ReconnectCloseRoomData::default_instance_->InitAsDefaultInstance();
  GM_ReconnectFunHandCard::default_instance_->InitAsDefaultInstance();
  GM_PlayerFunHandCard::default_instance_->InitAsDefaultInstance();
  GM_MJCardRoomResult::default_instance_->InitAsDefaultInstance();
  GM_MJCardRoomOneData::default_instance_->InitAsDefaultInstance();
  GM_PlayerResultInfo::default_instance_->InitAsDefaultInstance();
  GM_PlayerRollRequest::default_instance_->InitAsDefaultInstance();
  GM_PlayerRecivePack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_majiang_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_majiang_2etxt {
  StaticDescriptorInitializer_majiang_2etxt() {
    protobuf_AddDesc_majiang_2etxt();
  }
} static_descriptor_initializer_majiang_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GMMJRequest::kMRoleidFieldNumber;
const int GMMJRequest::kMFbtypeidFieldNumber;
const int GMMJRequest::kMFbplaywayFieldNumber;
const int GMMJRequest::kMRoomcountFieldNumber;
const int GMMJRequest::kMPlayerCountFieldNumber;
#endif  // !_MSC_VER

GMMJRequest::GMMJRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMMJRequest::InitAsDefaultInstance() {
}

GMMJRequest::GMMJRequest(const GMMJRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMMJRequest::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_fbtypeid_ = 0;
  m_fbplayway_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_roomcount_ = 0;
  m_playercount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMMJRequest::~GMMJRequest() {
  SharedDtor();
}

void GMMJRequest::SharedDtor() {
  if (m_fbplayway_ != &::google::protobuf::internal::kEmptyString) {
    delete m_fbplayway_;
  }
  if (this != default_instance_) {
  }
}

void GMMJRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMMJRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMMJRequest_descriptor_;
}

const GMMJRequest& GMMJRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_2etxt();
  return *default_instance_;
}

GMMJRequest* GMMJRequest::default_instance_ = NULL;

GMMJRequest* GMMJRequest::New() const {
  return new GMMJRequest;
}

void GMMJRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_fbtypeid_ = 0;
    if (has_m_fbplayway()) {
      if (m_fbplayway_ != &::google::protobuf::internal::kEmptyString) {
        m_fbplayway_->clear();
      }
    }
    m_roomcount_ = 0;
    m_playercount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMMJRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_fbtypeid;
        break;
      }

      // optional int32 m_fbtypeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fbtypeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fbtypeid_)));
          set_has_m_fbtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_fbplayway;
        break;
      }

      // optional string m_fbplayway = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_fbplayway:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_fbplayway()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_fbplayway().data(), this->m_fbplayway().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_roomcount;
        break;
      }

      // optional int32 m_roomcount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_roomcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roomcount_)));
          set_has_m_roomcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_playerCount;
        break;
      }

      // optional int32 m_playerCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_playerCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playercount_)));
          set_has_m_playercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMMJRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int32 m_fbtypeid = 2;
  if (has_m_fbtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_fbtypeid(), output);
  }

  // optional string m_fbplayway = 3;
  if (has_m_fbplayway()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_fbplayway().data(), this->m_fbplayway().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_fbplayway(), output);
  }

  // optional int32 m_roomcount = 4;
  if (has_m_roomcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_roomcount(), output);
  }

  // optional int32 m_playerCount = 5;
  if (has_m_playercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_playercount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMMJRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int32 m_fbtypeid = 2;
  if (has_m_fbtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_fbtypeid(), target);
  }

  // optional string m_fbplayway = 3;
  if (has_m_fbplayway()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_fbplayway().data(), this->m_fbplayway().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_fbplayway(), target);
  }

  // optional int32 m_roomcount = 4;
  if (has_m_roomcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_roomcount(), target);
  }

  // optional int32 m_playerCount = 5;
  if (has_m_playercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_playercount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMMJRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_fbtypeid = 2;
    if (has_m_fbtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fbtypeid());
    }

    // optional string m_fbplayway = 3;
    if (has_m_fbplayway()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_fbplayway());
    }

    // optional int32 m_roomcount = 4;
    if (has_m_roomcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roomcount());
    }

    // optional int32 m_playerCount = 5;
    if (has_m_playercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playercount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMMJRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMMJRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMMJRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMMJRequest::MergeFrom(const GMMJRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_fbtypeid()) {
      set_m_fbtypeid(from.m_fbtypeid());
    }
    if (from.has_m_fbplayway()) {
      set_m_fbplayway(from.m_fbplayway());
    }
    if (from.has_m_roomcount()) {
      set_m_roomcount(from.m_roomcount());
    }
    if (from.has_m_playercount()) {
      set_m_playercount(from.m_playercount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMMJRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMMJRequest::CopyFrom(const GMMJRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMMJRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMMJRequest::Swap(GMMJRequest* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_fbtypeid_, other->m_fbtypeid_);
    std::swap(m_fbplayway_, other->m_fbplayway_);
    std::swap(m_roomcount_, other->m_roomcount_);
    std::swap(m_playercount_, other->m_playercount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMMJRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMMJRequest_descriptor_;
  metadata.reflection = GMMJRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMHandCard::kMBankerPosFieldNumber;
const int GMHandCard::kMZhengFieldNumber;
const int GMHandCard::kMFuFieldNumber;
const int GMHandCard::kMZhengidFieldNumber;
const int GMHandCard::kMXiazhengFieldNumber;
const int GMHandCard::kMXiafuFieldNumber;
const int GMHandCard::kMXiazhengidFieldNumber;
const int GMHandCard::kMXiaJingDataFieldNumber;
const int GMHandCard::kMPlayerposFieldNumber;
const int GMHandCard::kMCardposFieldNumber;
const int GMHandCard::kMJingposFieldNumber;
const int GMHandCard::kMLeftTimeFieldNumber;
const int GMHandCard::kMLeftCountFieldNumber;
const int GMHandCard::kMTotalCountFieldNumber;
const int GMHandCard::kMHuiTouDataFieldNumber;
const int GMHandCard::kMHandCardFieldNumber;
#endif  // !_MSC_VER

GMHandCard::GMHandCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMHandCard::InitAsDefaultInstance() {
  m_huitoudata_ = const_cast< ::GM_HuiTouData*>(&::GM_HuiTouData::default_instance());
}

GMHandCard::GMHandCard(const GMHandCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMHandCard::SharedCtor() {
  _cached_size_ = 0;
  m_bankerpos_ = 0;
  m_zheng_ = 0;
  m_fu_ = 0;
  m_zhengid_ = 0;
  m_xiazheng_ = 0;
  m_xiafu_ = 0;
  m_xiazhengid_ = 0;
  m_playerpos_ = 0;
  m_cardpos_ = 0;
  m_jingpos_ = 0;
  m_lefttime_ = 0;
  m_leftcount_ = 0;
  m_totalcount_ = 0;
  m_huitoudata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMHandCard::~GMHandCard() {
  SharedDtor();
}

void GMHandCard::SharedDtor() {
  if (this != default_instance_) {
    delete m_huitoudata_;
  }
}

void GMHandCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMHandCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMHandCard_descriptor_;
}

const GMHandCard& GMHandCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_2etxt();
  return *default_instance_;
}

GMHandCard* GMHandCard::default_instance_ = NULL;

GMHandCard* GMHandCard::New() const {
  return new GMHandCard;
}

void GMHandCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_bankerpos_ = 0;
    m_zheng_ = 0;
    m_fu_ = 0;
    m_zhengid_ = 0;
    m_xiazheng_ = 0;
    m_xiafu_ = 0;
    m_xiazhengid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_playerpos_ = 0;
    m_cardpos_ = 0;
    m_jingpos_ = 0;
    m_lefttime_ = 0;
    m_leftcount_ = 0;
    m_totalcount_ = 0;
    if (has_m_huitoudata()) {
      if (m_huitoudata_ != NULL) m_huitoudata_->::GM_HuiTouData::Clear();
    }
  }
  m_xiajingdata_.Clear();
  m_handcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMHandCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_bankerPos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bankerpos_)));
          set_has_m_bankerpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_zheng;
        break;
      }

      // optional int32 m_zheng = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_zheng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_zheng_)));
          set_has_m_zheng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_fu;
        break;
      }

      // optional int32 m_fu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fu_)));
          set_has_m_fu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_zhengid;
        break;
      }

      // optional int32 m_zhengid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_zhengid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_zhengid_)));
          set_has_m_zhengid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_xiazheng;
        break;
      }

      // optional int32 m_xiazheng = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_xiazheng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xiazheng_)));
          set_has_m_xiazheng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_xiafu;
        break;
      }

      // optional int32 m_xiafu = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_xiafu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xiafu_)));
          set_has_m_xiafu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_xiazhengid;
        break;
      }

      // optional int32 m_xiazhengid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_xiazhengid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xiazhengid_)));
          set_has_m_xiazhengid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_xiaJingData;
        break;
      }

      // repeated .GM_XiaJingInfo m_xiaJingData = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_xiaJingData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_xiajingdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_xiaJingData;
        if (input->ExpectTag(72)) goto parse_m_playerpos;
        break;
      }

      // optional int32 m_playerpos = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_playerpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playerpos_)));
          set_has_m_playerpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_cardpos;
        break;
      }

      // optional int32 m_cardpos = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cardpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cardpos_)));
          set_has_m_cardpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_jingpos;
        break;
      }

      // optional int32 m_jingpos = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_jingpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_jingpos_)));
          set_has_m_jingpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_leftTime;
        break;
      }

      // optional int32 m_leftTime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_leftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lefttime_)));
          set_has_m_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_leftCount;
        break;
      }

      // optional int32 m_leftCount = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_leftCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_leftcount_)));
          set_has_m_leftcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_totalCount;
        break;
      }

      // optional int32 m_totalCount = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_totalCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_totalcount_)));
          set_has_m_totalcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_m_huiTouData;
        break;
      }

      // optional .GM_HuiTouData m_huiTouData = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_huiTouData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_huitoudata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_m_HandCard;
        break;
      }

      // repeated .GM_PlayerHandCard m_HandCard = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_HandCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_handcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_m_HandCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMHandCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_bankerPos = 1;
  if (has_m_bankerpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_bankerpos(), output);
  }

  // optional int32 m_zheng = 2;
  if (has_m_zheng()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_zheng(), output);
  }

  // optional int32 m_fu = 3;
  if (has_m_fu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_fu(), output);
  }

  // optional int32 m_zhengid = 4;
  if (has_m_zhengid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_zhengid(), output);
  }

  // optional int32 m_xiazheng = 5;
  if (has_m_xiazheng()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_xiazheng(), output);
  }

  // optional int32 m_xiafu = 6;
  if (has_m_xiafu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_xiafu(), output);
  }

  // optional int32 m_xiazhengid = 7;
  if (has_m_xiazhengid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_xiazhengid(), output);
  }

  // repeated .GM_XiaJingInfo m_xiaJingData = 8;
  for (int i = 0; i < this->m_xiajingdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->m_xiajingdata(i), output);
  }

  // optional int32 m_playerpos = 9;
  if (has_m_playerpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_playerpos(), output);
  }

  // optional int32 m_cardpos = 10;
  if (has_m_cardpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_cardpos(), output);
  }

  // optional int32 m_jingpos = 11;
  if (has_m_jingpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_jingpos(), output);
  }

  // optional int32 m_leftTime = 12;
  if (has_m_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_lefttime(), output);
  }

  // optional int32 m_leftCount = 13;
  if (has_m_leftcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_leftcount(), output);
  }

  // optional int32 m_totalCount = 14;
  if (has_m_totalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_totalcount(), output);
  }

  // optional .GM_HuiTouData m_huiTouData = 15;
  if (has_m_huitoudata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->m_huitoudata(), output);
  }

  // repeated .GM_PlayerHandCard m_HandCard = 20;
  for (int i = 0; i < this->m_handcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->m_handcard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMHandCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_bankerPos = 1;
  if (has_m_bankerpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_bankerpos(), target);
  }

  // optional int32 m_zheng = 2;
  if (has_m_zheng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_zheng(), target);
  }

  // optional int32 m_fu = 3;
  if (has_m_fu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_fu(), target);
  }

  // optional int32 m_zhengid = 4;
  if (has_m_zhengid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_zhengid(), target);
  }

  // optional int32 m_xiazheng = 5;
  if (has_m_xiazheng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_xiazheng(), target);
  }

  // optional int32 m_xiafu = 6;
  if (has_m_xiafu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_xiafu(), target);
  }

  // optional int32 m_xiazhengid = 7;
  if (has_m_xiazhengid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_xiazhengid(), target);
  }

  // repeated .GM_XiaJingInfo m_xiaJingData = 8;
  for (int i = 0; i < this->m_xiajingdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->m_xiajingdata(i), target);
  }

  // optional int32 m_playerpos = 9;
  if (has_m_playerpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_playerpos(), target);
  }

  // optional int32 m_cardpos = 10;
  if (has_m_cardpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_cardpos(), target);
  }

  // optional int32 m_jingpos = 11;
  if (has_m_jingpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_jingpos(), target);
  }

  // optional int32 m_leftTime = 12;
  if (has_m_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_lefttime(), target);
  }

  // optional int32 m_leftCount = 13;
  if (has_m_leftcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_leftcount(), target);
  }

  // optional int32 m_totalCount = 14;
  if (has_m_totalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_totalcount(), target);
  }

  // optional .GM_HuiTouData m_huiTouData = 15;
  if (has_m_huitoudata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->m_huitoudata(), target);
  }

  // repeated .GM_PlayerHandCard m_HandCard = 20;
  for (int i = 0; i < this->m_handcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->m_handcard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMHandCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_bankerPos = 1;
    if (has_m_bankerpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bankerpos());
    }

    // optional int32 m_zheng = 2;
    if (has_m_zheng()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_zheng());
    }

    // optional int32 m_fu = 3;
    if (has_m_fu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fu());
    }

    // optional int32 m_zhengid = 4;
    if (has_m_zhengid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_zhengid());
    }

    // optional int32 m_xiazheng = 5;
    if (has_m_xiazheng()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xiazheng());
    }

    // optional int32 m_xiafu = 6;
    if (has_m_xiafu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xiafu());
    }

    // optional int32 m_xiazhengid = 7;
    if (has_m_xiazhengid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xiazhengid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_playerpos = 9;
    if (has_m_playerpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playerpos());
    }

    // optional int32 m_cardpos = 10;
    if (has_m_cardpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cardpos());
    }

    // optional int32 m_jingpos = 11;
    if (has_m_jingpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_jingpos());
    }

    // optional int32 m_leftTime = 12;
    if (has_m_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lefttime());
    }

    // optional int32 m_leftCount = 13;
    if (has_m_leftcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_leftcount());
    }

    // optional int32 m_totalCount = 14;
    if (has_m_totalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_totalcount());
    }

    // optional .GM_HuiTouData m_huiTouData = 15;
    if (has_m_huitoudata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_huitoudata());
    }

  }
  // repeated .GM_XiaJingInfo m_xiaJingData = 8;
  total_size += 1 * this->m_xiajingdata_size();
  for (int i = 0; i < this->m_xiajingdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_xiajingdata(i));
  }

  // repeated .GM_PlayerHandCard m_HandCard = 20;
  total_size += 2 * this->m_handcard_size();
  for (int i = 0; i < this->m_handcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_handcard(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMHandCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMHandCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMHandCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMHandCard::MergeFrom(const GMHandCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_xiajingdata_.MergeFrom(from.m_xiajingdata_);
  m_handcard_.MergeFrom(from.m_handcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_bankerpos()) {
      set_m_bankerpos(from.m_bankerpos());
    }
    if (from.has_m_zheng()) {
      set_m_zheng(from.m_zheng());
    }
    if (from.has_m_fu()) {
      set_m_fu(from.m_fu());
    }
    if (from.has_m_zhengid()) {
      set_m_zhengid(from.m_zhengid());
    }
    if (from.has_m_xiazheng()) {
      set_m_xiazheng(from.m_xiazheng());
    }
    if (from.has_m_xiafu()) {
      set_m_xiafu(from.m_xiafu());
    }
    if (from.has_m_xiazhengid()) {
      set_m_xiazhengid(from.m_xiazhengid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_playerpos()) {
      set_m_playerpos(from.m_playerpos());
    }
    if (from.has_m_cardpos()) {
      set_m_cardpos(from.m_cardpos());
    }
    if (from.has_m_jingpos()) {
      set_m_jingpos(from.m_jingpos());
    }
    if (from.has_m_lefttime()) {
      set_m_lefttime(from.m_lefttime());
    }
    if (from.has_m_leftcount()) {
      set_m_leftcount(from.m_leftcount());
    }
    if (from.has_m_totalcount()) {
      set_m_totalcount(from.m_totalcount());
    }
    if (from.has_m_huitoudata()) {
      mutable_m_huitoudata()->::GM_HuiTouData::MergeFrom(from.m_huitoudata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMHandCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMHandCard::CopyFrom(const GMHandCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMHandCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_xiajingdata_size(); i++) {
    if (!this->m_xiajingdata(i).IsInitialized()) return false;
  }
  if (has_m_huitoudata()) {
    if (!this->m_huitoudata().IsInitialized()) return false;
  }
  for (int i = 0; i < m_handcard_size(); i++) {
    if (!this->m_handcard(i).IsInitialized()) return false;
  }
  return true;
}

void GMHandCard::Swap(GMHandCard* other) {
  if (other != this) {
    std::swap(m_bankerpos_, other->m_bankerpos_);
    std::swap(m_zheng_, other->m_zheng_);
    std::swap(m_fu_, other->m_fu_);
    std::swap(m_zhengid_, other->m_zhengid_);
    std::swap(m_xiazheng_, other->m_xiazheng_);
    std::swap(m_xiafu_, other->m_xiafu_);
    std::swap(m_xiazhengid_, other->m_xiazhengid_);
    m_xiajingdata_.Swap(&other->m_xiajingdata_);
    std::swap(m_playerpos_, other->m_playerpos_);
    std::swap(m_cardpos_, other->m_cardpos_);
    std::swap(m_jingpos_, other->m_jingpos_);
    std::swap(m_lefttime_, other->m_lefttime_);
    std::swap(m_leftcount_, other->m_leftcount_);
    std::swap(m_totalcount_, other->m_totalcount_);
    std::swap(m_huitoudata_, other->m_huitoudata_);
    m_handcard_.Swap(&other->m_handcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMHandCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMHandCard_descriptor_;
  metadata.reflection = GMHandCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMHandCard_PlayerBack::kMBankerPosFieldNumber;
const int GMHandCard_PlayerBack::kMZhengFieldNumber;
const int GMHandCard_PlayerBack::kMFuFieldNumber;
const int GMHandCard_PlayerBack::kMZhengidFieldNumber;
const int GMHandCard_PlayerBack::kMXiazhengFieldNumber;
const int GMHandCard_PlayerBack::kMXiafuFieldNumber;
const int GMHandCard_PlayerBack::kMXiazhengidFieldNumber;
const int GMHandCard_PlayerBack::kMXiaJingDataFieldNumber;
const int GMHandCard_PlayerBack::kMPlayerposFieldNumber;
const int GMHandCard_PlayerBack::kMCardposFieldNumber;
const int GMHandCard_PlayerBack::kMJingposFieldNumber;
const int GMHandCard_PlayerBack::kMLeftTimeFieldNumber;
const int GMHandCard_PlayerBack::kMLeftCountFieldNumber;
const int GMHandCard_PlayerBack::kMTotalCountFieldNumber;
const int GMHandCard_PlayerBack::kMHuiTouDataFieldNumber;
const int GMHandCard_PlayerBack::kMFbtypeidFieldNumber;
const int GMHandCard_PlayerBack::kMFbplaywayFieldNumber;
const int GMHandCard_PlayerBack::kMPlayerCountFieldNumber;
const int GMHandCard_PlayerBack::kMRoomidFieldNumber;
const int GMHandCard_PlayerBack::kMHandCardDataFieldNumber;
#endif  // !_MSC_VER

GMHandCard_PlayerBack::GMHandCard_PlayerBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMHandCard_PlayerBack::InitAsDefaultInstance() {
  m_huitoudata_ = const_cast< ::GM_HuiTouData*>(&::GM_HuiTouData::default_instance());
}

GMHandCard_PlayerBack::GMHandCard_PlayerBack(const GMHandCard_PlayerBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMHandCard_PlayerBack::SharedCtor() {
  _cached_size_ = 0;
  m_bankerpos_ = 0;
  m_zheng_ = 0;
  m_fu_ = 0;
  m_zhengid_ = 0;
  m_xiazheng_ = 0;
  m_xiafu_ = 0;
  m_xiazhengid_ = 0;
  m_playerpos_ = 0;
  m_cardpos_ = 0;
  m_jingpos_ = 0;
  m_lefttime_ = 0;
  m_leftcount_ = 0;
  m_totalcount_ = 0;
  m_huitoudata_ = NULL;
  m_fbtypeid_ = 0;
  m_fbplayway_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_playercount_ = 0;
  m_roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMHandCard_PlayerBack::~GMHandCard_PlayerBack() {
  SharedDtor();
}

void GMHandCard_PlayerBack::SharedDtor() {
  if (m_fbplayway_ != &::google::protobuf::internal::kEmptyString) {
    delete m_fbplayway_;
  }
  if (this != default_instance_) {
    delete m_huitoudata_;
  }
}

void GMHandCard_PlayerBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMHandCard_PlayerBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMHandCard_PlayerBack_descriptor_;
}

const GMHandCard_PlayerBack& GMHandCard_PlayerBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_2etxt();
  return *default_instance_;
}

GMHandCard_PlayerBack* GMHandCard_PlayerBack::default_instance_ = NULL;

GMHandCard_PlayerBack* GMHandCard_PlayerBack::New() const {
  return new GMHandCard_PlayerBack;
}

void GMHandCard_PlayerBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_bankerpos_ = 0;
    m_zheng_ = 0;
    m_fu_ = 0;
    m_zhengid_ = 0;
    m_xiazheng_ = 0;
    m_xiafu_ = 0;
    m_xiazhengid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_playerpos_ = 0;
    m_cardpos_ = 0;
    m_jingpos_ = 0;
    m_lefttime_ = 0;
    m_leftcount_ = 0;
    m_totalcount_ = 0;
    if (has_m_huitoudata()) {
      if (m_huitoudata_ != NULL) m_huitoudata_->::GM_HuiTouData::Clear();
    }
    m_fbtypeid_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_m_fbplayway()) {
      if (m_fbplayway_ != &::google::protobuf::internal::kEmptyString) {
        m_fbplayway_->clear();
      }
    }
    m_playercount_ = 0;
    m_roomid_ = 0;
  }
  m_xiajingdata_.Clear();
  m_handcarddata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMHandCard_PlayerBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_bankerPos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bankerpos_)));
          set_has_m_bankerpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_zheng;
        break;
      }

      // optional int32 m_zheng = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_zheng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_zheng_)));
          set_has_m_zheng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_fu;
        break;
      }

      // optional int32 m_fu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fu_)));
          set_has_m_fu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_zhengid;
        break;
      }

      // optional int32 m_zhengid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_zhengid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_zhengid_)));
          set_has_m_zhengid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_xiazheng;
        break;
      }

      // optional int32 m_xiazheng = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_xiazheng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xiazheng_)));
          set_has_m_xiazheng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_xiafu;
        break;
      }

      // optional int32 m_xiafu = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_xiafu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xiafu_)));
          set_has_m_xiafu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_xiazhengid;
        break;
      }

      // optional int32 m_xiazhengid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_xiazhengid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xiazhengid_)));
          set_has_m_xiazhengid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_xiaJingData;
        break;
      }

      // repeated .GM_XiaJingInfo m_xiaJingData = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_xiaJingData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_xiajingdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_xiaJingData;
        if (input->ExpectTag(72)) goto parse_m_playerpos;
        break;
      }

      // optional int32 m_playerpos = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_playerpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playerpos_)));
          set_has_m_playerpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_cardpos;
        break;
      }

      // optional int32 m_cardpos = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cardpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cardpos_)));
          set_has_m_cardpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_jingpos;
        break;
      }

      // optional int32 m_jingpos = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_jingpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_jingpos_)));
          set_has_m_jingpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_leftTime;
        break;
      }

      // optional int32 m_leftTime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_leftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lefttime_)));
          set_has_m_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_leftCount;
        break;
      }

      // optional int32 m_leftCount = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_leftCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_leftcount_)));
          set_has_m_leftcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_totalCount;
        break;
      }

      // optional int32 m_totalCount = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_totalCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_totalcount_)));
          set_has_m_totalcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_m_huiTouData;
        break;
      }

      // optional .GM_HuiTouData m_huiTouData = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_huiTouData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_huitoudata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_fbtypeid;
        break;
      }

      // optional int32 m_fbtypeid = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fbtypeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fbtypeid_)));
          set_has_m_fbtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_m_fbplayway;
        break;
      }

      // optional string m_fbplayway = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_fbplayway:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_fbplayway()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_fbplayway().data(), this->m_fbplayway().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_m_playerCount;
        break;
      }

      // optional int32 m_playerCount = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_playerCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playercount_)));
          set_has_m_playercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_m_roomid;
        break;
      }

      // optional int32 m_roomid = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roomid_)));
          set_has_m_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_m_handCardData;
        break;
      }

      // repeated .GMHandCard_Info m_handCardData = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_handCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_handcarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_m_handCardData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMHandCard_PlayerBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_bankerPos = 1;
  if (has_m_bankerpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_bankerpos(), output);
  }

  // optional int32 m_zheng = 2;
  if (has_m_zheng()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_zheng(), output);
  }

  // optional int32 m_fu = 3;
  if (has_m_fu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_fu(), output);
  }

  // optional int32 m_zhengid = 4;
  if (has_m_zhengid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_zhengid(), output);
  }

  // optional int32 m_xiazheng = 5;
  if (has_m_xiazheng()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_xiazheng(), output);
  }

  // optional int32 m_xiafu = 6;
  if (has_m_xiafu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_xiafu(), output);
  }

  // optional int32 m_xiazhengid = 7;
  if (has_m_xiazhengid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_xiazhengid(), output);
  }

  // repeated .GM_XiaJingInfo m_xiaJingData = 8;
  for (int i = 0; i < this->m_xiajingdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->m_xiajingdata(i), output);
  }

  // optional int32 m_playerpos = 9;
  if (has_m_playerpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_playerpos(), output);
  }

  // optional int32 m_cardpos = 10;
  if (has_m_cardpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_cardpos(), output);
  }

  // optional int32 m_jingpos = 11;
  if (has_m_jingpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_jingpos(), output);
  }

  // optional int32 m_leftTime = 12;
  if (has_m_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_lefttime(), output);
  }

  // optional int32 m_leftCount = 13;
  if (has_m_leftcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_leftcount(), output);
  }

  // optional int32 m_totalCount = 14;
  if (has_m_totalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_totalcount(), output);
  }

  // optional .GM_HuiTouData m_huiTouData = 15;
  if (has_m_huitoudata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->m_huitoudata(), output);
  }

  // optional int32 m_fbtypeid = 16;
  if (has_m_fbtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_fbtypeid(), output);
  }

  // optional string m_fbplayway = 17;
  if (has_m_fbplayway()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_fbplayway().data(), this->m_fbplayway().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->m_fbplayway(), output);
  }

  // optional int32 m_playerCount = 18;
  if (has_m_playercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->m_playercount(), output);
  }

  // optional int32 m_roomid = 19;
  if (has_m_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->m_roomid(), output);
  }

  // repeated .GMHandCard_Info m_handCardData = 20;
  for (int i = 0; i < this->m_handcarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->m_handcarddata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMHandCard_PlayerBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_bankerPos = 1;
  if (has_m_bankerpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_bankerpos(), target);
  }

  // optional int32 m_zheng = 2;
  if (has_m_zheng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_zheng(), target);
  }

  // optional int32 m_fu = 3;
  if (has_m_fu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_fu(), target);
  }

  // optional int32 m_zhengid = 4;
  if (has_m_zhengid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_zhengid(), target);
  }

  // optional int32 m_xiazheng = 5;
  if (has_m_xiazheng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_xiazheng(), target);
  }

  // optional int32 m_xiafu = 6;
  if (has_m_xiafu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_xiafu(), target);
  }

  // optional int32 m_xiazhengid = 7;
  if (has_m_xiazhengid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_xiazhengid(), target);
  }

  // repeated .GM_XiaJingInfo m_xiaJingData = 8;
  for (int i = 0; i < this->m_xiajingdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->m_xiajingdata(i), target);
  }

  // optional int32 m_playerpos = 9;
  if (has_m_playerpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_playerpos(), target);
  }

  // optional int32 m_cardpos = 10;
  if (has_m_cardpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_cardpos(), target);
  }

  // optional int32 m_jingpos = 11;
  if (has_m_jingpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_jingpos(), target);
  }

  // optional int32 m_leftTime = 12;
  if (has_m_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_lefttime(), target);
  }

  // optional int32 m_leftCount = 13;
  if (has_m_leftcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_leftcount(), target);
  }

  // optional int32 m_totalCount = 14;
  if (has_m_totalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_totalcount(), target);
  }

  // optional .GM_HuiTouData m_huiTouData = 15;
  if (has_m_huitoudata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->m_huitoudata(), target);
  }

  // optional int32 m_fbtypeid = 16;
  if (has_m_fbtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->m_fbtypeid(), target);
  }

  // optional string m_fbplayway = 17;
  if (has_m_fbplayway()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_fbplayway().data(), this->m_fbplayway().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->m_fbplayway(), target);
  }

  // optional int32 m_playerCount = 18;
  if (has_m_playercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->m_playercount(), target);
  }

  // optional int32 m_roomid = 19;
  if (has_m_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->m_roomid(), target);
  }

  // repeated .GMHandCard_Info m_handCardData = 20;
  for (int i = 0; i < this->m_handcarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->m_handcarddata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMHandCard_PlayerBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_bankerPos = 1;
    if (has_m_bankerpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bankerpos());
    }

    // optional int32 m_zheng = 2;
    if (has_m_zheng()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_zheng());
    }

    // optional int32 m_fu = 3;
    if (has_m_fu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fu());
    }

    // optional int32 m_zhengid = 4;
    if (has_m_zhengid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_zhengid());
    }

    // optional int32 m_xiazheng = 5;
    if (has_m_xiazheng()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xiazheng());
    }

    // optional int32 m_xiafu = 6;
    if (has_m_xiafu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xiafu());
    }

    // optional int32 m_xiazhengid = 7;
    if (has_m_xiazhengid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xiazhengid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_playerpos = 9;
    if (has_m_playerpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playerpos());
    }

    // optional int32 m_cardpos = 10;
    if (has_m_cardpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cardpos());
    }

    // optional int32 m_jingpos = 11;
    if (has_m_jingpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_jingpos());
    }

    // optional int32 m_leftTime = 12;
    if (has_m_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lefttime());
    }

    // optional int32 m_leftCount = 13;
    if (has_m_leftcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_leftcount());
    }

    // optional int32 m_totalCount = 14;
    if (has_m_totalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_totalcount());
    }

    // optional .GM_HuiTouData m_huiTouData = 15;
    if (has_m_huitoudata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_huitoudata());
    }

    // optional int32 m_fbtypeid = 16;
    if (has_m_fbtypeid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fbtypeid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string m_fbplayway = 17;
    if (has_m_fbplayway()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_fbplayway());
    }

    // optional int32 m_playerCount = 18;
    if (has_m_playercount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playercount());
    }

    // optional int32 m_roomid = 19;
    if (has_m_roomid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roomid());
    }

  }
  // repeated .GM_XiaJingInfo m_xiaJingData = 8;
  total_size += 1 * this->m_xiajingdata_size();
  for (int i = 0; i < this->m_xiajingdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_xiajingdata(i));
  }

  // repeated .GMHandCard_Info m_handCardData = 20;
  total_size += 2 * this->m_handcarddata_size();
  for (int i = 0; i < this->m_handcarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_handcarddata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMHandCard_PlayerBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMHandCard_PlayerBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMHandCard_PlayerBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMHandCard_PlayerBack::MergeFrom(const GMHandCard_PlayerBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_xiajingdata_.MergeFrom(from.m_xiajingdata_);
  m_handcarddata_.MergeFrom(from.m_handcarddata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_bankerpos()) {
      set_m_bankerpos(from.m_bankerpos());
    }
    if (from.has_m_zheng()) {
      set_m_zheng(from.m_zheng());
    }
    if (from.has_m_fu()) {
      set_m_fu(from.m_fu());
    }
    if (from.has_m_zhengid()) {
      set_m_zhengid(from.m_zhengid());
    }
    if (from.has_m_xiazheng()) {
      set_m_xiazheng(from.m_xiazheng());
    }
    if (from.has_m_xiafu()) {
      set_m_xiafu(from.m_xiafu());
    }
    if (from.has_m_xiazhengid()) {
      set_m_xiazhengid(from.m_xiazhengid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_playerpos()) {
      set_m_playerpos(from.m_playerpos());
    }
    if (from.has_m_cardpos()) {
      set_m_cardpos(from.m_cardpos());
    }
    if (from.has_m_jingpos()) {
      set_m_jingpos(from.m_jingpos());
    }
    if (from.has_m_lefttime()) {
      set_m_lefttime(from.m_lefttime());
    }
    if (from.has_m_leftcount()) {
      set_m_leftcount(from.m_leftcount());
    }
    if (from.has_m_totalcount()) {
      set_m_totalcount(from.m_totalcount());
    }
    if (from.has_m_huitoudata()) {
      mutable_m_huitoudata()->::GM_HuiTouData::MergeFrom(from.m_huitoudata());
    }
    if (from.has_m_fbtypeid()) {
      set_m_fbtypeid(from.m_fbtypeid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_fbplayway()) {
      set_m_fbplayway(from.m_fbplayway());
    }
    if (from.has_m_playercount()) {
      set_m_playercount(from.m_playercount());
    }
    if (from.has_m_roomid()) {
      set_m_roomid(from.m_roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMHandCard_PlayerBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMHandCard_PlayerBack::CopyFrom(const GMHandCard_PlayerBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMHandCard_PlayerBack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_xiajingdata_size(); i++) {
    if (!this->m_xiajingdata(i).IsInitialized()) return false;
  }
  if (has_m_huitoudata()) {
    if (!this->m_huitoudata().IsInitialized()) return false;
  }
  for (int i = 0; i < m_handcarddata_size(); i++) {
    if (!this->m_handcarddata(i).IsInitialized()) return false;
  }
  return true;
}

void GMHandCard_PlayerBack::Swap(GMHandCard_PlayerBack* other) {
  if (other != this) {
    std::swap(m_bankerpos_, other->m_bankerpos_);
    std::swap(m_zheng_, other->m_zheng_);
    std::swap(m_fu_, other->m_fu_);
    std::swap(m_zhengid_, other->m_zhengid_);
    std::swap(m_xiazheng_, other->m_xiazheng_);
    std::swap(m_xiafu_, other->m_xiafu_);
    std::swap(m_xiazhengid_, other->m_xiazhengid_);
    m_xiajingdata_.Swap(&other->m_xiajingdata_);
    std::swap(m_playerpos_, other->m_playerpos_);
    std::swap(m_cardpos_, other->m_cardpos_);
    std::swap(m_jingpos_, other->m_jingpos_);
    std::swap(m_lefttime_, other->m_lefttime_);
    std::swap(m_leftcount_, other->m_leftcount_);
    std::swap(m_totalcount_, other->m_totalcount_);
    std::swap(m_huitoudata_, other->m_huitoudata_);
    std::swap(m_fbtypeid_, other->m_fbtypeid_);
    std::swap(m_fbplayway_, other->m_fbplayway_);
    std::swap(m_playercount_, other->m_playercount_);
    std::swap(m_roomid_, other->m_roomid_);
    m_handcarddata_.Swap(&other->m_handcarddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMHandCard_PlayerBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMHandCard_PlayerBack_descriptor_;
  metadata.reflection = GMHandCard_PlayerBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMHandCard_Info::kMRoleidFieldNumber;
const int GMHandCard_Info::kMHandCardFieldNumber;
#endif  // !_MSC_VER

GMHandCard_Info::GMHandCard_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMHandCard_Info::InitAsDefaultInstance() {
}

GMHandCard_Info::GMHandCard_Info(const GMHandCard_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMHandCard_Info::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMHandCard_Info::~GMHandCard_Info() {
  SharedDtor();
}

void GMHandCard_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMHandCard_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMHandCard_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMHandCard_Info_descriptor_;
}

const GMHandCard_Info& GMHandCard_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_2etxt();
  return *default_instance_;
}

GMHandCard_Info* GMHandCard_Info::default_instance_ = NULL;

GMHandCard_Info* GMHandCard_Info::New() const {
  return new GMHandCard_Info;
}

void GMHandCard_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
  }
  m_handcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMHandCard_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_m_HandCard;
        break;
      }

      // repeated .GM_PlayerHandCard m_HandCard = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_HandCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_handcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_m_HandCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMHandCard_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // repeated .GM_PlayerHandCard m_HandCard = 20;
  for (int i = 0; i < this->m_handcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->m_handcard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMHandCard_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // repeated .GM_PlayerHandCard m_HandCard = 20;
  for (int i = 0; i < this->m_handcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->m_handcard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMHandCard_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

  }
  // repeated .GM_PlayerHandCard m_HandCard = 20;
  total_size += 2 * this->m_handcard_size();
  for (int i = 0; i < this->m_handcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_handcard(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMHandCard_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMHandCard_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMHandCard_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMHandCard_Info::MergeFrom(const GMHandCard_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_handcard_.MergeFrom(from.m_handcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMHandCard_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMHandCard_Info::CopyFrom(const GMHandCard_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMHandCard_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_handcard_size(); i++) {
    if (!this->m_handcard(i).IsInitialized()) return false;
  }
  return true;
}

void GMHandCard_Info::Swap(GMHandCard_Info* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    m_handcard_.Swap(&other->m_handcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMHandCard_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMHandCard_Info_descriptor_;
  metadata.reflection = GMHandCard_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_HuiTouData::kMHuitouZhenFieldNumber;
const int GM_HuiTouData::kMHuitouFuFieldNumber;
const int GM_HuiTouData::kMHuitouInfoFieldNumber;
#endif  // !_MSC_VER

GM_HuiTouData::GM_HuiTouData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_HuiTouData::InitAsDefaultInstance() {
}

GM_HuiTouData::GM_HuiTouData(const GM_HuiTouData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_HuiTouData::SharedCtor() {
  _cached_size_ = 0;
  m_huitouzhen_ = 0;
  m_huitoufu_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_HuiTouData::~GM_HuiTouData() {
  SharedDtor();
}

void GM_HuiTouData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_HuiTouData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_HuiTouData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_HuiTouData_descriptor_;
}

const GM_HuiTouData& GM_HuiTouData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_2etxt();
  return *default_instance_;
}

GM_HuiTouData* GM_HuiTouData::default_instance_ = NULL;

GM_HuiTouData* GM_HuiTouData::New() const {
  return new GM_HuiTouData;
}

void GM_HuiTouData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_huitouzhen_ = 0;
    m_huitoufu_ = 0;
  }
  m_huitouinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_HuiTouData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_huitouZhen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_huitouzhen_)));
          set_has_m_huitouzhen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_huitouFu;
        break;
      }

      // optional int32 m_huitouFu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_huitouFu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_huitoufu_)));
          set_has_m_huitoufu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_huitouInfo;
        break;
      }

      // repeated .GM_XiaJingInfo m_huitouInfo = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_huitouInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_huitouinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_huitouInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_HuiTouData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_huitouZhen = 1;
  if (has_m_huitouzhen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_huitouzhen(), output);
  }

  // optional int32 m_huitouFu = 2;
  if (has_m_huitoufu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_huitoufu(), output);
  }

  // repeated .GM_XiaJingInfo m_huitouInfo = 10;
  for (int i = 0; i < this->m_huitouinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->m_huitouinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_HuiTouData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_huitouZhen = 1;
  if (has_m_huitouzhen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_huitouzhen(), target);
  }

  // optional int32 m_huitouFu = 2;
  if (has_m_huitoufu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_huitoufu(), target);
  }

  // repeated .GM_XiaJingInfo m_huitouInfo = 10;
  for (int i = 0; i < this->m_huitouinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->m_huitouinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_HuiTouData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_huitouZhen = 1;
    if (has_m_huitouzhen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_huitouzhen());
    }

    // optional int32 m_huitouFu = 2;
    if (has_m_huitoufu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_huitoufu());
    }

  }
  // repeated .GM_XiaJingInfo m_huitouInfo = 10;
  total_size += 1 * this->m_huitouinfo_size();
  for (int i = 0; i < this->m_huitouinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_huitouinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_HuiTouData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_HuiTouData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_HuiTouData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_HuiTouData::MergeFrom(const GM_HuiTouData& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_huitouinfo_.MergeFrom(from.m_huitouinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_huitouzhen()) {
      set_m_huitouzhen(from.m_huitouzhen());
    }
    if (from.has_m_huitoufu()) {
      set_m_huitoufu(from.m_huitoufu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_HuiTouData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_HuiTouData::CopyFrom(const GM_HuiTouData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_HuiTouData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_huitouinfo_size(); i++) {
    if (!this->m_huitouinfo(i).IsInitialized()) return false;
  }
  return true;
}

void GM_HuiTouData::Swap(GM_HuiTouData* other) {
  if (other != this) {
    std::swap(m_huitouzhen_, other->m_huitouzhen_);
    std::swap(m_huitoufu_, other->m_huitoufu_);
    m_huitouinfo_.Swap(&other->m_huitouinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_HuiTouData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_HuiTouData_descriptor_;
  metadata.reflection = GM_HuiTouData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_XiaJingInfo::kMRoleidFieldNumber;
const int GM_XiaJingInfo::kMXiazhuNumFieldNumber;
const int GM_XiaJingInfo::kMXiafuNumFieldNumber;
const int GM_XiaJingInfo::kMSorceFieldNumber;
#endif  // !_MSC_VER

GM_XiaJingInfo::GM_XiaJingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_XiaJingInfo::InitAsDefaultInstance() {
}

GM_XiaJingInfo::GM_XiaJingInfo(const GM_XiaJingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_XiaJingInfo::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_xiazhunum_ = 0;
  m_xiafunum_ = 0;
  m_sorce_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_XiaJingInfo::~GM_XiaJingInfo() {
  SharedDtor();
}

void GM_XiaJingInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_XiaJingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_XiaJingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_XiaJingInfo_descriptor_;
}

const GM_XiaJingInfo& GM_XiaJingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_2etxt();
  return *default_instance_;
}

GM_XiaJingInfo* GM_XiaJingInfo::default_instance_ = NULL;

GM_XiaJingInfo* GM_XiaJingInfo::New() const {
  return new GM_XiaJingInfo;
}

void GM_XiaJingInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_xiazhunum_ = 0;
    m_xiafunum_ = 0;
    m_sorce_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_XiaJingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_xiazhuNum;
        break;
      }

      // optional int32 m_xiazhuNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_xiazhuNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xiazhunum_)));
          set_has_m_xiazhunum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_xiafuNum;
        break;
      }

      // optional int32 m_xiafuNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_xiafuNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xiafunum_)));
          set_has_m_xiafunum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_sorce;
        break;
      }

      // optional int32 m_sorce = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sorce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sorce_)));
          set_has_m_sorce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_XiaJingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int32 m_xiazhuNum = 2;
  if (has_m_xiazhunum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_xiazhunum(), output);
  }

  // optional int32 m_xiafuNum = 3;
  if (has_m_xiafunum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_xiafunum(), output);
  }

  // optional int32 m_sorce = 4;
  if (has_m_sorce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_sorce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_XiaJingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int32 m_xiazhuNum = 2;
  if (has_m_xiazhunum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_xiazhunum(), target);
  }

  // optional int32 m_xiafuNum = 3;
  if (has_m_xiafunum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_xiafunum(), target);
  }

  // optional int32 m_sorce = 4;
  if (has_m_sorce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_sorce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_XiaJingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_xiazhuNum = 2;
    if (has_m_xiazhunum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xiazhunum());
    }

    // optional int32 m_xiafuNum = 3;
    if (has_m_xiafunum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xiafunum());
    }

    // optional int32 m_sorce = 4;
    if (has_m_sorce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sorce());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_XiaJingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_XiaJingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_XiaJingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_XiaJingInfo::MergeFrom(const GM_XiaJingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_xiazhunum()) {
      set_m_xiazhunum(from.m_xiazhunum());
    }
    if (from.has_m_xiafunum()) {
      set_m_xiafunum(from.m_xiafunum());
    }
    if (from.has_m_sorce()) {
      set_m_sorce(from.m_sorce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_XiaJingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_XiaJingInfo::CopyFrom(const GM_XiaJingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_XiaJingInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_XiaJingInfo::Swap(GM_XiaJingInfo* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_xiazhunum_, other->m_xiazhunum_);
    std::swap(m_xiafunum_, other->m_xiafunum_);
    std::swap(m_sorce_, other->m_sorce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_XiaJingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_XiaJingInfo_descriptor_;
  metadata.reflection = GM_XiaJingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PlayerHandCard::kMIndexFieldNumber;
const int GM_PlayerHandCard::kMTypeFieldNumber;
#endif  // !_MSC_VER

GM_PlayerHandCard::GM_PlayerHandCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PlayerHandCard::InitAsDefaultInstance() {
}

GM_PlayerHandCard::GM_PlayerHandCard(const GM_PlayerHandCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PlayerHandCard::SharedCtor() {
  _cached_size_ = 0;
  m_index_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PlayerHandCard::~GM_PlayerHandCard() {
  SharedDtor();
}

void GM_PlayerHandCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PlayerHandCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PlayerHandCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PlayerHandCard_descriptor_;
}

const GM_PlayerHandCard& GM_PlayerHandCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_2etxt();
  return *default_instance_;
}

GM_PlayerHandCard* GM_PlayerHandCard::default_instance_ = NULL;

GM_PlayerHandCard* GM_PlayerHandCard::New() const {
  return new GM_PlayerHandCard;
}

void GM_PlayerHandCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_index_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PlayerHandCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_index_)));
          set_has_m_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_Type;
        break;
      }

      // optional int32 m_Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PlayerHandCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Index = 1;
  if (has_m_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_index(), output);
  }

  // optional int32 m_Type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PlayerHandCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Index = 1;
  if (has_m_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_index(), target);
  }

  // optional int32 m_Type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PlayerHandCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Index = 1;
    if (has_m_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_index());
    }

    // optional int32 m_Type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PlayerHandCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PlayerHandCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PlayerHandCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PlayerHandCard::MergeFrom(const GM_PlayerHandCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_index()) {
      set_m_index(from.m_index());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PlayerHandCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PlayerHandCard::CopyFrom(const GM_PlayerHandCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PlayerHandCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_PlayerHandCard::Swap(GM_PlayerHandCard* other) {
  if (other != this) {
    std::swap(m_index_, other->m_index_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PlayerHandCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PlayerHandCard_descriptor_;
  metadata.reflection = GM_PlayerHandCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_MJCanOperator::kMRoleidFieldNumber;
const int GM_MJCanOperator::kMOperatorFieldNumber;
#endif  // !_MSC_VER

GM_MJCanOperator::GM_MJCanOperator()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_MJCanOperator::InitAsDefaultInstance() {
}

GM_MJCanOperator::GM_MJCanOperator(const GM_MJCanOperator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_MJCanOperator::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_MJCanOperator::~GM_MJCanOperator() {
  SharedDtor();
}

void GM_MJCanOperator::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_MJCanOperator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_MJCanOperator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_MJCanOperator_descriptor_;
}

const GM_MJCanOperator& GM_MJCanOperator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_2etxt();
  return *default_instance_;
}

GM_MJCanOperator* GM_MJCanOperator::default_instance_ = NULL;

GM_MJCanOperator* GM_MJCanOperator::New() const {
  return new GM_MJCanOperator;
}

void GM_MJCanOperator::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
  }
  m_operator_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_MJCanOperator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_Operator;
        break;
      }

      // repeated .GM_OperatorData m_Operator = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Operator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_operator()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_Operator;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_MJCanOperator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // repeated .GM_OperatorData m_Operator = 2;
  for (int i = 0; i < this->m_operator_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_operator(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_MJCanOperator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // repeated .GM_OperatorData m_Operator = 2;
  for (int i = 0; i < this->m_operator_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_operator(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_MJCanOperator::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

  }
  // repeated .GM_OperatorData m_Operator = 2;
  total_size += 1 * this->m_operator_size();
  for (int i = 0; i < this->m_operator_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_operator(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_MJCanOperator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_MJCanOperator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_MJCanOperator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_MJCanOperator::MergeFrom(const GM_MJCanOperator& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_operator_.MergeFrom(from.m_operator_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_MJCanOperator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_MJCanOperator::CopyFrom(const GM_MJCanOperator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_MJCanOperator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_operator_size(); i++) {
    if (!this->m_operator(i).IsInitialized()) return false;
  }
  return true;
}

void GM_MJCanOperator::Swap(GM_MJCanOperator* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    m_operator_.Swap(&other->m_operator_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_MJCanOperator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_MJCanOperator_descriptor_;
  metadata.reflection = GM_MJCanOperator_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_OperatorData::kMOperatorTypeFieldNumber;
const int GM_OperatorData::kMFunIDFieldNumber;
const int GM_OperatorData::kMOperatorCardFieldNumber;
const int GM_OperatorData::kMRoleVoiceFieldNumber;
const int GM_OperatorData::kMCardVoiceFieldNumber;
const int GM_OperatorData::kMHandCardFieldNumber;
#endif  // !_MSC_VER

GM_OperatorData::GM_OperatorData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_OperatorData::InitAsDefaultInstance() {
}

GM_OperatorData::GM_OperatorData(const GM_OperatorData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_OperatorData::SharedCtor() {
  _cached_size_ = 0;
  m_operatortype_ = 0;
  m_funid_ = 0;
  m_operatorcard_ = 0;
  m_rolevoice_ = 0;
  m_cardvoice_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_OperatorData::~GM_OperatorData() {
  SharedDtor();
}

void GM_OperatorData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_OperatorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_OperatorData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_OperatorData_descriptor_;
}

const GM_OperatorData& GM_OperatorData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_2etxt();
  return *default_instance_;
}

GM_OperatorData* GM_OperatorData::default_instance_ = NULL;

GM_OperatorData* GM_OperatorData::New() const {
  return new GM_OperatorData;
}

void GM_OperatorData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_operatortype_ = 0;
    m_funid_ = 0;
    m_operatorcard_ = 0;
    m_rolevoice_ = 0;
    m_cardvoice_ = 0;
  }
  m_handcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_OperatorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_OperatorType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_operatortype_)));
          set_has_m_operatortype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_FunID;
        break;
      }

      // optional int32 m_FunID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_FunID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_funid_)));
          set_has_m_funid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_OperatorCard;
        break;
      }

      // optional int32 m_OperatorCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_OperatorCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_operatorcard_)));
          set_has_m_operatorcard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_RoleVoice;
        break;
      }

      // optional int32 m_RoleVoice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_RoleVoice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rolevoice_)));
          set_has_m_rolevoice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_CardVoice;
        break;
      }

      // optional int32 m_CardVoice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_CardVoice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cardvoice_)));
          set_has_m_cardvoice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_HandCard;
        break;
      }

      // repeated .GM_PlayerHandCard m_HandCard = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_HandCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_handcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_HandCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_OperatorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_OperatorType = 1;
  if (has_m_operatortype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_operatortype(), output);
  }

  // optional int32 m_FunID = 2;
  if (has_m_funid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_funid(), output);
  }

  // optional int32 m_OperatorCard = 3;
  if (has_m_operatorcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_operatorcard(), output);
  }

  // optional int32 m_RoleVoice = 4;
  if (has_m_rolevoice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_rolevoice(), output);
  }

  // optional int32 m_CardVoice = 5;
  if (has_m_cardvoice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_cardvoice(), output);
  }

  // repeated .GM_PlayerHandCard m_HandCard = 10;
  for (int i = 0; i < this->m_handcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->m_handcard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_OperatorData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_OperatorType = 1;
  if (has_m_operatortype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_operatortype(), target);
  }

  // optional int32 m_FunID = 2;
  if (has_m_funid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_funid(), target);
  }

  // optional int32 m_OperatorCard = 3;
  if (has_m_operatorcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_operatorcard(), target);
  }

  // optional int32 m_RoleVoice = 4;
  if (has_m_rolevoice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_rolevoice(), target);
  }

  // optional int32 m_CardVoice = 5;
  if (has_m_cardvoice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_cardvoice(), target);
  }

  // repeated .GM_PlayerHandCard m_HandCard = 10;
  for (int i = 0; i < this->m_handcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->m_handcard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_OperatorData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_OperatorType = 1;
    if (has_m_operatortype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_operatortype());
    }

    // optional int32 m_FunID = 2;
    if (has_m_funid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_funid());
    }

    // optional int32 m_OperatorCard = 3;
    if (has_m_operatorcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_operatorcard());
    }

    // optional int32 m_RoleVoice = 4;
    if (has_m_rolevoice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rolevoice());
    }

    // optional int32 m_CardVoice = 5;
    if (has_m_cardvoice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cardvoice());
    }

  }
  // repeated .GM_PlayerHandCard m_HandCard = 10;
  total_size += 1 * this->m_handcard_size();
  for (int i = 0; i < this->m_handcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_handcard(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_OperatorData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_OperatorData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_OperatorData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_OperatorData::MergeFrom(const GM_OperatorData& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_handcard_.MergeFrom(from.m_handcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_operatortype()) {
      set_m_operatortype(from.m_operatortype());
    }
    if (from.has_m_funid()) {
      set_m_funid(from.m_funid());
    }
    if (from.has_m_operatorcard()) {
      set_m_operatorcard(from.m_operatorcard());
    }
    if (from.has_m_rolevoice()) {
      set_m_rolevoice(from.m_rolevoice());
    }
    if (from.has_m_cardvoice()) {
      set_m_cardvoice(from.m_cardvoice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_OperatorData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_OperatorData::CopyFrom(const GM_OperatorData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_OperatorData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_handcard_size(); i++) {
    if (!this->m_handcard(i).IsInitialized()) return false;
  }
  return true;
}

void GM_OperatorData::Swap(GM_OperatorData* other) {
  if (other != this) {
    std::swap(m_operatortype_, other->m_operatortype_);
    std::swap(m_funid_, other->m_funid_);
    std::swap(m_operatorcard_, other->m_operatorcard_);
    std::swap(m_rolevoice_, other->m_rolevoice_);
    std::swap(m_cardvoice_, other->m_cardvoice_);
    m_handcard_.Swap(&other->m_handcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_OperatorData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_OperatorData_descriptor_;
  metadata.reflection = GM_OperatorData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_MJOperator::kMRoleidFieldNumber;
const int GM_MJOperator::kMOperatorTypeFieldNumber;
const int GM_MJOperator::kMRoleVoiceFieldNumber;
const int GM_MJOperator::kMCardVoiceFieldNumber;
const int GM_MJOperator::kMLastCardFieldNumber;
const int GM_MJOperator::kMHandCardFieldNumber;
#endif  // !_MSC_VER

GM_MJOperator::GM_MJOperator()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_MJOperator::InitAsDefaultInstance() {
  m_lastcard_ = const_cast< ::GM_PlayerHandCard*>(&::GM_PlayerHandCard::default_instance());
}

GM_MJOperator::GM_MJOperator(const GM_MJOperator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_MJOperator::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_operatortype_ = 0;
  m_rolevoice_ = 0;
  m_cardvoice_ = 0;
  m_lastcard_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_MJOperator::~GM_MJOperator() {
  SharedDtor();
}

void GM_MJOperator::SharedDtor() {
  if (this != default_instance_) {
    delete m_lastcard_;
  }
}

void GM_MJOperator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_MJOperator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_MJOperator_descriptor_;
}

const GM_MJOperator& GM_MJOperator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_2etxt();
  return *default_instance_;
}

GM_MJOperator* GM_MJOperator::default_instance_ = NULL;

GM_MJOperator* GM_MJOperator::New() const {
  return new GM_MJOperator;
}

void GM_MJOperator::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_operatortype_ = 0;
    m_rolevoice_ = 0;
    m_cardvoice_ = 0;
    if (has_m_lastcard()) {
      if (m_lastcard_ != NULL) m_lastcard_->::GM_PlayerHandCard::Clear();
    }
  }
  m_handcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_MJOperator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_OperatorType;
        break;
      }

      // optional int32 m_OperatorType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_OperatorType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_operatortype_)));
          set_has_m_operatortype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_RoleVoice;
        break;
      }

      // optional int32 m_RoleVoice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_RoleVoice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rolevoice_)));
          set_has_m_rolevoice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_CardVoice;
        break;
      }

      // optional int32 m_CardVoice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_CardVoice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cardvoice_)));
          set_has_m_cardvoice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_LastCard;
        break;
      }

      // optional .GM_PlayerHandCard m_LastCard = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_LastCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_lastcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_HandCard;
        break;
      }

      // repeated .GM_PlayerHandCard m_HandCard = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_HandCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_handcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_HandCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_MJOperator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int32 m_OperatorType = 2;
  if (has_m_operatortype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_operatortype(), output);
  }

  // optional int32 m_RoleVoice = 3;
  if (has_m_rolevoice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_rolevoice(), output);
  }

  // optional int32 m_CardVoice = 4;
  if (has_m_cardvoice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_cardvoice(), output);
  }

  // optional .GM_PlayerHandCard m_LastCard = 5;
  if (has_m_lastcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_lastcard(), output);
  }

  // repeated .GM_PlayerHandCard m_HandCard = 10;
  for (int i = 0; i < this->m_handcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->m_handcard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_MJOperator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int32 m_OperatorType = 2;
  if (has_m_operatortype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_operatortype(), target);
  }

  // optional int32 m_RoleVoice = 3;
  if (has_m_rolevoice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_rolevoice(), target);
  }

  // optional int32 m_CardVoice = 4;
  if (has_m_cardvoice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_cardvoice(), target);
  }

  // optional .GM_PlayerHandCard m_LastCard = 5;
  if (has_m_lastcard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_lastcard(), target);
  }

  // repeated .GM_PlayerHandCard m_HandCard = 10;
  for (int i = 0; i < this->m_handcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->m_handcard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_MJOperator::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_OperatorType = 2;
    if (has_m_operatortype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_operatortype());
    }

    // optional int32 m_RoleVoice = 3;
    if (has_m_rolevoice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rolevoice());
    }

    // optional int32 m_CardVoice = 4;
    if (has_m_cardvoice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cardvoice());
    }

    // optional .GM_PlayerHandCard m_LastCard = 5;
    if (has_m_lastcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_lastcard());
    }

  }
  // repeated .GM_PlayerHandCard m_HandCard = 10;
  total_size += 1 * this->m_handcard_size();
  for (int i = 0; i < this->m_handcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_handcard(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_MJOperator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_MJOperator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_MJOperator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_MJOperator::MergeFrom(const GM_MJOperator& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_handcard_.MergeFrom(from.m_handcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_operatortype()) {
      set_m_operatortype(from.m_operatortype());
    }
    if (from.has_m_rolevoice()) {
      set_m_rolevoice(from.m_rolevoice());
    }
    if (from.has_m_cardvoice()) {
      set_m_cardvoice(from.m_cardvoice());
    }
    if (from.has_m_lastcard()) {
      mutable_m_lastcard()->::GM_PlayerHandCard::MergeFrom(from.m_lastcard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_MJOperator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_MJOperator::CopyFrom(const GM_MJOperator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_MJOperator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_m_lastcard()) {
    if (!this->m_lastcard().IsInitialized()) return false;
  }
  for (int i = 0; i < m_handcard_size(); i++) {
    if (!this->m_handcard(i).IsInitialized()) return false;
  }
  return true;
}

void GM_MJOperator::Swap(GM_MJOperator* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_operatortype_, other->m_operatortype_);
    std::swap(m_rolevoice_, other->m_rolevoice_);
    std::swap(m_cardvoice_, other->m_cardvoice_);
    std::swap(m_lastcard_, other->m_lastcard_);
    m_handcard_.Swap(&other->m_handcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_MJOperator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_MJOperator_descriptor_;
  metadata.reflection = GM_MJOperator_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_HUOperator::kMHuRoleidFieldNumber;
const int GM_HUOperator::kMHuTypeFieldNumber;
const int GM_HUOperator::kMFpidFieldNumber;
const int GM_HUOperator::kMDataFieldNumber;
const int GM_HUOperator::kMRoleVoiceFieldNumber;
const int GM_HUOperator::kMCardVoiceFieldNumber;
const int GM_HUOperator::kMHuCardFieldNumber;
#endif  // !_MSC_VER

GM_HUOperator::GM_HUOperator()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_HUOperator::InitAsDefaultInstance() {
  m_hucard_ = const_cast< ::GM_PlayerHandCard*>(&::GM_PlayerHandCard::default_instance());
}

GM_HUOperator::GM_HUOperator(const GM_HUOperator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_HUOperator::SharedCtor() {
  _cached_size_ = 0;
  m_huroleid_ = 0;
  m_hutype_ = 0;
  m_fpid_ = 0;
  m_rolevoice_ = 0;
  m_cardvoice_ = 0;
  m_hucard_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_HUOperator::~GM_HUOperator() {
  SharedDtor();
}

void GM_HUOperator::SharedDtor() {
  if (this != default_instance_) {
    delete m_hucard_;
  }
}

void GM_HUOperator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_HUOperator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_HUOperator_descriptor_;
}

const GM_HUOperator& GM_HUOperator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_2etxt();
  return *default_instance_;
}

GM_HUOperator* GM_HUOperator::default_instance_ = NULL;

GM_HUOperator* GM_HUOperator::New() const {
  return new GM_HUOperator;
}

void GM_HUOperator::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_huroleid_ = 0;
    m_hutype_ = 0;
    m_fpid_ = 0;
    m_rolevoice_ = 0;
    m_cardvoice_ = 0;
    if (has_m_hucard()) {
      if (m_hucard_ != NULL) m_hucard_->::GM_PlayerHandCard::Clear();
    }
  }
  m_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_HUOperator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_huRoleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_huroleid_)));
          set_has_m_huroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_huType;
        break;
      }

      // optional int32 m_huType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_huType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_hutype_)));
          set_has_m_hutype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_fpid;
        break;
      }

      // optional int32 m_fpid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fpid_)));
          set_has_m_fpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_Data;
        break;
      }

      // repeated .GM_HuHandCardData m_Data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_Data;
        if (input->ExpectTag(40)) goto parse_m_RoleVoice;
        break;
      }

      // optional int32 m_RoleVoice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_RoleVoice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rolevoice_)));
          set_has_m_rolevoice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_CardVoice;
        break;
      }

      // optional int32 m_CardVoice = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_CardVoice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cardvoice_)));
          set_has_m_cardvoice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_huCard;
        break;
      }

      // optional .GM_PlayerHandCard m_huCard = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_huCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_hucard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_HUOperator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_huRoleid = 1;
  if (has_m_huroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_huroleid(), output);
  }

  // optional int32 m_huType = 2;
  if (has_m_hutype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_hutype(), output);
  }

  // optional int32 m_fpid = 3;
  if (has_m_fpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_fpid(), output);
  }

  // repeated .GM_HuHandCardData m_Data = 4;
  for (int i = 0; i < this->m_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_data(i), output);
  }

  // optional int32 m_RoleVoice = 5;
  if (has_m_rolevoice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_rolevoice(), output);
  }

  // optional int32 m_CardVoice = 6;
  if (has_m_cardvoice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_cardvoice(), output);
  }

  // optional .GM_PlayerHandCard m_huCard = 7;
  if (has_m_hucard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->m_hucard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_HUOperator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_huRoleid = 1;
  if (has_m_huroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_huroleid(), target);
  }

  // optional int32 m_huType = 2;
  if (has_m_hutype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_hutype(), target);
  }

  // optional int32 m_fpid = 3;
  if (has_m_fpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_fpid(), target);
  }

  // repeated .GM_HuHandCardData m_Data = 4;
  for (int i = 0; i < this->m_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_data(i), target);
  }

  // optional int32 m_RoleVoice = 5;
  if (has_m_rolevoice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_rolevoice(), target);
  }

  // optional int32 m_CardVoice = 6;
  if (has_m_cardvoice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_cardvoice(), target);
  }

  // optional .GM_PlayerHandCard m_huCard = 7;
  if (has_m_hucard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->m_hucard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_HUOperator::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_huRoleid = 1;
    if (has_m_huroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_huroleid());
    }

    // optional int32 m_huType = 2;
    if (has_m_hutype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_hutype());
    }

    // optional int32 m_fpid = 3;
    if (has_m_fpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fpid());
    }

    // optional int32 m_RoleVoice = 5;
    if (has_m_rolevoice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rolevoice());
    }

    // optional int32 m_CardVoice = 6;
    if (has_m_cardvoice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cardvoice());
    }

    // optional .GM_PlayerHandCard m_huCard = 7;
    if (has_m_hucard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_hucard());
    }

  }
  // repeated .GM_HuHandCardData m_Data = 4;
  total_size += 1 * this->m_data_size();
  for (int i = 0; i < this->m_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_HUOperator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_HUOperator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_HUOperator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_HUOperator::MergeFrom(const GM_HUOperator& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_data_.MergeFrom(from.m_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_huroleid()) {
      set_m_huroleid(from.m_huroleid());
    }
    if (from.has_m_hutype()) {
      set_m_hutype(from.m_hutype());
    }
    if (from.has_m_fpid()) {
      set_m_fpid(from.m_fpid());
    }
    if (from.has_m_rolevoice()) {
      set_m_rolevoice(from.m_rolevoice());
    }
    if (from.has_m_cardvoice()) {
      set_m_cardvoice(from.m_cardvoice());
    }
    if (from.has_m_hucard()) {
      mutable_m_hucard()->::GM_PlayerHandCard::MergeFrom(from.m_hucard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_HUOperator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_HUOperator::CopyFrom(const GM_HUOperator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_HUOperator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_data_size(); i++) {
    if (!this->m_data(i).IsInitialized()) return false;
  }
  if (has_m_hucard()) {
    if (!this->m_hucard().IsInitialized()) return false;
  }
  return true;
}

void GM_HUOperator::Swap(GM_HUOperator* other) {
  if (other != this) {
    std::swap(m_huroleid_, other->m_huroleid_);
    std::swap(m_hutype_, other->m_hutype_);
    std::swap(m_fpid_, other->m_fpid_);
    m_data_.Swap(&other->m_data_);
    std::swap(m_rolevoice_, other->m_rolevoice_);
    std::swap(m_cardvoice_, other->m_cardvoice_);
    std::swap(m_hucard_, other->m_hucard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_HUOperator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_HUOperator_descriptor_;
  metadata.reflection = GM_HUOperator_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_HuHandCardData::kMRoleidFieldNumber;
const int GM_HuHandCardData::kMHandCardTypeFieldNumber;
const int GM_HuHandCardData::kMXiaJingFieldNumber;
const int GM_HuHandCardData::kMShangJingFieldNumber;
const int GM_HuHandCardData::kMHufengFieldNumber;
const int GM_HuHandCardData::kMGoldNumFieldNumber;
const int GM_HuHandCardData::kMIsBaWangFieldNumber;
const int GM_HuHandCardData::kMIsCongGuanFieldNumber;
const int GM_HuHandCardData::kMHuitouScoreFieldNumber;
const int GM_HuHandCardData::kMMaileiScoreFieldNumber;
const int GM_HuHandCardData::kMTongScoreFieldNumber;
const int GM_HuHandCardData::kMGangScoreFieldNumber;
const int GM_HuHandCardData::kMXiaCGBWFieldNumber;
const int GM_HuHandCardData::kMHuiCGBWFieldNumber;
const int GM_HuHandCardData::kMMaiCGBWFieldNumber;
const int GM_HuHandCardData::kMTongCGBWFieldNumber;
const int GM_HuHandCardData::kMCZScoreFieldNumber;
const int GM_HuHandCardData::kMHDFZScoreFieldNumber;
const int GM_HuHandCardData::kMPLRateFieldNumber;
const int GM_HuHandCardData::kMAnGangTypeFieldNumber;
#endif  // !_MSC_VER

GM_HuHandCardData::GM_HuHandCardData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_HuHandCardData::InitAsDefaultInstance() {
}

GM_HuHandCardData::GM_HuHandCardData(const GM_HuHandCardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_HuHandCardData::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_xiajing_ = 0;
  m_shangjing_ = 0;
  m_hufeng_ = 0;
  m_goldnum_ = 0;
  m_isbawang_ = 0;
  m_iscongguan_ = 0;
  m_huitouscore_ = 0;
  m_maileiscore_ = 0;
  m_tongscore_ = 0;
  m_gangscore_ = 0;
  m_xiacgbw_ = 0;
  m_huicgbw_ = 0;
  m_maicgbw_ = 0;
  m_tongcgbw_ = 0;
  m_czscore_ = 0;
  m_hdfzscore_ = 0;
  m_plrate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_HuHandCardData::~GM_HuHandCardData() {
  SharedDtor();
}

void GM_HuHandCardData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_HuHandCardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_HuHandCardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_HuHandCardData_descriptor_;
}

const GM_HuHandCardData& GM_HuHandCardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_2etxt();
  return *default_instance_;
}

GM_HuHandCardData* GM_HuHandCardData::default_instance_ = NULL;

GM_HuHandCardData* GM_HuHandCardData::New() const {
  return new GM_HuHandCardData;
}

void GM_HuHandCardData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_xiajing_ = 0;
    m_shangjing_ = 0;
    m_hufeng_ = 0;
    m_goldnum_ = 0;
    m_isbawang_ = 0;
    m_iscongguan_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_huitouscore_ = 0;
    m_maileiscore_ = 0;
    m_tongscore_ = 0;
    m_gangscore_ = 0;
    m_xiacgbw_ = 0;
    m_huicgbw_ = 0;
    m_maicgbw_ = 0;
    m_tongcgbw_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_czscore_ = 0;
    m_hdfzscore_ = 0;
    m_plrate_ = 0;
  }
  m_handcardtype_.Clear();
  m_angangtype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_HuHandCardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_HandCardType;
        break;
      }

      // repeated int32 m_HandCardType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_HandCardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_m_handcardtype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_handcardtype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_HandCardType;
        if (input->ExpectTag(24)) goto parse_m_xiaJing;
        break;
      }

      // optional int32 m_xiaJing = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_xiaJing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xiajing_)));
          set_has_m_xiajing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_ShangJing;
        break;
      }

      // optional int32 m_ShangJing = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ShangJing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_shangjing_)));
          set_has_m_shangjing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_Hufeng;
        break;
      }

      // optional int32 m_Hufeng = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Hufeng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_hufeng_)));
          set_has_m_hufeng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_GoldNum;
        break;
      }

      // optional int32 m_GoldNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_GoldNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_goldnum_)));
          set_has_m_goldnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_isBaWang;
        break;
      }

      // optional int32 m_isBaWang = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_isBaWang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_isbawang_)));
          set_has_m_isbawang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_isCongGuan;
        break;
      }

      // optional int32 m_isCongGuan = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_isCongGuan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_iscongguan_)));
          set_has_m_iscongguan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_huitouScore;
        break;
      }

      // optional int32 m_huitouScore = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_huitouScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_huitouscore_)));
          set_has_m_huitouscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_maileiScore;
        break;
      }

      // optional int32 m_maileiScore = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_maileiScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_maileiscore_)));
          set_has_m_maileiscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_tongScore;
        break;
      }

      // optional int32 m_tongScore = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_tongScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tongscore_)));
          set_has_m_tongscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_gangScore;
        break;
      }

      // optional int32 m_gangScore = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gangScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gangscore_)));
          set_has_m_gangscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_xiaCGBW;
        break;
      }

      // optional int32 m_xiaCGBW = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_xiaCGBW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xiacgbw_)));
          set_has_m_xiacgbw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_huiCGBW;
        break;
      }

      // optional int32 m_huiCGBW = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_huiCGBW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_huicgbw_)));
          set_has_m_huicgbw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_maiCGBW;
        break;
      }

      // optional int32 m_maiCGBW = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_maiCGBW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_maicgbw_)));
          set_has_m_maicgbw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_tongCGBW;
        break;
      }

      // optional int32 m_tongCGBW = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_tongCGBW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tongcgbw_)));
          set_has_m_tongcgbw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_CZScore;
        break;
      }

      // optional int32 m_CZScore = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_CZScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_czscore_)));
          set_has_m_czscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_m_HDFZScore;
        break;
      }

      // optional int32 m_HDFZScore = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_HDFZScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_hdfzscore_)));
          set_has_m_hdfzscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_m_PLRate;
        break;
      }

      // optional int32 m_PLRate = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_PLRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_plrate_)));
          set_has_m_plrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_m_AnGangType;
        break;
      }

      // repeated int32 m_AnGangType = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_AnGangType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 160, input, this->mutable_m_angangtype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_angangtype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_m_AnGangType;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_HuHandCardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // repeated int32 m_HandCardType = 2;
  for (int i = 0; i < this->m_handcardtype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->m_handcardtype(i), output);
  }

  // optional int32 m_xiaJing = 3;
  if (has_m_xiajing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_xiajing(), output);
  }

  // optional int32 m_ShangJing = 4;
  if (has_m_shangjing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_shangjing(), output);
  }

  // optional int32 m_Hufeng = 5;
  if (has_m_hufeng()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_hufeng(), output);
  }

  // optional int32 m_GoldNum = 6;
  if (has_m_goldnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_goldnum(), output);
  }

  // optional int32 m_isBaWang = 7;
  if (has_m_isbawang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_isbawang(), output);
  }

  // optional int32 m_isCongGuan = 8;
  if (has_m_iscongguan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_iscongguan(), output);
  }

  // optional int32 m_huitouScore = 9;
  if (has_m_huitouscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_huitouscore(), output);
  }

  // optional int32 m_maileiScore = 10;
  if (has_m_maileiscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_maileiscore(), output);
  }

  // optional int32 m_tongScore = 11;
  if (has_m_tongscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_tongscore(), output);
  }

  // optional int32 m_gangScore = 12;
  if (has_m_gangscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_gangscore(), output);
  }

  // optional int32 m_xiaCGBW = 13;
  if (has_m_xiacgbw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_xiacgbw(), output);
  }

  // optional int32 m_huiCGBW = 14;
  if (has_m_huicgbw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_huicgbw(), output);
  }

  // optional int32 m_maiCGBW = 15;
  if (has_m_maicgbw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_maicgbw(), output);
  }

  // optional int32 m_tongCGBW = 16;
  if (has_m_tongcgbw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_tongcgbw(), output);
  }

  // optional int32 m_CZScore = 17;
  if (has_m_czscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->m_czscore(), output);
  }

  // optional int32 m_HDFZScore = 18;
  if (has_m_hdfzscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->m_hdfzscore(), output);
  }

  // optional int32 m_PLRate = 19;
  if (has_m_plrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->m_plrate(), output);
  }

  // repeated int32 m_AnGangType = 20;
  for (int i = 0; i < this->m_angangtype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      20, this->m_angangtype(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_HuHandCardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // repeated int32 m_HandCardType = 2;
  for (int i = 0; i < this->m_handcardtype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->m_handcardtype(i), target);
  }

  // optional int32 m_xiaJing = 3;
  if (has_m_xiajing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_xiajing(), target);
  }

  // optional int32 m_ShangJing = 4;
  if (has_m_shangjing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_shangjing(), target);
  }

  // optional int32 m_Hufeng = 5;
  if (has_m_hufeng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_hufeng(), target);
  }

  // optional int32 m_GoldNum = 6;
  if (has_m_goldnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_goldnum(), target);
  }

  // optional int32 m_isBaWang = 7;
  if (has_m_isbawang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_isbawang(), target);
  }

  // optional int32 m_isCongGuan = 8;
  if (has_m_iscongguan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_iscongguan(), target);
  }

  // optional int32 m_huitouScore = 9;
  if (has_m_huitouscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_huitouscore(), target);
  }

  // optional int32 m_maileiScore = 10;
  if (has_m_maileiscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_maileiscore(), target);
  }

  // optional int32 m_tongScore = 11;
  if (has_m_tongscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_tongscore(), target);
  }

  // optional int32 m_gangScore = 12;
  if (has_m_gangscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_gangscore(), target);
  }

  // optional int32 m_xiaCGBW = 13;
  if (has_m_xiacgbw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_xiacgbw(), target);
  }

  // optional int32 m_huiCGBW = 14;
  if (has_m_huicgbw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_huicgbw(), target);
  }

  // optional int32 m_maiCGBW = 15;
  if (has_m_maicgbw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_maicgbw(), target);
  }

  // optional int32 m_tongCGBW = 16;
  if (has_m_tongcgbw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->m_tongcgbw(), target);
  }

  // optional int32 m_CZScore = 17;
  if (has_m_czscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->m_czscore(), target);
  }

  // optional int32 m_HDFZScore = 18;
  if (has_m_hdfzscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->m_hdfzscore(), target);
  }

  // optional int32 m_PLRate = 19;
  if (has_m_plrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->m_plrate(), target);
  }

  // repeated int32 m_AnGangType = 20;
  for (int i = 0; i < this->m_angangtype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(20, this->m_angangtype(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_HuHandCardData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_xiaJing = 3;
    if (has_m_xiajing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xiajing());
    }

    // optional int32 m_ShangJing = 4;
    if (has_m_shangjing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_shangjing());
    }

    // optional int32 m_Hufeng = 5;
    if (has_m_hufeng()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_hufeng());
    }

    // optional int32 m_GoldNum = 6;
    if (has_m_goldnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_goldnum());
    }

    // optional int32 m_isBaWang = 7;
    if (has_m_isbawang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_isbawang());
    }

    // optional int32 m_isCongGuan = 8;
    if (has_m_iscongguan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_iscongguan());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_huitouScore = 9;
    if (has_m_huitouscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_huitouscore());
    }

    // optional int32 m_maileiScore = 10;
    if (has_m_maileiscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_maileiscore());
    }

    // optional int32 m_tongScore = 11;
    if (has_m_tongscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tongscore());
    }

    // optional int32 m_gangScore = 12;
    if (has_m_gangscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gangscore());
    }

    // optional int32 m_xiaCGBW = 13;
    if (has_m_xiacgbw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xiacgbw());
    }

    // optional int32 m_huiCGBW = 14;
    if (has_m_huicgbw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_huicgbw());
    }

    // optional int32 m_maiCGBW = 15;
    if (has_m_maicgbw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_maicgbw());
    }

    // optional int32 m_tongCGBW = 16;
    if (has_m_tongcgbw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tongcgbw());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 m_CZScore = 17;
    if (has_m_czscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_czscore());
    }

    // optional int32 m_HDFZScore = 18;
    if (has_m_hdfzscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_hdfzscore());
    }

    // optional int32 m_PLRate = 19;
    if (has_m_plrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_plrate());
    }

  }
  // repeated int32 m_HandCardType = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_handcardtype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_handcardtype(i));
    }
    total_size += 1 * this->m_handcardtype_size() + data_size;
  }

  // repeated int32 m_AnGangType = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_angangtype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_angangtype(i));
    }
    total_size += 2 * this->m_angangtype_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_HuHandCardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_HuHandCardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_HuHandCardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_HuHandCardData::MergeFrom(const GM_HuHandCardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_handcardtype_.MergeFrom(from.m_handcardtype_);
  m_angangtype_.MergeFrom(from.m_angangtype_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_xiajing()) {
      set_m_xiajing(from.m_xiajing());
    }
    if (from.has_m_shangjing()) {
      set_m_shangjing(from.m_shangjing());
    }
    if (from.has_m_hufeng()) {
      set_m_hufeng(from.m_hufeng());
    }
    if (from.has_m_goldnum()) {
      set_m_goldnum(from.m_goldnum());
    }
    if (from.has_m_isbawang()) {
      set_m_isbawang(from.m_isbawang());
    }
    if (from.has_m_iscongguan()) {
      set_m_iscongguan(from.m_iscongguan());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_huitouscore()) {
      set_m_huitouscore(from.m_huitouscore());
    }
    if (from.has_m_maileiscore()) {
      set_m_maileiscore(from.m_maileiscore());
    }
    if (from.has_m_tongscore()) {
      set_m_tongscore(from.m_tongscore());
    }
    if (from.has_m_gangscore()) {
      set_m_gangscore(from.m_gangscore());
    }
    if (from.has_m_xiacgbw()) {
      set_m_xiacgbw(from.m_xiacgbw());
    }
    if (from.has_m_huicgbw()) {
      set_m_huicgbw(from.m_huicgbw());
    }
    if (from.has_m_maicgbw()) {
      set_m_maicgbw(from.m_maicgbw());
    }
    if (from.has_m_tongcgbw()) {
      set_m_tongcgbw(from.m_tongcgbw());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_czscore()) {
      set_m_czscore(from.m_czscore());
    }
    if (from.has_m_hdfzscore()) {
      set_m_hdfzscore(from.m_hdfzscore());
    }
    if (from.has_m_plrate()) {
      set_m_plrate(from.m_plrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_HuHandCardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_HuHandCardData::CopyFrom(const GM_HuHandCardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_HuHandCardData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_HuHandCardData::Swap(GM_HuHandCardData* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    m_handcardtype_.Swap(&other->m_handcardtype_);
    std::swap(m_xiajing_, other->m_xiajing_);
    std::swap(m_shangjing_, other->m_shangjing_);
    std::swap(m_hufeng_, other->m_hufeng_);
    std::swap(m_goldnum_, other->m_goldnum_);
    std::swap(m_isbawang_, other->m_isbawang_);
    std::swap(m_iscongguan_, other->m_iscongguan_);
    std::swap(m_huitouscore_, other->m_huitouscore_);
    std::swap(m_maileiscore_, other->m_maileiscore_);
    std::swap(m_tongscore_, other->m_tongscore_);
    std::swap(m_gangscore_, other->m_gangscore_);
    std::swap(m_xiacgbw_, other->m_xiacgbw_);
    std::swap(m_huicgbw_, other->m_huicgbw_);
    std::swap(m_maicgbw_, other->m_maicgbw_);
    std::swap(m_tongcgbw_, other->m_tongcgbw_);
    std::swap(m_czscore_, other->m_czscore_);
    std::swap(m_hdfzscore_, other->m_hdfzscore_);
    std::swap(m_plrate_, other->m_plrate_);
    m_angangtype_.Swap(&other->m_angangtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_HuHandCardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_HuHandCardData_descriptor_;
  metadata.reflection = GM_HuHandCardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_AskFriend::kMRoleidFieldNumber;
const int GM_AskFriend::kMBeinvitedFieldNumber;
const int GM_AskFriend::kMNameFieldNumber;
const int GM_AskFriend::kMFBIDFieldNumber;
#endif  // !_MSC_VER

GM_AskFriend::GM_AskFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_AskFriend::InitAsDefaultInstance() {
}

GM_AskFriend::GM_AskFriend(const GM_AskFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_AskFriend::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_beinvited_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_fbid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_AskFriend::~GM_AskFriend() {
  SharedDtor();
}

void GM_AskFriend::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (this != default_instance_) {
  }
}

void GM_AskFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_AskFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_AskFriend_descriptor_;
}

const GM_AskFriend& GM_AskFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_2etxt();
  return *default_instance_;
}

GM_AskFriend* GM_AskFriend::default_instance_ = NULL;

GM_AskFriend* GM_AskFriend::New() const {
  return new GM_AskFriend;
}

void GM_AskFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_beinvited_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_fbid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_AskFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_Beinvited;
        break;
      }

      // optional int32 m_Beinvited = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Beinvited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_beinvited_)));
          set_has_m_beinvited();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_Name;
        break;
      }

      // optional string m_Name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_FBID;
        break;
      }

      // optional int32 m_FBID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_FBID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fbid_)));
          set_has_m_fbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_AskFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int32 m_Beinvited = 2;
  if (has_m_beinvited()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_beinvited(), output);
  }

  // optional string m_Name = 3;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_name(), output);
  }

  // optional int32 m_FBID = 4;
  if (has_m_fbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_fbid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_AskFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int32 m_Beinvited = 2;
  if (has_m_beinvited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_beinvited(), target);
  }

  // optional string m_Name = 3;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_name(), target);
  }

  // optional int32 m_FBID = 4;
  if (has_m_fbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_fbid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_AskFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_Beinvited = 2;
    if (has_m_beinvited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_beinvited());
    }

    // optional string m_Name = 3;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_FBID = 4;
    if (has_m_fbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fbid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_AskFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_AskFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_AskFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_AskFriend::MergeFrom(const GM_AskFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_beinvited()) {
      set_m_beinvited(from.m_beinvited());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_fbid()) {
      set_m_fbid(from.m_fbid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_AskFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_AskFriend::CopyFrom(const GM_AskFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_AskFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_AskFriend::Swap(GM_AskFriend* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_beinvited_, other->m_beinvited_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_fbid_, other->m_fbid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_AskFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_AskFriend_descriptor_;
  metadata.reflection = GM_AskFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_AutoInfo::kMRoleidFieldNumber;
const int GM_AutoInfo::kMAutoFlagFieldNumber;
#endif  // !_MSC_VER

GM_AutoInfo::GM_AutoInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_AutoInfo::InitAsDefaultInstance() {
}

GM_AutoInfo::GM_AutoInfo(const GM_AutoInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_AutoInfo::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_autoflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_AutoInfo::~GM_AutoInfo() {
  SharedDtor();
}

void GM_AutoInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_AutoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_AutoInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_AutoInfo_descriptor_;
}

const GM_AutoInfo& GM_AutoInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_2etxt();
  return *default_instance_;
}

GM_AutoInfo* GM_AutoInfo::default_instance_ = NULL;

GM_AutoInfo* GM_AutoInfo::New() const {
  return new GM_AutoInfo;
}

void GM_AutoInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_autoflag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_AutoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_AutoFlag;
        break;
      }

      // optional int32 m_AutoFlag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_AutoFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_autoflag_)));
          set_has_m_autoflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_AutoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int32 m_AutoFlag = 2;
  if (has_m_autoflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_autoflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_AutoInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int32 m_AutoFlag = 2;
  if (has_m_autoflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_autoflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_AutoInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_AutoFlag = 2;
    if (has_m_autoflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_autoflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_AutoInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_AutoInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_AutoInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_AutoInfo::MergeFrom(const GM_AutoInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_autoflag()) {
      set_m_autoflag(from.m_autoflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_AutoInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_AutoInfo::CopyFrom(const GM_AutoInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_AutoInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_AutoInfo::Swap(GM_AutoInfo* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_autoflag_, other->m_autoflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_AutoInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_AutoInfo_descriptor_;
  metadata.reflection = GM_AutoInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ReconnectMJData::kMBankerPosFieldNumber;
const int GM_ReconnectMJData::kMZhengFieldNumber;
const int GM_ReconnectMJData::kMFuFieldNumber;
const int GM_ReconnectMJData::kMZhengidFieldNumber;
const int GM_ReconnectMJData::kMJingposFieldNumber;
const int GM_ReconnectMJData::kMRoomMasterIDFieldNumber;
const int GM_ReconnectMJData::kMFirstPosFieldNumber;
const int GM_ReconnectMJData::kMSecondPosFieldNumber;
const int GM_ReconnectMJData::kMFreeCardFieldNumber;
const int GM_ReconnectMJData::kMLeftTimeFieldNumber;
const int GM_ReconnectMJData::kMLeftCountFieldNumber;
const int GM_ReconnectMJData::kMTotalCountFieldNumber;
const int GM_ReconnectMJData::kMPlayWayFieldNumber;
const int GM_ReconnectMJData::kMXiazhengFieldNumber;
const int GM_ReconnectMJData::kMXiafuFieldNumber;
const int GM_ReconnectMJData::kMRollCountFieldNumber;
const int GM_ReconnectMJData::kMPlayerCountFieldNumber;
const int GM_ReconnectMJData::kMLastOutCardRoleIdFieldNumber;
const int GM_ReconnectMJData::kMCloseRoomLeftTimeFieldNumber;
const int GM_ReconnectMJData::kMHandCardFieldNumber;
const int GM_ReconnectMJData::kMAllDataFieldNumber;
const int GM_ReconnectMJData::kMCloseRoomDataFieldNumber;
const int GM_ReconnectMJData::kMHuOperatorDataFieldNumber;
const int GM_ReconnectMJData::kMHuLastCardFieldNumber;
#endif  // !_MSC_VER

GM_ReconnectMJData::GM_ReconnectMJData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ReconnectMJData::InitAsDefaultInstance() {
  m_huoperatordata_ = const_cast< ::GM_HUOperator*>(&::GM_HUOperator::default_instance());
}

GM_ReconnectMJData::GM_ReconnectMJData(const GM_ReconnectMJData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ReconnectMJData::SharedCtor() {
  _cached_size_ = 0;
  m_bankerpos_ = 0;
  m_zheng_ = 0;
  m_fu_ = 0;
  m_zhengid_ = 0;
  m_jingpos_ = 0;
  m_roommasterid_ = 0;
  m_firstpos_ = 0;
  m_secondpos_ = 0;
  m_freecard_ = 0;
  m_lefttime_ = 0;
  m_leftcount_ = 0;
  m_totalcount_ = 0;
  m_playway_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_xiazheng_ = 0;
  m_xiafu_ = 0;
  m_rollcount_ = 0;
  m_playercount_ = 0;
  m_lastoutcardroleid_ = 0;
  m_closeroomlefttime_ = 0;
  m_huoperatordata_ = NULL;
  m_hulastcard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ReconnectMJData::~GM_ReconnectMJData() {
  SharedDtor();
}

void GM_ReconnectMJData::SharedDtor() {
  if (m_playway_ != &::google::protobuf::internal::kEmptyString) {
    delete m_playway_;
  }
  if (this != default_instance_) {
    delete m_huoperatordata_;
  }
}

void GM_ReconnectMJData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ReconnectMJData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ReconnectMJData_descriptor_;
}

const GM_ReconnectMJData& GM_ReconnectMJData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_2etxt();
  return *default_instance_;
}

GM_ReconnectMJData* GM_ReconnectMJData::default_instance_ = NULL;

GM_ReconnectMJData* GM_ReconnectMJData::New() const {
  return new GM_ReconnectMJData;
}

void GM_ReconnectMJData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_bankerpos_ = 0;
    m_zheng_ = 0;
    m_fu_ = 0;
    m_zhengid_ = 0;
    m_jingpos_ = 0;
    m_roommasterid_ = 0;
    m_firstpos_ = 0;
    m_secondpos_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_freecard_ = 0;
    m_lefttime_ = 0;
    m_leftcount_ = 0;
    m_totalcount_ = 0;
    if (has_m_playway()) {
      if (m_playway_ != &::google::protobuf::internal::kEmptyString) {
        m_playway_->clear();
      }
    }
    m_xiazheng_ = 0;
    m_xiafu_ = 0;
    m_rollcount_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_playercount_ = 0;
    m_lastoutcardroleid_ = 0;
    m_closeroomlefttime_ = 0;
    if (has_m_huoperatordata()) {
      if (m_huoperatordata_ != NULL) m_huoperatordata_->::GM_HUOperator::Clear();
    }
    m_hulastcard_ = 0;
  }
  m_handcard_.Clear();
  m_alldata_.Clear();
  m_closeroomdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ReconnectMJData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_bankerPos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bankerpos_)));
          set_has_m_bankerpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_zheng;
        break;
      }

      // optional int32 m_zheng = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_zheng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_zheng_)));
          set_has_m_zheng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_fu;
        break;
      }

      // optional int32 m_fu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fu_)));
          set_has_m_fu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_zhengid;
        break;
      }

      // optional int32 m_zhengid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_zhengid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_zhengid_)));
          set_has_m_zhengid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_jingpos;
        break;
      }

      // optional int32 m_jingpos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_jingpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_jingpos_)));
          set_has_m_jingpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_RoomMasterID;
        break;
      }

      // optional int32 m_RoomMasterID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_RoomMasterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roommasterid_)));
          set_has_m_roommasterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_FirstPos;
        break;
      }

      // optional int32 m_FirstPos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_FirstPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_firstpos_)));
          set_has_m_firstpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_SecondPos;
        break;
      }

      // optional int32 m_SecondPos = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_SecondPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_secondpos_)));
          set_has_m_secondpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_FreeCard;
        break;
      }

      // optional int32 m_FreeCard = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_FreeCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_freecard_)));
          set_has_m_freecard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_leftTime;
        break;
      }

      // optional int32 m_leftTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_leftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lefttime_)));
          set_has_m_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_leftCount;
        break;
      }

      // optional int32 m_leftCount = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_leftCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_leftcount_)));
          set_has_m_leftcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_totalCount;
        break;
      }

      // optional int32 m_totalCount = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_totalCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_totalcount_)));
          set_has_m_totalcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m_playWay;
        break;
      }

      // optional string m_playWay = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_playWay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_playway()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_playway().data(), this->m_playway().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_xiazheng;
        break;
      }

      // optional int32 m_xiazheng = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_xiazheng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xiazheng_)));
          set_has_m_xiazheng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_xiafu;
        break;
      }

      // optional int32 m_xiafu = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_xiafu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xiafu_)));
          set_has_m_xiafu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_rollCount;
        break;
      }

      // optional int32 m_rollCount = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rollCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rollcount_)));
          set_has_m_rollcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_playerCount;
        break;
      }

      // optional int32 m_playerCount = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_playerCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playercount_)));
          set_has_m_playercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_m_lastOutCardRoleId;
        break;
      }

      // optional int32 m_lastOutCardRoleId = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lastOutCardRoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lastoutcardroleid_)));
          set_has_m_lastoutcardroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_m_closeRoomLeftTime;
        break;
      }

      // optional int32 m_closeRoomLeftTime = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_closeRoomLeftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_closeroomlefttime_)));
          set_has_m_closeroomlefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_m_HandCard;
        break;
      }

      // repeated .GM_PlayerHandCard m_HandCard = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_HandCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_handcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_m_HandCard;
        if (input->ExpectTag(170)) goto parse_m_AllData;
        break;
      }

      // repeated .GM_ReconnectPlayerData m_AllData = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_AllData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_alldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_m_AllData;
        if (input->ExpectTag(178)) goto parse_m_CloseRoomData;
        break;
      }

      // repeated .GM_ReconnectCloseRoomData m_CloseRoomData = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_CloseRoomData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_closeroomdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_m_CloseRoomData;
        if (input->ExpectTag(186)) goto parse_m_huOperatorData;
        break;
      }

      // optional .GM_HUOperator m_huOperatorData = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_huOperatorData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_huoperatordata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_m_huLastCard;
        break;
      }

      // optional int32 m_huLastCard = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_huLastCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_hulastcard_)));
          set_has_m_hulastcard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ReconnectMJData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_bankerPos = 1;
  if (has_m_bankerpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_bankerpos(), output);
  }

  // optional int32 m_zheng = 2;
  if (has_m_zheng()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_zheng(), output);
  }

  // optional int32 m_fu = 3;
  if (has_m_fu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_fu(), output);
  }

  // optional int32 m_zhengid = 4;
  if (has_m_zhengid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_zhengid(), output);
  }

  // optional int32 m_jingpos = 5;
  if (has_m_jingpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_jingpos(), output);
  }

  // optional int32 m_RoomMasterID = 6;
  if (has_m_roommasterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_roommasterid(), output);
  }

  // optional int32 m_FirstPos = 7;
  if (has_m_firstpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_firstpos(), output);
  }

  // optional int32 m_SecondPos = 8;
  if (has_m_secondpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_secondpos(), output);
  }

  // optional int32 m_FreeCard = 9;
  if (has_m_freecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_freecard(), output);
  }

  // optional int32 m_leftTime = 10;
  if (has_m_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_lefttime(), output);
  }

  // optional int32 m_leftCount = 11;
  if (has_m_leftcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_leftcount(), output);
  }

  // optional int32 m_totalCount = 12;
  if (has_m_totalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_totalcount(), output);
  }

  // optional string m_playWay = 13;
  if (has_m_playway()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_playway().data(), this->m_playway().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->m_playway(), output);
  }

  // optional int32 m_xiazheng = 14;
  if (has_m_xiazheng()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_xiazheng(), output);
  }

  // optional int32 m_xiafu = 15;
  if (has_m_xiafu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_xiafu(), output);
  }

  // optional int32 m_rollCount = 16;
  if (has_m_rollcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_rollcount(), output);
  }

  // optional int32 m_playerCount = 17;
  if (has_m_playercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->m_playercount(), output);
  }

  // optional int32 m_lastOutCardRoleId = 18;
  if (has_m_lastoutcardroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->m_lastoutcardroleid(), output);
  }

  // optional int32 m_closeRoomLeftTime = 19;
  if (has_m_closeroomlefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->m_closeroomlefttime(), output);
  }

  // repeated .GM_PlayerHandCard m_HandCard = 20;
  for (int i = 0; i < this->m_handcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->m_handcard(i), output);
  }

  // repeated .GM_ReconnectPlayerData m_AllData = 21;
  for (int i = 0; i < this->m_alldata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->m_alldata(i), output);
  }

  // repeated .GM_ReconnectCloseRoomData m_CloseRoomData = 22;
  for (int i = 0; i < this->m_closeroomdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->m_closeroomdata(i), output);
  }

  // optional .GM_HUOperator m_huOperatorData = 23;
  if (has_m_huoperatordata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->m_huoperatordata(), output);
  }

  // optional int32 m_huLastCard = 24;
  if (has_m_hulastcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->m_hulastcard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ReconnectMJData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_bankerPos = 1;
  if (has_m_bankerpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_bankerpos(), target);
  }

  // optional int32 m_zheng = 2;
  if (has_m_zheng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_zheng(), target);
  }

  // optional int32 m_fu = 3;
  if (has_m_fu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_fu(), target);
  }

  // optional int32 m_zhengid = 4;
  if (has_m_zhengid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_zhengid(), target);
  }

  // optional int32 m_jingpos = 5;
  if (has_m_jingpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_jingpos(), target);
  }

  // optional int32 m_RoomMasterID = 6;
  if (has_m_roommasterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_roommasterid(), target);
  }

  // optional int32 m_FirstPos = 7;
  if (has_m_firstpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_firstpos(), target);
  }

  // optional int32 m_SecondPos = 8;
  if (has_m_secondpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_secondpos(), target);
  }

  // optional int32 m_FreeCard = 9;
  if (has_m_freecard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_freecard(), target);
  }

  // optional int32 m_leftTime = 10;
  if (has_m_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_lefttime(), target);
  }

  // optional int32 m_leftCount = 11;
  if (has_m_leftcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_leftcount(), target);
  }

  // optional int32 m_totalCount = 12;
  if (has_m_totalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_totalcount(), target);
  }

  // optional string m_playWay = 13;
  if (has_m_playway()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_playway().data(), this->m_playway().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->m_playway(), target);
  }

  // optional int32 m_xiazheng = 14;
  if (has_m_xiazheng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_xiazheng(), target);
  }

  // optional int32 m_xiafu = 15;
  if (has_m_xiafu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_xiafu(), target);
  }

  // optional int32 m_rollCount = 16;
  if (has_m_rollcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->m_rollcount(), target);
  }

  // optional int32 m_playerCount = 17;
  if (has_m_playercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->m_playercount(), target);
  }

  // optional int32 m_lastOutCardRoleId = 18;
  if (has_m_lastoutcardroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->m_lastoutcardroleid(), target);
  }

  // optional int32 m_closeRoomLeftTime = 19;
  if (has_m_closeroomlefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->m_closeroomlefttime(), target);
  }

  // repeated .GM_PlayerHandCard m_HandCard = 20;
  for (int i = 0; i < this->m_handcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->m_handcard(i), target);
  }

  // repeated .GM_ReconnectPlayerData m_AllData = 21;
  for (int i = 0; i < this->m_alldata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->m_alldata(i), target);
  }

  // repeated .GM_ReconnectCloseRoomData m_CloseRoomData = 22;
  for (int i = 0; i < this->m_closeroomdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->m_closeroomdata(i), target);
  }

  // optional .GM_HUOperator m_huOperatorData = 23;
  if (has_m_huoperatordata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->m_huoperatordata(), target);
  }

  // optional int32 m_huLastCard = 24;
  if (has_m_hulastcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->m_hulastcard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ReconnectMJData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_bankerPos = 1;
    if (has_m_bankerpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bankerpos());
    }

    // optional int32 m_zheng = 2;
    if (has_m_zheng()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_zheng());
    }

    // optional int32 m_fu = 3;
    if (has_m_fu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fu());
    }

    // optional int32 m_zhengid = 4;
    if (has_m_zhengid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_zhengid());
    }

    // optional int32 m_jingpos = 5;
    if (has_m_jingpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_jingpos());
    }

    // optional int32 m_RoomMasterID = 6;
    if (has_m_roommasterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roommasterid());
    }

    // optional int32 m_FirstPos = 7;
    if (has_m_firstpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_firstpos());
    }

    // optional int32 m_SecondPos = 8;
    if (has_m_secondpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_secondpos());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_FreeCard = 9;
    if (has_m_freecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_freecard());
    }

    // optional int32 m_leftTime = 10;
    if (has_m_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lefttime());
    }

    // optional int32 m_leftCount = 11;
    if (has_m_leftcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_leftcount());
    }

    // optional int32 m_totalCount = 12;
    if (has_m_totalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_totalcount());
    }

    // optional string m_playWay = 13;
    if (has_m_playway()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_playway());
    }

    // optional int32 m_xiazheng = 14;
    if (has_m_xiazheng()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xiazheng());
    }

    // optional int32 m_xiafu = 15;
    if (has_m_xiafu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xiafu());
    }

    // optional int32 m_rollCount = 16;
    if (has_m_rollcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rollcount());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 m_playerCount = 17;
    if (has_m_playercount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playercount());
    }

    // optional int32 m_lastOutCardRoleId = 18;
    if (has_m_lastoutcardroleid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lastoutcardroleid());
    }

    // optional int32 m_closeRoomLeftTime = 19;
    if (has_m_closeroomlefttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_closeroomlefttime());
    }

    // optional .GM_HUOperator m_huOperatorData = 23;
    if (has_m_huoperatordata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_huoperatordata());
    }

    // optional int32 m_huLastCard = 24;
    if (has_m_hulastcard()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_hulastcard());
    }

  }
  // repeated .GM_PlayerHandCard m_HandCard = 20;
  total_size += 2 * this->m_handcard_size();
  for (int i = 0; i < this->m_handcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_handcard(i));
  }

  // repeated .GM_ReconnectPlayerData m_AllData = 21;
  total_size += 2 * this->m_alldata_size();
  for (int i = 0; i < this->m_alldata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_alldata(i));
  }

  // repeated .GM_ReconnectCloseRoomData m_CloseRoomData = 22;
  total_size += 2 * this->m_closeroomdata_size();
  for (int i = 0; i < this->m_closeroomdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_closeroomdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ReconnectMJData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ReconnectMJData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ReconnectMJData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ReconnectMJData::MergeFrom(const GM_ReconnectMJData& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_handcard_.MergeFrom(from.m_handcard_);
  m_alldata_.MergeFrom(from.m_alldata_);
  m_closeroomdata_.MergeFrom(from.m_closeroomdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_bankerpos()) {
      set_m_bankerpos(from.m_bankerpos());
    }
    if (from.has_m_zheng()) {
      set_m_zheng(from.m_zheng());
    }
    if (from.has_m_fu()) {
      set_m_fu(from.m_fu());
    }
    if (from.has_m_zhengid()) {
      set_m_zhengid(from.m_zhengid());
    }
    if (from.has_m_jingpos()) {
      set_m_jingpos(from.m_jingpos());
    }
    if (from.has_m_roommasterid()) {
      set_m_roommasterid(from.m_roommasterid());
    }
    if (from.has_m_firstpos()) {
      set_m_firstpos(from.m_firstpos());
    }
    if (from.has_m_secondpos()) {
      set_m_secondpos(from.m_secondpos());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_freecard()) {
      set_m_freecard(from.m_freecard());
    }
    if (from.has_m_lefttime()) {
      set_m_lefttime(from.m_lefttime());
    }
    if (from.has_m_leftcount()) {
      set_m_leftcount(from.m_leftcount());
    }
    if (from.has_m_totalcount()) {
      set_m_totalcount(from.m_totalcount());
    }
    if (from.has_m_playway()) {
      set_m_playway(from.m_playway());
    }
    if (from.has_m_xiazheng()) {
      set_m_xiazheng(from.m_xiazheng());
    }
    if (from.has_m_xiafu()) {
      set_m_xiafu(from.m_xiafu());
    }
    if (from.has_m_rollcount()) {
      set_m_rollcount(from.m_rollcount());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_playercount()) {
      set_m_playercount(from.m_playercount());
    }
    if (from.has_m_lastoutcardroleid()) {
      set_m_lastoutcardroleid(from.m_lastoutcardroleid());
    }
    if (from.has_m_closeroomlefttime()) {
      set_m_closeroomlefttime(from.m_closeroomlefttime());
    }
    if (from.has_m_huoperatordata()) {
      mutable_m_huoperatordata()->::GM_HUOperator::MergeFrom(from.m_huoperatordata());
    }
    if (from.has_m_hulastcard()) {
      set_m_hulastcard(from.m_hulastcard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ReconnectMJData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ReconnectMJData::CopyFrom(const GM_ReconnectMJData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ReconnectMJData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_handcard_size(); i++) {
    if (!this->m_handcard(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_alldata_size(); i++) {
    if (!this->m_alldata(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_closeroomdata_size(); i++) {
    if (!this->m_closeroomdata(i).IsInitialized()) return false;
  }
  if (has_m_huoperatordata()) {
    if (!this->m_huoperatordata().IsInitialized()) return false;
  }
  return true;
}

void GM_ReconnectMJData::Swap(GM_ReconnectMJData* other) {
  if (other != this) {
    std::swap(m_bankerpos_, other->m_bankerpos_);
    std::swap(m_zheng_, other->m_zheng_);
    std::swap(m_fu_, other->m_fu_);
    std::swap(m_zhengid_, other->m_zhengid_);
    std::swap(m_jingpos_, other->m_jingpos_);
    std::swap(m_roommasterid_, other->m_roommasterid_);
    std::swap(m_firstpos_, other->m_firstpos_);
    std::swap(m_secondpos_, other->m_secondpos_);
    std::swap(m_freecard_, other->m_freecard_);
    std::swap(m_lefttime_, other->m_lefttime_);
    std::swap(m_leftcount_, other->m_leftcount_);
    std::swap(m_totalcount_, other->m_totalcount_);
    std::swap(m_playway_, other->m_playway_);
    std::swap(m_xiazheng_, other->m_xiazheng_);
    std::swap(m_xiafu_, other->m_xiafu_);
    std::swap(m_rollcount_, other->m_rollcount_);
    std::swap(m_playercount_, other->m_playercount_);
    std::swap(m_lastoutcardroleid_, other->m_lastoutcardroleid_);
    std::swap(m_closeroomlefttime_, other->m_closeroomlefttime_);
    m_handcard_.Swap(&other->m_handcard_);
    m_alldata_.Swap(&other->m_alldata_);
    m_closeroomdata_.Swap(&other->m_closeroomdata_);
    std::swap(m_huoperatordata_, other->m_huoperatordata_);
    std::swap(m_hulastcard_, other->m_hulastcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ReconnectMJData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ReconnectMJData_descriptor_;
  metadata.reflection = GM_ReconnectMJData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ReconnectPlayerData::kMRoleidFieldNumber;
const int GM_ReconnectPlayerData::kMGoldFieldNumber;
const int GM_ReconnectPlayerData::kMHeadPhotoFieldNumber;
const int GM_ReconnectPlayerData::kMCataterTypeFieldNumber;
const int GM_ReconnectPlayerData::kMPostionFieldNumber;
const int GM_ReconnectPlayerData::kMNameFieldNumber;
const int GM_ReconnectPlayerData::kMSexFieldNumber;
const int GM_ReconnectPlayerData::kMHandCardNumFieldNumber;
const int GM_ReconnectPlayerData::kMHeadFrameFieldNumber;
const int GM_ReconnectPlayerData::kMNickNameFieldNumber;
const int GM_ReconnectPlayerData::kMHeadPhotoUrlFieldNumber;
const int GM_ReconnectPlayerData::kMIsAutoFieldNumber;
const int GM_ReconnectPlayerData::kMTotalScoreFieldNumber;
const int GM_ReconnectPlayerData::kMIsReadyFieldNumber;
const int GM_ReconnectPlayerData::kMRoleVoiceFieldNumber;
const int GM_ReconnectPlayerData::kMCardVoiceFieldNumber;
const int GM_ReconnectPlayerData::kMLongitudeFieldNumber;
const int GM_ReconnectPlayerData::kMLatitudeFieldNumber;
const int GM_ReconnectPlayerData::kMReallyPosFieldNumber;
const int GM_ReconnectPlayerData::kMDingStateFieldNumber;
const int GM_ReconnectPlayerData::kMOutHandCardFieldNumber;
const int GM_ReconnectPlayerData::kMFunHandCardListFieldNumber;
#endif  // !_MSC_VER

GM_ReconnectPlayerData::GM_ReconnectPlayerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ReconnectPlayerData::InitAsDefaultInstance() {
}

GM_ReconnectPlayerData::GM_ReconnectPlayerData(const GM_ReconnectPlayerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ReconnectPlayerData::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_gold_ = GOOGLE_LONGLONG(0);
  m_headphoto_ = 0;
  m_catatertype_ = 0;
  m_postion_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_sex_ = 0;
  m_handcardnum_ = 0;
  m_headframe_ = 0;
  m_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_headphotourl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_isauto_ = 0;
  m_totalscore_ = 0;
  m_isready_ = 0;
  m_rolevoice_ = 0;
  m_cardvoice_ = 0;
  m_longitude_ = 0;
  m_latitude_ = 0;
  m_reallypos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_dingstate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ReconnectPlayerData::~GM_ReconnectPlayerData() {
  SharedDtor();
}

void GM_ReconnectPlayerData::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_nickname_;
  }
  if (m_headphotourl_ != &::google::protobuf::internal::kEmptyString) {
    delete m_headphotourl_;
  }
  if (m_reallypos_ != &::google::protobuf::internal::kEmptyString) {
    delete m_reallypos_;
  }
  if (this != default_instance_) {
  }
}

void GM_ReconnectPlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ReconnectPlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ReconnectPlayerData_descriptor_;
}

const GM_ReconnectPlayerData& GM_ReconnectPlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_2etxt();
  return *default_instance_;
}

GM_ReconnectPlayerData* GM_ReconnectPlayerData::default_instance_ = NULL;

GM_ReconnectPlayerData* GM_ReconnectPlayerData::New() const {
  return new GM_ReconnectPlayerData;
}

void GM_ReconnectPlayerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_gold_ = GOOGLE_LONGLONG(0);
    m_headphoto_ = 0;
    m_catatertype_ = 0;
    m_postion_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_sex_ = 0;
    m_handcardnum_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_headframe_ = 0;
    if (has_m_nickname()) {
      if (m_nickname_ != &::google::protobuf::internal::kEmptyString) {
        m_nickname_->clear();
      }
    }
    if (has_m_headphotourl()) {
      if (m_headphotourl_ != &::google::protobuf::internal::kEmptyString) {
        m_headphotourl_->clear();
      }
    }
    m_isauto_ = 0;
    m_totalscore_ = 0;
    m_isready_ = 0;
    m_rolevoice_ = 0;
    m_cardvoice_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_longitude_ = 0;
    m_latitude_ = 0;
    if (has_m_reallypos()) {
      if (m_reallypos_ != &::google::protobuf::internal::kEmptyString) {
        m_reallypos_->clear();
      }
    }
    m_dingstate_ = 0;
  }
  m_outhandcard_.Clear();
  m_funhandcardlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ReconnectPlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_Gold;
        break;
      }

      // optional int64 m_Gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_gold_)));
          set_has_m_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_HeadPhoto;
        break;
      }

      // optional int32 m_HeadPhoto = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_HeadPhoto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_headphoto_)));
          set_has_m_headphoto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_CataterType;
        break;
      }

      // optional int32 m_CataterType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_CataterType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_catatertype_)));
          set_has_m_catatertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_Postion;
        break;
      }

      // optional int32 m_Postion = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Postion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_postion_)));
          set_has_m_postion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_Name;
        break;
      }

      // optional string m_Name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_Sex;
        break;
      }

      // optional int32 m_Sex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sex_)));
          set_has_m_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_handCardNum;
        break;
      }

      // optional int32 m_handCardNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_handCardNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_handcardnum_)));
          set_has_m_handcardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_HeadFrame;
        break;
      }

      // optional int32 m_HeadFrame = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_HeadFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_headframe_)));
          set_has_m_headframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_NickName;
        break;
      }

      // optional string m_NickName = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_NickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_nickname().data(), this->m_nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_m_HeadPhotoUrl;
        break;
      }

      // optional string m_HeadPhotoUrl = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_HeadPhotoUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_headphotourl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_headphotourl().data(), this->m_headphotourl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_IsAuto;
        break;
      }

      // optional int32 m_IsAuto = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_IsAuto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_isauto_)));
          set_has_m_isauto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_TotalScore;
        break;
      }

      // optional int32 m_TotalScore = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_TotalScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_totalscore_)));
          set_has_m_totalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_IsReady;
        break;
      }

      // optional int32 m_IsReady = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_IsReady:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_isready_)));
          set_has_m_isready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_RoleVoice;
        break;
      }

      // optional int32 m_RoleVoice = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_RoleVoice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rolevoice_)));
          set_has_m_rolevoice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_CardVoice;
        break;
      }

      // optional int32 m_CardVoice = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_CardVoice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cardvoice_)));
          set_has_m_cardvoice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_m_Longitude;
        break;
      }

      // optional double m_Longitude = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m_Longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m_longitude_)));
          set_has_m_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_m_Latitude;
        break;
      }

      // optional double m_Latitude = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m_Latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m_latitude_)));
          set_has_m_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_m_reallyPos;
        break;
      }

      // optional string m_reallyPos = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_reallyPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_reallypos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_reallypos().data(), this->m_reallypos().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_m_DingState;
        break;
      }

      // optional int32 m_DingState = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_DingState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_dingstate_)));
          set_has_m_dingstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_m_OutHandCard;
        break;
      }

      // repeated .GM_PlayerHandCard m_OutHandCard = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_OutHandCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_outhandcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_m_OutHandCard;
        if (input->ExpectTag(210)) goto parse_m_FunHandCardList;
        break;
      }

      // repeated .GM_ReconnectFunHandCard m_FunHandCardList = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_FunHandCardList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_funhandcardlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_m_FunHandCardList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ReconnectPlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int64 m_Gold = 2;
  if (has_m_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_gold(), output);
  }

  // optional int32 m_HeadPhoto = 3;
  if (has_m_headphoto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_headphoto(), output);
  }

  // optional int32 m_CataterType = 4;
  if (has_m_catatertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_catatertype(), output);
  }

  // optional int32 m_Postion = 5;
  if (has_m_postion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_postion(), output);
  }

  // optional string m_Name = 6;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->m_name(), output);
  }

  // optional int32 m_Sex = 7;
  if (has_m_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_sex(), output);
  }

  // optional int32 m_handCardNum = 8;
  if (has_m_handcardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_handcardnum(), output);
  }

  // optional int32 m_HeadFrame = 9;
  if (has_m_headframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_headframe(), output);
  }

  // optional string m_NickName = 10;
  if (has_m_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_nickname().data(), this->m_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->m_nickname(), output);
  }

  // optional string m_HeadPhotoUrl = 11;
  if (has_m_headphotourl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_headphotourl().data(), this->m_headphotourl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->m_headphotourl(), output);
  }

  // optional int32 m_IsAuto = 12;
  if (has_m_isauto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_isauto(), output);
  }

  // optional int32 m_TotalScore = 13;
  if (has_m_totalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_totalscore(), output);
  }

  // optional int32 m_IsReady = 14;
  if (has_m_isready()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_isready(), output);
  }

  // optional int32 m_RoleVoice = 15;
  if (has_m_rolevoice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_rolevoice(), output);
  }

  // optional int32 m_CardVoice = 16;
  if (has_m_cardvoice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_cardvoice(), output);
  }

  // optional double m_Longitude = 17;
  if (has_m_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->m_longitude(), output);
  }

  // optional double m_Latitude = 18;
  if (has_m_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->m_latitude(), output);
  }

  // optional string m_reallyPos = 19;
  if (has_m_reallypos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_reallypos().data(), this->m_reallypos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->m_reallypos(), output);
  }

  // optional int32 m_DingState = 20;
  if (has_m_dingstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->m_dingstate(), output);
  }

  // repeated .GM_PlayerHandCard m_OutHandCard = 25;
  for (int i = 0; i < this->m_outhandcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->m_outhandcard(i), output);
  }

  // repeated .GM_ReconnectFunHandCard m_FunHandCardList = 26;
  for (int i = 0; i < this->m_funhandcardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->m_funhandcardlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ReconnectPlayerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int64 m_Gold = 2;
  if (has_m_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_gold(), target);
  }

  // optional int32 m_HeadPhoto = 3;
  if (has_m_headphoto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_headphoto(), target);
  }

  // optional int32 m_CataterType = 4;
  if (has_m_catatertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_catatertype(), target);
  }

  // optional int32 m_Postion = 5;
  if (has_m_postion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_postion(), target);
  }

  // optional string m_Name = 6;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->m_name(), target);
  }

  // optional int32 m_Sex = 7;
  if (has_m_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_sex(), target);
  }

  // optional int32 m_handCardNum = 8;
  if (has_m_handcardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_handcardnum(), target);
  }

  // optional int32 m_HeadFrame = 9;
  if (has_m_headframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_headframe(), target);
  }

  // optional string m_NickName = 10;
  if (has_m_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_nickname().data(), this->m_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->m_nickname(), target);
  }

  // optional string m_HeadPhotoUrl = 11;
  if (has_m_headphotourl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_headphotourl().data(), this->m_headphotourl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->m_headphotourl(), target);
  }

  // optional int32 m_IsAuto = 12;
  if (has_m_isauto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_isauto(), target);
  }

  // optional int32 m_TotalScore = 13;
  if (has_m_totalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_totalscore(), target);
  }

  // optional int32 m_IsReady = 14;
  if (has_m_isready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_isready(), target);
  }

  // optional int32 m_RoleVoice = 15;
  if (has_m_rolevoice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_rolevoice(), target);
  }

  // optional int32 m_CardVoice = 16;
  if (has_m_cardvoice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->m_cardvoice(), target);
  }

  // optional double m_Longitude = 17;
  if (has_m_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->m_longitude(), target);
  }

  // optional double m_Latitude = 18;
  if (has_m_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->m_latitude(), target);
  }

  // optional string m_reallyPos = 19;
  if (has_m_reallypos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_reallypos().data(), this->m_reallypos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->m_reallypos(), target);
  }

  // optional int32 m_DingState = 20;
  if (has_m_dingstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->m_dingstate(), target);
  }

  // repeated .GM_PlayerHandCard m_OutHandCard = 25;
  for (int i = 0; i < this->m_outhandcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->m_outhandcard(i), target);
  }

  // repeated .GM_ReconnectFunHandCard m_FunHandCardList = 26;
  for (int i = 0; i < this->m_funhandcardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->m_funhandcardlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ReconnectPlayerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int64 m_Gold = 2;
    if (has_m_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_gold());
    }

    // optional int32 m_HeadPhoto = 3;
    if (has_m_headphoto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_headphoto());
    }

    // optional int32 m_CataterType = 4;
    if (has_m_catatertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_catatertype());
    }

    // optional int32 m_Postion = 5;
    if (has_m_postion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_postion());
    }

    // optional string m_Name = 6;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_Sex = 7;
    if (has_m_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sex());
    }

    // optional int32 m_handCardNum = 8;
    if (has_m_handcardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_handcardnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_HeadFrame = 9;
    if (has_m_headframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_headframe());
    }

    // optional string m_NickName = 10;
    if (has_m_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_nickname());
    }

    // optional string m_HeadPhotoUrl = 11;
    if (has_m_headphotourl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_headphotourl());
    }

    // optional int32 m_IsAuto = 12;
    if (has_m_isauto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_isauto());
    }

    // optional int32 m_TotalScore = 13;
    if (has_m_totalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_totalscore());
    }

    // optional int32 m_IsReady = 14;
    if (has_m_isready()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_isready());
    }

    // optional int32 m_RoleVoice = 15;
    if (has_m_rolevoice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rolevoice());
    }

    // optional int32 m_CardVoice = 16;
    if (has_m_cardvoice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cardvoice());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double m_Longitude = 17;
    if (has_m_longitude()) {
      total_size += 2 + 8;
    }

    // optional double m_Latitude = 18;
    if (has_m_latitude()) {
      total_size += 2 + 8;
    }

    // optional string m_reallyPos = 19;
    if (has_m_reallypos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_reallypos());
    }

    // optional int32 m_DingState = 20;
    if (has_m_dingstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_dingstate());
    }

  }
  // repeated .GM_PlayerHandCard m_OutHandCard = 25;
  total_size += 2 * this->m_outhandcard_size();
  for (int i = 0; i < this->m_outhandcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_outhandcard(i));
  }

  // repeated .GM_ReconnectFunHandCard m_FunHandCardList = 26;
  total_size += 2 * this->m_funhandcardlist_size();
  for (int i = 0; i < this->m_funhandcardlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_funhandcardlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ReconnectPlayerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ReconnectPlayerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ReconnectPlayerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ReconnectPlayerData::MergeFrom(const GM_ReconnectPlayerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_outhandcard_.MergeFrom(from.m_outhandcard_);
  m_funhandcardlist_.MergeFrom(from.m_funhandcardlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_gold()) {
      set_m_gold(from.m_gold());
    }
    if (from.has_m_headphoto()) {
      set_m_headphoto(from.m_headphoto());
    }
    if (from.has_m_catatertype()) {
      set_m_catatertype(from.m_catatertype());
    }
    if (from.has_m_postion()) {
      set_m_postion(from.m_postion());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_sex()) {
      set_m_sex(from.m_sex());
    }
    if (from.has_m_handcardnum()) {
      set_m_handcardnum(from.m_handcardnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_headframe()) {
      set_m_headframe(from.m_headframe());
    }
    if (from.has_m_nickname()) {
      set_m_nickname(from.m_nickname());
    }
    if (from.has_m_headphotourl()) {
      set_m_headphotourl(from.m_headphotourl());
    }
    if (from.has_m_isauto()) {
      set_m_isauto(from.m_isauto());
    }
    if (from.has_m_totalscore()) {
      set_m_totalscore(from.m_totalscore());
    }
    if (from.has_m_isready()) {
      set_m_isready(from.m_isready());
    }
    if (from.has_m_rolevoice()) {
      set_m_rolevoice(from.m_rolevoice());
    }
    if (from.has_m_cardvoice()) {
      set_m_cardvoice(from.m_cardvoice());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_longitude()) {
      set_m_longitude(from.m_longitude());
    }
    if (from.has_m_latitude()) {
      set_m_latitude(from.m_latitude());
    }
    if (from.has_m_reallypos()) {
      set_m_reallypos(from.m_reallypos());
    }
    if (from.has_m_dingstate()) {
      set_m_dingstate(from.m_dingstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ReconnectPlayerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ReconnectPlayerData::CopyFrom(const GM_ReconnectPlayerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ReconnectPlayerData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_outhandcard_size(); i++) {
    if (!this->m_outhandcard(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_funhandcardlist_size(); i++) {
    if (!this->m_funhandcardlist(i).IsInitialized()) return false;
  }
  return true;
}

void GM_ReconnectPlayerData::Swap(GM_ReconnectPlayerData* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_gold_, other->m_gold_);
    std::swap(m_headphoto_, other->m_headphoto_);
    std::swap(m_catatertype_, other->m_catatertype_);
    std::swap(m_postion_, other->m_postion_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_sex_, other->m_sex_);
    std::swap(m_handcardnum_, other->m_handcardnum_);
    std::swap(m_headframe_, other->m_headframe_);
    std::swap(m_nickname_, other->m_nickname_);
    std::swap(m_headphotourl_, other->m_headphotourl_);
    std::swap(m_isauto_, other->m_isauto_);
    std::swap(m_totalscore_, other->m_totalscore_);
    std::swap(m_isready_, other->m_isready_);
    std::swap(m_rolevoice_, other->m_rolevoice_);
    std::swap(m_cardvoice_, other->m_cardvoice_);
    std::swap(m_longitude_, other->m_longitude_);
    std::swap(m_latitude_, other->m_latitude_);
    std::swap(m_reallypos_, other->m_reallypos_);
    std::swap(m_dingstate_, other->m_dingstate_);
    m_outhandcard_.Swap(&other->m_outhandcard_);
    m_funhandcardlist_.Swap(&other->m_funhandcardlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ReconnectPlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ReconnectPlayerData_descriptor_;
  metadata.reflection = GM_ReconnectPlayerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ReconnectCloseRoomData::kMRoleidFieldNumber;
const int GM_ReconnectCloseRoomData::kMStateFieldNumber;
#endif  // !_MSC_VER

GM_ReconnectCloseRoomData::GM_ReconnectCloseRoomData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ReconnectCloseRoomData::InitAsDefaultInstance() {
}

GM_ReconnectCloseRoomData::GM_ReconnectCloseRoomData(const GM_ReconnectCloseRoomData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ReconnectCloseRoomData::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ReconnectCloseRoomData::~GM_ReconnectCloseRoomData() {
  SharedDtor();
}

void GM_ReconnectCloseRoomData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ReconnectCloseRoomData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ReconnectCloseRoomData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ReconnectCloseRoomData_descriptor_;
}

const GM_ReconnectCloseRoomData& GM_ReconnectCloseRoomData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_2etxt();
  return *default_instance_;
}

GM_ReconnectCloseRoomData* GM_ReconnectCloseRoomData::default_instance_ = NULL;

GM_ReconnectCloseRoomData* GM_ReconnectCloseRoomData::New() const {
  return new GM_ReconnectCloseRoomData;
}

void GM_ReconnectCloseRoomData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ReconnectCloseRoomData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_state;
        break;
      }

      // optional int32 m_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ReconnectCloseRoomData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int32 m_state = 2;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ReconnectCloseRoomData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int32 m_state = 2;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ReconnectCloseRoomData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_state = 2;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ReconnectCloseRoomData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ReconnectCloseRoomData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ReconnectCloseRoomData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ReconnectCloseRoomData::MergeFrom(const GM_ReconnectCloseRoomData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ReconnectCloseRoomData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ReconnectCloseRoomData::CopyFrom(const GM_ReconnectCloseRoomData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ReconnectCloseRoomData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_ReconnectCloseRoomData::Swap(GM_ReconnectCloseRoomData* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_state_, other->m_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ReconnectCloseRoomData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ReconnectCloseRoomData_descriptor_;
  metadata.reflection = GM_ReconnectCloseRoomData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ReconnectFunHandCard::kMOperatorTypeFieldNumber;
const int GM_ReconnectFunHandCard::kMFunHandCardFieldNumber;
#endif  // !_MSC_VER

GM_ReconnectFunHandCard::GM_ReconnectFunHandCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ReconnectFunHandCard::InitAsDefaultInstance() {
}

GM_ReconnectFunHandCard::GM_ReconnectFunHandCard(const GM_ReconnectFunHandCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ReconnectFunHandCard::SharedCtor() {
  _cached_size_ = 0;
  m_operatortype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ReconnectFunHandCard::~GM_ReconnectFunHandCard() {
  SharedDtor();
}

void GM_ReconnectFunHandCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ReconnectFunHandCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ReconnectFunHandCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ReconnectFunHandCard_descriptor_;
}

const GM_ReconnectFunHandCard& GM_ReconnectFunHandCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_2etxt();
  return *default_instance_;
}

GM_ReconnectFunHandCard* GM_ReconnectFunHandCard::default_instance_ = NULL;

GM_ReconnectFunHandCard* GM_ReconnectFunHandCard::New() const {
  return new GM_ReconnectFunHandCard;
}

void GM_ReconnectFunHandCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_operatortype_ = 0;
  }
  m_funhandcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ReconnectFunHandCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_OperatorType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_operatortype_)));
          set_has_m_operatortype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_FunHandCard;
        break;
      }

      // repeated .GM_PlayerFunHandCard m_FunHandCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_FunHandCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_funhandcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_FunHandCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ReconnectFunHandCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_OperatorType = 1;
  if (has_m_operatortype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_operatortype(), output);
  }

  // repeated .GM_PlayerFunHandCard m_FunHandCard = 2;
  for (int i = 0; i < this->m_funhandcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_funhandcard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ReconnectFunHandCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_OperatorType = 1;
  if (has_m_operatortype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_operatortype(), target);
  }

  // repeated .GM_PlayerFunHandCard m_FunHandCard = 2;
  for (int i = 0; i < this->m_funhandcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_funhandcard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ReconnectFunHandCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_OperatorType = 1;
    if (has_m_operatortype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_operatortype());
    }

  }
  // repeated .GM_PlayerFunHandCard m_FunHandCard = 2;
  total_size += 1 * this->m_funhandcard_size();
  for (int i = 0; i < this->m_funhandcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_funhandcard(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ReconnectFunHandCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ReconnectFunHandCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ReconnectFunHandCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ReconnectFunHandCard::MergeFrom(const GM_ReconnectFunHandCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_funhandcard_.MergeFrom(from.m_funhandcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_operatortype()) {
      set_m_operatortype(from.m_operatortype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ReconnectFunHandCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ReconnectFunHandCard::CopyFrom(const GM_ReconnectFunHandCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ReconnectFunHandCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_funhandcard_size(); i++) {
    if (!this->m_funhandcard(i).IsInitialized()) return false;
  }
  return true;
}

void GM_ReconnectFunHandCard::Swap(GM_ReconnectFunHandCard* other) {
  if (other != this) {
    std::swap(m_operatortype_, other->m_operatortype_);
    m_funhandcard_.Swap(&other->m_funhandcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ReconnectFunHandCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ReconnectFunHandCard_descriptor_;
  metadata.reflection = GM_ReconnectFunHandCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PlayerFunHandCard::kMIndexFieldNumber;
const int GM_PlayerFunHandCard::kMTypeFieldNumber;
const int GM_PlayerFunHandCard::kMRoleIdFieldNumber;
#endif  // !_MSC_VER

GM_PlayerFunHandCard::GM_PlayerFunHandCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PlayerFunHandCard::InitAsDefaultInstance() {
}

GM_PlayerFunHandCard::GM_PlayerFunHandCard(const GM_PlayerFunHandCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PlayerFunHandCard::SharedCtor() {
  _cached_size_ = 0;
  m_index_ = 0;
  m_type_ = 0;
  m_roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PlayerFunHandCard::~GM_PlayerFunHandCard() {
  SharedDtor();
}

void GM_PlayerFunHandCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PlayerFunHandCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PlayerFunHandCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PlayerFunHandCard_descriptor_;
}

const GM_PlayerFunHandCard& GM_PlayerFunHandCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_2etxt();
  return *default_instance_;
}

GM_PlayerFunHandCard* GM_PlayerFunHandCard::default_instance_ = NULL;

GM_PlayerFunHandCard* GM_PlayerFunHandCard::New() const {
  return new GM_PlayerFunHandCard;
}

void GM_PlayerFunHandCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_index_ = 0;
    m_type_ = 0;
    m_roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PlayerFunHandCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_index_)));
          set_has_m_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_Type;
        break;
      }

      // optional int32 m_Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_RoleId;
        break;
      }

      // optional int32 m_RoleId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_RoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PlayerFunHandCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Index = 1;
  if (has_m_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_index(), output);
  }

  // optional int32 m_Type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional int32 m_RoleId = 3;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PlayerFunHandCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Index = 1;
  if (has_m_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_index(), target);
  }

  // optional int32 m_Type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional int32 m_RoleId = 3;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PlayerFunHandCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Index = 1;
    if (has_m_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_index());
    }

    // optional int32 m_Type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_RoleId = 3;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PlayerFunHandCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PlayerFunHandCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PlayerFunHandCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PlayerFunHandCard::MergeFrom(const GM_PlayerFunHandCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_index()) {
      set_m_index(from.m_index());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PlayerFunHandCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PlayerFunHandCard::CopyFrom(const GM_PlayerFunHandCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PlayerFunHandCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_PlayerFunHandCard::Swap(GM_PlayerFunHandCard* other) {
  if (other != this) {
    std::swap(m_index_, other->m_index_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PlayerFunHandCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PlayerFunHandCard_descriptor_;
  metadata.reflection = GM_PlayerFunHandCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_MJCardRoomResult::kMCountFieldNumber;
const int GM_MJCardRoomResult::kMOneDataFieldNumber;
#endif  // !_MSC_VER

GM_MJCardRoomResult::GM_MJCardRoomResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_MJCardRoomResult::InitAsDefaultInstance() {
}

GM_MJCardRoomResult::GM_MJCardRoomResult(const GM_MJCardRoomResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_MJCardRoomResult::SharedCtor() {
  _cached_size_ = 0;
  m_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_MJCardRoomResult::~GM_MJCardRoomResult() {
  SharedDtor();
}

void GM_MJCardRoomResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_MJCardRoomResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_MJCardRoomResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_MJCardRoomResult_descriptor_;
}

const GM_MJCardRoomResult& GM_MJCardRoomResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_2etxt();
  return *default_instance_;
}

GM_MJCardRoomResult* GM_MJCardRoomResult::default_instance_ = NULL;

GM_MJCardRoomResult* GM_MJCardRoomResult::New() const {
  return new GM_MJCardRoomResult;
}

void GM_MJCardRoomResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_count_ = 0;
  }
  m_onedata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_MJCardRoomResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_OneData;
        break;
      }

      // repeated .GM_MJCardRoomOneData m_OneData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_OneData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_onedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_OneData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_MJCardRoomResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_count = 1;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_count(), output);
  }

  // repeated .GM_MJCardRoomOneData m_OneData = 2;
  for (int i = 0; i < this->m_onedata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_onedata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_MJCardRoomResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_count = 1;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_count(), target);
  }

  // repeated .GM_MJCardRoomOneData m_OneData = 2;
  for (int i = 0; i < this->m_onedata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_onedata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_MJCardRoomResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_count = 1;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_count());
    }

  }
  // repeated .GM_MJCardRoomOneData m_OneData = 2;
  total_size += 1 * this->m_onedata_size();
  for (int i = 0; i < this->m_onedata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_onedata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_MJCardRoomResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_MJCardRoomResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_MJCardRoomResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_MJCardRoomResult::MergeFrom(const GM_MJCardRoomResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_onedata_.MergeFrom(from.m_onedata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_MJCardRoomResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_MJCardRoomResult::CopyFrom(const GM_MJCardRoomResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_MJCardRoomResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_onedata_size(); i++) {
    if (!this->m_onedata(i).IsInitialized()) return false;
  }
  return true;
}

void GM_MJCardRoomResult::Swap(GM_MJCardRoomResult* other) {
  if (other != this) {
    std::swap(m_count_, other->m_count_);
    m_onedata_.Swap(&other->m_onedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_MJCardRoomResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_MJCardRoomResult_descriptor_;
  metadata.reflection = GM_MJCardRoomResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_MJCardRoomOneData::kMCountFieldNumber;
const int GM_MJCardRoomOneData::kMResultInfoFieldNumber;
#endif  // !_MSC_VER

GM_MJCardRoomOneData::GM_MJCardRoomOneData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_MJCardRoomOneData::InitAsDefaultInstance() {
}

GM_MJCardRoomOneData::GM_MJCardRoomOneData(const GM_MJCardRoomOneData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_MJCardRoomOneData::SharedCtor() {
  _cached_size_ = 0;
  m_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_MJCardRoomOneData::~GM_MJCardRoomOneData() {
  SharedDtor();
}

void GM_MJCardRoomOneData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_MJCardRoomOneData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_MJCardRoomOneData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_MJCardRoomOneData_descriptor_;
}

const GM_MJCardRoomOneData& GM_MJCardRoomOneData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_2etxt();
  return *default_instance_;
}

GM_MJCardRoomOneData* GM_MJCardRoomOneData::default_instance_ = NULL;

GM_MJCardRoomOneData* GM_MJCardRoomOneData::New() const {
  return new GM_MJCardRoomOneData;
}

void GM_MJCardRoomOneData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_count_ = 0;
  }
  m_resultinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_MJCardRoomOneData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_ResultInfo;
        break;
      }

      // repeated .GM_PlayerResultInfo m_ResultInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ResultInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_resultinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_ResultInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_MJCardRoomOneData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_count = 1;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_count(), output);
  }

  // repeated .GM_PlayerResultInfo m_ResultInfo = 2;
  for (int i = 0; i < this->m_resultinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_resultinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_MJCardRoomOneData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_count = 1;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_count(), target);
  }

  // repeated .GM_PlayerResultInfo m_ResultInfo = 2;
  for (int i = 0; i < this->m_resultinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_resultinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_MJCardRoomOneData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_count = 1;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_count());
    }

  }
  // repeated .GM_PlayerResultInfo m_ResultInfo = 2;
  total_size += 1 * this->m_resultinfo_size();
  for (int i = 0; i < this->m_resultinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_resultinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_MJCardRoomOneData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_MJCardRoomOneData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_MJCardRoomOneData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_MJCardRoomOneData::MergeFrom(const GM_MJCardRoomOneData& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_resultinfo_.MergeFrom(from.m_resultinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_MJCardRoomOneData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_MJCardRoomOneData::CopyFrom(const GM_MJCardRoomOneData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_MJCardRoomOneData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_resultinfo_size(); i++) {
    if (!this->m_resultinfo(i).IsInitialized()) return false;
  }
  return true;
}

void GM_MJCardRoomOneData::Swap(GM_MJCardRoomOneData* other) {
  if (other != this) {
    std::swap(m_count_, other->m_count_);
    m_resultinfo_.Swap(&other->m_resultinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_MJCardRoomOneData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_MJCardRoomOneData_descriptor_;
  metadata.reflection = GM_MJCardRoomOneData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PlayerResultInfo::kMRoleidFieldNumber;
const int GM_PlayerResultInfo::kMScoreFieldNumber;
const int GM_PlayerResultInfo::kMSexFieldNumber;
const int GM_PlayerResultInfo::kMCongguanFieldNumber;
const int GM_PlayerResultInfo::kMBawangFieldNumber;
const int GM_PlayerResultInfo::kMVipLevelFieldNumber;
const int GM_PlayerResultInfo::kMNameFieldNumber;
const int GM_PlayerResultInfo::kMHeadUrlFieldNumber;
const int GM_PlayerResultInfo::kMIdFieldNumber;
#endif  // !_MSC_VER

GM_PlayerResultInfo::GM_PlayerResultInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PlayerResultInfo::InitAsDefaultInstance() {
}

GM_PlayerResultInfo::GM_PlayerResultInfo(const GM_PlayerResultInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PlayerResultInfo::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_score_ = 0;
  m_sex_ = 0;
  m_congguan_ = 0;
  m_bawang_ = 0;
  m_viplevel_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_headurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PlayerResultInfo::~GM_PlayerResultInfo() {
  SharedDtor();
}

void GM_PlayerResultInfo::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_headurl_ != &::google::protobuf::internal::kEmptyString) {
    delete m_headurl_;
  }
  if (m_id_ != &::google::protobuf::internal::kEmptyString) {
    delete m_id_;
  }
  if (this != default_instance_) {
  }
}

void GM_PlayerResultInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PlayerResultInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PlayerResultInfo_descriptor_;
}

const GM_PlayerResultInfo& GM_PlayerResultInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_2etxt();
  return *default_instance_;
}

GM_PlayerResultInfo* GM_PlayerResultInfo::default_instance_ = NULL;

GM_PlayerResultInfo* GM_PlayerResultInfo::New() const {
  return new GM_PlayerResultInfo;
}

void GM_PlayerResultInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_score_ = 0;
    m_sex_ = 0;
    m_congguan_ = 0;
    m_bawang_ = 0;
    m_viplevel_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    if (has_m_headurl()) {
      if (m_headurl_ != &::google::protobuf::internal::kEmptyString) {
        m_headurl_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_m_id()) {
      if (m_id_ != &::google::protobuf::internal::kEmptyString) {
        m_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PlayerResultInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_score;
        break;
      }

      // optional int32 m_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_score_)));
          set_has_m_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_sex;
        break;
      }

      // optional int32 m_sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sex_)));
          set_has_m_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_congguan;
        break;
      }

      // optional int32 m_congguan = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_congguan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_congguan_)));
          set_has_m_congguan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_bawang;
        break;
      }

      // optional int32 m_bawang = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bawang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bawang_)));
          set_has_m_bawang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_vipLevel;
        break;
      }

      // optional int32 m_vipLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_viplevel_)));
          set_has_m_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_name;
        break;
      }

      // optional string m_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_headUrl;
        break;
      }

      // optional string m_headUrl = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_headUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_headurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_headurl().data(), this->m_headurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_id;
        break;
      }

      // optional string m_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_id().data(), this->m_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PlayerResultInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int32 m_score = 2;
  if (has_m_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_score(), output);
  }

  // optional int32 m_sex = 3;
  if (has_m_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_sex(), output);
  }

  // optional int32 m_congguan = 4;
  if (has_m_congguan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_congguan(), output);
  }

  // optional int32 m_bawang = 5;
  if (has_m_bawang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_bawang(), output);
  }

  // optional int32 m_vipLevel = 6;
  if (has_m_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_viplevel(), output);
  }

  // optional string m_name = 7;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m_name(), output);
  }

  // optional string m_headUrl = 8;
  if (has_m_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_headurl().data(), this->m_headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->m_headurl(), output);
  }

  // optional string m_id = 9;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_id().data(), this->m_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PlayerResultInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int32 m_score = 2;
  if (has_m_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_score(), target);
  }

  // optional int32 m_sex = 3;
  if (has_m_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_sex(), target);
  }

  // optional int32 m_congguan = 4;
  if (has_m_congguan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_congguan(), target);
  }

  // optional int32 m_bawang = 5;
  if (has_m_bawang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_bawang(), target);
  }

  // optional int32 m_vipLevel = 6;
  if (has_m_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_viplevel(), target);
  }

  // optional string m_name = 7;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->m_name(), target);
  }

  // optional string m_headUrl = 8;
  if (has_m_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_headurl().data(), this->m_headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->m_headurl(), target);
  }

  // optional string m_id = 9;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_id().data(), this->m_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PlayerResultInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_score = 2;
    if (has_m_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_score());
    }

    // optional int32 m_sex = 3;
    if (has_m_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sex());
    }

    // optional int32 m_congguan = 4;
    if (has_m_congguan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_congguan());
    }

    // optional int32 m_bawang = 5;
    if (has_m_bawang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bawang());
    }

    // optional int32 m_vipLevel = 6;
    if (has_m_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_viplevel());
    }

    // optional string m_name = 7;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional string m_headUrl = 8;
    if (has_m_headurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_headurl());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string m_id = 9;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PlayerResultInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PlayerResultInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PlayerResultInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PlayerResultInfo::MergeFrom(const GM_PlayerResultInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_score()) {
      set_m_score(from.m_score());
    }
    if (from.has_m_sex()) {
      set_m_sex(from.m_sex());
    }
    if (from.has_m_congguan()) {
      set_m_congguan(from.m_congguan());
    }
    if (from.has_m_bawang()) {
      set_m_bawang(from.m_bawang());
    }
    if (from.has_m_viplevel()) {
      set_m_viplevel(from.m_viplevel());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_headurl()) {
      set_m_headurl(from.m_headurl());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PlayerResultInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PlayerResultInfo::CopyFrom(const GM_PlayerResultInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PlayerResultInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_PlayerResultInfo::Swap(GM_PlayerResultInfo* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_score_, other->m_score_);
    std::swap(m_sex_, other->m_sex_);
    std::swap(m_congguan_, other->m_congguan_);
    std::swap(m_bawang_, other->m_bawang_);
    std::swap(m_viplevel_, other->m_viplevel_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_headurl_, other->m_headurl_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PlayerResultInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PlayerResultInfo_descriptor_;
  metadata.reflection = GM_PlayerResultInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PlayerRollRequest::kMRoleidFieldNumber;
const int GM_PlayerRollRequest::kMPosFieldNumber;
#endif  // !_MSC_VER

GM_PlayerRollRequest::GM_PlayerRollRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PlayerRollRequest::InitAsDefaultInstance() {
}

GM_PlayerRollRequest::GM_PlayerRollRequest(const GM_PlayerRollRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PlayerRollRequest::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PlayerRollRequest::~GM_PlayerRollRequest() {
  SharedDtor();
}

void GM_PlayerRollRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PlayerRollRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PlayerRollRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PlayerRollRequest_descriptor_;
}

const GM_PlayerRollRequest& GM_PlayerRollRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_2etxt();
  return *default_instance_;
}

GM_PlayerRollRequest* GM_PlayerRollRequest::default_instance_ = NULL;

GM_PlayerRollRequest* GM_PlayerRollRequest::New() const {
  return new GM_PlayerRollRequest;
}

void GM_PlayerRollRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PlayerRollRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_pos;
        break;
      }

      // optional int32 m_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pos_)));
          set_has_m_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PlayerRollRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int32 m_pos = 2;
  if (has_m_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PlayerRollRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int32 m_pos = 2;
  if (has_m_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PlayerRollRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_pos = 2;
    if (has_m_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PlayerRollRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PlayerRollRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PlayerRollRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PlayerRollRequest::MergeFrom(const GM_PlayerRollRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_pos()) {
      set_m_pos(from.m_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PlayerRollRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PlayerRollRequest::CopyFrom(const GM_PlayerRollRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PlayerRollRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_PlayerRollRequest::Swap(GM_PlayerRollRequest* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_pos_, other->m_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PlayerRollRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PlayerRollRequest_descriptor_;
  metadata.reflection = GM_PlayerRollRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PlayerRecivePack::kMRoleidFieldNumber;
const int GM_PlayerRecivePack::kMPackFlagFieldNumber;
#endif  // !_MSC_VER

GM_PlayerRecivePack::GM_PlayerRecivePack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PlayerRecivePack::InitAsDefaultInstance() {
}

GM_PlayerRecivePack::GM_PlayerRecivePack(const GM_PlayerRecivePack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PlayerRecivePack::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_packflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PlayerRecivePack::~GM_PlayerRecivePack() {
  SharedDtor();
}

void GM_PlayerRecivePack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PlayerRecivePack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PlayerRecivePack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PlayerRecivePack_descriptor_;
}

const GM_PlayerRecivePack& GM_PlayerRecivePack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_2etxt();
  return *default_instance_;
}

GM_PlayerRecivePack* GM_PlayerRecivePack::default_instance_ = NULL;

GM_PlayerRecivePack* GM_PlayerRecivePack::New() const {
  return new GM_PlayerRecivePack;
}

void GM_PlayerRecivePack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_packflag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PlayerRecivePack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_packFlag;
        break;
      }

      // optional int32 m_packFlag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_packFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_packflag_)));
          set_has_m_packflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PlayerRecivePack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int32 m_packFlag = 2;
  if (has_m_packflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_packflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PlayerRecivePack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int32 m_packFlag = 2;
  if (has_m_packflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_packflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PlayerRecivePack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_packFlag = 2;
    if (has_m_packflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_packflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PlayerRecivePack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PlayerRecivePack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PlayerRecivePack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PlayerRecivePack::MergeFrom(const GM_PlayerRecivePack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_packflag()) {
      set_m_packflag(from.m_packflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PlayerRecivePack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PlayerRecivePack::CopyFrom(const GM_PlayerRecivePack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PlayerRecivePack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_PlayerRecivePack::Swap(GM_PlayerRecivePack* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_packflag_, other->m_packflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PlayerRecivePack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PlayerRecivePack_descriptor_;
  metadata.reflection = GM_PlayerRecivePack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
