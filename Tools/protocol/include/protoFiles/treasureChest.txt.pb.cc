// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: treasureChest.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "treasureChest.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_TreasureChestInfo_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_TreasureChestInfo_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_TreasureChestSubInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_TreasureChestSubInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_TreasureChestOpen_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_TreasureChestOpen_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_TreasureChestGetObject_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_TreasureChestGetObject_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_TreasureChestGetSubObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_TreasureChestGetSubObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_TreasureTokenOpen_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_TreasureTokenOpen_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_TreasureTokenetObject_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_TreasureTokenetObject_Return_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_treasureChest_2etxt() {
  protobuf_AddDesc_treasureChest_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "treasureChest.txt");
  GOOGLE_CHECK(file != NULL);
  GM_TreasureChestInfo_Return_descriptor_ = file->message_type(0);
  static const int GM_TreasureChestInfo_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureChestInfo_Return, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureChestInfo_Return, subbox_),
  };
  GM_TreasureChestInfo_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_TreasureChestInfo_Return_descriptor_,
      GM_TreasureChestInfo_Return::default_instance_,
      GM_TreasureChestInfo_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureChestInfo_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureChestInfo_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_TreasureChestInfo_Return));
  GM_TreasureChestSubInfo_descriptor_ = file->message_type(1);
  static const int GM_TreasureChestSubInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureChestSubInfo, boxtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureChestSubInfo, costtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureChestSubInfo, numbertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureChestSubInfo, costnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureChestSubInfo, discount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureChestSubInfo, freetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureChestSubInfo, totalfreetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureChestSubInfo, lefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureChestSubInfo, buycount_),
  };
  GM_TreasureChestSubInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_TreasureChestSubInfo_descriptor_,
      GM_TreasureChestSubInfo::default_instance_,
      GM_TreasureChestSubInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureChestSubInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureChestSubInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_TreasureChestSubInfo));
  GM_TreasureChestOpen_Request_descriptor_ = file->message_type(2);
  static const int GM_TreasureChestOpen_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureChestOpen_Request, boxtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureChestOpen_Request, numbertype_),
  };
  GM_TreasureChestOpen_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_TreasureChestOpen_Request_descriptor_,
      GM_TreasureChestOpen_Request::default_instance_,
      GM_TreasureChestOpen_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureChestOpen_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureChestOpen_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_TreasureChestOpen_Request));
  GM_TreasureChestGetObject_Return_descriptor_ = file->message_type(3);
  static const int GM_TreasureChestGetObject_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureChestGetObject_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureChestGetObject_Return, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureChestGetObject_Return, subobject_),
  };
  GM_TreasureChestGetObject_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_TreasureChestGetObject_Return_descriptor_,
      GM_TreasureChestGetObject_Return::default_instance_,
      GM_TreasureChestGetObject_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureChestGetObject_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureChestGetObject_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_TreasureChestGetObject_Return));
  GM_TreasureChestGetSubObject_descriptor_ = file->message_type(4);
  static const int GM_TreasureChestGetSubObject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureChestGetSubObject, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureChestGetSubObject, number_),
  };
  GM_TreasureChestGetSubObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_TreasureChestGetSubObject_descriptor_,
      GM_TreasureChestGetSubObject::default_instance_,
      GM_TreasureChestGetSubObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureChestGetSubObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureChestGetSubObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_TreasureChestGetSubObject));
  GM_TreasureTokenOpen_Request_descriptor_ = file->message_type(5);
  static const int GM_TreasureTokenOpen_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureTokenOpen_Request, boxtokenid_),
  };
  GM_TreasureTokenOpen_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_TreasureTokenOpen_Request_descriptor_,
      GM_TreasureTokenOpen_Request::default_instance_,
      GM_TreasureTokenOpen_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureTokenOpen_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureTokenOpen_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_TreasureTokenOpen_Request));
  GM_TreasureTokenetObject_Return_descriptor_ = file->message_type(6);
  static const int GM_TreasureTokenetObject_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureTokenetObject_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureTokenetObject_Return, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureTokenetObject_Return, subobject_),
  };
  GM_TreasureTokenetObject_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_TreasureTokenetObject_Return_descriptor_,
      GM_TreasureTokenetObject_Return::default_instance_,
      GM_TreasureTokenetObject_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureTokenetObject_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TreasureTokenetObject_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_TreasureTokenetObject_Return));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_treasureChest_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_TreasureChestInfo_Return_descriptor_, &GM_TreasureChestInfo_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_TreasureChestSubInfo_descriptor_, &GM_TreasureChestSubInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_TreasureChestOpen_Request_descriptor_, &GM_TreasureChestOpen_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_TreasureChestGetObject_Return_descriptor_, &GM_TreasureChestGetObject_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_TreasureChestGetSubObject_descriptor_, &GM_TreasureChestGetSubObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_TreasureTokenOpen_Request_descriptor_, &GM_TreasureTokenOpen_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_TreasureTokenetObject_Return_descriptor_, &GM_TreasureTokenetObject_Return::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_treasureChest_2etxt() {
  delete GM_TreasureChestInfo_Return::default_instance_;
  delete GM_TreasureChestInfo_Return_reflection_;
  delete GM_TreasureChestSubInfo::default_instance_;
  delete GM_TreasureChestSubInfo_reflection_;
  delete GM_TreasureChestOpen_Request::default_instance_;
  delete GM_TreasureChestOpen_Request_reflection_;
  delete GM_TreasureChestGetObject_Return::default_instance_;
  delete GM_TreasureChestGetObject_Return_reflection_;
  delete GM_TreasureChestGetSubObject::default_instance_;
  delete GM_TreasureChestGetSubObject_reflection_;
  delete GM_TreasureTokenOpen_Request::default_instance_;
  delete GM_TreasureTokenOpen_Request_reflection_;
  delete GM_TreasureTokenetObject_Return::default_instance_;
  delete GM_TreasureTokenetObject_Return_reflection_;
}

void protobuf_AddDesc_treasureChest_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021treasureChest.txt\"V\n\033GM_TreasureChestI"
    "nfo_Return\022\r\n\005count\030\001 \002(\005\022(\n\006subBox\030\002 \003("
    "\0132\030.GM_TreasureChestSubInfo\"\302\001\n\027GM_Treas"
    "ureChestSubInfo\022\017\n\007boxType\030\001 \002(\005\022\020\n\010cost"
    "Type\030\002 \001(\005\022\022\n\nnumberType\030\003 \001(\005\022\017\n\007costNu"
    "m\030\004 \001(\005\022\020\n\010discount\030\005 \001(\002\022\021\n\tfreeTimes\030\006"
    " \001(\005\022\026\n\016totalFreeTimes\030\007 \001(\005\022\020\n\010leftTime"
    "\030\010 \001(\005\022\020\n\010BuyCount\030\t \001(\005\"C\n\034GM_TreasureC"
    "hestOpen_Request\022\017\n\007boxType\030\001 \002(\005\022\022\n\nnum"
    "berType\030\002 \001(\005\"s\n GM_TreasureChestGetObje"
    "ct_Return\022\016\n\006result\030\001 \002(\005\022\r\n\005count\030\002 \001(\005"
    "\0220\n\tsubObject\030\003 \003(\0132\035.GM_TreasureChestGe"
    "tSubObject\"@\n\034GM_TreasureChestGetSubObje"
    "ct\022\020\n\010objectId\030\001 \002(\005\022\016\n\006number\030\002 \001(\005\"2\n\034"
    "GM_TreasureTokenOpen_Request\022\022\n\nboxToken"
    "ID\030\001 \002(\005\"r\n\037GM_TreasureTokenetObject_Ret"
    "urn\022\016\n\006result\030\001 \002(\005\022\r\n\005count\030\002 \001(\005\0220\n\tsu"
    "bObject\030\003 \003(\0132\035.GM_TreasureChestGetSubOb"
    "ject", 724);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "treasureChest.txt", &protobuf_RegisterTypes);
  GM_TreasureChestInfo_Return::default_instance_ = new GM_TreasureChestInfo_Return();
  GM_TreasureChestSubInfo::default_instance_ = new GM_TreasureChestSubInfo();
  GM_TreasureChestOpen_Request::default_instance_ = new GM_TreasureChestOpen_Request();
  GM_TreasureChestGetObject_Return::default_instance_ = new GM_TreasureChestGetObject_Return();
  GM_TreasureChestGetSubObject::default_instance_ = new GM_TreasureChestGetSubObject();
  GM_TreasureTokenOpen_Request::default_instance_ = new GM_TreasureTokenOpen_Request();
  GM_TreasureTokenetObject_Return::default_instance_ = new GM_TreasureTokenetObject_Return();
  GM_TreasureChestInfo_Return::default_instance_->InitAsDefaultInstance();
  GM_TreasureChestSubInfo::default_instance_->InitAsDefaultInstance();
  GM_TreasureChestOpen_Request::default_instance_->InitAsDefaultInstance();
  GM_TreasureChestGetObject_Return::default_instance_->InitAsDefaultInstance();
  GM_TreasureChestGetSubObject::default_instance_->InitAsDefaultInstance();
  GM_TreasureTokenOpen_Request::default_instance_->InitAsDefaultInstance();
  GM_TreasureTokenetObject_Return::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_treasureChest_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_treasureChest_2etxt {
  StaticDescriptorInitializer_treasureChest_2etxt() {
    protobuf_AddDesc_treasureChest_2etxt();
  }
} static_descriptor_initializer_treasureChest_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_TreasureChestInfo_Return::kCountFieldNumber;
const int GM_TreasureChestInfo_Return::kSubBoxFieldNumber;
#endif  // !_MSC_VER

GM_TreasureChestInfo_Return::GM_TreasureChestInfo_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_TreasureChestInfo_Return::InitAsDefaultInstance() {
}

GM_TreasureChestInfo_Return::GM_TreasureChestInfo_Return(const GM_TreasureChestInfo_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_TreasureChestInfo_Return::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_TreasureChestInfo_Return::~GM_TreasureChestInfo_Return() {
  SharedDtor();
}

void GM_TreasureChestInfo_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_TreasureChestInfo_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_TreasureChestInfo_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_TreasureChestInfo_Return_descriptor_;
}

const GM_TreasureChestInfo_Return& GM_TreasureChestInfo_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasureChest_2etxt();
  return *default_instance_;
}

GM_TreasureChestInfo_Return* GM_TreasureChestInfo_Return::default_instance_ = NULL;

GM_TreasureChestInfo_Return* GM_TreasureChestInfo_Return::New() const {
  return new GM_TreasureChestInfo_Return;
}

void GM_TreasureChestInfo_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  subbox_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_TreasureChestInfo_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subBox;
        break;
      }

      // repeated .GM_TreasureChestSubInfo subBox = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subBox:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subbox()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subBox;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_TreasureChestInfo_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated .GM_TreasureChestSubInfo subBox = 2;
  for (int i = 0; i < this->subbox_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->subbox(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_TreasureChestInfo_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated .GM_TreasureChestSubInfo subBox = 2;
  for (int i = 0; i < this->subbox_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->subbox(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_TreasureChestInfo_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .GM_TreasureChestSubInfo subBox = 2;
  total_size += 1 * this->subbox_size();
  for (int i = 0; i < this->subbox_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subbox(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_TreasureChestInfo_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_TreasureChestInfo_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_TreasureChestInfo_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_TreasureChestInfo_Return::MergeFrom(const GM_TreasureChestInfo_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  subbox_.MergeFrom(from.subbox_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_TreasureChestInfo_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_TreasureChestInfo_Return::CopyFrom(const GM_TreasureChestInfo_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_TreasureChestInfo_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < subbox_size(); i++) {
    if (!this->subbox(i).IsInitialized()) return false;
  }
  return true;
}

void GM_TreasureChestInfo_Return::Swap(GM_TreasureChestInfo_Return* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    subbox_.Swap(&other->subbox_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_TreasureChestInfo_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_TreasureChestInfo_Return_descriptor_;
  metadata.reflection = GM_TreasureChestInfo_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_TreasureChestSubInfo::kBoxTypeFieldNumber;
const int GM_TreasureChestSubInfo::kCostTypeFieldNumber;
const int GM_TreasureChestSubInfo::kNumberTypeFieldNumber;
const int GM_TreasureChestSubInfo::kCostNumFieldNumber;
const int GM_TreasureChestSubInfo::kDiscountFieldNumber;
const int GM_TreasureChestSubInfo::kFreeTimesFieldNumber;
const int GM_TreasureChestSubInfo::kTotalFreeTimesFieldNumber;
const int GM_TreasureChestSubInfo::kLeftTimeFieldNumber;
const int GM_TreasureChestSubInfo::kBuyCountFieldNumber;
#endif  // !_MSC_VER

GM_TreasureChestSubInfo::GM_TreasureChestSubInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_TreasureChestSubInfo::InitAsDefaultInstance() {
}

GM_TreasureChestSubInfo::GM_TreasureChestSubInfo(const GM_TreasureChestSubInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_TreasureChestSubInfo::SharedCtor() {
  _cached_size_ = 0;
  boxtype_ = 0;
  costtype_ = 0;
  numbertype_ = 0;
  costnum_ = 0;
  discount_ = 0;
  freetimes_ = 0;
  totalfreetimes_ = 0;
  lefttime_ = 0;
  buycount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_TreasureChestSubInfo::~GM_TreasureChestSubInfo() {
  SharedDtor();
}

void GM_TreasureChestSubInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_TreasureChestSubInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_TreasureChestSubInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_TreasureChestSubInfo_descriptor_;
}

const GM_TreasureChestSubInfo& GM_TreasureChestSubInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasureChest_2etxt();
  return *default_instance_;
}

GM_TreasureChestSubInfo* GM_TreasureChestSubInfo::default_instance_ = NULL;

GM_TreasureChestSubInfo* GM_TreasureChestSubInfo::New() const {
  return new GM_TreasureChestSubInfo;
}

void GM_TreasureChestSubInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    boxtype_ = 0;
    costtype_ = 0;
    numbertype_ = 0;
    costnum_ = 0;
    discount_ = 0;
    freetimes_ = 0;
    totalfreetimes_ = 0;
    lefttime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    buycount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_TreasureChestSubInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 boxType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boxtype_)));
          set_has_boxtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_costType;
        break;
      }

      // optional int32 costType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &costtype_)));
          set_has_costtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_numberType;
        break;
      }

      // optional int32 numberType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numberType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numbertype_)));
          set_has_numbertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_costNum;
        break;
      }

      // optional int32 costNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &costnum_)));
          set_has_costnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_discount;
        break;
      }

      // optional float discount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_discount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &discount_)));
          set_has_discount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_freeTimes;
        break;
      }

      // optional int32 freeTimes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freetimes_)));
          set_has_freetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_totalFreeTimes;
        break;
      }

      // optional int32 totalFreeTimes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalFreeTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalfreetimes_)));
          set_has_totalfreetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_leftTime;
        break;
      }

      // optional int32 leftTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_BuyCount;
        break;
      }

      // optional int32 BuyCount = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BuyCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buycount_)));
          set_has_buycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_TreasureChestSubInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 boxType = 1;
  if (has_boxtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->boxtype(), output);
  }

  // optional int32 costType = 2;
  if (has_costtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->costtype(), output);
  }

  // optional int32 numberType = 3;
  if (has_numbertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->numbertype(), output);
  }

  // optional int32 costNum = 4;
  if (has_costnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->costnum(), output);
  }

  // optional float discount = 5;
  if (has_discount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->discount(), output);
  }

  // optional int32 freeTimes = 6;
  if (has_freetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->freetimes(), output);
  }

  // optional int32 totalFreeTimes = 7;
  if (has_totalfreetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->totalfreetimes(), output);
  }

  // optional int32 leftTime = 8;
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lefttime(), output);
  }

  // optional int32 BuyCount = 9;
  if (has_buycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->buycount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_TreasureChestSubInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 boxType = 1;
  if (has_boxtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->boxtype(), target);
  }

  // optional int32 costType = 2;
  if (has_costtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->costtype(), target);
  }

  // optional int32 numberType = 3;
  if (has_numbertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->numbertype(), target);
  }

  // optional int32 costNum = 4;
  if (has_costnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->costnum(), target);
  }

  // optional float discount = 5;
  if (has_discount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->discount(), target);
  }

  // optional int32 freeTimes = 6;
  if (has_freetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->freetimes(), target);
  }

  // optional int32 totalFreeTimes = 7;
  if (has_totalfreetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->totalfreetimes(), target);
  }

  // optional int32 leftTime = 8;
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lefttime(), target);
  }

  // optional int32 BuyCount = 9;
  if (has_buycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->buycount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_TreasureChestSubInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 boxType = 1;
    if (has_boxtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boxtype());
    }

    // optional int32 costType = 2;
    if (has_costtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->costtype());
    }

    // optional int32 numberType = 3;
    if (has_numbertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numbertype());
    }

    // optional int32 costNum = 4;
    if (has_costnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->costnum());
    }

    // optional float discount = 5;
    if (has_discount()) {
      total_size += 1 + 4;
    }

    // optional int32 freeTimes = 6;
    if (has_freetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freetimes());
    }

    // optional int32 totalFreeTimes = 7;
    if (has_totalfreetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalfreetimes());
    }

    // optional int32 leftTime = 8;
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefttime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 BuyCount = 9;
    if (has_buycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buycount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_TreasureChestSubInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_TreasureChestSubInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_TreasureChestSubInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_TreasureChestSubInfo::MergeFrom(const GM_TreasureChestSubInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boxtype()) {
      set_boxtype(from.boxtype());
    }
    if (from.has_costtype()) {
      set_costtype(from.costtype());
    }
    if (from.has_numbertype()) {
      set_numbertype(from.numbertype());
    }
    if (from.has_costnum()) {
      set_costnum(from.costnum());
    }
    if (from.has_discount()) {
      set_discount(from.discount());
    }
    if (from.has_freetimes()) {
      set_freetimes(from.freetimes());
    }
    if (from.has_totalfreetimes()) {
      set_totalfreetimes(from.totalfreetimes());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_buycount()) {
      set_buycount(from.buycount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_TreasureChestSubInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_TreasureChestSubInfo::CopyFrom(const GM_TreasureChestSubInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_TreasureChestSubInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_TreasureChestSubInfo::Swap(GM_TreasureChestSubInfo* other) {
  if (other != this) {
    std::swap(boxtype_, other->boxtype_);
    std::swap(costtype_, other->costtype_);
    std::swap(numbertype_, other->numbertype_);
    std::swap(costnum_, other->costnum_);
    std::swap(discount_, other->discount_);
    std::swap(freetimes_, other->freetimes_);
    std::swap(totalfreetimes_, other->totalfreetimes_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(buycount_, other->buycount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_TreasureChestSubInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_TreasureChestSubInfo_descriptor_;
  metadata.reflection = GM_TreasureChestSubInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_TreasureChestOpen_Request::kBoxTypeFieldNumber;
const int GM_TreasureChestOpen_Request::kNumberTypeFieldNumber;
#endif  // !_MSC_VER

GM_TreasureChestOpen_Request::GM_TreasureChestOpen_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_TreasureChestOpen_Request::InitAsDefaultInstance() {
}

GM_TreasureChestOpen_Request::GM_TreasureChestOpen_Request(const GM_TreasureChestOpen_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_TreasureChestOpen_Request::SharedCtor() {
  _cached_size_ = 0;
  boxtype_ = 0;
  numbertype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_TreasureChestOpen_Request::~GM_TreasureChestOpen_Request() {
  SharedDtor();
}

void GM_TreasureChestOpen_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_TreasureChestOpen_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_TreasureChestOpen_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_TreasureChestOpen_Request_descriptor_;
}

const GM_TreasureChestOpen_Request& GM_TreasureChestOpen_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasureChest_2etxt();
  return *default_instance_;
}

GM_TreasureChestOpen_Request* GM_TreasureChestOpen_Request::default_instance_ = NULL;

GM_TreasureChestOpen_Request* GM_TreasureChestOpen_Request::New() const {
  return new GM_TreasureChestOpen_Request;
}

void GM_TreasureChestOpen_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    boxtype_ = 0;
    numbertype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_TreasureChestOpen_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 boxType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boxtype_)));
          set_has_boxtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_numberType;
        break;
      }

      // optional int32 numberType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numberType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numbertype_)));
          set_has_numbertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_TreasureChestOpen_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 boxType = 1;
  if (has_boxtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->boxtype(), output);
  }

  // optional int32 numberType = 2;
  if (has_numbertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->numbertype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_TreasureChestOpen_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 boxType = 1;
  if (has_boxtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->boxtype(), target);
  }

  // optional int32 numberType = 2;
  if (has_numbertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numbertype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_TreasureChestOpen_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 boxType = 1;
    if (has_boxtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boxtype());
    }

    // optional int32 numberType = 2;
    if (has_numbertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numbertype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_TreasureChestOpen_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_TreasureChestOpen_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_TreasureChestOpen_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_TreasureChestOpen_Request::MergeFrom(const GM_TreasureChestOpen_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boxtype()) {
      set_boxtype(from.boxtype());
    }
    if (from.has_numbertype()) {
      set_numbertype(from.numbertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_TreasureChestOpen_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_TreasureChestOpen_Request::CopyFrom(const GM_TreasureChestOpen_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_TreasureChestOpen_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_TreasureChestOpen_Request::Swap(GM_TreasureChestOpen_Request* other) {
  if (other != this) {
    std::swap(boxtype_, other->boxtype_);
    std::swap(numbertype_, other->numbertype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_TreasureChestOpen_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_TreasureChestOpen_Request_descriptor_;
  metadata.reflection = GM_TreasureChestOpen_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_TreasureChestGetObject_Return::kResultFieldNumber;
const int GM_TreasureChestGetObject_Return::kCountFieldNumber;
const int GM_TreasureChestGetObject_Return::kSubObjectFieldNumber;
#endif  // !_MSC_VER

GM_TreasureChestGetObject_Return::GM_TreasureChestGetObject_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_TreasureChestGetObject_Return::InitAsDefaultInstance() {
}

GM_TreasureChestGetObject_Return::GM_TreasureChestGetObject_Return(const GM_TreasureChestGetObject_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_TreasureChestGetObject_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_TreasureChestGetObject_Return::~GM_TreasureChestGetObject_Return() {
  SharedDtor();
}

void GM_TreasureChestGetObject_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_TreasureChestGetObject_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_TreasureChestGetObject_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_TreasureChestGetObject_Return_descriptor_;
}

const GM_TreasureChestGetObject_Return& GM_TreasureChestGetObject_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasureChest_2etxt();
  return *default_instance_;
}

GM_TreasureChestGetObject_Return* GM_TreasureChestGetObject_Return::default_instance_ = NULL;

GM_TreasureChestGetObject_Return* GM_TreasureChestGetObject_Return::New() const {
  return new GM_TreasureChestGetObject_Return;
}

void GM_TreasureChestGetObject_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    count_ = 0;
  }
  subobject_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_TreasureChestGetObject_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_subObject;
        break;
      }

      // repeated .GM_TreasureChestGetSubObject subObject = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subObject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subobject()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_subObject;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_TreasureChestGetObject_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // repeated .GM_TreasureChestGetSubObject subObject = 3;
  for (int i = 0; i < this->subobject_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->subobject(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_TreasureChestGetObject_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // repeated .GM_TreasureChestGetSubObject subObject = 3;
  for (int i = 0; i < this->subobject_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->subobject(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_TreasureChestGetObject_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .GM_TreasureChestGetSubObject subObject = 3;
  total_size += 1 * this->subobject_size();
  for (int i = 0; i < this->subobject_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subobject(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_TreasureChestGetObject_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_TreasureChestGetObject_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_TreasureChestGetObject_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_TreasureChestGetObject_Return::MergeFrom(const GM_TreasureChestGetObject_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  subobject_.MergeFrom(from.subobject_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_TreasureChestGetObject_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_TreasureChestGetObject_Return::CopyFrom(const GM_TreasureChestGetObject_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_TreasureChestGetObject_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < subobject_size(); i++) {
    if (!this->subobject(i).IsInitialized()) return false;
  }
  return true;
}

void GM_TreasureChestGetObject_Return::Swap(GM_TreasureChestGetObject_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(count_, other->count_);
    subobject_.Swap(&other->subobject_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_TreasureChestGetObject_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_TreasureChestGetObject_Return_descriptor_;
  metadata.reflection = GM_TreasureChestGetObject_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_TreasureChestGetSubObject::kObjectIdFieldNumber;
const int GM_TreasureChestGetSubObject::kNumberFieldNumber;
#endif  // !_MSC_VER

GM_TreasureChestGetSubObject::GM_TreasureChestGetSubObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_TreasureChestGetSubObject::InitAsDefaultInstance() {
}

GM_TreasureChestGetSubObject::GM_TreasureChestGetSubObject(const GM_TreasureChestGetSubObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_TreasureChestGetSubObject::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = 0;
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_TreasureChestGetSubObject::~GM_TreasureChestGetSubObject() {
  SharedDtor();
}

void GM_TreasureChestGetSubObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_TreasureChestGetSubObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_TreasureChestGetSubObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_TreasureChestGetSubObject_descriptor_;
}

const GM_TreasureChestGetSubObject& GM_TreasureChestGetSubObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasureChest_2etxt();
  return *default_instance_;
}

GM_TreasureChestGetSubObject* GM_TreasureChestGetSubObject::default_instance_ = NULL;

GM_TreasureChestGetSubObject* GM_TreasureChestGetSubObject::New() const {
  return new GM_TreasureChestGetSubObject;
}

void GM_TreasureChestGetSubObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = 0;
    number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_TreasureChestGetSubObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_number;
        break;
      }

      // optional int32 number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_TreasureChestGetSubObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objectid(), output);
  }

  // optional int32 number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_TreasureChestGetSubObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objectid(), target);
  }

  // optional int32 number = 2;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_TreasureChestGetSubObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objectId = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // optional int32 number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_TreasureChestGetSubObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_TreasureChestGetSubObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_TreasureChestGetSubObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_TreasureChestGetSubObject::MergeFrom(const GM_TreasureChestGetSubObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_TreasureChestGetSubObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_TreasureChestGetSubObject::CopyFrom(const GM_TreasureChestGetSubObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_TreasureChestGetSubObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_TreasureChestGetSubObject::Swap(GM_TreasureChestGetSubObject* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_TreasureChestGetSubObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_TreasureChestGetSubObject_descriptor_;
  metadata.reflection = GM_TreasureChestGetSubObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_TreasureTokenOpen_Request::kBoxTokenIDFieldNumber;
#endif  // !_MSC_VER

GM_TreasureTokenOpen_Request::GM_TreasureTokenOpen_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_TreasureTokenOpen_Request::InitAsDefaultInstance() {
}

GM_TreasureTokenOpen_Request::GM_TreasureTokenOpen_Request(const GM_TreasureTokenOpen_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_TreasureTokenOpen_Request::SharedCtor() {
  _cached_size_ = 0;
  boxtokenid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_TreasureTokenOpen_Request::~GM_TreasureTokenOpen_Request() {
  SharedDtor();
}

void GM_TreasureTokenOpen_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_TreasureTokenOpen_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_TreasureTokenOpen_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_TreasureTokenOpen_Request_descriptor_;
}

const GM_TreasureTokenOpen_Request& GM_TreasureTokenOpen_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasureChest_2etxt();
  return *default_instance_;
}

GM_TreasureTokenOpen_Request* GM_TreasureTokenOpen_Request::default_instance_ = NULL;

GM_TreasureTokenOpen_Request* GM_TreasureTokenOpen_Request::New() const {
  return new GM_TreasureTokenOpen_Request;
}

void GM_TreasureTokenOpen_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    boxtokenid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_TreasureTokenOpen_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 boxTokenID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boxtokenid_)));
          set_has_boxtokenid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_TreasureTokenOpen_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 boxTokenID = 1;
  if (has_boxtokenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->boxtokenid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_TreasureTokenOpen_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 boxTokenID = 1;
  if (has_boxtokenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->boxtokenid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_TreasureTokenOpen_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 boxTokenID = 1;
    if (has_boxtokenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boxtokenid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_TreasureTokenOpen_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_TreasureTokenOpen_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_TreasureTokenOpen_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_TreasureTokenOpen_Request::MergeFrom(const GM_TreasureTokenOpen_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boxtokenid()) {
      set_boxtokenid(from.boxtokenid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_TreasureTokenOpen_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_TreasureTokenOpen_Request::CopyFrom(const GM_TreasureTokenOpen_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_TreasureTokenOpen_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_TreasureTokenOpen_Request::Swap(GM_TreasureTokenOpen_Request* other) {
  if (other != this) {
    std::swap(boxtokenid_, other->boxtokenid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_TreasureTokenOpen_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_TreasureTokenOpen_Request_descriptor_;
  metadata.reflection = GM_TreasureTokenOpen_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_TreasureTokenetObject_Return::kResultFieldNumber;
const int GM_TreasureTokenetObject_Return::kCountFieldNumber;
const int GM_TreasureTokenetObject_Return::kSubObjectFieldNumber;
#endif  // !_MSC_VER

GM_TreasureTokenetObject_Return::GM_TreasureTokenetObject_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_TreasureTokenetObject_Return::InitAsDefaultInstance() {
}

GM_TreasureTokenetObject_Return::GM_TreasureTokenetObject_Return(const GM_TreasureTokenetObject_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_TreasureTokenetObject_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_TreasureTokenetObject_Return::~GM_TreasureTokenetObject_Return() {
  SharedDtor();
}

void GM_TreasureTokenetObject_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_TreasureTokenetObject_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_TreasureTokenetObject_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_TreasureTokenetObject_Return_descriptor_;
}

const GM_TreasureTokenetObject_Return& GM_TreasureTokenetObject_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasureChest_2etxt();
  return *default_instance_;
}

GM_TreasureTokenetObject_Return* GM_TreasureTokenetObject_Return::default_instance_ = NULL;

GM_TreasureTokenetObject_Return* GM_TreasureTokenetObject_Return::New() const {
  return new GM_TreasureTokenetObject_Return;
}

void GM_TreasureTokenetObject_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    count_ = 0;
  }
  subobject_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_TreasureTokenetObject_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_subObject;
        break;
      }

      // repeated .GM_TreasureChestGetSubObject subObject = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subObject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subobject()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_subObject;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_TreasureTokenetObject_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // repeated .GM_TreasureChestGetSubObject subObject = 3;
  for (int i = 0; i < this->subobject_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->subobject(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_TreasureTokenetObject_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // repeated .GM_TreasureChestGetSubObject subObject = 3;
  for (int i = 0; i < this->subobject_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->subobject(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_TreasureTokenetObject_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .GM_TreasureChestGetSubObject subObject = 3;
  total_size += 1 * this->subobject_size();
  for (int i = 0; i < this->subobject_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subobject(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_TreasureTokenetObject_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_TreasureTokenetObject_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_TreasureTokenetObject_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_TreasureTokenetObject_Return::MergeFrom(const GM_TreasureTokenetObject_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  subobject_.MergeFrom(from.subobject_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_TreasureTokenetObject_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_TreasureTokenetObject_Return::CopyFrom(const GM_TreasureTokenetObject_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_TreasureTokenetObject_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < subobject_size(); i++) {
    if (!this->subobject(i).IsInitialized()) return false;
  }
  return true;
}

void GM_TreasureTokenetObject_Return::Swap(GM_TreasureTokenetObject_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(count_, other->count_);
    subobject_.Swap(&other->subobject_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_TreasureTokenetObject_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_TreasureTokenetObject_Return_descriptor_;
  metadata.reflection = GM_TreasureTokenetObject_Return_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
