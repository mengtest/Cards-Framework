// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_Pet.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SP_Pet.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SM_Pet_Data_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Pet_Data_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Pet_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Pet_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Pet_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Pet_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Pet_Fragment_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Pet_Fragment_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Pet_Fragment_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Pet_Fragment_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_PetEquip_extend_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_PetEquip_extend_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_PetEquip_extend_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_PetEquip_extend_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_PetEquip_Info_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_PetEquip_Info_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_PetEquip_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_PetEquip_Info_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SP_5fPet_2etxt() {
  protobuf_AddDesc_SP_5fPet_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SP_Pet.txt");
  GOOGLE_CHECK(file != NULL);
  SM_Pet_Data_Request_descriptor_ = file->message_type(0);
  static const int SM_Pet_Data_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Pet_Data_Request, m_nroleid_),
  };
  SM_Pet_Data_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Pet_Data_Request_descriptor_,
      SM_Pet_Data_Request::default_instance_,
      SM_Pet_Data_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Pet_Data_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Pet_Data_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Pet_Data_Request));
  SM_Pet_Data_descriptor_ = file->message_type(1);
  static const int SM_Pet_Data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Pet_Data, m_ncount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Pet_Data, m_vecdata_),
  };
  SM_Pet_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Pet_Data_descriptor_,
      SM_Pet_Data::default_instance_,
      SM_Pet_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Pet_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Pet_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Pet_Data));
  SM_Pet_Info_descriptor_ = file->message_type(2);
  static const int SM_Pet_Info_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Pet_Info, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Pet_Info, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Pet_Info, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Pet_Info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Pet_Info, evolvelvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Pet_Info, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Pet_Info, onbattle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Pet_Info, packageunlock_),
  };
  SM_Pet_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Pet_Info_descriptor_,
      SM_Pet_Info::default_instance_,
      SM_Pet_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Pet_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Pet_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Pet_Info));
  SM_Pet_Fragment_Data_descriptor_ = file->message_type(3);
  static const int SM_Pet_Fragment_Data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Pet_Fragment_Data, m_ncount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Pet_Fragment_Data, m_vecdata_),
  };
  SM_Pet_Fragment_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Pet_Fragment_Data_descriptor_,
      SM_Pet_Fragment_Data::default_instance_,
      SM_Pet_Fragment_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Pet_Fragment_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Pet_Fragment_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Pet_Fragment_Data));
  SM_Pet_Fragment_Info_descriptor_ = file->message_type(4);
  static const int SM_Pet_Fragment_Info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Pet_Fragment_Info, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Pet_Fragment_Info, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Pet_Fragment_Info, fragmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Pet_Fragment_Info, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Pet_Fragment_Info, quality_),
  };
  SM_Pet_Fragment_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Pet_Fragment_Info_descriptor_,
      SM_Pet_Fragment_Info::default_instance_,
      SM_Pet_Fragment_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Pet_Fragment_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Pet_Fragment_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Pet_Fragment_Info));
  SM_PetEquip_extend_Data_descriptor_ = file->message_type(5);
  static const int SM_PetEquip_extend_Data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PetEquip_extend_Data, m_ncount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PetEquip_extend_Data, m_vecdata_),
  };
  SM_PetEquip_extend_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_PetEquip_extend_Data_descriptor_,
      SM_PetEquip_extend_Data::default_instance_,
      SM_PetEquip_extend_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PetEquip_extend_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PetEquip_extend_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_PetEquip_extend_Data));
  SM_PetEquip_extend_Info_descriptor_ = file->message_type(6);
  static const int SM_PetEquip_extend_Info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PetEquip_extend_Info, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PetEquip_extend_Info, experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PetEquip_extend_Info, count_),
  };
  SM_PetEquip_extend_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_PetEquip_extend_Info_descriptor_,
      SM_PetEquip_extend_Info::default_instance_,
      SM_PetEquip_extend_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PetEquip_extend_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PetEquip_extend_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_PetEquip_extend_Info));
  SM_PetEquip_Info_Data_descriptor_ = file->message_type(7);
  static const int SM_PetEquip_Info_Data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PetEquip_Info_Data, m_ncount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PetEquip_Info_Data, m_vecdata_),
  };
  SM_PetEquip_Info_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_PetEquip_Info_Data_descriptor_,
      SM_PetEquip_Info_Data::default_instance_,
      SM_PetEquip_Info_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PetEquip_Info_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PetEquip_Info_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_PetEquip_Info_Data));
  SM_PetEquip_Info_descriptor_ = file->message_type(8);
  static const int SM_PetEquip_Info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PetEquip_Info, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PetEquip_Info, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PetEquip_Info, holenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PetEquip_Info, propertyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PetEquip_Info, propertylvl_),
  };
  SM_PetEquip_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_PetEquip_Info_descriptor_,
      SM_PetEquip_Info::default_instance_,
      SM_PetEquip_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PetEquip_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PetEquip_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_PetEquip_Info));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SP_5fPet_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Pet_Data_Request_descriptor_, &SM_Pet_Data_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Pet_Data_descriptor_, &SM_Pet_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Pet_Info_descriptor_, &SM_Pet_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Pet_Fragment_Data_descriptor_, &SM_Pet_Fragment_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Pet_Fragment_Info_descriptor_, &SM_Pet_Fragment_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_PetEquip_extend_Data_descriptor_, &SM_PetEquip_extend_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_PetEquip_extend_Info_descriptor_, &SM_PetEquip_extend_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_PetEquip_Info_Data_descriptor_, &SM_PetEquip_Info_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_PetEquip_Info_descriptor_, &SM_PetEquip_Info::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SP_5fPet_2etxt() {
  delete SM_Pet_Data_Request::default_instance_;
  delete SM_Pet_Data_Request_reflection_;
  delete SM_Pet_Data::default_instance_;
  delete SM_Pet_Data_reflection_;
  delete SM_Pet_Info::default_instance_;
  delete SM_Pet_Info_reflection_;
  delete SM_Pet_Fragment_Data::default_instance_;
  delete SM_Pet_Fragment_Data_reflection_;
  delete SM_Pet_Fragment_Info::default_instance_;
  delete SM_Pet_Fragment_Info_reflection_;
  delete SM_PetEquip_extend_Data::default_instance_;
  delete SM_PetEquip_extend_Data_reflection_;
  delete SM_PetEquip_extend_Info::default_instance_;
  delete SM_PetEquip_extend_Info_reflection_;
  delete SM_PetEquip_Info_Data::default_instance_;
  delete SM_PetEquip_Info_Data_reflection_;
  delete SM_PetEquip_Info::default_instance_;
  delete SM_PetEquip_Info_reflection_;
}

void protobuf_AddDesc_SP_5fPet_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nSP_Pet.txt\"(\n\023SM_Pet_Data_Request\022\021\n\tm"
    "_nRoleid\030\001 \002(\005\"@\n\013SM_Pet_Data\022\020\n\010m_nCoun"
    "t\030\001 \002(\005\022\037\n\tm_vecData\030\002 \003(\0132\014.SM_Pet_Info"
    "\"\226\001\n\013SM_Pet_Info\022\014\n\004gmid\030\001 \002(\003\022\016\n\006roleid"
    "\030\002 \001(\005\022\r\n\005petid\030\003 \001(\005\022\r\n\005level\030\006 \001(\005\022\021\n\t"
    "evolveLvl\030\007 \001(\005\022\017\n\007quality\030\010 \001(\005\022\020\n\010onba"
    "ttle\030\t \001(\005\022\025\n\rpackageunlock\030\n \001(\005\"R\n\024SM_"
    "Pet_Fragment_Data\022\020\n\010m_nCount\030\001 \002(\005\022(\n\tm"
    "_vecData\030\002 \003(\0132\025.SM_Pet_Fragment_Info\"f\n"
    "\024SM_Pet_Fragment_Info\022\014\n\004gmid\030\001 \002(\003\022\016\n\006r"
    "oleid\030\002 \001(\005\022\022\n\nfragmentid\030\003 \001(\005\022\013\n\003num\030\004"
    " \001(\005\022\017\n\007quality\030\005 \001(\005\"X\n\027SM_PetEquip_ext"
    "end_Data\022\020\n\010m_nCount\030\001 \002(\005\022+\n\tm_vecData\030"
    "\002 \003(\0132\030.SM_PetEquip_extend_Info\"L\n\027SM_Pe"
    "tEquip_extend_Info\022\016\n\006roleid\030\001 \002(\005\022\022\n\nex"
    "perience\030\003 \001(\005\022\r\n\005count\030\004 \001(\005\"O\n\025SM_PetE"
    "quip_Info_Data\022\020\n\010m_nCount\030\001 \002(\005\022$\n\tm_ve"
    "cData\030\002 \003(\0132\021.SM_PetEquip_Info\"j\n\020SM_Pet"
    "Equip_Info\022\014\n\004gmid\030\001 \002(\003\022\016\n\006roleid\030\002 \001(\005"
    "\022\017\n\007holenum\030\003 \001(\005\022\022\n\npropertyid\030\005 \001(\005\022\023\n"
    "\013propertylvl\030\006 \001(\005", 818);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SP_Pet.txt", &protobuf_RegisterTypes);
  SM_Pet_Data_Request::default_instance_ = new SM_Pet_Data_Request();
  SM_Pet_Data::default_instance_ = new SM_Pet_Data();
  SM_Pet_Info::default_instance_ = new SM_Pet_Info();
  SM_Pet_Fragment_Data::default_instance_ = new SM_Pet_Fragment_Data();
  SM_Pet_Fragment_Info::default_instance_ = new SM_Pet_Fragment_Info();
  SM_PetEquip_extend_Data::default_instance_ = new SM_PetEquip_extend_Data();
  SM_PetEquip_extend_Info::default_instance_ = new SM_PetEquip_extend_Info();
  SM_PetEquip_Info_Data::default_instance_ = new SM_PetEquip_Info_Data();
  SM_PetEquip_Info::default_instance_ = new SM_PetEquip_Info();
  SM_Pet_Data_Request::default_instance_->InitAsDefaultInstance();
  SM_Pet_Data::default_instance_->InitAsDefaultInstance();
  SM_Pet_Info::default_instance_->InitAsDefaultInstance();
  SM_Pet_Fragment_Data::default_instance_->InitAsDefaultInstance();
  SM_Pet_Fragment_Info::default_instance_->InitAsDefaultInstance();
  SM_PetEquip_extend_Data::default_instance_->InitAsDefaultInstance();
  SM_PetEquip_extend_Info::default_instance_->InitAsDefaultInstance();
  SM_PetEquip_Info_Data::default_instance_->InitAsDefaultInstance();
  SM_PetEquip_Info::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SP_5fPet_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SP_5fPet_2etxt {
  StaticDescriptorInitializer_SP_5fPet_2etxt() {
    protobuf_AddDesc_SP_5fPet_2etxt();
  }
} static_descriptor_initializer_SP_5fPet_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int SM_Pet_Data_Request::kMNRoleidFieldNumber;
#endif  // !_MSC_VER

SM_Pet_Data_Request::SM_Pet_Data_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Pet_Data_Request::InitAsDefaultInstance() {
}

SM_Pet_Data_Request::SM_Pet_Data_Request(const SM_Pet_Data_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Pet_Data_Request::SharedCtor() {
  _cached_size_ = 0;
  m_nroleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Pet_Data_Request::~SM_Pet_Data_Request() {
  SharedDtor();
}

void SM_Pet_Data_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Pet_Data_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Pet_Data_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Pet_Data_Request_descriptor_;
}

const SM_Pet_Data_Request& SM_Pet_Data_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fPet_2etxt();
  return *default_instance_;
}

SM_Pet_Data_Request* SM_Pet_Data_Request::default_instance_ = NULL;

SM_Pet_Data_Request* SM_Pet_Data_Request::New() const {
  return new SM_Pet_Data_Request;
}

void SM_Pet_Data_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nroleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Pet_Data_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nRoleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nroleid_)));
          set_has_m_nroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Pet_Data_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nRoleid = 1;
  if (has_m_nroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nroleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Pet_Data_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nRoleid = 1;
  if (has_m_nroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_nroleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Pet_Data_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nRoleid = 1;
    if (has_m_nroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nroleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Pet_Data_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Pet_Data_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Pet_Data_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Pet_Data_Request::MergeFrom(const SM_Pet_Data_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nroleid()) {
      set_m_nroleid(from.m_nroleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Pet_Data_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Pet_Data_Request::CopyFrom(const SM_Pet_Data_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Pet_Data_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Pet_Data_Request::Swap(SM_Pet_Data_Request* other) {
  if (other != this) {
    std::swap(m_nroleid_, other->m_nroleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Pet_Data_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Pet_Data_Request_descriptor_;
  metadata.reflection = SM_Pet_Data_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Pet_Data::kMNCountFieldNumber;
const int SM_Pet_Data::kMVecDataFieldNumber;
#endif  // !_MSC_VER

SM_Pet_Data::SM_Pet_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Pet_Data::InitAsDefaultInstance() {
}

SM_Pet_Data::SM_Pet_Data(const SM_Pet_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Pet_Data::SharedCtor() {
  _cached_size_ = 0;
  m_ncount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Pet_Data::~SM_Pet_Data() {
  SharedDtor();
}

void SM_Pet_Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Pet_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Pet_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Pet_Data_descriptor_;
}

const SM_Pet_Data& SM_Pet_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fPet_2etxt();
  return *default_instance_;
}

SM_Pet_Data* SM_Pet_Data::default_instance_ = NULL;

SM_Pet_Data* SM_Pet_Data::New() const {
  return new SM_Pet_Data;
}

void SM_Pet_Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ncount_ = 0;
  }
  m_vecdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Pet_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ncount_)));
          set_has_m_ncount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_vecData;
        break;
      }

      // repeated .SM_Pet_Info m_vecData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vecData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vecdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_vecData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Pet_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nCount = 1;
  if (has_m_ncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_ncount(), output);
  }

  // repeated .SM_Pet_Info m_vecData = 2;
  for (int i = 0; i < this->m_vecdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_vecdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Pet_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nCount = 1;
  if (has_m_ncount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_ncount(), target);
  }

  // repeated .SM_Pet_Info m_vecData = 2;
  for (int i = 0; i < this->m_vecdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_vecdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Pet_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nCount = 1;
    if (has_m_ncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ncount());
    }

  }
  // repeated .SM_Pet_Info m_vecData = 2;
  total_size += 1 * this->m_vecdata_size();
  for (int i = 0; i < this->m_vecdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vecdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Pet_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Pet_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Pet_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Pet_Data::MergeFrom(const SM_Pet_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vecdata_.MergeFrom(from.m_vecdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ncount()) {
      set_m_ncount(from.m_ncount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Pet_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Pet_Data::CopyFrom(const SM_Pet_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Pet_Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_vecdata_size(); i++) {
    if (!this->m_vecdata(i).IsInitialized()) return false;
  }
  return true;
}

void SM_Pet_Data::Swap(SM_Pet_Data* other) {
  if (other != this) {
    std::swap(m_ncount_, other->m_ncount_);
    m_vecdata_.Swap(&other->m_vecdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Pet_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Pet_Data_descriptor_;
  metadata.reflection = SM_Pet_Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Pet_Info::kGmidFieldNumber;
const int SM_Pet_Info::kRoleidFieldNumber;
const int SM_Pet_Info::kPetidFieldNumber;
const int SM_Pet_Info::kLevelFieldNumber;
const int SM_Pet_Info::kEvolveLvlFieldNumber;
const int SM_Pet_Info::kQualityFieldNumber;
const int SM_Pet_Info::kOnbattleFieldNumber;
const int SM_Pet_Info::kPackageunlockFieldNumber;
#endif  // !_MSC_VER

SM_Pet_Info::SM_Pet_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Pet_Info::InitAsDefaultInstance() {
}

SM_Pet_Info::SM_Pet_Info(const SM_Pet_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Pet_Info::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  roleid_ = 0;
  petid_ = 0;
  level_ = 0;
  evolvelvl_ = 0;
  quality_ = 0;
  onbattle_ = 0;
  packageunlock_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Pet_Info::~SM_Pet_Info() {
  SharedDtor();
}

void SM_Pet_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Pet_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Pet_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Pet_Info_descriptor_;
}

const SM_Pet_Info& SM_Pet_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fPet_2etxt();
  return *default_instance_;
}

SM_Pet_Info* SM_Pet_Info::default_instance_ = NULL;

SM_Pet_Info* SM_Pet_Info::New() const {
  return new SM_Pet_Info;
}

void SM_Pet_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gmid_ = GOOGLE_LONGLONG(0);
    roleid_ = 0;
    petid_ = 0;
    level_ = 0;
    evolvelvl_ = 0;
    quality_ = 0;
    onbattle_ = 0;
    packageunlock_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Pet_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // optional int32 roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_petid;
        break;
      }

      // optional int32 petid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_evolveLvl;
        break;
      }

      // optional int32 evolveLvl = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_evolveLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &evolvelvl_)));
          set_has_evolvelvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_quality;
        break;
      }

      // optional int32 quality = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_onbattle;
        break;
      }

      // optional int32 onbattle = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onbattle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onbattle_)));
          set_has_onbattle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_packageunlock;
        break;
      }

      // optional int32 packageunlock = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packageunlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packageunlock_)));
          set_has_packageunlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Pet_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gmid(), output);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  // optional int32 petid = 3;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->petid(), output);
  }

  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // optional int32 evolveLvl = 7;
  if (has_evolvelvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->evolvelvl(), output);
  }

  // optional int32 quality = 8;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->quality(), output);
  }

  // optional int32 onbattle = 9;
  if (has_onbattle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->onbattle(), output);
  }

  // optional int32 packageunlock = 10;
  if (has_packageunlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->packageunlock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Pet_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gmid(), target);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleid(), target);
  }

  // optional int32 petid = 3;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->petid(), target);
  }

  // optional int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // optional int32 evolveLvl = 7;
  if (has_evolvelvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->evolvelvl(), target);
  }

  // optional int32 quality = 8;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->quality(), target);
  }

  // optional int32 onbattle = 9;
  if (has_onbattle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->onbattle(), target);
  }

  // optional int32 packageunlock = 10;
  if (has_packageunlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->packageunlock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Pet_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // optional int32 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 petid = 3;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }

    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 evolveLvl = 7;
    if (has_evolvelvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->evolvelvl());
    }

    // optional int32 quality = 8;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 onbattle = 9;
    if (has_onbattle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onbattle());
    }

    // optional int32 packageunlock = 10;
    if (has_packageunlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packageunlock());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Pet_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Pet_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Pet_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Pet_Info::MergeFrom(const SM_Pet_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_evolvelvl()) {
      set_evolvelvl(from.evolvelvl());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_onbattle()) {
      set_onbattle(from.onbattle());
    }
    if (from.has_packageunlock()) {
      set_packageunlock(from.packageunlock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Pet_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Pet_Info::CopyFrom(const SM_Pet_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Pet_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Pet_Info::Swap(SM_Pet_Info* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(roleid_, other->roleid_);
    std::swap(petid_, other->petid_);
    std::swap(level_, other->level_);
    std::swap(evolvelvl_, other->evolvelvl_);
    std::swap(quality_, other->quality_);
    std::swap(onbattle_, other->onbattle_);
    std::swap(packageunlock_, other->packageunlock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Pet_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Pet_Info_descriptor_;
  metadata.reflection = SM_Pet_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Pet_Fragment_Data::kMNCountFieldNumber;
const int SM_Pet_Fragment_Data::kMVecDataFieldNumber;
#endif  // !_MSC_VER

SM_Pet_Fragment_Data::SM_Pet_Fragment_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Pet_Fragment_Data::InitAsDefaultInstance() {
}

SM_Pet_Fragment_Data::SM_Pet_Fragment_Data(const SM_Pet_Fragment_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Pet_Fragment_Data::SharedCtor() {
  _cached_size_ = 0;
  m_ncount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Pet_Fragment_Data::~SM_Pet_Fragment_Data() {
  SharedDtor();
}

void SM_Pet_Fragment_Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Pet_Fragment_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Pet_Fragment_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Pet_Fragment_Data_descriptor_;
}

const SM_Pet_Fragment_Data& SM_Pet_Fragment_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fPet_2etxt();
  return *default_instance_;
}

SM_Pet_Fragment_Data* SM_Pet_Fragment_Data::default_instance_ = NULL;

SM_Pet_Fragment_Data* SM_Pet_Fragment_Data::New() const {
  return new SM_Pet_Fragment_Data;
}

void SM_Pet_Fragment_Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ncount_ = 0;
  }
  m_vecdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Pet_Fragment_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ncount_)));
          set_has_m_ncount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_vecData;
        break;
      }

      // repeated .SM_Pet_Fragment_Info m_vecData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vecData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vecdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_vecData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Pet_Fragment_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nCount = 1;
  if (has_m_ncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_ncount(), output);
  }

  // repeated .SM_Pet_Fragment_Info m_vecData = 2;
  for (int i = 0; i < this->m_vecdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_vecdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Pet_Fragment_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nCount = 1;
  if (has_m_ncount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_ncount(), target);
  }

  // repeated .SM_Pet_Fragment_Info m_vecData = 2;
  for (int i = 0; i < this->m_vecdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_vecdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Pet_Fragment_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nCount = 1;
    if (has_m_ncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ncount());
    }

  }
  // repeated .SM_Pet_Fragment_Info m_vecData = 2;
  total_size += 1 * this->m_vecdata_size();
  for (int i = 0; i < this->m_vecdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vecdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Pet_Fragment_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Pet_Fragment_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Pet_Fragment_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Pet_Fragment_Data::MergeFrom(const SM_Pet_Fragment_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vecdata_.MergeFrom(from.m_vecdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ncount()) {
      set_m_ncount(from.m_ncount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Pet_Fragment_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Pet_Fragment_Data::CopyFrom(const SM_Pet_Fragment_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Pet_Fragment_Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_vecdata_size(); i++) {
    if (!this->m_vecdata(i).IsInitialized()) return false;
  }
  return true;
}

void SM_Pet_Fragment_Data::Swap(SM_Pet_Fragment_Data* other) {
  if (other != this) {
    std::swap(m_ncount_, other->m_ncount_);
    m_vecdata_.Swap(&other->m_vecdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Pet_Fragment_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Pet_Fragment_Data_descriptor_;
  metadata.reflection = SM_Pet_Fragment_Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Pet_Fragment_Info::kGmidFieldNumber;
const int SM_Pet_Fragment_Info::kRoleidFieldNumber;
const int SM_Pet_Fragment_Info::kFragmentidFieldNumber;
const int SM_Pet_Fragment_Info::kNumFieldNumber;
const int SM_Pet_Fragment_Info::kQualityFieldNumber;
#endif  // !_MSC_VER

SM_Pet_Fragment_Info::SM_Pet_Fragment_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Pet_Fragment_Info::InitAsDefaultInstance() {
}

SM_Pet_Fragment_Info::SM_Pet_Fragment_Info(const SM_Pet_Fragment_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Pet_Fragment_Info::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  roleid_ = 0;
  fragmentid_ = 0;
  num_ = 0;
  quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Pet_Fragment_Info::~SM_Pet_Fragment_Info() {
  SharedDtor();
}

void SM_Pet_Fragment_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Pet_Fragment_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Pet_Fragment_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Pet_Fragment_Info_descriptor_;
}

const SM_Pet_Fragment_Info& SM_Pet_Fragment_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fPet_2etxt();
  return *default_instance_;
}

SM_Pet_Fragment_Info* SM_Pet_Fragment_Info::default_instance_ = NULL;

SM_Pet_Fragment_Info* SM_Pet_Fragment_Info::New() const {
  return new SM_Pet_Fragment_Info;
}

void SM_Pet_Fragment_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gmid_ = GOOGLE_LONGLONG(0);
    roleid_ = 0;
    fragmentid_ = 0;
    num_ = 0;
    quality_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Pet_Fragment_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // optional int32 roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fragmentid;
        break;
      }

      // optional int32 fragmentid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fragmentid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fragmentid_)));
          set_has_fragmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional int32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_quality;
        break;
      }

      // optional int32 quality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Pet_Fragment_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gmid(), output);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  // optional int32 fragmentid = 3;
  if (has_fragmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fragmentid(), output);
  }

  // optional int32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }

  // optional int32 quality = 5;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->quality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Pet_Fragment_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gmid(), target);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleid(), target);
  }

  // optional int32 fragmentid = 3;
  if (has_fragmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fragmentid(), target);
  }

  // optional int32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }

  // optional int32 quality = 5;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->quality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Pet_Fragment_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // optional int32 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 fragmentid = 3;
    if (has_fragmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fragmentid());
    }

    // optional int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 quality = 5;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Pet_Fragment_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Pet_Fragment_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Pet_Fragment_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Pet_Fragment_Info::MergeFrom(const SM_Pet_Fragment_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_fragmentid()) {
      set_fragmentid(from.fragmentid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Pet_Fragment_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Pet_Fragment_Info::CopyFrom(const SM_Pet_Fragment_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Pet_Fragment_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Pet_Fragment_Info::Swap(SM_Pet_Fragment_Info* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(roleid_, other->roleid_);
    std::swap(fragmentid_, other->fragmentid_);
    std::swap(num_, other->num_);
    std::swap(quality_, other->quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Pet_Fragment_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Pet_Fragment_Info_descriptor_;
  metadata.reflection = SM_Pet_Fragment_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_PetEquip_extend_Data::kMNCountFieldNumber;
const int SM_PetEquip_extend_Data::kMVecDataFieldNumber;
#endif  // !_MSC_VER

SM_PetEquip_extend_Data::SM_PetEquip_extend_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_PetEquip_extend_Data::InitAsDefaultInstance() {
}

SM_PetEquip_extend_Data::SM_PetEquip_extend_Data(const SM_PetEquip_extend_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_PetEquip_extend_Data::SharedCtor() {
  _cached_size_ = 0;
  m_ncount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_PetEquip_extend_Data::~SM_PetEquip_extend_Data() {
  SharedDtor();
}

void SM_PetEquip_extend_Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_PetEquip_extend_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_PetEquip_extend_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_PetEquip_extend_Data_descriptor_;
}

const SM_PetEquip_extend_Data& SM_PetEquip_extend_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fPet_2etxt();
  return *default_instance_;
}

SM_PetEquip_extend_Data* SM_PetEquip_extend_Data::default_instance_ = NULL;

SM_PetEquip_extend_Data* SM_PetEquip_extend_Data::New() const {
  return new SM_PetEquip_extend_Data;
}

void SM_PetEquip_extend_Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ncount_ = 0;
  }
  m_vecdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_PetEquip_extend_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ncount_)));
          set_has_m_ncount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_vecData;
        break;
      }

      // repeated .SM_PetEquip_extend_Info m_vecData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vecData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vecdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_vecData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_PetEquip_extend_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nCount = 1;
  if (has_m_ncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_ncount(), output);
  }

  // repeated .SM_PetEquip_extend_Info m_vecData = 2;
  for (int i = 0; i < this->m_vecdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_vecdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_PetEquip_extend_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nCount = 1;
  if (has_m_ncount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_ncount(), target);
  }

  // repeated .SM_PetEquip_extend_Info m_vecData = 2;
  for (int i = 0; i < this->m_vecdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_vecdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_PetEquip_extend_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nCount = 1;
    if (has_m_ncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ncount());
    }

  }
  // repeated .SM_PetEquip_extend_Info m_vecData = 2;
  total_size += 1 * this->m_vecdata_size();
  for (int i = 0; i < this->m_vecdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vecdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_PetEquip_extend_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_PetEquip_extend_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_PetEquip_extend_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_PetEquip_extend_Data::MergeFrom(const SM_PetEquip_extend_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vecdata_.MergeFrom(from.m_vecdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ncount()) {
      set_m_ncount(from.m_ncount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_PetEquip_extend_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_PetEquip_extend_Data::CopyFrom(const SM_PetEquip_extend_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_PetEquip_extend_Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_vecdata_size(); i++) {
    if (!this->m_vecdata(i).IsInitialized()) return false;
  }
  return true;
}

void SM_PetEquip_extend_Data::Swap(SM_PetEquip_extend_Data* other) {
  if (other != this) {
    std::swap(m_ncount_, other->m_ncount_);
    m_vecdata_.Swap(&other->m_vecdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_PetEquip_extend_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_PetEquip_extend_Data_descriptor_;
  metadata.reflection = SM_PetEquip_extend_Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_PetEquip_extend_Info::kRoleidFieldNumber;
const int SM_PetEquip_extend_Info::kExperienceFieldNumber;
const int SM_PetEquip_extend_Info::kCountFieldNumber;
#endif  // !_MSC_VER

SM_PetEquip_extend_Info::SM_PetEquip_extend_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_PetEquip_extend_Info::InitAsDefaultInstance() {
}

SM_PetEquip_extend_Info::SM_PetEquip_extend_Info(const SM_PetEquip_extend_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_PetEquip_extend_Info::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  experience_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_PetEquip_extend_Info::~SM_PetEquip_extend_Info() {
  SharedDtor();
}

void SM_PetEquip_extend_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_PetEquip_extend_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_PetEquip_extend_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_PetEquip_extend_Info_descriptor_;
}

const SM_PetEquip_extend_Info& SM_PetEquip_extend_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fPet_2etxt();
  return *default_instance_;
}

SM_PetEquip_extend_Info* SM_PetEquip_extend_Info::default_instance_ = NULL;

SM_PetEquip_extend_Info* SM_PetEquip_extend_Info::New() const {
  return new SM_PetEquip_extend_Info;
}

void SM_PetEquip_extend_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    experience_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_PetEquip_extend_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_experience;
        break;
      }

      // optional int32 experience = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional int32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_PetEquip_extend_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int32 experience = 3;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->experience(), output);
  }

  // optional int32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_PetEquip_extend_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional int32 experience = 3;
  if (has_experience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->experience(), target);
  }

  // optional int32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_PetEquip_extend_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 experience = 3;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->experience());
    }

    // optional int32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_PetEquip_extend_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_PetEquip_extend_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_PetEquip_extend_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_PetEquip_extend_Info::MergeFrom(const SM_PetEquip_extend_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_experience()) {
      set_experience(from.experience());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_PetEquip_extend_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_PetEquip_extend_Info::CopyFrom(const SM_PetEquip_extend_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_PetEquip_extend_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_PetEquip_extend_Info::Swap(SM_PetEquip_extend_Info* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(experience_, other->experience_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_PetEquip_extend_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_PetEquip_extend_Info_descriptor_;
  metadata.reflection = SM_PetEquip_extend_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_PetEquip_Info_Data::kMNCountFieldNumber;
const int SM_PetEquip_Info_Data::kMVecDataFieldNumber;
#endif  // !_MSC_VER

SM_PetEquip_Info_Data::SM_PetEquip_Info_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_PetEquip_Info_Data::InitAsDefaultInstance() {
}

SM_PetEquip_Info_Data::SM_PetEquip_Info_Data(const SM_PetEquip_Info_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_PetEquip_Info_Data::SharedCtor() {
  _cached_size_ = 0;
  m_ncount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_PetEquip_Info_Data::~SM_PetEquip_Info_Data() {
  SharedDtor();
}

void SM_PetEquip_Info_Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_PetEquip_Info_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_PetEquip_Info_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_PetEquip_Info_Data_descriptor_;
}

const SM_PetEquip_Info_Data& SM_PetEquip_Info_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fPet_2etxt();
  return *default_instance_;
}

SM_PetEquip_Info_Data* SM_PetEquip_Info_Data::default_instance_ = NULL;

SM_PetEquip_Info_Data* SM_PetEquip_Info_Data::New() const {
  return new SM_PetEquip_Info_Data;
}

void SM_PetEquip_Info_Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ncount_ = 0;
  }
  m_vecdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_PetEquip_Info_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ncount_)));
          set_has_m_ncount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_vecData;
        break;
      }

      // repeated .SM_PetEquip_Info m_vecData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vecData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vecdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_vecData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_PetEquip_Info_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nCount = 1;
  if (has_m_ncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_ncount(), output);
  }

  // repeated .SM_PetEquip_Info m_vecData = 2;
  for (int i = 0; i < this->m_vecdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_vecdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_PetEquip_Info_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nCount = 1;
  if (has_m_ncount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_ncount(), target);
  }

  // repeated .SM_PetEquip_Info m_vecData = 2;
  for (int i = 0; i < this->m_vecdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_vecdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_PetEquip_Info_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nCount = 1;
    if (has_m_ncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ncount());
    }

  }
  // repeated .SM_PetEquip_Info m_vecData = 2;
  total_size += 1 * this->m_vecdata_size();
  for (int i = 0; i < this->m_vecdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vecdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_PetEquip_Info_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_PetEquip_Info_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_PetEquip_Info_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_PetEquip_Info_Data::MergeFrom(const SM_PetEquip_Info_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vecdata_.MergeFrom(from.m_vecdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ncount()) {
      set_m_ncount(from.m_ncount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_PetEquip_Info_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_PetEquip_Info_Data::CopyFrom(const SM_PetEquip_Info_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_PetEquip_Info_Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_vecdata_size(); i++) {
    if (!this->m_vecdata(i).IsInitialized()) return false;
  }
  return true;
}

void SM_PetEquip_Info_Data::Swap(SM_PetEquip_Info_Data* other) {
  if (other != this) {
    std::swap(m_ncount_, other->m_ncount_);
    m_vecdata_.Swap(&other->m_vecdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_PetEquip_Info_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_PetEquip_Info_Data_descriptor_;
  metadata.reflection = SM_PetEquip_Info_Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_PetEquip_Info::kGmidFieldNumber;
const int SM_PetEquip_Info::kRoleidFieldNumber;
const int SM_PetEquip_Info::kHolenumFieldNumber;
const int SM_PetEquip_Info::kPropertyidFieldNumber;
const int SM_PetEquip_Info::kPropertylvlFieldNumber;
#endif  // !_MSC_VER

SM_PetEquip_Info::SM_PetEquip_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_PetEquip_Info::InitAsDefaultInstance() {
}

SM_PetEquip_Info::SM_PetEquip_Info(const SM_PetEquip_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_PetEquip_Info::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  roleid_ = 0;
  holenum_ = 0;
  propertyid_ = 0;
  propertylvl_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_PetEquip_Info::~SM_PetEquip_Info() {
  SharedDtor();
}

void SM_PetEquip_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_PetEquip_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_PetEquip_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_PetEquip_Info_descriptor_;
}

const SM_PetEquip_Info& SM_PetEquip_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fPet_2etxt();
  return *default_instance_;
}

SM_PetEquip_Info* SM_PetEquip_Info::default_instance_ = NULL;

SM_PetEquip_Info* SM_PetEquip_Info::New() const {
  return new SM_PetEquip_Info;
}

void SM_PetEquip_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gmid_ = GOOGLE_LONGLONG(0);
    roleid_ = 0;
    holenum_ = 0;
    propertyid_ = 0;
    propertylvl_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_PetEquip_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // optional int32 roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_holenum;
        break;
      }

      // optional int32 holenum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_holenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holenum_)));
          set_has_holenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_propertyid;
        break;
      }

      // optional int32 propertyid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propertyid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propertyid_)));
          set_has_propertyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_propertylvl;
        break;
      }

      // optional int32 propertylvl = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propertylvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propertylvl_)));
          set_has_propertylvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_PetEquip_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gmid(), output);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  // optional int32 holenum = 3;
  if (has_holenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->holenum(), output);
  }

  // optional int32 propertyid = 5;
  if (has_propertyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->propertyid(), output);
  }

  // optional int32 propertylvl = 6;
  if (has_propertylvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->propertylvl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_PetEquip_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gmid(), target);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleid(), target);
  }

  // optional int32 holenum = 3;
  if (has_holenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->holenum(), target);
  }

  // optional int32 propertyid = 5;
  if (has_propertyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->propertyid(), target);
  }

  // optional int32 propertylvl = 6;
  if (has_propertylvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->propertylvl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_PetEquip_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // optional int32 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 holenum = 3;
    if (has_holenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holenum());
    }

    // optional int32 propertyid = 5;
    if (has_propertyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propertyid());
    }

    // optional int32 propertylvl = 6;
    if (has_propertylvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propertylvl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_PetEquip_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_PetEquip_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_PetEquip_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_PetEquip_Info::MergeFrom(const SM_PetEquip_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_holenum()) {
      set_holenum(from.holenum());
    }
    if (from.has_propertyid()) {
      set_propertyid(from.propertyid());
    }
    if (from.has_propertylvl()) {
      set_propertylvl(from.propertylvl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_PetEquip_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_PetEquip_Info::CopyFrom(const SM_PetEquip_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_PetEquip_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_PetEquip_Info::Swap(SM_PetEquip_Info* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(roleid_, other->roleid_);
    std::swap(holenum_, other->holenum_);
    std::swap(propertyid_, other->propertyid_);
    std::swap(propertylvl_, other->propertylvl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_PetEquip_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_PetEquip_Info_descriptor_;
  metadata.reflection = SM_PetEquip_Info_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
