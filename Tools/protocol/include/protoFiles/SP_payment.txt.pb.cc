// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_payment.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SP_payment.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SM_AppStore_Verify_Order_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_AppStore_Verify_Order_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_AppStore_Verify_Order_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_AppStore_Verify_Order_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_ChargeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_ChargeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_ChargeDataList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_ChargeDataList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PayCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PayCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GetPayments_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GetPayments_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PayCallBackRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PayCallBackRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PayFinish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PayFinish_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_GooglePlay_Verify_Order_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_GooglePlay_Verify_Order_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_GooglePlay_Verify_Order_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_GooglePlay_Verify_Order_Return_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SP_5fpayment_2etxt() {
  protobuf_AddDesc_SP_5fpayment_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SP_payment.txt");
  GOOGLE_CHECK(file != NULL);
  SM_AppStore_Verify_Order_descriptor_ = file->message_type(0);
  static const int SM_AppStore_Verify_Order_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_AppStore_Verify_Order, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_AppStore_Verify_Order, getroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_AppStore_Verify_Order, jsonstr_),
  };
  SM_AppStore_Verify_Order_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_AppStore_Verify_Order_descriptor_,
      SM_AppStore_Verify_Order::default_instance_,
      SM_AppStore_Verify_Order_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_AppStore_Verify_Order, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_AppStore_Verify_Order, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_AppStore_Verify_Order));
  SM_AppStore_Verify_Order_Return_descriptor_ = file->message_type(1);
  static const int SM_AppStore_Verify_Order_Return_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_AppStore_Verify_Order_Return, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_AppStore_Verify_Order_Return, getroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_AppStore_Verify_Order_Return, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_AppStore_Verify_Order_Return, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_AppStore_Verify_Order_Return, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_AppStore_Verify_Order_Return, purchase_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_AppStore_Verify_Order_Return, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_AppStore_Verify_Order_Return, jsonstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_AppStore_Verify_Order_Return, diamond_),
  };
  SM_AppStore_Verify_Order_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_AppStore_Verify_Order_Return_descriptor_,
      SM_AppStore_Verify_Order_Return::default_instance_,
      SM_AppStore_Verify_Order_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_AppStore_Verify_Order_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_AppStore_Verify_Order_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_AppStore_Verify_Order_Return));
  SM_ChargeData_descriptor_ = file->message_type(2);
  static const int SM_ChargeData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_ChargeData, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_ChargeData, product_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_ChargeData, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_ChargeData, end_time_),
  };
  SM_ChargeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_ChargeData_descriptor_,
      SM_ChargeData::default_instance_,
      SM_ChargeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_ChargeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_ChargeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_ChargeData));
  SM_ChargeDataList_descriptor_ = file->message_type(3);
  static const int SM_ChargeDataList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_ChargeDataList, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_ChargeDataList, list_),
  };
  SM_ChargeDataList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_ChargeDataList_descriptor_,
      SM_ChargeDataList::default_instance_,
      SM_ChargeDataList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_ChargeDataList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_ChargeDataList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_ChargeDataList));
  GM_PayCallBack_descriptor_ = file->message_type(4);
  static const int GM_PayCallBack_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PayCallBack, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PayCallBack, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PayCallBack, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PayCallBack, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PayCallBack, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PayCallBack, finish_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PayCallBack, productid_),
  };
  GM_PayCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PayCallBack_descriptor_,
      GM_PayCallBack::default_instance_,
      GM_PayCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PayCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PayCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PayCallBack));
  GM_GetPayments_descriptor_ = file->message_type(5);
  static const int GM_GetPayments_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetPayments, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetPayments, connect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetPayments, ishttprequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetPayments, payments_),
  };
  GM_GetPayments_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GetPayments_descriptor_,
      GM_GetPayments::default_instance_,
      GM_GetPayments_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetPayments, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetPayments, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GetPayments));
  GM_PayCallBackRes_descriptor_ = file->message_type(6);
  static const int GM_PayCallBackRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PayCallBackRes, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PayCallBackRes, connect_),
  };
  GM_PayCallBackRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PayCallBackRes_descriptor_,
      GM_PayCallBackRes::default_instance_,
      GM_PayCallBackRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PayCallBackRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PayCallBackRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PayCallBackRes));
  GM_PayFinish_descriptor_ = file->message_type(7);
  static const int GM_PayFinish_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PayFinish, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PayFinish, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PayFinish, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PayFinish, finish_time_),
  };
  GM_PayFinish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PayFinish_descriptor_,
      GM_PayFinish::default_instance_,
      GM_PayFinish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PayFinish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PayFinish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PayFinish));
  SM_GooglePlay_Verify_Order_descriptor_ = file->message_type(8);
  static const int SM_GooglePlay_Verify_Order_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_GooglePlay_Verify_Order, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_GooglePlay_Verify_Order, getroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_GooglePlay_Verify_Order, jsonstr_),
  };
  SM_GooglePlay_Verify_Order_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_GooglePlay_Verify_Order_descriptor_,
      SM_GooglePlay_Verify_Order::default_instance_,
      SM_GooglePlay_Verify_Order_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_GooglePlay_Verify_Order, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_GooglePlay_Verify_Order, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_GooglePlay_Verify_Order));
  SM_GooglePlay_Verify_Order_Return_descriptor_ = file->message_type(9);
  static const int SM_GooglePlay_Verify_Order_Return_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_GooglePlay_Verify_Order_Return, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_GooglePlay_Verify_Order_Return, getroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_GooglePlay_Verify_Order_Return, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_GooglePlay_Verify_Order_Return, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_GooglePlay_Verify_Order_Return, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_GooglePlay_Verify_Order_Return, purchase_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_GooglePlay_Verify_Order_Return, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_GooglePlay_Verify_Order_Return, jsonstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_GooglePlay_Verify_Order_Return, diamond_),
  };
  SM_GooglePlay_Verify_Order_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_GooglePlay_Verify_Order_Return_descriptor_,
      SM_GooglePlay_Verify_Order_Return::default_instance_,
      SM_GooglePlay_Verify_Order_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_GooglePlay_Verify_Order_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_GooglePlay_Verify_Order_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_GooglePlay_Verify_Order_Return));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SP_5fpayment_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_AppStore_Verify_Order_descriptor_, &SM_AppStore_Verify_Order::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_AppStore_Verify_Order_Return_descriptor_, &SM_AppStore_Verify_Order_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_ChargeData_descriptor_, &SM_ChargeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_ChargeDataList_descriptor_, &SM_ChargeDataList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PayCallBack_descriptor_, &GM_PayCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GetPayments_descriptor_, &GM_GetPayments::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PayCallBackRes_descriptor_, &GM_PayCallBackRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PayFinish_descriptor_, &GM_PayFinish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_GooglePlay_Verify_Order_descriptor_, &SM_GooglePlay_Verify_Order::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_GooglePlay_Verify_Order_Return_descriptor_, &SM_GooglePlay_Verify_Order_Return::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SP_5fpayment_2etxt() {
  delete SM_AppStore_Verify_Order::default_instance_;
  delete SM_AppStore_Verify_Order_reflection_;
  delete SM_AppStore_Verify_Order_Return::default_instance_;
  delete SM_AppStore_Verify_Order_Return_reflection_;
  delete SM_ChargeData::default_instance_;
  delete SM_ChargeData_reflection_;
  delete SM_ChargeDataList::default_instance_;
  delete SM_ChargeDataList_reflection_;
  delete GM_PayCallBack::default_instance_;
  delete GM_PayCallBack_reflection_;
  delete GM_GetPayments::default_instance_;
  delete GM_GetPayments_reflection_;
  delete GM_PayCallBackRes::default_instance_;
  delete GM_PayCallBackRes_reflection_;
  delete GM_PayFinish::default_instance_;
  delete GM_PayFinish_reflection_;
  delete SM_GooglePlay_Verify_Order::default_instance_;
  delete SM_GooglePlay_Verify_Order_reflection_;
  delete SM_GooglePlay_Verify_Order_Return::default_instance_;
  delete SM_GooglePlay_Verify_Order_Return_reflection_;
}

void protobuf_AddDesc_SP_5fpayment_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016SP_payment.txt\"P\n\030SM_AppStore_Verify_O"
    "rder\022\020\n\010m_result\030\001 \002(\005\022\021\n\tgetroleid\030\002 \002("
    "\005\022\017\n\007jsonStr\030\003 \002(\t\"\313\001\n\037SM_AppStore_Verif"
    "y_Order_Return\022\020\n\010m_result\030\001 \002(\005\022\021\n\tgetr"
    "oleid\030\002 \002(\005\022\r\n\005money\030\003 \002(\t\022\026\n\016transactio"
    "n_id\030\005 \001(\t\022\020\n\010quantity\030\004 \001(\r\022\025\n\rpurchase"
    "_date\030\007 \001(\t\022\021\n\tproductid\030\006 \001(\005\022\017\n\007jsonSt"
    "r\030\010 \001(\t\022\017\n\007diamond\030\t \001(\005\"T\n\rSM_ChargeDat"
    "a\022\016\n\006roleid\030\001 \002(\005\022\022\n\nproduct_id\030\002 \002(\005\022\r\n"
    "\005times\030\003 \002(\005\022\020\n\010end_time\030\004 \002(\t\"@\n\021SM_Cha"
    "rgeDataList\022\r\n\005count\030\001 \002(\005\022\034\n\004list\030\002 \003(\013"
    "2\016.SM_ChargeData\"\213\001\n\016GM_PayCallBack\022\r\n\005m"
    "oney\030\001 \002(\002\022\017\n\007orderid\030\003 \002(\t\022\017\n\007channel\030\004"
    " \002(\t\022\020\n\010platform\030\005 \001(\005\022\016\n\006roleid\030\007 \002(\005\022\023"
    "\n\013finish_time\030\010 \002(\t\022\021\n\tproductID\030\t \001(\005\"j"
    "\n\016GM_GetPayments\022\r\n\005count\030\001 \002(\005\022\017\n\007conne"
    "ct\030\003 \002(\r\022\025\n\rishttprequest\030\004 \002(\010\022!\n\010payme"
    "nts\030\002 \003(\0132\017.GM_PayCallBack\"6\n\021GM_PayCall"
    "BackRes\022\020\n\010m_result\030\001 \002(\005\022\017\n\007connect\030\002 \002"
    "(\r\"W\n\014GM_PayFinish\022\017\n\007orderid\030\001 \002(\t\022\020\n\010p"
    "latform\030\002 \001(\005\022\017\n\007channel\030\003 \001(\t\022\023\n\013finish"
    "_time\030\004 \001(\t\"R\n\032SM_GooglePlay_Verify_Orde"
    "r\022\020\n\010m_result\030\001 \002(\005\022\021\n\tgetroleid\030\002 \002(\005\022\017"
    "\n\007jsonStr\030\003 \002(\t\"\315\001\n!SM_GooglePlay_Verify"
    "_Order_Return\022\020\n\010m_result\030\001 \002(\005\022\021\n\tgetro"
    "leid\030\002 \002(\005\022\r\n\005money\030\003 \002(\t\022\026\n\016transaction"
    "_id\030\005 \001(\t\022\020\n\010quantity\030\004 \001(\r\022\025\n\rpurchase_"
    "date\030\007 \001(\t\022\021\n\tproductid\030\006 \001(\005\022\017\n\007jsonStr"
    "\030\010 \001(\t\022\017\n\007diamond\030\t \001(\005", 1143);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SP_payment.txt", &protobuf_RegisterTypes);
  SM_AppStore_Verify_Order::default_instance_ = new SM_AppStore_Verify_Order();
  SM_AppStore_Verify_Order_Return::default_instance_ = new SM_AppStore_Verify_Order_Return();
  SM_ChargeData::default_instance_ = new SM_ChargeData();
  SM_ChargeDataList::default_instance_ = new SM_ChargeDataList();
  GM_PayCallBack::default_instance_ = new GM_PayCallBack();
  GM_GetPayments::default_instance_ = new GM_GetPayments();
  GM_PayCallBackRes::default_instance_ = new GM_PayCallBackRes();
  GM_PayFinish::default_instance_ = new GM_PayFinish();
  SM_GooglePlay_Verify_Order::default_instance_ = new SM_GooglePlay_Verify_Order();
  SM_GooglePlay_Verify_Order_Return::default_instance_ = new SM_GooglePlay_Verify_Order_Return();
  SM_AppStore_Verify_Order::default_instance_->InitAsDefaultInstance();
  SM_AppStore_Verify_Order_Return::default_instance_->InitAsDefaultInstance();
  SM_ChargeData::default_instance_->InitAsDefaultInstance();
  SM_ChargeDataList::default_instance_->InitAsDefaultInstance();
  GM_PayCallBack::default_instance_->InitAsDefaultInstance();
  GM_GetPayments::default_instance_->InitAsDefaultInstance();
  GM_PayCallBackRes::default_instance_->InitAsDefaultInstance();
  GM_PayFinish::default_instance_->InitAsDefaultInstance();
  SM_GooglePlay_Verify_Order::default_instance_->InitAsDefaultInstance();
  SM_GooglePlay_Verify_Order_Return::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SP_5fpayment_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SP_5fpayment_2etxt {
  StaticDescriptorInitializer_SP_5fpayment_2etxt() {
    protobuf_AddDesc_SP_5fpayment_2etxt();
  }
} static_descriptor_initializer_SP_5fpayment_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int SM_AppStore_Verify_Order::kMResultFieldNumber;
const int SM_AppStore_Verify_Order::kGetroleidFieldNumber;
const int SM_AppStore_Verify_Order::kJsonStrFieldNumber;
#endif  // !_MSC_VER

SM_AppStore_Verify_Order::SM_AppStore_Verify_Order()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_AppStore_Verify_Order::InitAsDefaultInstance() {
}

SM_AppStore_Verify_Order::SM_AppStore_Verify_Order(const SM_AppStore_Verify_Order& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_AppStore_Verify_Order::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  getroleid_ = 0;
  jsonstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_AppStore_Verify_Order::~SM_AppStore_Verify_Order() {
  SharedDtor();
}

void SM_AppStore_Verify_Order::SharedDtor() {
  if (jsonstr_ != &::google::protobuf::internal::kEmptyString) {
    delete jsonstr_;
  }
  if (this != default_instance_) {
  }
}

void SM_AppStore_Verify_Order::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_AppStore_Verify_Order::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_AppStore_Verify_Order_descriptor_;
}

const SM_AppStore_Verify_Order& SM_AppStore_Verify_Order::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fpayment_2etxt();
  return *default_instance_;
}

SM_AppStore_Verify_Order* SM_AppStore_Verify_Order::default_instance_ = NULL;

SM_AppStore_Verify_Order* SM_AppStore_Verify_Order::New() const {
  return new SM_AppStore_Verify_Order;
}

void SM_AppStore_Verify_Order::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    getroleid_ = 0;
    if (has_jsonstr()) {
      if (jsonstr_ != &::google::protobuf::internal::kEmptyString) {
        jsonstr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_AppStore_Verify_Order::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_getroleid;
        break;
      }

      // required int32 getroleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getroleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getroleid_)));
          set_has_getroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_jsonStr;
        break;
      }

      // required string jsonStr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jsonStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jsonstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jsonstr().data(), this->jsonstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_AppStore_Verify_Order::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // required int32 getroleid = 2;
  if (has_getroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->getroleid(), output);
  }

  // required string jsonStr = 3;
  if (has_jsonstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jsonstr().data(), this->jsonstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->jsonstr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_AppStore_Verify_Order::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // required int32 getroleid = 2;
  if (has_getroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->getroleid(), target);
  }

  // required string jsonStr = 3;
  if (has_jsonstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jsonstr().data(), this->jsonstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->jsonstr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_AppStore_Verify_Order::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // required int32 getroleid = 2;
    if (has_getroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getroleid());
    }

    // required string jsonStr = 3;
    if (has_jsonstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jsonstr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_AppStore_Verify_Order::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_AppStore_Verify_Order* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_AppStore_Verify_Order*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_AppStore_Verify_Order::MergeFrom(const SM_AppStore_Verify_Order& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_getroleid()) {
      set_getroleid(from.getroleid());
    }
    if (from.has_jsonstr()) {
      set_jsonstr(from.jsonstr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_AppStore_Verify_Order::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_AppStore_Verify_Order::CopyFrom(const SM_AppStore_Verify_Order& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_AppStore_Verify_Order::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SM_AppStore_Verify_Order::Swap(SM_AppStore_Verify_Order* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(getroleid_, other->getroleid_);
    std::swap(jsonstr_, other->jsonstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_AppStore_Verify_Order::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_AppStore_Verify_Order_descriptor_;
  metadata.reflection = SM_AppStore_Verify_Order_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_AppStore_Verify_Order_Return::kMResultFieldNumber;
const int SM_AppStore_Verify_Order_Return::kGetroleidFieldNumber;
const int SM_AppStore_Verify_Order_Return::kMoneyFieldNumber;
const int SM_AppStore_Verify_Order_Return::kTransactionIdFieldNumber;
const int SM_AppStore_Verify_Order_Return::kQuantityFieldNumber;
const int SM_AppStore_Verify_Order_Return::kPurchaseDateFieldNumber;
const int SM_AppStore_Verify_Order_Return::kProductidFieldNumber;
const int SM_AppStore_Verify_Order_Return::kJsonStrFieldNumber;
const int SM_AppStore_Verify_Order_Return::kDiamondFieldNumber;
#endif  // !_MSC_VER

SM_AppStore_Verify_Order_Return::SM_AppStore_Verify_Order_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_AppStore_Verify_Order_Return::InitAsDefaultInstance() {
}

SM_AppStore_Verify_Order_Return::SM_AppStore_Verify_Order_Return(const SM_AppStore_Verify_Order_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_AppStore_Verify_Order_Return::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  getroleid_ = 0;
  money_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  transaction_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quantity_ = 0u;
  purchase_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  productid_ = 0;
  jsonstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  diamond_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_AppStore_Verify_Order_Return::~SM_AppStore_Verify_Order_Return() {
  SharedDtor();
}

void SM_AppStore_Verify_Order_Return::SharedDtor() {
  if (money_ != &::google::protobuf::internal::kEmptyString) {
    delete money_;
  }
  if (transaction_id_ != &::google::protobuf::internal::kEmptyString) {
    delete transaction_id_;
  }
  if (purchase_date_ != &::google::protobuf::internal::kEmptyString) {
    delete purchase_date_;
  }
  if (jsonstr_ != &::google::protobuf::internal::kEmptyString) {
    delete jsonstr_;
  }
  if (this != default_instance_) {
  }
}

void SM_AppStore_Verify_Order_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_AppStore_Verify_Order_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_AppStore_Verify_Order_Return_descriptor_;
}

const SM_AppStore_Verify_Order_Return& SM_AppStore_Verify_Order_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fpayment_2etxt();
  return *default_instance_;
}

SM_AppStore_Verify_Order_Return* SM_AppStore_Verify_Order_Return::default_instance_ = NULL;

SM_AppStore_Verify_Order_Return* SM_AppStore_Verify_Order_Return::New() const {
  return new SM_AppStore_Verify_Order_Return;
}

void SM_AppStore_Verify_Order_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    getroleid_ = 0;
    if (has_money()) {
      if (money_ != &::google::protobuf::internal::kEmptyString) {
        money_->clear();
      }
    }
    if (has_transaction_id()) {
      if (transaction_id_ != &::google::protobuf::internal::kEmptyString) {
        transaction_id_->clear();
      }
    }
    quantity_ = 0u;
    if (has_purchase_date()) {
      if (purchase_date_ != &::google::protobuf::internal::kEmptyString) {
        purchase_date_->clear();
      }
    }
    productid_ = 0;
    if (has_jsonstr()) {
      if (jsonstr_ != &::google::protobuf::internal::kEmptyString) {
        jsonstr_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    diamond_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_AppStore_Verify_Order_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_getroleid;
        break;
      }

      // required int32 getroleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getroleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getroleid_)));
          set_has_getroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_money;
        break;
      }

      // required string money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_money()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->money().data(), this->money().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_quantity;
        break;
      }

      // optional uint32 quantity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_transaction_id;
        break;
      }

      // optional string transaction_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transaction_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transaction_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->transaction_id().data(), this->transaction_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_productid;
        break;
      }

      // optional int32 productid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_productid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &productid_)));
          set_has_productid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_purchase_date;
        break;
      }

      // optional string purchase_date = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_purchase_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_purchase_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->purchase_date().data(), this->purchase_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_jsonStr;
        break;
      }

      // optional string jsonStr = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jsonStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jsonstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jsonstr().data(), this->jsonstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_diamond;
        break;
      }

      // optional int32 diamond = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_AppStore_Verify_Order_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // required int32 getroleid = 2;
  if (has_getroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->getroleid(), output);
  }

  // required string money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->money().data(), this->money().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->money(), output);
  }

  // optional uint32 quantity = 4;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->quantity(), output);
  }

  // optional string transaction_id = 5;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transaction_id().data(), this->transaction_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->transaction_id(), output);
  }

  // optional int32 productid = 6;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->productid(), output);
  }

  // optional string purchase_date = 7;
  if (has_purchase_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->purchase_date().data(), this->purchase_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->purchase_date(), output);
  }

  // optional string jsonStr = 8;
  if (has_jsonstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jsonstr().data(), this->jsonstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->jsonstr(), output);
  }

  // optional int32 diamond = 9;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->diamond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_AppStore_Verify_Order_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // required int32 getroleid = 2;
  if (has_getroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->getroleid(), target);
  }

  // required string money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->money().data(), this->money().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->money(), target);
  }

  // optional uint32 quantity = 4;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->quantity(), target);
  }

  // optional string transaction_id = 5;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transaction_id().data(), this->transaction_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->transaction_id(), target);
  }

  // optional int32 productid = 6;
  if (has_productid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->productid(), target);
  }

  // optional string purchase_date = 7;
  if (has_purchase_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->purchase_date().data(), this->purchase_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->purchase_date(), target);
  }

  // optional string jsonStr = 8;
  if (has_jsonstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jsonstr().data(), this->jsonstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->jsonstr(), target);
  }

  // optional int32 diamond = 9;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->diamond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_AppStore_Verify_Order_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // required int32 getroleid = 2;
    if (has_getroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getroleid());
    }

    // required string money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->money());
    }

    // optional string transaction_id = 5;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transaction_id());
    }

    // optional uint32 quantity = 4;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quantity());
    }

    // optional string purchase_date = 7;
    if (has_purchase_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->purchase_date());
    }

    // optional int32 productid = 6;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->productid());
    }

    // optional string jsonStr = 8;
    if (has_jsonstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jsonstr());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 diamond = 9;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_AppStore_Verify_Order_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_AppStore_Verify_Order_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_AppStore_Verify_Order_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_AppStore_Verify_Order_Return::MergeFrom(const SM_AppStore_Verify_Order_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_getroleid()) {
      set_getroleid(from.getroleid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_purchase_date()) {
      set_purchase_date(from.purchase_date());
    }
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_jsonstr()) {
      set_jsonstr(from.jsonstr());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_AppStore_Verify_Order_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_AppStore_Verify_Order_Return::CopyFrom(const SM_AppStore_Verify_Order_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_AppStore_Verify_Order_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SM_AppStore_Verify_Order_Return::Swap(SM_AppStore_Verify_Order_Return* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(getroleid_, other->getroleid_);
    std::swap(money_, other->money_);
    std::swap(transaction_id_, other->transaction_id_);
    std::swap(quantity_, other->quantity_);
    std::swap(purchase_date_, other->purchase_date_);
    std::swap(productid_, other->productid_);
    std::swap(jsonstr_, other->jsonstr_);
    std::swap(diamond_, other->diamond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_AppStore_Verify_Order_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_AppStore_Verify_Order_Return_descriptor_;
  metadata.reflection = SM_AppStore_Verify_Order_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_ChargeData::kRoleidFieldNumber;
const int SM_ChargeData::kProductIdFieldNumber;
const int SM_ChargeData::kTimesFieldNumber;
const int SM_ChargeData::kEndTimeFieldNumber;
#endif  // !_MSC_VER

SM_ChargeData::SM_ChargeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_ChargeData::InitAsDefaultInstance() {
}

SM_ChargeData::SM_ChargeData(const SM_ChargeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_ChargeData::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  product_id_ = 0;
  times_ = 0;
  end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_ChargeData::~SM_ChargeData() {
  SharedDtor();
}

void SM_ChargeData::SharedDtor() {
  if (end_time_ != &::google::protobuf::internal::kEmptyString) {
    delete end_time_;
  }
  if (this != default_instance_) {
  }
}

void SM_ChargeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_ChargeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_ChargeData_descriptor_;
}

const SM_ChargeData& SM_ChargeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fpayment_2etxt();
  return *default_instance_;
}

SM_ChargeData* SM_ChargeData::default_instance_ = NULL;

SM_ChargeData* SM_ChargeData::New() const {
  return new SM_ChargeData;
}

void SM_ChargeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    product_id_ = 0;
    times_ = 0;
    if (has_end_time()) {
      if (end_time_ != &::google::protobuf::internal::kEmptyString) {
        end_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_ChargeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_product_id;
        break;
      }

      // required int32 product_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_product_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &product_id_)));
          set_has_product_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_times;
        break;
      }

      // required int32 times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_end_time;
        break;
      }

      // required string end_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->end_time().data(), this->end_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_ChargeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required int32 product_id = 2;
  if (has_product_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->product_id(), output);
  }

  // required int32 times = 3;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->times(), output);
  }

  // required string end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->end_time().data(), this->end_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_ChargeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required int32 product_id = 2;
  if (has_product_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->product_id(), target);
  }

  // required int32 times = 3;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->times(), target);
  }

  // required string end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->end_time().data(), this->end_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_ChargeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required int32 product_id = 2;
    if (has_product_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->product_id());
    }

    // required int32 times = 3;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

    // required string end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_ChargeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_ChargeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_ChargeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_ChargeData::MergeFrom(const SM_ChargeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_product_id()) {
      set_product_id(from.product_id());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_ChargeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_ChargeData::CopyFrom(const SM_ChargeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_ChargeData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SM_ChargeData::Swap(SM_ChargeData* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(product_id_, other->product_id_);
    std::swap(times_, other->times_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_ChargeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_ChargeData_descriptor_;
  metadata.reflection = SM_ChargeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_ChargeDataList::kCountFieldNumber;
const int SM_ChargeDataList::kListFieldNumber;
#endif  // !_MSC_VER

SM_ChargeDataList::SM_ChargeDataList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_ChargeDataList::InitAsDefaultInstance() {
}

SM_ChargeDataList::SM_ChargeDataList(const SM_ChargeDataList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_ChargeDataList::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_ChargeDataList::~SM_ChargeDataList() {
  SharedDtor();
}

void SM_ChargeDataList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_ChargeDataList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_ChargeDataList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_ChargeDataList_descriptor_;
}

const SM_ChargeDataList& SM_ChargeDataList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fpayment_2etxt();
  return *default_instance_;
}

SM_ChargeDataList* SM_ChargeDataList::default_instance_ = NULL;

SM_ChargeDataList* SM_ChargeDataList::New() const {
  return new SM_ChargeDataList;
}

void SM_ChargeDataList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_ChargeDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }

      // repeated .SM_ChargeData list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_ChargeDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated .SM_ChargeData list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_ChargeDataList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated .SM_ChargeData list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_ChargeDataList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .SM_ChargeData list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_ChargeDataList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_ChargeDataList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_ChargeDataList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_ChargeDataList::MergeFrom(const SM_ChargeDataList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_ChargeDataList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_ChargeDataList::CopyFrom(const SM_ChargeDataList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_ChargeDataList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void SM_ChargeDataList::Swap(SM_ChargeDataList* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_ChargeDataList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_ChargeDataList_descriptor_;
  metadata.reflection = SM_ChargeDataList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PayCallBack::kMoneyFieldNumber;
const int GM_PayCallBack::kOrderidFieldNumber;
const int GM_PayCallBack::kChannelFieldNumber;
const int GM_PayCallBack::kPlatformFieldNumber;
const int GM_PayCallBack::kRoleidFieldNumber;
const int GM_PayCallBack::kFinishTimeFieldNumber;
const int GM_PayCallBack::kProductIDFieldNumber;
#endif  // !_MSC_VER

GM_PayCallBack::GM_PayCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PayCallBack::InitAsDefaultInstance() {
}

GM_PayCallBack::GM_PayCallBack(const GM_PayCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PayCallBack::SharedCtor() {
  _cached_size_ = 0;
  money_ = 0;
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = 0;
  roleid_ = 0;
  finish_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  productid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PayCallBack::~GM_PayCallBack() {
  SharedDtor();
}

void GM_PayCallBack::SharedDtor() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (finish_time_ != &::google::protobuf::internal::kEmptyString) {
    delete finish_time_;
  }
  if (this != default_instance_) {
  }
}

void GM_PayCallBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PayCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PayCallBack_descriptor_;
}

const GM_PayCallBack& GM_PayCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fpayment_2etxt();
  return *default_instance_;
}

GM_PayCallBack* GM_PayCallBack::default_instance_ = NULL;

GM_PayCallBack* GM_PayCallBack::New() const {
  return new GM_PayCallBack;
}

void GM_PayCallBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    money_ = 0;
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::kEmptyString) {
        orderid_->clear();
      }
    }
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
    platform_ = 0;
    roleid_ = 0;
    if (has_finish_time()) {
      if (finish_time_ != &::google::protobuf::internal::kEmptyString) {
        finish_time_->clear();
      }
    }
    productid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PayCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_orderid;
        break;
      }

      // required string orderid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orderid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_channel;
        break;
      }

      // required string channel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_platform;
        break;
      }

      // optional int32 platform = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_roleid;
        break;
      }

      // required int32 roleid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_finish_time;
        break;
      }

      // required string finish_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_finish_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_finish_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->finish_time().data(), this->finish_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_productID;
        break;
      }

      // optional int32 productID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_productID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &productid_)));
          set_has_productid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PayCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float money = 1;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->money(), output);
  }

  // required string orderid = 3;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->orderid(), output);
  }

  // required string channel = 4;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->channel(), output);
  }

  // optional int32 platform = 5;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->platform(), output);
  }

  // required int32 roleid = 7;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->roleid(), output);
  }

  // required string finish_time = 8;
  if (has_finish_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->finish_time().data(), this->finish_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->finish_time(), output);
  }

  // optional int32 productID = 9;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->productid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PayCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float money = 1;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->money(), target);
  }

  // required string orderid = 3;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->orderid(), target);
  }

  // required string channel = 4;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->channel(), target);
  }

  // optional int32 platform = 5;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->platform(), target);
  }

  // required int32 roleid = 7;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->roleid(), target);
  }

  // required string finish_time = 8;
  if (has_finish_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->finish_time().data(), this->finish_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->finish_time(), target);
  }

  // optional int32 productID = 9;
  if (has_productid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->productid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PayCallBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float money = 1;
    if (has_money()) {
      total_size += 1 + 4;
    }

    // required string orderid = 3;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderid());
    }

    // required string channel = 4;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

    // optional int32 platform = 5;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform());
    }

    // required int32 roleid = 7;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required string finish_time = 8;
    if (has_finish_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->finish_time());
    }

    // optional int32 productID = 9;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->productid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PayCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PayCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PayCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PayCallBack::MergeFrom(const GM_PayCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_finish_time()) {
      set_finish_time(from.finish_time());
    }
    if (from.has_productid()) {
      set_productid(from.productid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PayCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PayCallBack::CopyFrom(const GM_PayCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PayCallBack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;

  return true;
}

void GM_PayCallBack::Swap(GM_PayCallBack* other) {
  if (other != this) {
    std::swap(money_, other->money_);
    std::swap(orderid_, other->orderid_);
    std::swap(channel_, other->channel_);
    std::swap(platform_, other->platform_);
    std::swap(roleid_, other->roleid_);
    std::swap(finish_time_, other->finish_time_);
    std::swap(productid_, other->productid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PayCallBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PayCallBack_descriptor_;
  metadata.reflection = GM_PayCallBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GetPayments::kCountFieldNumber;
const int GM_GetPayments::kConnectFieldNumber;
const int GM_GetPayments::kIshttprequestFieldNumber;
const int GM_GetPayments::kPaymentsFieldNumber;
#endif  // !_MSC_VER

GM_GetPayments::GM_GetPayments()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GetPayments::InitAsDefaultInstance() {
}

GM_GetPayments::GM_GetPayments(const GM_GetPayments& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GetPayments::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  connect_ = 0u;
  ishttprequest_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GetPayments::~GM_GetPayments() {
  SharedDtor();
}

void GM_GetPayments::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GetPayments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GetPayments::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GetPayments_descriptor_;
}

const GM_GetPayments& GM_GetPayments::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fpayment_2etxt();
  return *default_instance_;
}

GM_GetPayments* GM_GetPayments::default_instance_ = NULL;

GM_GetPayments* GM_GetPayments::New() const {
  return new GM_GetPayments;
}

void GM_GetPayments::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
    connect_ = 0u;
    ishttprequest_ = false;
  }
  payments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GetPayments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_payments;
        break;
      }

      // repeated .GM_PayCallBack payments = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_payments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_payments;
        if (input->ExpectTag(24)) goto parse_connect;
        break;
      }

      // required uint32 connect = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connect_)));
          set_has_connect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ishttprequest;
        break;
      }

      // required bool ishttprequest = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ishttprequest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishttprequest_)));
          set_has_ishttprequest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GetPayments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated .GM_PayCallBack payments = 2;
  for (int i = 0; i < this->payments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->payments(i), output);
  }

  // required uint32 connect = 3;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->connect(), output);
  }

  // required bool ishttprequest = 4;
  if (has_ishttprequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ishttprequest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GetPayments::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated .GM_PayCallBack payments = 2;
  for (int i = 0; i < this->payments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->payments(i), target);
  }

  // required uint32 connect = 3;
  if (has_connect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->connect(), target);
  }

  // required bool ishttprequest = 4;
  if (has_ishttprequest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ishttprequest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GetPayments::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required uint32 connect = 3;
    if (has_connect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connect());
    }

    // required bool ishttprequest = 4;
    if (has_ishttprequest()) {
      total_size += 1 + 1;
    }

  }
  // repeated .GM_PayCallBack payments = 2;
  total_size += 1 * this->payments_size();
  for (int i = 0; i < this->payments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->payments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GetPayments::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GetPayments* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GetPayments*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GetPayments::MergeFrom(const GM_GetPayments& from) {
  GOOGLE_CHECK_NE(&from, this);
  payments_.MergeFrom(from.payments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_connect()) {
      set_connect(from.connect());
    }
    if (from.has_ishttprequest()) {
      set_ishttprequest(from.ishttprequest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GetPayments::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GetPayments::CopyFrom(const GM_GetPayments& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GetPayments::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < payments_size(); i++) {
    if (!this->payments(i).IsInitialized()) return false;
  }
  return true;
}

void GM_GetPayments::Swap(GM_GetPayments* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(connect_, other->connect_);
    std::swap(ishttprequest_, other->ishttprequest_);
    payments_.Swap(&other->payments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GetPayments::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GetPayments_descriptor_;
  metadata.reflection = GM_GetPayments_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PayCallBackRes::kMResultFieldNumber;
const int GM_PayCallBackRes::kConnectFieldNumber;
#endif  // !_MSC_VER

GM_PayCallBackRes::GM_PayCallBackRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PayCallBackRes::InitAsDefaultInstance() {
}

GM_PayCallBackRes::GM_PayCallBackRes(const GM_PayCallBackRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PayCallBackRes::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  connect_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PayCallBackRes::~GM_PayCallBackRes() {
  SharedDtor();
}

void GM_PayCallBackRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PayCallBackRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PayCallBackRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PayCallBackRes_descriptor_;
}

const GM_PayCallBackRes& GM_PayCallBackRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fpayment_2etxt();
  return *default_instance_;
}

GM_PayCallBackRes* GM_PayCallBackRes::default_instance_ = NULL;

GM_PayCallBackRes* GM_PayCallBackRes::New() const {
  return new GM_PayCallBackRes;
}

void GM_PayCallBackRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    connect_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PayCallBackRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_connect;
        break;
      }

      // required uint32 connect = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connect_)));
          set_has_connect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PayCallBackRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // required uint32 connect = 2;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->connect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PayCallBackRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // required uint32 connect = 2;
  if (has_connect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->connect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PayCallBackRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // required uint32 connect = 2;
    if (has_connect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connect());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PayCallBackRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PayCallBackRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PayCallBackRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PayCallBackRes::MergeFrom(const GM_PayCallBackRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_connect()) {
      set_connect(from.connect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PayCallBackRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PayCallBackRes::CopyFrom(const GM_PayCallBackRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PayCallBackRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_PayCallBackRes::Swap(GM_PayCallBackRes* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(connect_, other->connect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PayCallBackRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PayCallBackRes_descriptor_;
  metadata.reflection = GM_PayCallBackRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PayFinish::kOrderidFieldNumber;
const int GM_PayFinish::kPlatformFieldNumber;
const int GM_PayFinish::kChannelFieldNumber;
const int GM_PayFinish::kFinishTimeFieldNumber;
#endif  // !_MSC_VER

GM_PayFinish::GM_PayFinish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PayFinish::InitAsDefaultInstance() {
}

GM_PayFinish::GM_PayFinish(const GM_PayFinish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PayFinish::SharedCtor() {
  _cached_size_ = 0;
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = 0;
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  finish_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PayFinish::~GM_PayFinish() {
  SharedDtor();
}

void GM_PayFinish::SharedDtor() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (finish_time_ != &::google::protobuf::internal::kEmptyString) {
    delete finish_time_;
  }
  if (this != default_instance_) {
  }
}

void GM_PayFinish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PayFinish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PayFinish_descriptor_;
}

const GM_PayFinish& GM_PayFinish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fpayment_2etxt();
  return *default_instance_;
}

GM_PayFinish* GM_PayFinish::default_instance_ = NULL;

GM_PayFinish* GM_PayFinish::New() const {
  return new GM_PayFinish;
}

void GM_PayFinish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::kEmptyString) {
        orderid_->clear();
      }
    }
    platform_ = 0;
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
    if (has_finish_time()) {
      if (finish_time_ != &::google::protobuf::internal::kEmptyString) {
        finish_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PayFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string orderid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_platform;
        break;
      }

      // optional int32 platform = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_channel;
        break;
      }

      // optional string channel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_finish_time;
        break;
      }

      // optional string finish_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_finish_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_finish_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->finish_time().data(), this->finish_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PayFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string orderid = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->orderid(), output);
  }

  // optional int32 platform = 2;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->platform(), output);
  }

  // optional string channel = 3;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->channel(), output);
  }

  // optional string finish_time = 4;
  if (has_finish_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->finish_time().data(), this->finish_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->finish_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PayFinish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string orderid = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->orderid(), target);
  }

  // optional int32 platform = 2;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->platform(), target);
  }

  // optional string channel = 3;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channel(), target);
  }

  // optional string finish_time = 4;
  if (has_finish_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->finish_time().data(), this->finish_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->finish_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PayFinish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string orderid = 1;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderid());
    }

    // optional int32 platform = 2;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform());
    }

    // optional string channel = 3;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

    // optional string finish_time = 4;
    if (has_finish_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->finish_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PayFinish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PayFinish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PayFinish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PayFinish::MergeFrom(const GM_PayFinish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_finish_time()) {
      set_finish_time(from.finish_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PayFinish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PayFinish::CopyFrom(const GM_PayFinish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PayFinish::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_PayFinish::Swap(GM_PayFinish* other) {
  if (other != this) {
    std::swap(orderid_, other->orderid_);
    std::swap(platform_, other->platform_);
    std::swap(channel_, other->channel_);
    std::swap(finish_time_, other->finish_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PayFinish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PayFinish_descriptor_;
  metadata.reflection = GM_PayFinish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_GooglePlay_Verify_Order::kMResultFieldNumber;
const int SM_GooglePlay_Verify_Order::kGetroleidFieldNumber;
const int SM_GooglePlay_Verify_Order::kJsonStrFieldNumber;
#endif  // !_MSC_VER

SM_GooglePlay_Verify_Order::SM_GooglePlay_Verify_Order()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_GooglePlay_Verify_Order::InitAsDefaultInstance() {
}

SM_GooglePlay_Verify_Order::SM_GooglePlay_Verify_Order(const SM_GooglePlay_Verify_Order& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_GooglePlay_Verify_Order::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  getroleid_ = 0;
  jsonstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_GooglePlay_Verify_Order::~SM_GooglePlay_Verify_Order() {
  SharedDtor();
}

void SM_GooglePlay_Verify_Order::SharedDtor() {
  if (jsonstr_ != &::google::protobuf::internal::kEmptyString) {
    delete jsonstr_;
  }
  if (this != default_instance_) {
  }
}

void SM_GooglePlay_Verify_Order::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_GooglePlay_Verify_Order::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_GooglePlay_Verify_Order_descriptor_;
}

const SM_GooglePlay_Verify_Order& SM_GooglePlay_Verify_Order::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fpayment_2etxt();
  return *default_instance_;
}

SM_GooglePlay_Verify_Order* SM_GooglePlay_Verify_Order::default_instance_ = NULL;

SM_GooglePlay_Verify_Order* SM_GooglePlay_Verify_Order::New() const {
  return new SM_GooglePlay_Verify_Order;
}

void SM_GooglePlay_Verify_Order::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    getroleid_ = 0;
    if (has_jsonstr()) {
      if (jsonstr_ != &::google::protobuf::internal::kEmptyString) {
        jsonstr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_GooglePlay_Verify_Order::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_getroleid;
        break;
      }

      // required int32 getroleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getroleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getroleid_)));
          set_has_getroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_jsonStr;
        break;
      }

      // required string jsonStr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jsonStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jsonstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jsonstr().data(), this->jsonstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_GooglePlay_Verify_Order::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // required int32 getroleid = 2;
  if (has_getroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->getroleid(), output);
  }

  // required string jsonStr = 3;
  if (has_jsonstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jsonstr().data(), this->jsonstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->jsonstr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_GooglePlay_Verify_Order::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // required int32 getroleid = 2;
  if (has_getroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->getroleid(), target);
  }

  // required string jsonStr = 3;
  if (has_jsonstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jsonstr().data(), this->jsonstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->jsonstr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_GooglePlay_Verify_Order::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // required int32 getroleid = 2;
    if (has_getroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getroleid());
    }

    // required string jsonStr = 3;
    if (has_jsonstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jsonstr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_GooglePlay_Verify_Order::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_GooglePlay_Verify_Order* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_GooglePlay_Verify_Order*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_GooglePlay_Verify_Order::MergeFrom(const SM_GooglePlay_Verify_Order& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_getroleid()) {
      set_getroleid(from.getroleid());
    }
    if (from.has_jsonstr()) {
      set_jsonstr(from.jsonstr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_GooglePlay_Verify_Order::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_GooglePlay_Verify_Order::CopyFrom(const SM_GooglePlay_Verify_Order& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_GooglePlay_Verify_Order::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SM_GooglePlay_Verify_Order::Swap(SM_GooglePlay_Verify_Order* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(getroleid_, other->getroleid_);
    std::swap(jsonstr_, other->jsonstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_GooglePlay_Verify_Order::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_GooglePlay_Verify_Order_descriptor_;
  metadata.reflection = SM_GooglePlay_Verify_Order_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_GooglePlay_Verify_Order_Return::kMResultFieldNumber;
const int SM_GooglePlay_Verify_Order_Return::kGetroleidFieldNumber;
const int SM_GooglePlay_Verify_Order_Return::kMoneyFieldNumber;
const int SM_GooglePlay_Verify_Order_Return::kTransactionIdFieldNumber;
const int SM_GooglePlay_Verify_Order_Return::kQuantityFieldNumber;
const int SM_GooglePlay_Verify_Order_Return::kPurchaseDateFieldNumber;
const int SM_GooglePlay_Verify_Order_Return::kProductidFieldNumber;
const int SM_GooglePlay_Verify_Order_Return::kJsonStrFieldNumber;
const int SM_GooglePlay_Verify_Order_Return::kDiamondFieldNumber;
#endif  // !_MSC_VER

SM_GooglePlay_Verify_Order_Return::SM_GooglePlay_Verify_Order_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_GooglePlay_Verify_Order_Return::InitAsDefaultInstance() {
}

SM_GooglePlay_Verify_Order_Return::SM_GooglePlay_Verify_Order_Return(const SM_GooglePlay_Verify_Order_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_GooglePlay_Verify_Order_Return::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  getroleid_ = 0;
  money_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  transaction_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quantity_ = 0u;
  purchase_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  productid_ = 0;
  jsonstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  diamond_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_GooglePlay_Verify_Order_Return::~SM_GooglePlay_Verify_Order_Return() {
  SharedDtor();
}

void SM_GooglePlay_Verify_Order_Return::SharedDtor() {
  if (money_ != &::google::protobuf::internal::kEmptyString) {
    delete money_;
  }
  if (transaction_id_ != &::google::protobuf::internal::kEmptyString) {
    delete transaction_id_;
  }
  if (purchase_date_ != &::google::protobuf::internal::kEmptyString) {
    delete purchase_date_;
  }
  if (jsonstr_ != &::google::protobuf::internal::kEmptyString) {
    delete jsonstr_;
  }
  if (this != default_instance_) {
  }
}

void SM_GooglePlay_Verify_Order_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_GooglePlay_Verify_Order_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_GooglePlay_Verify_Order_Return_descriptor_;
}

const SM_GooglePlay_Verify_Order_Return& SM_GooglePlay_Verify_Order_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fpayment_2etxt();
  return *default_instance_;
}

SM_GooglePlay_Verify_Order_Return* SM_GooglePlay_Verify_Order_Return::default_instance_ = NULL;

SM_GooglePlay_Verify_Order_Return* SM_GooglePlay_Verify_Order_Return::New() const {
  return new SM_GooglePlay_Verify_Order_Return;
}

void SM_GooglePlay_Verify_Order_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    getroleid_ = 0;
    if (has_money()) {
      if (money_ != &::google::protobuf::internal::kEmptyString) {
        money_->clear();
      }
    }
    if (has_transaction_id()) {
      if (transaction_id_ != &::google::protobuf::internal::kEmptyString) {
        transaction_id_->clear();
      }
    }
    quantity_ = 0u;
    if (has_purchase_date()) {
      if (purchase_date_ != &::google::protobuf::internal::kEmptyString) {
        purchase_date_->clear();
      }
    }
    productid_ = 0;
    if (has_jsonstr()) {
      if (jsonstr_ != &::google::protobuf::internal::kEmptyString) {
        jsonstr_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    diamond_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_GooglePlay_Verify_Order_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_getroleid;
        break;
      }

      // required int32 getroleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getroleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getroleid_)));
          set_has_getroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_money;
        break;
      }

      // required string money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_money()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->money().data(), this->money().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_quantity;
        break;
      }

      // optional uint32 quantity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_transaction_id;
        break;
      }

      // optional string transaction_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transaction_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transaction_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->transaction_id().data(), this->transaction_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_productid;
        break;
      }

      // optional int32 productid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_productid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &productid_)));
          set_has_productid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_purchase_date;
        break;
      }

      // optional string purchase_date = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_purchase_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_purchase_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->purchase_date().data(), this->purchase_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_jsonStr;
        break;
      }

      // optional string jsonStr = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jsonStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jsonstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jsonstr().data(), this->jsonstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_diamond;
        break;
      }

      // optional int32 diamond = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_GooglePlay_Verify_Order_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // required int32 getroleid = 2;
  if (has_getroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->getroleid(), output);
  }

  // required string money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->money().data(), this->money().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->money(), output);
  }

  // optional uint32 quantity = 4;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->quantity(), output);
  }

  // optional string transaction_id = 5;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transaction_id().data(), this->transaction_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->transaction_id(), output);
  }

  // optional int32 productid = 6;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->productid(), output);
  }

  // optional string purchase_date = 7;
  if (has_purchase_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->purchase_date().data(), this->purchase_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->purchase_date(), output);
  }

  // optional string jsonStr = 8;
  if (has_jsonstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jsonstr().data(), this->jsonstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->jsonstr(), output);
  }

  // optional int32 diamond = 9;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->diamond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_GooglePlay_Verify_Order_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // required int32 getroleid = 2;
  if (has_getroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->getroleid(), target);
  }

  // required string money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->money().data(), this->money().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->money(), target);
  }

  // optional uint32 quantity = 4;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->quantity(), target);
  }

  // optional string transaction_id = 5;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transaction_id().data(), this->transaction_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->transaction_id(), target);
  }

  // optional int32 productid = 6;
  if (has_productid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->productid(), target);
  }

  // optional string purchase_date = 7;
  if (has_purchase_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->purchase_date().data(), this->purchase_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->purchase_date(), target);
  }

  // optional string jsonStr = 8;
  if (has_jsonstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jsonstr().data(), this->jsonstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->jsonstr(), target);
  }

  // optional int32 diamond = 9;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->diamond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_GooglePlay_Verify_Order_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // required int32 getroleid = 2;
    if (has_getroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getroleid());
    }

    // required string money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->money());
    }

    // optional string transaction_id = 5;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transaction_id());
    }

    // optional uint32 quantity = 4;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quantity());
    }

    // optional string purchase_date = 7;
    if (has_purchase_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->purchase_date());
    }

    // optional int32 productid = 6;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->productid());
    }

    // optional string jsonStr = 8;
    if (has_jsonstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jsonstr());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 diamond = 9;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_GooglePlay_Verify_Order_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_GooglePlay_Verify_Order_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_GooglePlay_Verify_Order_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_GooglePlay_Verify_Order_Return::MergeFrom(const SM_GooglePlay_Verify_Order_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_getroleid()) {
      set_getroleid(from.getroleid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_purchase_date()) {
      set_purchase_date(from.purchase_date());
    }
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_jsonstr()) {
      set_jsonstr(from.jsonstr());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_GooglePlay_Verify_Order_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_GooglePlay_Verify_Order_Return::CopyFrom(const SM_GooglePlay_Verify_Order_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_GooglePlay_Verify_Order_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SM_GooglePlay_Verify_Order_Return::Swap(SM_GooglePlay_Verify_Order_Return* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(getroleid_, other->getroleid_);
    std::swap(money_, other->money_);
    std::swap(transaction_id_, other->transaction_id_);
    std::swap(quantity_, other->quantity_);
    std::swap(purchase_date_, other->purchase_date_);
    std::swap(productid_, other->productid_);
    std::swap(jsonstr_, other->jsonstr_);
    std::swap(diamond_, other->diamond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_GooglePlay_Verify_Order_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_GooglePlay_Verify_Order_Return_descriptor_;
  metadata.reflection = SM_GooglePlay_Verify_Order_Return_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
