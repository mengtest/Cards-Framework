// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commonmove.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "commonmove.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_RoleShowChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_RoleShowChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_RoleTitleChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_RoleTitleChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_RoleGangChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_RoleGangChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_VIPChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_VIPChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_NetRoleAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_NetRoleAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_MpChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_MpChangeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_RequestResetPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_RequestResetPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ReturnResetPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ReturnResetPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_RoleNameChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_RoleNameChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_RoleTopGradeChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_RoleTopGradeChange_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_commonmove_2etxt() {
  protobuf_AddDesc_commonmove_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "commonmove.txt");
  GOOGLE_CHECK(file != NULL);
  GM_RoleShowChange_descriptor_ = file->message_type(0);
  static const int GM_RoleShowChange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleShowChange, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleShowChange, equippos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleShowChange, equipid_),
  };
  GM_RoleShowChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_RoleShowChange_descriptor_,
      GM_RoleShowChange::default_instance_,
      GM_RoleShowChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleShowChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleShowChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_RoleShowChange));
  GM_RoleTitleChange_descriptor_ = file->message_type(1);
  static const int GM_RoleTitleChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleTitleChange, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleTitleChange, titleid_),
  };
  GM_RoleTitleChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_RoleTitleChange_descriptor_,
      GM_RoleTitleChange::default_instance_,
      GM_RoleTitleChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleTitleChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleTitleChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_RoleTitleChange));
  GM_RoleGangChange_descriptor_ = file->message_type(2);
  static const int GM_RoleGangChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleGangChange, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleGangChange, gangname_),
  };
  GM_RoleGangChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_RoleGangChange_descriptor_,
      GM_RoleGangChange::default_instance_,
      GM_RoleGangChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleGangChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleGangChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_RoleGangChange));
  GM_VIPChange_descriptor_ = file->message_type(3);
  static const int GM_VIPChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_VIPChange, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_VIPChange, viplv_),
  };
  GM_VIPChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_VIPChange_descriptor_,
      GM_VIPChange::default_instance_,
      GM_VIPChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_VIPChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_VIPChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_VIPChange));
  GM_NetRoleAction_descriptor_ = file->message_type(4);
  static const int GM_NetRoleAction_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NetRoleAction, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NetRoleAction, motiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NetRoleAction, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NetRoleAction, posz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NetRoleAction, vecx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NetRoleAction, vecz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NetRoleAction, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NetRoleAction, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NetRoleAction, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NetRoleAction, iscommand_),
  };
  GM_NetRoleAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_NetRoleAction_descriptor_,
      GM_NetRoleAction::default_instance_,
      GM_NetRoleAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NetRoleAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NetRoleAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_NetRoleAction));
  GM_MpChangeNotify_descriptor_ = file->message_type(5);
  static const int GM_MpChangeNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MpChangeNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MpChangeNotify, roletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MpChangeNotify, mpchange_),
  };
  GM_MpChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_MpChangeNotify_descriptor_,
      GM_MpChangeNotify::default_instance_,
      GM_MpChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MpChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MpChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_MpChangeNotify));
  GM_RequestResetPos_descriptor_ = file->message_type(6);
  static const int GM_RequestResetPos_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RequestResetPos, sceneid_),
  };
  GM_RequestResetPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_RequestResetPos_descriptor_,
      GM_RequestResetPos::default_instance_,
      GM_RequestResetPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RequestResetPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RequestResetPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_RequestResetPos));
  GM_ReturnResetPos_descriptor_ = file->message_type(7);
  static const int GM_ReturnResetPos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReturnResetPos, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReturnResetPos, posz_),
  };
  GM_ReturnResetPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ReturnResetPos_descriptor_,
      GM_ReturnResetPos::default_instance_,
      GM_ReturnResetPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReturnResetPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReturnResetPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ReturnResetPos));
  GM_RoleNameChange_descriptor_ = file->message_type(8);
  static const int GM_RoleNameChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleNameChange, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleNameChange, rolename_),
  };
  GM_RoleNameChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_RoleNameChange_descriptor_,
      GM_RoleNameChange::default_instance_,
      GM_RoleNameChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleNameChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleNameChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_RoleNameChange));
  GM_RoleTopGradeChange_descriptor_ = file->message_type(9);
  static const int GM_RoleTopGradeChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleTopGradeChange, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleTopGradeChange, newgradelv_),
  };
  GM_RoleTopGradeChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_RoleTopGradeChange_descriptor_,
      GM_RoleTopGradeChange::default_instance_,
      GM_RoleTopGradeChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleTopGradeChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleTopGradeChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_RoleTopGradeChange));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_commonmove_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_RoleShowChange_descriptor_, &GM_RoleShowChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_RoleTitleChange_descriptor_, &GM_RoleTitleChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_RoleGangChange_descriptor_, &GM_RoleGangChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_VIPChange_descriptor_, &GM_VIPChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_NetRoleAction_descriptor_, &GM_NetRoleAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_MpChangeNotify_descriptor_, &GM_MpChangeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_RequestResetPos_descriptor_, &GM_RequestResetPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ReturnResetPos_descriptor_, &GM_ReturnResetPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_RoleNameChange_descriptor_, &GM_RoleNameChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_RoleTopGradeChange_descriptor_, &GM_RoleTopGradeChange::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_commonmove_2etxt() {
  delete GM_RoleShowChange::default_instance_;
  delete GM_RoleShowChange_reflection_;
  delete GM_RoleTitleChange::default_instance_;
  delete GM_RoleTitleChange_reflection_;
  delete GM_RoleGangChange::default_instance_;
  delete GM_RoleGangChange_reflection_;
  delete GM_VIPChange::default_instance_;
  delete GM_VIPChange_reflection_;
  delete GM_NetRoleAction::default_instance_;
  delete GM_NetRoleAction_reflection_;
  delete GM_MpChangeNotify::default_instance_;
  delete GM_MpChangeNotify_reflection_;
  delete GM_RequestResetPos::default_instance_;
  delete GM_RequestResetPos_reflection_;
  delete GM_ReturnResetPos::default_instance_;
  delete GM_ReturnResetPos_reflection_;
  delete GM_RoleNameChange::default_instance_;
  delete GM_RoleNameChange_reflection_;
  delete GM_RoleTopGradeChange::default_instance_;
  delete GM_RoleTopGradeChange_reflection_;
}

void protobuf_AddDesc_commonmove_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016commonmove.txt\"B\n\021GM_RoleShowChange\022\n\n"
    "\002id\030\001 \002(\005\022\020\n\010equippos\030\002 \002(\005\022\017\n\007equipid\030\003"
    " \002(\005\"1\n\022GM_RoleTitleChange\022\n\n\002id\030\001 \002(\005\022\017"
    "\n\007titleId\030\002 \002(\005\"1\n\021GM_RoleGangChange\022\n\n\002"
    "id\030\001 \002(\005\022\020\n\010gangName\030\002 \002(\t\")\n\014GM_VIPChan"
    "ge\022\n\n\002id\030\001 \002(\005\022\r\n\005viplv\030\002 \002(\005\"\252\001\n\020GM_Net"
    "RoleAction\022\n\n\002id\030\001 \002(\005\022\022\n\nmotionType\030\002 \002"
    "(\005\022\014\n\004posX\030\004 \001(\002\022\014\n\004posZ\030\005 \001(\002\022\014\n\004vecX\030\006"
    " \001(\002\022\014\n\004vecZ\030\007 \001(\002\022\014\n\004time\030\010 \002(\005\022\017\n\007scen"
    "eID\030\t \002(\005\022\014\n\004type\030\n \002(\005\022\021\n\tisCommand\030\013 \001"
    "(\005\"G\n\021GM_MpChangeNotify\022\016\n\006roleId\030\001 \002(\005\022"
    "\020\n\010roleType\030\002 \002(\005\022\020\n\010mpChange\030\003 \002(\005\"%\n\022G"
    "M_RequestResetPos\022\017\n\007sceneID\030\001 \002(\005\"/\n\021GM"
    "_ReturnResetPos\022\014\n\004posx\030\001 \002(\005\022\014\n\004posz\030\002 "
    "\002(\005\"5\n\021GM_RoleNameChange\022\016\n\006roleID\030\001 \002(\005"
    "\022\020\n\010roleName\030\002 \001(\t\";\n\025GM_RoleTopGradeCha"
    "nge\022\016\n\006roleid\030\001 \002(\005\022\022\n\nnewgradelv\030\002 \002(\005", 679);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "commonmove.txt", &protobuf_RegisterTypes);
  GM_RoleShowChange::default_instance_ = new GM_RoleShowChange();
  GM_RoleTitleChange::default_instance_ = new GM_RoleTitleChange();
  GM_RoleGangChange::default_instance_ = new GM_RoleGangChange();
  GM_VIPChange::default_instance_ = new GM_VIPChange();
  GM_NetRoleAction::default_instance_ = new GM_NetRoleAction();
  GM_MpChangeNotify::default_instance_ = new GM_MpChangeNotify();
  GM_RequestResetPos::default_instance_ = new GM_RequestResetPos();
  GM_ReturnResetPos::default_instance_ = new GM_ReturnResetPos();
  GM_RoleNameChange::default_instance_ = new GM_RoleNameChange();
  GM_RoleTopGradeChange::default_instance_ = new GM_RoleTopGradeChange();
  GM_RoleShowChange::default_instance_->InitAsDefaultInstance();
  GM_RoleTitleChange::default_instance_->InitAsDefaultInstance();
  GM_RoleGangChange::default_instance_->InitAsDefaultInstance();
  GM_VIPChange::default_instance_->InitAsDefaultInstance();
  GM_NetRoleAction::default_instance_->InitAsDefaultInstance();
  GM_MpChangeNotify::default_instance_->InitAsDefaultInstance();
  GM_RequestResetPos::default_instance_->InitAsDefaultInstance();
  GM_ReturnResetPos::default_instance_->InitAsDefaultInstance();
  GM_RoleNameChange::default_instance_->InitAsDefaultInstance();
  GM_RoleTopGradeChange::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_commonmove_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_commonmove_2etxt {
  StaticDescriptorInitializer_commonmove_2etxt() {
    protobuf_AddDesc_commonmove_2etxt();
  }
} static_descriptor_initializer_commonmove_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_RoleShowChange::kIdFieldNumber;
const int GM_RoleShowChange::kEquipposFieldNumber;
const int GM_RoleShowChange::kEquipidFieldNumber;
#endif  // !_MSC_VER

GM_RoleShowChange::GM_RoleShowChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_RoleShowChange::InitAsDefaultInstance() {
}

GM_RoleShowChange::GM_RoleShowChange(const GM_RoleShowChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_RoleShowChange::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  equippos_ = 0;
  equipid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_RoleShowChange::~GM_RoleShowChange() {
  SharedDtor();
}

void GM_RoleShowChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_RoleShowChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_RoleShowChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_RoleShowChange_descriptor_;
}

const GM_RoleShowChange& GM_RoleShowChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonmove_2etxt();
  return *default_instance_;
}

GM_RoleShowChange* GM_RoleShowChange::default_instance_ = NULL;

GM_RoleShowChange* GM_RoleShowChange::New() const {
  return new GM_RoleShowChange;
}

void GM_RoleShowChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    equippos_ = 0;
    equipid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_RoleShowChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equippos;
        break;
      }

      // required int32 equippos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equippos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equippos_)));
          set_has_equippos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equipid;
        break;
      }

      // required int32 equipid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_RoleShowChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 equippos = 2;
  if (has_equippos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equippos(), output);
  }

  // required int32 equipid = 3;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->equipid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_RoleShowChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 equippos = 2;
  if (has_equippos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equippos(), target);
  }

  // required int32 equipid = 3;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->equipid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_RoleShowChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 equippos = 2;
    if (has_equippos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equippos());
    }

    // required int32 equipid = 3;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_RoleShowChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_RoleShowChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_RoleShowChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_RoleShowChange::MergeFrom(const GM_RoleShowChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_equippos()) {
      set_equippos(from.equippos());
    }
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_RoleShowChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_RoleShowChange::CopyFrom(const GM_RoleShowChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_RoleShowChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_RoleShowChange::Swap(GM_RoleShowChange* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(equippos_, other->equippos_);
    std::swap(equipid_, other->equipid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_RoleShowChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_RoleShowChange_descriptor_;
  metadata.reflection = GM_RoleShowChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_RoleTitleChange::kIdFieldNumber;
const int GM_RoleTitleChange::kTitleIdFieldNumber;
#endif  // !_MSC_VER

GM_RoleTitleChange::GM_RoleTitleChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_RoleTitleChange::InitAsDefaultInstance() {
}

GM_RoleTitleChange::GM_RoleTitleChange(const GM_RoleTitleChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_RoleTitleChange::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  titleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_RoleTitleChange::~GM_RoleTitleChange() {
  SharedDtor();
}

void GM_RoleTitleChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_RoleTitleChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_RoleTitleChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_RoleTitleChange_descriptor_;
}

const GM_RoleTitleChange& GM_RoleTitleChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonmove_2etxt();
  return *default_instance_;
}

GM_RoleTitleChange* GM_RoleTitleChange::default_instance_ = NULL;

GM_RoleTitleChange* GM_RoleTitleChange::New() const {
  return new GM_RoleTitleChange;
}

void GM_RoleTitleChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    titleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_RoleTitleChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_titleId;
        break;
      }

      // required int32 titleId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_RoleTitleChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 titleId = 2;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->titleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_RoleTitleChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 titleId = 2;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->titleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_RoleTitleChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 titleId = 2;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_RoleTitleChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_RoleTitleChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_RoleTitleChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_RoleTitleChange::MergeFrom(const GM_RoleTitleChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_RoleTitleChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_RoleTitleChange::CopyFrom(const GM_RoleTitleChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_RoleTitleChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_RoleTitleChange::Swap(GM_RoleTitleChange* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(titleid_, other->titleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_RoleTitleChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_RoleTitleChange_descriptor_;
  metadata.reflection = GM_RoleTitleChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_RoleGangChange::kIdFieldNumber;
const int GM_RoleGangChange::kGangNameFieldNumber;
#endif  // !_MSC_VER

GM_RoleGangChange::GM_RoleGangChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_RoleGangChange::InitAsDefaultInstance() {
}

GM_RoleGangChange::GM_RoleGangChange(const GM_RoleGangChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_RoleGangChange::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_RoleGangChange::~GM_RoleGangChange() {
  SharedDtor();
}

void GM_RoleGangChange::SharedDtor() {
  if (gangname_ != &::google::protobuf::internal::kEmptyString) {
    delete gangname_;
  }
  if (this != default_instance_) {
  }
}

void GM_RoleGangChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_RoleGangChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_RoleGangChange_descriptor_;
}

const GM_RoleGangChange& GM_RoleGangChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonmove_2etxt();
  return *default_instance_;
}

GM_RoleGangChange* GM_RoleGangChange::default_instance_ = NULL;

GM_RoleGangChange* GM_RoleGangChange::New() const {
  return new GM_RoleGangChange;
}

void GM_RoleGangChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_gangname()) {
      if (gangname_ != &::google::protobuf::internal::kEmptyString) {
        gangname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_RoleGangChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gangName;
        break;
      }

      // required string gangName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gangName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gangname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gangname().data(), this->gangname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_RoleGangChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string gangName = 2;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gangname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_RoleGangChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string gangName = 2;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gangname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_RoleGangChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string gangName = 2;
    if (has_gangname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gangname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_RoleGangChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_RoleGangChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_RoleGangChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_RoleGangChange::MergeFrom(const GM_RoleGangChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_gangname()) {
      set_gangname(from.gangname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_RoleGangChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_RoleGangChange::CopyFrom(const GM_RoleGangChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_RoleGangChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_RoleGangChange::Swap(GM_RoleGangChange* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(gangname_, other->gangname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_RoleGangChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_RoleGangChange_descriptor_;
  metadata.reflection = GM_RoleGangChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_VIPChange::kIdFieldNumber;
const int GM_VIPChange::kViplvFieldNumber;
#endif  // !_MSC_VER

GM_VIPChange::GM_VIPChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_VIPChange::InitAsDefaultInstance() {
}

GM_VIPChange::GM_VIPChange(const GM_VIPChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_VIPChange::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  viplv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_VIPChange::~GM_VIPChange() {
  SharedDtor();
}

void GM_VIPChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_VIPChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_VIPChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_VIPChange_descriptor_;
}

const GM_VIPChange& GM_VIPChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonmove_2etxt();
  return *default_instance_;
}

GM_VIPChange* GM_VIPChange::default_instance_ = NULL;

GM_VIPChange* GM_VIPChange::New() const {
  return new GM_VIPChange;
}

void GM_VIPChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    viplv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_VIPChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_viplv;
        break;
      }

      // required int32 viplv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_VIPChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 viplv = 2;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->viplv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_VIPChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 viplv = 2;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->viplv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_VIPChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 viplv = 2;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_VIPChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_VIPChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_VIPChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_VIPChange::MergeFrom(const GM_VIPChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_VIPChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_VIPChange::CopyFrom(const GM_VIPChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_VIPChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_VIPChange::Swap(GM_VIPChange* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(viplv_, other->viplv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_VIPChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_VIPChange_descriptor_;
  metadata.reflection = GM_VIPChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_NetRoleAction::kIdFieldNumber;
const int GM_NetRoleAction::kMotionTypeFieldNumber;
const int GM_NetRoleAction::kPosXFieldNumber;
const int GM_NetRoleAction::kPosZFieldNumber;
const int GM_NetRoleAction::kVecXFieldNumber;
const int GM_NetRoleAction::kVecZFieldNumber;
const int GM_NetRoleAction::kTimeFieldNumber;
const int GM_NetRoleAction::kSceneIDFieldNumber;
const int GM_NetRoleAction::kTypeFieldNumber;
const int GM_NetRoleAction::kIsCommandFieldNumber;
#endif  // !_MSC_VER

GM_NetRoleAction::GM_NetRoleAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_NetRoleAction::InitAsDefaultInstance() {
}

GM_NetRoleAction::GM_NetRoleAction(const GM_NetRoleAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_NetRoleAction::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  motiontype_ = 0;
  posx_ = 0;
  posz_ = 0;
  vecx_ = 0;
  vecz_ = 0;
  time_ = 0;
  sceneid_ = 0;
  type_ = 0;
  iscommand_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_NetRoleAction::~GM_NetRoleAction() {
  SharedDtor();
}

void GM_NetRoleAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_NetRoleAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_NetRoleAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_NetRoleAction_descriptor_;
}

const GM_NetRoleAction& GM_NetRoleAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonmove_2etxt();
  return *default_instance_;
}

GM_NetRoleAction* GM_NetRoleAction::default_instance_ = NULL;

GM_NetRoleAction* GM_NetRoleAction::New() const {
  return new GM_NetRoleAction;
}

void GM_NetRoleAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    motiontype_ = 0;
    posx_ = 0;
    posz_ = 0;
    vecx_ = 0;
    vecz_ = 0;
    time_ = 0;
    sceneid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    type_ = 0;
    iscommand_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_NetRoleAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_motionType;
        break;
      }

      // required int32 motionType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_motionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &motiontype_)));
          set_has_motiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_posX;
        break;
      }

      // optional float posX = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_posZ;
        break;
      }

      // optional float posZ = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posz_)));
          set_has_posz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_vecX;
        break;
      }

      // optional float vecX = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vecX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vecx_)));
          set_has_vecx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_vecZ;
        break;
      }

      // optional float vecZ = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vecZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vecz_)));
          set_has_vecz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_time;
        break;
      }

      // required int32 time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_sceneID;
        break;
      }

      // required int32 sceneID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_type;
        break;
      }

      // required int32 type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_isCommand;
        break;
      }

      // optional int32 isCommand = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCommand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscommand_)));
          set_has_iscommand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_NetRoleAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 motionType = 2;
  if (has_motiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->motiontype(), output);
  }

  // optional float posX = 4;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->posx(), output);
  }

  // optional float posZ = 5;
  if (has_posz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->posz(), output);
  }

  // optional float vecX = 6;
  if (has_vecx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->vecx(), output);
  }

  // optional float vecZ = 7;
  if (has_vecz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->vecz(), output);
  }

  // required int32 time = 8;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->time(), output);
  }

  // required int32 sceneID = 9;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->sceneid(), output);
  }

  // required int32 type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->type(), output);
  }

  // optional int32 isCommand = 11;
  if (has_iscommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->iscommand(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_NetRoleAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 motionType = 2;
  if (has_motiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->motiontype(), target);
  }

  // optional float posX = 4;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->posx(), target);
  }

  // optional float posZ = 5;
  if (has_posz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->posz(), target);
  }

  // optional float vecX = 6;
  if (has_vecx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->vecx(), target);
  }

  // optional float vecZ = 7;
  if (has_vecz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->vecz(), target);
  }

  // required int32 time = 8;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->time(), target);
  }

  // required int32 sceneID = 9;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->sceneid(), target);
  }

  // required int32 type = 10;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->type(), target);
  }

  // optional int32 isCommand = 11;
  if (has_iscommand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->iscommand(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_NetRoleAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 motionType = 2;
    if (has_motiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->motiontype());
    }

    // optional float posX = 4;
    if (has_posx()) {
      total_size += 1 + 4;
    }

    // optional float posZ = 5;
    if (has_posz()) {
      total_size += 1 + 4;
    }

    // optional float vecX = 6;
    if (has_vecx()) {
      total_size += 1 + 4;
    }

    // optional float vecZ = 7;
    if (has_vecz()) {
      total_size += 1 + 4;
    }

    // required int32 time = 8;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // required int32 sceneID = 9;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 isCommand = 11;
    if (has_iscommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscommand());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_NetRoleAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_NetRoleAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_NetRoleAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_NetRoleAction::MergeFrom(const GM_NetRoleAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_motiontype()) {
      set_motiontype(from.motiontype());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posz()) {
      set_posz(from.posz());
    }
    if (from.has_vecx()) {
      set_vecx(from.vecx());
    }
    if (from.has_vecz()) {
      set_vecz(from.vecz());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_iscommand()) {
      set_iscommand(from.iscommand());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_NetRoleAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_NetRoleAction::CopyFrom(const GM_NetRoleAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_NetRoleAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001c3) != 0x000001c3) return false;

  return true;
}

void GM_NetRoleAction::Swap(GM_NetRoleAction* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(motiontype_, other->motiontype_);
    std::swap(posx_, other->posx_);
    std::swap(posz_, other->posz_);
    std::swap(vecx_, other->vecx_);
    std::swap(vecz_, other->vecz_);
    std::swap(time_, other->time_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(type_, other->type_);
    std::swap(iscommand_, other->iscommand_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_NetRoleAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_NetRoleAction_descriptor_;
  metadata.reflection = GM_NetRoleAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_MpChangeNotify::kRoleIdFieldNumber;
const int GM_MpChangeNotify::kRoleTypeFieldNumber;
const int GM_MpChangeNotify::kMpChangeFieldNumber;
#endif  // !_MSC_VER

GM_MpChangeNotify::GM_MpChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_MpChangeNotify::InitAsDefaultInstance() {
}

GM_MpChangeNotify::GM_MpChangeNotify(const GM_MpChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_MpChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  roletype_ = 0;
  mpchange_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_MpChangeNotify::~GM_MpChangeNotify() {
  SharedDtor();
}

void GM_MpChangeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_MpChangeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_MpChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_MpChangeNotify_descriptor_;
}

const GM_MpChangeNotify& GM_MpChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonmove_2etxt();
  return *default_instance_;
}

GM_MpChangeNotify* GM_MpChangeNotify::default_instance_ = NULL;

GM_MpChangeNotify* GM_MpChangeNotify::New() const {
  return new GM_MpChangeNotify;
}

void GM_MpChangeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    roletype_ = 0;
    mpchange_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_MpChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleType;
        break;
      }

      // required int32 roleType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roletype_)));
          set_has_roletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mpChange;
        break;
      }

      // required int32 mpChange = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mpChange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mpchange_)));
          set_has_mpchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_MpChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required int32 roleType = 2;
  if (has_roletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roletype(), output);
  }

  // required int32 mpChange = 3;
  if (has_mpchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mpchange(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_MpChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required int32 roleType = 2;
  if (has_roletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roletype(), target);
  }

  // required int32 mpChange = 3;
  if (has_mpchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mpchange(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_MpChangeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required int32 roleType = 2;
    if (has_roletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roletype());
    }

    // required int32 mpChange = 3;
    if (has_mpchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mpchange());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_MpChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_MpChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_MpChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_MpChangeNotify::MergeFrom(const GM_MpChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_roletype()) {
      set_roletype(from.roletype());
    }
    if (from.has_mpchange()) {
      set_mpchange(from.mpchange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_MpChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_MpChangeNotify::CopyFrom(const GM_MpChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_MpChangeNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_MpChangeNotify::Swap(GM_MpChangeNotify* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(roletype_, other->roletype_);
    std::swap(mpchange_, other->mpchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_MpChangeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_MpChangeNotify_descriptor_;
  metadata.reflection = GM_MpChangeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_RequestResetPos::kSceneIDFieldNumber;
#endif  // !_MSC_VER

GM_RequestResetPos::GM_RequestResetPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_RequestResetPos::InitAsDefaultInstance() {
}

GM_RequestResetPos::GM_RequestResetPos(const GM_RequestResetPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_RequestResetPos::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_RequestResetPos::~GM_RequestResetPos() {
  SharedDtor();
}

void GM_RequestResetPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_RequestResetPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_RequestResetPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_RequestResetPos_descriptor_;
}

const GM_RequestResetPos& GM_RequestResetPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonmove_2etxt();
  return *default_instance_;
}

GM_RequestResetPos* GM_RequestResetPos::default_instance_ = NULL;

GM_RequestResetPos* GM_RequestResetPos::New() const {
  return new GM_RequestResetPos;
}

void GM_RequestResetPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_RequestResetPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sceneID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_RequestResetPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sceneID = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_RequestResetPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sceneID = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_RequestResetPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sceneID = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_RequestResetPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_RequestResetPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_RequestResetPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_RequestResetPos::MergeFrom(const GM_RequestResetPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_RequestResetPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_RequestResetPos::CopyFrom(const GM_RequestResetPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_RequestResetPos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_RequestResetPos::Swap(GM_RequestResetPos* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_RequestResetPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_RequestResetPos_descriptor_;
  metadata.reflection = GM_RequestResetPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ReturnResetPos::kPosxFieldNumber;
const int GM_ReturnResetPos::kPoszFieldNumber;
#endif  // !_MSC_VER

GM_ReturnResetPos::GM_ReturnResetPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ReturnResetPos::InitAsDefaultInstance() {
}

GM_ReturnResetPos::GM_ReturnResetPos(const GM_ReturnResetPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ReturnResetPos::SharedCtor() {
  _cached_size_ = 0;
  posx_ = 0;
  posz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ReturnResetPos::~GM_ReturnResetPos() {
  SharedDtor();
}

void GM_ReturnResetPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ReturnResetPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ReturnResetPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ReturnResetPos_descriptor_;
}

const GM_ReturnResetPos& GM_ReturnResetPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonmove_2etxt();
  return *default_instance_;
}

GM_ReturnResetPos* GM_ReturnResetPos::default_instance_ = NULL;

GM_ReturnResetPos* GM_ReturnResetPos::New() const {
  return new GM_ReturnResetPos;
}

void GM_ReturnResetPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    posx_ = 0;
    posz_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ReturnResetPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 posx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_posz;
        break;
      }

      // required int32 posz = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posz_)));
          set_has_posz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ReturnResetPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 posx = 1;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->posx(), output);
  }

  // required int32 posz = 2;
  if (has_posz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->posz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ReturnResetPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 posx = 1;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->posx(), target);
  }

  // required int32 posz = 2;
  if (has_posz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->posz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ReturnResetPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 posx = 1;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // required int32 posz = 2;
    if (has_posz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posz());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ReturnResetPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ReturnResetPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ReturnResetPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ReturnResetPos::MergeFrom(const GM_ReturnResetPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posz()) {
      set_posz(from.posz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ReturnResetPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ReturnResetPos::CopyFrom(const GM_ReturnResetPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ReturnResetPos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_ReturnResetPos::Swap(GM_ReturnResetPos* other) {
  if (other != this) {
    std::swap(posx_, other->posx_);
    std::swap(posz_, other->posz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ReturnResetPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ReturnResetPos_descriptor_;
  metadata.reflection = GM_ReturnResetPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_RoleNameChange::kRoleIDFieldNumber;
const int GM_RoleNameChange::kRoleNameFieldNumber;
#endif  // !_MSC_VER

GM_RoleNameChange::GM_RoleNameChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_RoleNameChange::InitAsDefaultInstance() {
}

GM_RoleNameChange::GM_RoleNameChange(const GM_RoleNameChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_RoleNameChange::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_RoleNameChange::~GM_RoleNameChange() {
  SharedDtor();
}

void GM_RoleNameChange::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void GM_RoleNameChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_RoleNameChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_RoleNameChange_descriptor_;
}

const GM_RoleNameChange& GM_RoleNameChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonmove_2etxt();
  return *default_instance_;
}

GM_RoleNameChange* GM_RoleNameChange::default_instance_ = NULL;

GM_RoleNameChange* GM_RoleNameChange::New() const {
  return new GM_RoleNameChange;
}

void GM_RoleNameChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_RoleNameChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roleName;
        break;
      }

      // optional string roleName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_RoleNameChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleID = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_RoleNameChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleID = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_RoleNameChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional string roleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_RoleNameChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_RoleNameChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_RoleNameChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_RoleNameChange::MergeFrom(const GM_RoleNameChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_RoleNameChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_RoleNameChange::CopyFrom(const GM_RoleNameChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_RoleNameChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_RoleNameChange::Swap(GM_RoleNameChange* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_RoleNameChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_RoleNameChange_descriptor_;
  metadata.reflection = GM_RoleNameChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_RoleTopGradeChange::kRoleidFieldNumber;
const int GM_RoleTopGradeChange::kNewgradelvFieldNumber;
#endif  // !_MSC_VER

GM_RoleTopGradeChange::GM_RoleTopGradeChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_RoleTopGradeChange::InitAsDefaultInstance() {
}

GM_RoleTopGradeChange::GM_RoleTopGradeChange(const GM_RoleTopGradeChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_RoleTopGradeChange::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  newgradelv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_RoleTopGradeChange::~GM_RoleTopGradeChange() {
  SharedDtor();
}

void GM_RoleTopGradeChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_RoleTopGradeChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_RoleTopGradeChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_RoleTopGradeChange_descriptor_;
}

const GM_RoleTopGradeChange& GM_RoleTopGradeChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonmove_2etxt();
  return *default_instance_;
}

GM_RoleTopGradeChange* GM_RoleTopGradeChange::default_instance_ = NULL;

GM_RoleTopGradeChange* GM_RoleTopGradeChange::New() const {
  return new GM_RoleTopGradeChange;
}

void GM_RoleTopGradeChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    newgradelv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_RoleTopGradeChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_newgradelv;
        break;
      }

      // required int32 newgradelv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newgradelv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newgradelv_)));
          set_has_newgradelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_RoleTopGradeChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required int32 newgradelv = 2;
  if (has_newgradelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->newgradelv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_RoleTopGradeChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required int32 newgradelv = 2;
  if (has_newgradelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->newgradelv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_RoleTopGradeChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required int32 newgradelv = 2;
    if (has_newgradelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newgradelv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_RoleTopGradeChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_RoleTopGradeChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_RoleTopGradeChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_RoleTopGradeChange::MergeFrom(const GM_RoleTopGradeChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_newgradelv()) {
      set_newgradelv(from.newgradelv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_RoleTopGradeChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_RoleTopGradeChange::CopyFrom(const GM_RoleTopGradeChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_RoleTopGradeChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_RoleTopGradeChange::Swap(GM_RoleTopGradeChange* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(newgradelv_, other->newgradelv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_RoleTopGradeChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_RoleTopGradeChange_descriptor_;
  metadata.reflection = GM_RoleTopGradeChange_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
