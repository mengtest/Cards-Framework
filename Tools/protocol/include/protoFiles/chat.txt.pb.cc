// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chat.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_GetChatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GetChatInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_SendAudio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_SendAudio_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GetAudio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GetAudio_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ReadAudio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ReadAudio_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ChatShield_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ChatShield_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_ChatShieldList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_ChatShieldList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GetRoomID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GetRoomID_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ChargeCfgResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ChargeCfgResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_CfgInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_CfgInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_chat_2etxt() {
  protobuf_AddDesc_chat_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chat.txt");
  GOOGLE_CHECK(file != NULL);
  GM_GetChatInfo_descriptor_ = file->message_type(0);
  static const int GM_GetChatInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetChatInfo, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetChatInfo, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetChatInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetChatInfo, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetChatInfo, word_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetChatInfo, recename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetChatInfo, repeattimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetChatInfo, intervaltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetChatInfo, receroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetChatInfo, recevip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetChatInfo, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetChatInfo, profession_),
  };
  GM_GetChatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GetChatInfo_descriptor_,
      GM_GetChatInfo::default_instance_,
      GM_GetChatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetChatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetChatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GetChatInfo));
  GM_SendAudio_descriptor_ = file->message_type(1);
  static const int GM_SendAudio_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SendAudio, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SendAudio, areaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SendAudio, audioinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SendAudio, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SendAudio, recename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SendAudio, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SendAudio, sendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SendAudio, audiolength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SendAudio, audiogmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SendAudio, audiosecond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SendAudio, audioconnect_),
  };
  GM_SendAudio_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_SendAudio_descriptor_,
      GM_SendAudio::default_instance_,
      GM_SendAudio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SendAudio, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SendAudio, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_SendAudio));
  GM_GetAudio_descriptor_ = file->message_type(2);
  static const int GM_GetAudio_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetAudio, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetAudio, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetAudio, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetAudio, sendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetAudio, audiogmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetAudio, audioinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetAudio, recvname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetAudio, sendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetAudio, audiosecond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetAudio, recvid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetAudio, recvvip_),
  };
  GM_GetAudio_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GetAudio_descriptor_,
      GM_GetAudio::default_instance_,
      GM_GetAudio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetAudio, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetAudio, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GetAudio));
  GM_ReadAudio_descriptor_ = file->message_type(3);
  static const int GM_ReadAudio_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReadAudio, aredid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReadAudio, audiogmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReadAudio, ip_),
  };
  GM_ReadAudio_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ReadAudio_descriptor_,
      GM_ReadAudio::default_instance_,
      GM_ReadAudio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReadAudio, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReadAudio, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ReadAudio));
  GM_ChatShield_descriptor_ = file->message_type(4);
  static const int GM_ChatShield_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChatShield, m_shield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChatShield, m_shieldname_),
  };
  GM_ChatShield_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ChatShield_descriptor_,
      GM_ChatShield::default_instance_,
      GM_ChatShield_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChatShield, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChatShield, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ChatShield));
  DB_ChatShieldList_descriptor_ = file->message_type(5);
  static const int DB_ChatShieldList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ChatShieldList, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ChatShieldList, m_datas_),
  };
  DB_ChatShieldList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_ChatShieldList_descriptor_,
      DB_ChatShieldList::default_instance_,
      DB_ChatShieldList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ChatShieldList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ChatShieldList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_ChatShieldList));
  GM_GetRoomID_descriptor_ = file->message_type(6);
  static const int GM_GetRoomID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetRoomID, m_roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetRoomID, m_centerroomid_),
  };
  GM_GetRoomID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GetRoomID_descriptor_,
      GM_GetRoomID::default_instance_,
      GM_GetRoomID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetRoomID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetRoomID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GetRoomID));
  GM_ChargeCfgResult_descriptor_ = file->message_type(7);
  static const int GM_ChargeCfgResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChargeCfgResult, m_cfginfo_),
  };
  GM_ChargeCfgResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ChargeCfgResult_descriptor_,
      GM_ChargeCfgResult::default_instance_,
      GM_ChargeCfgResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChargeCfgResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChargeCfgResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ChargeCfgResult));
  GM_CfgInfo_descriptor_ = file->message_type(8);
  static const int GM_CfgInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CfgInfo, m_typeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CfgInfo, m_state_),
  };
  GM_CfgInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_CfgInfo_descriptor_,
      GM_CfgInfo::default_instance_,
      GM_CfgInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CfgInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CfgInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_CfgInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chat_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GetChatInfo_descriptor_, &GM_GetChatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_SendAudio_descriptor_, &GM_SendAudio::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GetAudio_descriptor_, &GM_GetAudio::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ReadAudio_descriptor_, &GM_ReadAudio::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ChatShield_descriptor_, &GM_ChatShield::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_ChatShieldList_descriptor_, &DB_ChatShieldList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GetRoomID_descriptor_, &GM_GetRoomID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ChargeCfgResult_descriptor_, &GM_ChargeCfgResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_CfgInfo_descriptor_, &GM_CfgInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chat_2etxt() {
  delete GM_GetChatInfo::default_instance_;
  delete GM_GetChatInfo_reflection_;
  delete GM_SendAudio::default_instance_;
  delete GM_SendAudio_reflection_;
  delete GM_GetAudio::default_instance_;
  delete GM_GetAudio_reflection_;
  delete GM_ReadAudio::default_instance_;
  delete GM_ReadAudio_reflection_;
  delete GM_ChatShield::default_instance_;
  delete GM_ChatShield_reflection_;
  delete DB_ChatShieldList::default_instance_;
  delete DB_ChatShieldList_reflection_;
  delete GM_GetRoomID::default_instance_;
  delete GM_GetRoomID_reflection_;
  delete GM_ChargeCfgResult::default_instance_;
  delete GM_ChargeCfgResult_reflection_;
  delete GM_CfgInfo::default_instance_;
  delete GM_CfgInfo_reflection_;
}

void protobuf_AddDesc_chat_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010chat.txt\"\336\001\n\016GM_GetChatInfo\022\016\n\006roleId\030"
    "\001 \002(\005\022\017\n\007channel\030\002 \002(\005\022\014\n\004name\030\003 \001(\t\022\013\n\003"
    "vip\030\004 \001(\005\022\014\n\004word\030\005 \002(\t\022\020\n\010receName\030\006 \001("
    "\t\022\023\n\013repeatTimes\030\007 \001(\r\022\024\n\014intervalTime\030\010"
    " \001(\r\022\022\n\nreceroleid\030\t \001(\005\022\017\n\007recevip\030\n \001("
    "\005\022\014\n\004kind\030\013 \001(\005\022\022\n\nprofession\030\014 \001(\005\"\326\001\n\014"
    "GM_SendAudio\022\016\n\006roleId\030\001 \002(\005\022\016\n\006areaId\030\002"
    " \002(\005\022\021\n\taudioInfo\030\003 \001(\t\022\017\n\007channel\030\004 \002(\005"
    "\022\020\n\010receName\030\005 \001(\t\022\013\n\003vip\030\006 \001(\r\022\020\n\010sendn"
    "ame\030\007 \001(\t\022\023\n\013audioLength\030\010 \001(\005\022\021\n\taudioG"
    "mid\030\t \001(\005\022\023\n\013audioSecond\030\n \001(\005\022\024\n\014audioc"
    "onnect\030\013 \002(\014\"\315\001\n\013GM_GetAudio\022\020\n\010m_result"
    "\030\001 \002(\005\022\017\n\007channel\030\002 \001(\005\022\013\n\003vip\030\003 \001(\r\022\020\n\010"
    "sendname\030\004 \001(\t\022\021\n\taudioGmid\030\005 \001(\005\022\021\n\taud"
    "ioInfo\030\006 \001(\t\022\020\n\010recvname\030\007 \001(\t\022\016\n\006sendid"
    "\030\010 \001(\005\022\023\n\013audioSecond\030\t \001(\005\022\016\n\006recvId\030\n "
    "\002(\005\022\017\n\007recvVip\030\013 \002(\r\"=\n\014GM_ReadAudio\022\016\n\006"
    "aredId\030\001 \002(\005\022\021\n\taudioGmid\030\002 \002(\005\022\n\n\002IP\030\003 "
    "\001(\t\"7\n\rGM_ChatShield\022\020\n\010m_shield\030\001 \002(\005\022\024"
    "\n\014m_shieldname\030\002 \001(\t\"F\n\021DB_ChatShieldLis"
    "t\022\020\n\010m_roleId\030\001 \002(\005\022\037\n\007m_datas\030\002 \003(\0132\016.G"
    "M_ChatShield\"8\n\014GM_GetRoomID\022\020\n\010m_RoomID"
    "\030\001 \002(\005\022\026\n\016m_CenterRoomID\030\002 \001(\005\"4\n\022GM_Cha"
    "rgeCfgResult\022\036\n\tm_cfgInfo\030\001 \003(\0132\013.GM_Cfg"
    "Info\"/\n\nGM_CfgInfo\022\020\n\010m_typeId\030\001 \002(\005\022\017\n\007"
    "m_state\030\002 \001(\005", 1013);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chat.txt", &protobuf_RegisterTypes);
  GM_GetChatInfo::default_instance_ = new GM_GetChatInfo();
  GM_SendAudio::default_instance_ = new GM_SendAudio();
  GM_GetAudio::default_instance_ = new GM_GetAudio();
  GM_ReadAudio::default_instance_ = new GM_ReadAudio();
  GM_ChatShield::default_instance_ = new GM_ChatShield();
  DB_ChatShieldList::default_instance_ = new DB_ChatShieldList();
  GM_GetRoomID::default_instance_ = new GM_GetRoomID();
  GM_ChargeCfgResult::default_instance_ = new GM_ChargeCfgResult();
  GM_CfgInfo::default_instance_ = new GM_CfgInfo();
  GM_GetChatInfo::default_instance_->InitAsDefaultInstance();
  GM_SendAudio::default_instance_->InitAsDefaultInstance();
  GM_GetAudio::default_instance_->InitAsDefaultInstance();
  GM_ReadAudio::default_instance_->InitAsDefaultInstance();
  GM_ChatShield::default_instance_->InitAsDefaultInstance();
  DB_ChatShieldList::default_instance_->InitAsDefaultInstance();
  GM_GetRoomID::default_instance_->InitAsDefaultInstance();
  GM_ChargeCfgResult::default_instance_->InitAsDefaultInstance();
  GM_CfgInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chat_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chat_2etxt {
  StaticDescriptorInitializer_chat_2etxt() {
    protobuf_AddDesc_chat_2etxt();
  }
} static_descriptor_initializer_chat_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_GetChatInfo::kRoleIdFieldNumber;
const int GM_GetChatInfo::kChannelFieldNumber;
const int GM_GetChatInfo::kNameFieldNumber;
const int GM_GetChatInfo::kVipFieldNumber;
const int GM_GetChatInfo::kWordFieldNumber;
const int GM_GetChatInfo::kReceNameFieldNumber;
const int GM_GetChatInfo::kRepeatTimesFieldNumber;
const int GM_GetChatInfo::kIntervalTimeFieldNumber;
const int GM_GetChatInfo::kReceroleidFieldNumber;
const int GM_GetChatInfo::kRecevipFieldNumber;
const int GM_GetChatInfo::kKindFieldNumber;
const int GM_GetChatInfo::kProfessionFieldNumber;
#endif  // !_MSC_VER

GM_GetChatInfo::GM_GetChatInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GetChatInfo::InitAsDefaultInstance() {
}

GM_GetChatInfo::GM_GetChatInfo(const GM_GetChatInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GetChatInfo::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  channel_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vip_ = 0;
  word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  recename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  repeattimes_ = 0u;
  intervaltime_ = 0u;
  receroleid_ = 0;
  recevip_ = 0;
  kind_ = 0;
  profession_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GetChatInfo::~GM_GetChatInfo() {
  SharedDtor();
}

void GM_GetChatInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    delete word_;
  }
  if (recename_ != &::google::protobuf::internal::kEmptyString) {
    delete recename_;
  }
  if (this != default_instance_) {
  }
}

void GM_GetChatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GetChatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GetChatInfo_descriptor_;
}

const GM_GetChatInfo& GM_GetChatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2etxt();
  return *default_instance_;
}

GM_GetChatInfo* GM_GetChatInfo::default_instance_ = NULL;

GM_GetChatInfo* GM_GetChatInfo::New() const {
  return new GM_GetChatInfo;
}

void GM_GetChatInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    channel_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    vip_ = 0;
    if (has_word()) {
      if (word_ != &::google::protobuf::internal::kEmptyString) {
        word_->clear();
      }
    }
    if (has_recename()) {
      if (recename_ != &::google::protobuf::internal::kEmptyString) {
        recename_->clear();
      }
    }
    repeattimes_ = 0u;
    intervaltime_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    receroleid_ = 0;
    recevip_ = 0;
    kind_ = 0;
    profession_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GetChatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // required int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vip;
        break;
      }

      // optional int32 vip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_word;
        break;
      }

      // required string word = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_word:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_word()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->word().data(), this->word().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_receName;
        break;
      }

      // optional string receName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recename().data(), this->recename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_repeatTimes;
        break;
      }

      // optional uint32 repeatTimes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeatTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeattimes_)));
          set_has_repeattimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_intervalTime;
        break;
      }

      // optional uint32 intervalTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intervalTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intervaltime_)));
          set_has_intervaltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_receroleid;
        break;
      }

      // optional int32 receroleid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receroleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receroleid_)));
          set_has_receroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_recevip;
        break;
      }

      // optional int32 recevip = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recevip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recevip_)));
          set_has_recevip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_kind;
        break;
      }

      // optional int32 kind = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_profession;
        break;
      }

      // optional int32 profession = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GetChatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional int32 vip = 4;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vip(), output);
  }

  // required string word = 5;
  if (has_word()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->word().data(), this->word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->word(), output);
  }

  // optional string receName = 6;
  if (has_recename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recename().data(), this->recename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->recename(), output);
  }

  // optional uint32 repeatTimes = 7;
  if (has_repeattimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->repeattimes(), output);
  }

  // optional uint32 intervalTime = 8;
  if (has_intervaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->intervaltime(), output);
  }

  // optional int32 receroleid = 9;
  if (has_receroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->receroleid(), output);
  }

  // optional int32 recevip = 10;
  if (has_recevip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->recevip(), output);
  }

  // optional int32 kind = 11;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->kind(), output);
  }

  // optional int32 profession = 12;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->profession(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GetChatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 vip = 4;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vip(), target);
  }

  // required string word = 5;
  if (has_word()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->word().data(), this->word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->word(), target);
  }

  // optional string receName = 6;
  if (has_recename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recename().data(), this->recename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->recename(), target);
  }

  // optional uint32 repeatTimes = 7;
  if (has_repeattimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->repeattimes(), target);
  }

  // optional uint32 intervalTime = 8;
  if (has_intervaltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->intervaltime(), target);
  }

  // optional int32 receroleid = 9;
  if (has_receroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->receroleid(), target);
  }

  // optional int32 recevip = 10;
  if (has_recevip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->recevip(), target);
  }

  // optional int32 kind = 11;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->kind(), target);
  }

  // optional int32 profession = 12;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->profession(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GetChatInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 vip = 4;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }

    // required string word = 5;
    if (has_word()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->word());
    }

    // optional string receName = 6;
    if (has_recename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recename());
    }

    // optional uint32 repeatTimes = 7;
    if (has_repeattimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeattimes());
    }

    // optional uint32 intervalTime = 8;
    if (has_intervaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intervaltime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 receroleid = 9;
    if (has_receroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->receroleid());
    }

    // optional int32 recevip = 10;
    if (has_recevip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recevip());
    }

    // optional int32 kind = 11;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kind());
    }

    // optional int32 profession = 12;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GetChatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GetChatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GetChatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GetChatInfo::MergeFrom(const GM_GetChatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_word()) {
      set_word(from.word());
    }
    if (from.has_recename()) {
      set_recename(from.recename());
    }
    if (from.has_repeattimes()) {
      set_repeattimes(from.repeattimes());
    }
    if (from.has_intervaltime()) {
      set_intervaltime(from.intervaltime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_receroleid()) {
      set_receroleid(from.receroleid());
    }
    if (from.has_recevip()) {
      set_recevip(from.recevip());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GetChatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GetChatInfo::CopyFrom(const GM_GetChatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GetChatInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  return true;
}

void GM_GetChatInfo::Swap(GM_GetChatInfo* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(channel_, other->channel_);
    std::swap(name_, other->name_);
    std::swap(vip_, other->vip_);
    std::swap(word_, other->word_);
    std::swap(recename_, other->recename_);
    std::swap(repeattimes_, other->repeattimes_);
    std::swap(intervaltime_, other->intervaltime_);
    std::swap(receroleid_, other->receroleid_);
    std::swap(recevip_, other->recevip_);
    std::swap(kind_, other->kind_);
    std::swap(profession_, other->profession_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GetChatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GetChatInfo_descriptor_;
  metadata.reflection = GM_GetChatInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_SendAudio::kRoleIdFieldNumber;
const int GM_SendAudio::kAreaIdFieldNumber;
const int GM_SendAudio::kAudioInfoFieldNumber;
const int GM_SendAudio::kChannelFieldNumber;
const int GM_SendAudio::kReceNameFieldNumber;
const int GM_SendAudio::kVipFieldNumber;
const int GM_SendAudio::kSendnameFieldNumber;
const int GM_SendAudio::kAudioLengthFieldNumber;
const int GM_SendAudio::kAudioGmidFieldNumber;
const int GM_SendAudio::kAudioSecondFieldNumber;
const int GM_SendAudio::kAudioconnectFieldNumber;
#endif  // !_MSC_VER

GM_SendAudio::GM_SendAudio()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_SendAudio::InitAsDefaultInstance() {
}

GM_SendAudio::GM_SendAudio(const GM_SendAudio& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_SendAudio::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  areaid_ = 0;
  audioinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = 0;
  recename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vip_ = 0u;
  sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  audiolength_ = 0;
  audiogmid_ = 0;
  audiosecond_ = 0;
  audioconnect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_SendAudio::~GM_SendAudio() {
  SharedDtor();
}

void GM_SendAudio::SharedDtor() {
  if (audioinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete audioinfo_;
  }
  if (recename_ != &::google::protobuf::internal::kEmptyString) {
    delete recename_;
  }
  if (sendname_ != &::google::protobuf::internal::kEmptyString) {
    delete sendname_;
  }
  if (audioconnect_ != &::google::protobuf::internal::kEmptyString) {
    delete audioconnect_;
  }
  if (this != default_instance_) {
  }
}

void GM_SendAudio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_SendAudio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_SendAudio_descriptor_;
}

const GM_SendAudio& GM_SendAudio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2etxt();
  return *default_instance_;
}

GM_SendAudio* GM_SendAudio::default_instance_ = NULL;

GM_SendAudio* GM_SendAudio::New() const {
  return new GM_SendAudio;
}

void GM_SendAudio::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    areaid_ = 0;
    if (has_audioinfo()) {
      if (audioinfo_ != &::google::protobuf::internal::kEmptyString) {
        audioinfo_->clear();
      }
    }
    channel_ = 0;
    if (has_recename()) {
      if (recename_ != &::google::protobuf::internal::kEmptyString) {
        recename_->clear();
      }
    }
    vip_ = 0u;
    if (has_sendname()) {
      if (sendname_ != &::google::protobuf::internal::kEmptyString) {
        sendname_->clear();
      }
    }
    audiolength_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    audiogmid_ = 0;
    audiosecond_ = 0;
    if (has_audioconnect()) {
      if (audioconnect_ != &::google::protobuf::internal::kEmptyString) {
        audioconnect_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_SendAudio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_areaId;
        break;
      }

      // required int32 areaId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_audioInfo;
        break;
      }

      // optional string audioInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_audioInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_audioinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->audioinfo().data(), this->audioinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_channel;
        break;
      }

      // required int32 channel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_receName;
        break;
      }

      // optional string receName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recename().data(), this->recename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vip;
        break;
      }

      // optional uint32 vip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_sendname;
        break;
      }

      // optional string sendname = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sendname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendname().data(), this->sendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_audioLength;
        break;
      }

      // optional int32 audioLength = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_audioLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audiolength_)));
          set_has_audiolength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_audioGmid;
        break;
      }

      // optional int32 audioGmid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_audioGmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audiogmid_)));
          set_has_audiogmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_audioSecond;
        break;
      }

      // optional int32 audioSecond = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_audioSecond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audiosecond_)));
          set_has_audiosecond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_audioconnect;
        break;
      }

      // required bytes audioconnect = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_audioconnect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_audioconnect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_SendAudio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required int32 areaId = 2;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->areaid(), output);
  }

  // optional string audioInfo = 3;
  if (has_audioinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->audioinfo().data(), this->audioinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->audioinfo(), output);
  }

  // required int32 channel = 4;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->channel(), output);
  }

  // optional string receName = 5;
  if (has_recename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recename().data(), this->recename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->recename(), output);
  }

  // optional uint32 vip = 6;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->vip(), output);
  }

  // optional string sendname = 7;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendname().data(), this->sendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->sendname(), output);
  }

  // optional int32 audioLength = 8;
  if (has_audiolength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->audiolength(), output);
  }

  // optional int32 audioGmid = 9;
  if (has_audiogmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->audiogmid(), output);
  }

  // optional int32 audioSecond = 10;
  if (has_audiosecond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->audiosecond(), output);
  }

  // required bytes audioconnect = 11;
  if (has_audioconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->audioconnect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_SendAudio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required int32 areaId = 2;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->areaid(), target);
  }

  // optional string audioInfo = 3;
  if (has_audioinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->audioinfo().data(), this->audioinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->audioinfo(), target);
  }

  // required int32 channel = 4;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->channel(), target);
  }

  // optional string receName = 5;
  if (has_recename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recename().data(), this->recename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->recename(), target);
  }

  // optional uint32 vip = 6;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->vip(), target);
  }

  // optional string sendname = 7;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendname().data(), this->sendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sendname(), target);
  }

  // optional int32 audioLength = 8;
  if (has_audiolength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->audiolength(), target);
  }

  // optional int32 audioGmid = 9;
  if (has_audiogmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->audiogmid(), target);
  }

  // optional int32 audioSecond = 10;
  if (has_audiosecond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->audiosecond(), target);
  }

  // required bytes audioconnect = 11;
  if (has_audioconnect()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->audioconnect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_SendAudio::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required int32 areaId = 2;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaid());
    }

    // optional string audioInfo = 3;
    if (has_audioinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->audioinfo());
    }

    // required int32 channel = 4;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional string receName = 5;
    if (has_recename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recename());
    }

    // optional uint32 vip = 6;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip());
    }

    // optional string sendname = 7;
    if (has_sendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendname());
    }

    // optional int32 audioLength = 8;
    if (has_audiolength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audiolength());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 audioGmid = 9;
    if (has_audiogmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audiogmid());
    }

    // optional int32 audioSecond = 10;
    if (has_audiosecond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audiosecond());
    }

    // required bytes audioconnect = 11;
    if (has_audioconnect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->audioconnect());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_SendAudio::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_SendAudio* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_SendAudio*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_SendAudio::MergeFrom(const GM_SendAudio& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
    if (from.has_audioinfo()) {
      set_audioinfo(from.audioinfo());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_recename()) {
      set_recename(from.recename());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_sendname()) {
      set_sendname(from.sendname());
    }
    if (from.has_audiolength()) {
      set_audiolength(from.audiolength());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_audiogmid()) {
      set_audiogmid(from.audiogmid());
    }
    if (from.has_audiosecond()) {
      set_audiosecond(from.audiosecond());
    }
    if (from.has_audioconnect()) {
      set_audioconnect(from.audioconnect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_SendAudio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_SendAudio::CopyFrom(const GM_SendAudio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_SendAudio::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000040b) != 0x0000040b) return false;

  return true;
}

void GM_SendAudio::Swap(GM_SendAudio* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(areaid_, other->areaid_);
    std::swap(audioinfo_, other->audioinfo_);
    std::swap(channel_, other->channel_);
    std::swap(recename_, other->recename_);
    std::swap(vip_, other->vip_);
    std::swap(sendname_, other->sendname_);
    std::swap(audiolength_, other->audiolength_);
    std::swap(audiogmid_, other->audiogmid_);
    std::swap(audiosecond_, other->audiosecond_);
    std::swap(audioconnect_, other->audioconnect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_SendAudio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_SendAudio_descriptor_;
  metadata.reflection = GM_SendAudio_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GetAudio::kMResultFieldNumber;
const int GM_GetAudio::kChannelFieldNumber;
const int GM_GetAudio::kVipFieldNumber;
const int GM_GetAudio::kSendnameFieldNumber;
const int GM_GetAudio::kAudioGmidFieldNumber;
const int GM_GetAudio::kAudioInfoFieldNumber;
const int GM_GetAudio::kRecvnameFieldNumber;
const int GM_GetAudio::kSendidFieldNumber;
const int GM_GetAudio::kAudioSecondFieldNumber;
const int GM_GetAudio::kRecvIdFieldNumber;
const int GM_GetAudio::kRecvVipFieldNumber;
#endif  // !_MSC_VER

GM_GetAudio::GM_GetAudio()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GetAudio::InitAsDefaultInstance() {
}

GM_GetAudio::GM_GetAudio(const GM_GetAudio& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GetAudio::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  channel_ = 0;
  vip_ = 0u;
  sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  audiogmid_ = 0;
  audioinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  recvname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sendid_ = 0;
  audiosecond_ = 0;
  recvid_ = 0;
  recvvip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GetAudio::~GM_GetAudio() {
  SharedDtor();
}

void GM_GetAudio::SharedDtor() {
  if (sendname_ != &::google::protobuf::internal::kEmptyString) {
    delete sendname_;
  }
  if (audioinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete audioinfo_;
  }
  if (recvname_ != &::google::protobuf::internal::kEmptyString) {
    delete recvname_;
  }
  if (this != default_instance_) {
  }
}

void GM_GetAudio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GetAudio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GetAudio_descriptor_;
}

const GM_GetAudio& GM_GetAudio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2etxt();
  return *default_instance_;
}

GM_GetAudio* GM_GetAudio::default_instance_ = NULL;

GM_GetAudio* GM_GetAudio::New() const {
  return new GM_GetAudio;
}

void GM_GetAudio::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    channel_ = 0;
    vip_ = 0u;
    if (has_sendname()) {
      if (sendname_ != &::google::protobuf::internal::kEmptyString) {
        sendname_->clear();
      }
    }
    audiogmid_ = 0;
    if (has_audioinfo()) {
      if (audioinfo_ != &::google::protobuf::internal::kEmptyString) {
        audioinfo_->clear();
      }
    }
    if (has_recvname()) {
      if (recvname_ != &::google::protobuf::internal::kEmptyString) {
        recvname_->clear();
      }
    }
    sendid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    audiosecond_ = 0;
    recvid_ = 0;
    recvvip_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GetAudio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vip;
        break;
      }

      // optional uint32 vip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sendname;
        break;
      }

      // optional string sendname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sendname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendname().data(), this->sendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_audioGmid;
        break;
      }

      // optional int32 audioGmid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_audioGmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audiogmid_)));
          set_has_audiogmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_audioInfo;
        break;
      }

      // optional string audioInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_audioInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_audioinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->audioinfo().data(), this->audioinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_recvname;
        break;
      }

      // optional string recvname = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recvname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recvname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recvname().data(), this->recvname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sendid;
        break;
      }

      // optional int32 sendid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sendid_)));
          set_has_sendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_audioSecond;
        break;
      }

      // optional int32 audioSecond = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_audioSecond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audiosecond_)));
          set_has_audiosecond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_recvId;
        break;
      }

      // required int32 recvId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recvId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recvid_)));
          set_has_recvid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_recvVip;
        break;
      }

      // required uint32 recvVip = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recvVip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recvvip_)));
          set_has_recvvip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GetAudio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional uint32 vip = 3;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vip(), output);
  }

  // optional string sendname = 4;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendname().data(), this->sendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sendname(), output);
  }

  // optional int32 audioGmid = 5;
  if (has_audiogmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->audiogmid(), output);
  }

  // optional string audioInfo = 6;
  if (has_audioinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->audioinfo().data(), this->audioinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->audioinfo(), output);
  }

  // optional string recvname = 7;
  if (has_recvname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recvname().data(), this->recvname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->recvname(), output);
  }

  // optional int32 sendid = 8;
  if (has_sendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sendid(), output);
  }

  // optional int32 audioSecond = 9;
  if (has_audiosecond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->audiosecond(), output);
  }

  // required int32 recvId = 10;
  if (has_recvid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->recvid(), output);
  }

  // required uint32 recvVip = 11;
  if (has_recvvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->recvvip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GetAudio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional uint32 vip = 3;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vip(), target);
  }

  // optional string sendname = 4;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendname().data(), this->sendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sendname(), target);
  }

  // optional int32 audioGmid = 5;
  if (has_audiogmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->audiogmid(), target);
  }

  // optional string audioInfo = 6;
  if (has_audioinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->audioinfo().data(), this->audioinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->audioinfo(), target);
  }

  // optional string recvname = 7;
  if (has_recvname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recvname().data(), this->recvname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->recvname(), target);
  }

  // optional int32 sendid = 8;
  if (has_sendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sendid(), target);
  }

  // optional int32 audioSecond = 9;
  if (has_audiosecond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->audiosecond(), target);
  }

  // required int32 recvId = 10;
  if (has_recvid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->recvid(), target);
  }

  // required uint32 recvVip = 11;
  if (has_recvvip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->recvvip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GetAudio::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional uint32 vip = 3;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip());
    }

    // optional string sendname = 4;
    if (has_sendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendname());
    }

    // optional int32 audioGmid = 5;
    if (has_audiogmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audiogmid());
    }

    // optional string audioInfo = 6;
    if (has_audioinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->audioinfo());
    }

    // optional string recvname = 7;
    if (has_recvname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recvname());
    }

    // optional int32 sendid = 8;
    if (has_sendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sendid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 audioSecond = 9;
    if (has_audiosecond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audiosecond());
    }

    // required int32 recvId = 10;
    if (has_recvid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recvid());
    }

    // required uint32 recvVip = 11;
    if (has_recvvip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recvvip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GetAudio::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GetAudio* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GetAudio*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GetAudio::MergeFrom(const GM_GetAudio& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_sendname()) {
      set_sendname(from.sendname());
    }
    if (from.has_audiogmid()) {
      set_audiogmid(from.audiogmid());
    }
    if (from.has_audioinfo()) {
      set_audioinfo(from.audioinfo());
    }
    if (from.has_recvname()) {
      set_recvname(from.recvname());
    }
    if (from.has_sendid()) {
      set_sendid(from.sendid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_audiosecond()) {
      set_audiosecond(from.audiosecond());
    }
    if (from.has_recvid()) {
      set_recvid(from.recvid());
    }
    if (from.has_recvvip()) {
      set_recvvip(from.recvvip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GetAudio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GetAudio::CopyFrom(const GM_GetAudio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GetAudio::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000601) != 0x00000601) return false;

  return true;
}

void GM_GetAudio::Swap(GM_GetAudio* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(channel_, other->channel_);
    std::swap(vip_, other->vip_);
    std::swap(sendname_, other->sendname_);
    std::swap(audiogmid_, other->audiogmid_);
    std::swap(audioinfo_, other->audioinfo_);
    std::swap(recvname_, other->recvname_);
    std::swap(sendid_, other->sendid_);
    std::swap(audiosecond_, other->audiosecond_);
    std::swap(recvid_, other->recvid_);
    std::swap(recvvip_, other->recvvip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GetAudio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GetAudio_descriptor_;
  metadata.reflection = GM_GetAudio_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ReadAudio::kAredIdFieldNumber;
const int GM_ReadAudio::kAudioGmidFieldNumber;
const int GM_ReadAudio::kIPFieldNumber;
#endif  // !_MSC_VER

GM_ReadAudio::GM_ReadAudio()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ReadAudio::InitAsDefaultInstance() {
}

GM_ReadAudio::GM_ReadAudio(const GM_ReadAudio& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ReadAudio::SharedCtor() {
  _cached_size_ = 0;
  aredid_ = 0;
  audiogmid_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ReadAudio::~GM_ReadAudio() {
  SharedDtor();
}

void GM_ReadAudio::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void GM_ReadAudio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ReadAudio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ReadAudio_descriptor_;
}

const GM_ReadAudio& GM_ReadAudio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2etxt();
  return *default_instance_;
}

GM_ReadAudio* GM_ReadAudio::default_instance_ = NULL;

GM_ReadAudio* GM_ReadAudio::New() const {
  return new GM_ReadAudio;
}

void GM_ReadAudio::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    aredid_ = 0;
    audiogmid_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ReadAudio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 aredId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aredid_)));
          set_has_aredid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_audioGmid;
        break;
      }

      // required int32 audioGmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_audioGmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audiogmid_)));
          set_has_audiogmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_IP;
        break;
      }

      // optional string IP = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ReadAudio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 aredId = 1;
  if (has_aredid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->aredid(), output);
  }

  // required int32 audioGmid = 2;
  if (has_audiogmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->audiogmid(), output);
  }

  // optional string IP = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ReadAudio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 aredId = 1;
  if (has_aredid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->aredid(), target);
  }

  // required int32 audioGmid = 2;
  if (has_audiogmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->audiogmid(), target);
  }

  // optional string IP = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ReadAudio::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 aredId = 1;
    if (has_aredid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aredid());
    }

    // required int32 audioGmid = 2;
    if (has_audiogmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audiogmid());
    }

    // optional string IP = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ReadAudio::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ReadAudio* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ReadAudio*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ReadAudio::MergeFrom(const GM_ReadAudio& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aredid()) {
      set_aredid(from.aredid());
    }
    if (from.has_audiogmid()) {
      set_audiogmid(from.audiogmid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ReadAudio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ReadAudio::CopyFrom(const GM_ReadAudio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ReadAudio::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_ReadAudio::Swap(GM_ReadAudio* other) {
  if (other != this) {
    std::swap(aredid_, other->aredid_);
    std::swap(audiogmid_, other->audiogmid_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ReadAudio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ReadAudio_descriptor_;
  metadata.reflection = GM_ReadAudio_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ChatShield::kMShieldFieldNumber;
const int GM_ChatShield::kMShieldnameFieldNumber;
#endif  // !_MSC_VER

GM_ChatShield::GM_ChatShield()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ChatShield::InitAsDefaultInstance() {
}

GM_ChatShield::GM_ChatShield(const GM_ChatShield& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ChatShield::SharedCtor() {
  _cached_size_ = 0;
  m_shield_ = 0;
  m_shieldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ChatShield::~GM_ChatShield() {
  SharedDtor();
}

void GM_ChatShield::SharedDtor() {
  if (m_shieldname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_shieldname_;
  }
  if (this != default_instance_) {
  }
}

void GM_ChatShield::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ChatShield::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ChatShield_descriptor_;
}

const GM_ChatShield& GM_ChatShield::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2etxt();
  return *default_instance_;
}

GM_ChatShield* GM_ChatShield::default_instance_ = NULL;

GM_ChatShield* GM_ChatShield::New() const {
  return new GM_ChatShield;
}

void GM_ChatShield::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_shield_ = 0;
    if (has_m_shieldname()) {
      if (m_shieldname_ != &::google::protobuf::internal::kEmptyString) {
        m_shieldname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ChatShield::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_shield = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_shield_)));
          set_has_m_shield();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_shieldname;
        break;
      }

      // optional string m_shieldname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_shieldname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_shieldname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_shieldname().data(), this->m_shieldname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ChatShield::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_shield = 1;
  if (has_m_shield()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_shield(), output);
  }

  // optional string m_shieldname = 2;
  if (has_m_shieldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_shieldname().data(), this->m_shieldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_shieldname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ChatShield::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_shield = 1;
  if (has_m_shield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_shield(), target);
  }

  // optional string m_shieldname = 2;
  if (has_m_shieldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_shieldname().data(), this->m_shieldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_shieldname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ChatShield::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_shield = 1;
    if (has_m_shield()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_shield());
    }

    // optional string m_shieldname = 2;
    if (has_m_shieldname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_shieldname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ChatShield::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ChatShield* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ChatShield*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ChatShield::MergeFrom(const GM_ChatShield& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_shield()) {
      set_m_shield(from.m_shield());
    }
    if (from.has_m_shieldname()) {
      set_m_shieldname(from.m_shieldname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ChatShield::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ChatShield::CopyFrom(const GM_ChatShield& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ChatShield::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_ChatShield::Swap(GM_ChatShield* other) {
  if (other != this) {
    std::swap(m_shield_, other->m_shield_);
    std::swap(m_shieldname_, other->m_shieldname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ChatShield::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ChatShield_descriptor_;
  metadata.reflection = GM_ChatShield_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_ChatShieldList::kMRoleIdFieldNumber;
const int DB_ChatShieldList::kMDatasFieldNumber;
#endif  // !_MSC_VER

DB_ChatShieldList::DB_ChatShieldList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_ChatShieldList::InitAsDefaultInstance() {
}

DB_ChatShieldList::DB_ChatShieldList(const DB_ChatShieldList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_ChatShieldList::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_ChatShieldList::~DB_ChatShieldList() {
  SharedDtor();
}

void DB_ChatShieldList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_ChatShieldList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_ChatShieldList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_ChatShieldList_descriptor_;
}

const DB_ChatShieldList& DB_ChatShieldList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2etxt();
  return *default_instance_;
}

DB_ChatShieldList* DB_ChatShieldList::default_instance_ = NULL;

DB_ChatShieldList* DB_ChatShieldList::New() const {
  return new DB_ChatShieldList;
}

void DB_ChatShieldList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
  }
  m_datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_ChatShieldList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_datas;
        break;
      }

      // repeated .GM_ChatShield m_datas = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_datas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_ChatShieldList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleId = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // repeated .GM_ChatShield m_datas = 2;
  for (int i = 0; i < this->m_datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_ChatShieldList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleId = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // repeated .GM_ChatShield m_datas = 2;
  for (int i = 0; i < this->m_datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_ChatShieldList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleId = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

  }
  // repeated .GM_ChatShield m_datas = 2;
  total_size += 1 * this->m_datas_size();
  for (int i = 0; i < this->m_datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_ChatShieldList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_ChatShieldList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_ChatShieldList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_ChatShieldList::MergeFrom(const DB_ChatShieldList& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_datas_.MergeFrom(from.m_datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_ChatShieldList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_ChatShieldList::CopyFrom(const DB_ChatShieldList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_ChatShieldList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_datas_size(); i++) {
    if (!this->m_datas(i).IsInitialized()) return false;
  }
  return true;
}

void DB_ChatShieldList::Swap(DB_ChatShieldList* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    m_datas_.Swap(&other->m_datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_ChatShieldList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_ChatShieldList_descriptor_;
  metadata.reflection = DB_ChatShieldList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GetRoomID::kMRoomIDFieldNumber;
const int GM_GetRoomID::kMCenterRoomIDFieldNumber;
#endif  // !_MSC_VER

GM_GetRoomID::GM_GetRoomID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GetRoomID::InitAsDefaultInstance() {
}

GM_GetRoomID::GM_GetRoomID(const GM_GetRoomID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GetRoomID::SharedCtor() {
  _cached_size_ = 0;
  m_roomid_ = 0;
  m_centerroomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GetRoomID::~GM_GetRoomID() {
  SharedDtor();
}

void GM_GetRoomID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GetRoomID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GetRoomID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GetRoomID_descriptor_;
}

const GM_GetRoomID& GM_GetRoomID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2etxt();
  return *default_instance_;
}

GM_GetRoomID* GM_GetRoomID::default_instance_ = NULL;

GM_GetRoomID* GM_GetRoomID::New() const {
  return new GM_GetRoomID;
}

void GM_GetRoomID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roomid_ = 0;
    m_centerroomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GetRoomID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_RoomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roomid_)));
          set_has_m_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_CenterRoomID;
        break;
      }

      // optional int32 m_CenterRoomID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_CenterRoomID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_centerroomid_)));
          set_has_m_centerroomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GetRoomID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_RoomID = 1;
  if (has_m_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roomid(), output);
  }

  // optional int32 m_CenterRoomID = 2;
  if (has_m_centerroomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_centerroomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GetRoomID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_RoomID = 1;
  if (has_m_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roomid(), target);
  }

  // optional int32 m_CenterRoomID = 2;
  if (has_m_centerroomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_centerroomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GetRoomID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_RoomID = 1;
    if (has_m_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roomid());
    }

    // optional int32 m_CenterRoomID = 2;
    if (has_m_centerroomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_centerroomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GetRoomID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GetRoomID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GetRoomID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GetRoomID::MergeFrom(const GM_GetRoomID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roomid()) {
      set_m_roomid(from.m_roomid());
    }
    if (from.has_m_centerroomid()) {
      set_m_centerroomid(from.m_centerroomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GetRoomID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GetRoomID::CopyFrom(const GM_GetRoomID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GetRoomID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_GetRoomID::Swap(GM_GetRoomID* other) {
  if (other != this) {
    std::swap(m_roomid_, other->m_roomid_);
    std::swap(m_centerroomid_, other->m_centerroomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GetRoomID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GetRoomID_descriptor_;
  metadata.reflection = GM_GetRoomID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ChargeCfgResult::kMCfgInfoFieldNumber;
#endif  // !_MSC_VER

GM_ChargeCfgResult::GM_ChargeCfgResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ChargeCfgResult::InitAsDefaultInstance() {
}

GM_ChargeCfgResult::GM_ChargeCfgResult(const GM_ChargeCfgResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ChargeCfgResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ChargeCfgResult::~GM_ChargeCfgResult() {
  SharedDtor();
}

void GM_ChargeCfgResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ChargeCfgResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ChargeCfgResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ChargeCfgResult_descriptor_;
}

const GM_ChargeCfgResult& GM_ChargeCfgResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2etxt();
  return *default_instance_;
}

GM_ChargeCfgResult* GM_ChargeCfgResult::default_instance_ = NULL;

GM_ChargeCfgResult* GM_ChargeCfgResult::New() const {
  return new GM_ChargeCfgResult;
}

void GM_ChargeCfgResult::Clear() {
  m_cfginfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ChargeCfgResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GM_CfgInfo m_cfgInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_cfgInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_cfginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_cfgInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ChargeCfgResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GM_CfgInfo m_cfgInfo = 1;
  for (int i = 0; i < this->m_cfginfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_cfginfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ChargeCfgResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GM_CfgInfo m_cfgInfo = 1;
  for (int i = 0; i < this->m_cfginfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_cfginfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ChargeCfgResult::ByteSize() const {
  int total_size = 0;

  // repeated .GM_CfgInfo m_cfgInfo = 1;
  total_size += 1 * this->m_cfginfo_size();
  for (int i = 0; i < this->m_cfginfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_cfginfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ChargeCfgResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ChargeCfgResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ChargeCfgResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ChargeCfgResult::MergeFrom(const GM_ChargeCfgResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_cfginfo_.MergeFrom(from.m_cfginfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ChargeCfgResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ChargeCfgResult::CopyFrom(const GM_ChargeCfgResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ChargeCfgResult::IsInitialized() const {

  for (int i = 0; i < m_cfginfo_size(); i++) {
    if (!this->m_cfginfo(i).IsInitialized()) return false;
  }
  return true;
}

void GM_ChargeCfgResult::Swap(GM_ChargeCfgResult* other) {
  if (other != this) {
    m_cfginfo_.Swap(&other->m_cfginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ChargeCfgResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ChargeCfgResult_descriptor_;
  metadata.reflection = GM_ChargeCfgResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_CfgInfo::kMTypeIdFieldNumber;
const int GM_CfgInfo::kMStateFieldNumber;
#endif  // !_MSC_VER

GM_CfgInfo::GM_CfgInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_CfgInfo::InitAsDefaultInstance() {
}

GM_CfgInfo::GM_CfgInfo(const GM_CfgInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_CfgInfo::SharedCtor() {
  _cached_size_ = 0;
  m_typeid_ = 0;
  m_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_CfgInfo::~GM_CfgInfo() {
  SharedDtor();
}

void GM_CfgInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_CfgInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_CfgInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_CfgInfo_descriptor_;
}

const GM_CfgInfo& GM_CfgInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2etxt();
  return *default_instance_;
}

GM_CfgInfo* GM_CfgInfo::default_instance_ = NULL;

GM_CfgInfo* GM_CfgInfo::New() const {
  return new GM_CfgInfo;
}

void GM_CfgInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_typeid_ = 0;
    m_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_CfgInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_typeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_typeid_)));
          set_has_m_typeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_state;
        break;
      }

      // optional int32 m_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_CfgInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_typeId = 1;
  if (has_m_typeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_typeid(), output);
  }

  // optional int32 m_state = 2;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_CfgInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_typeId = 1;
  if (has_m_typeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_typeid(), target);
  }

  // optional int32 m_state = 2;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_CfgInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_typeId = 1;
    if (has_m_typeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_typeid());
    }

    // optional int32 m_state = 2;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_CfgInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_CfgInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_CfgInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_CfgInfo::MergeFrom(const GM_CfgInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_typeid()) {
      set_m_typeid(from.m_typeid());
    }
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_CfgInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_CfgInfo::CopyFrom(const GM_CfgInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_CfgInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_CfgInfo::Swap(GM_CfgInfo* other) {
  if (other != this) {
    std::swap(m_typeid_, other->m_typeid_);
    std::swap(m_state_, other->m_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_CfgInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_CfgInfo_descriptor_;
  metadata.reflection = GM_CfgInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
