// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_Topfight.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SP_Topfight.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DB_TopfightRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_TopfightRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_TopfightReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_TopfightReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_TopfightData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_TopfightData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_TopfightShopReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_TopfightShopReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_TopfightShop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_TopfightShop_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_CancleMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_CancleMatch_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SP_5fTopfight_2etxt() {
  protobuf_AddDesc_SP_5fTopfight_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SP_Topfight.txt");
  GOOGLE_CHECK(file != NULL);
  DB_TopfightRequest_descriptor_ = file->message_type(0);
  static const int DB_TopfightRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TopfightRequest, m_roleid_),
  };
  DB_TopfightRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_TopfightRequest_descriptor_,
      DB_TopfightRequest::default_instance_,
      DB_TopfightRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TopfightRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TopfightRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_TopfightRequest));
  DB_TopfightReturn_descriptor_ = file->message_type(1);
  static const int DB_TopfightReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TopfightReturn, m_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TopfightReturn, m_topfightdatas_),
  };
  DB_TopfightReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_TopfightReturn_descriptor_,
      DB_TopfightReturn::default_instance_,
      DB_TopfightReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TopfightReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TopfightReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_TopfightReturn));
  DB_TopfightData_descriptor_ = file->message_type(2);
  static const int DB_TopfightData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TopfightData, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TopfightData, m_toptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TopfightData, m_rolelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TopfightData, m_profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TopfightData, m_rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TopfightData, m_socre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TopfightData, m_gradelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TopfightData, m_ischam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TopfightData, m_isfirst_),
  };
  DB_TopfightData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_TopfightData_descriptor_,
      DB_TopfightData::default_instance_,
      DB_TopfightData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TopfightData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TopfightData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_TopfightData));
  DB_TopfightShopReturn_descriptor_ = file->message_type(3);
  static const int DB_TopfightShopReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TopfightShopReturn, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TopfightShopReturn, m_topfightshops_),
  };
  DB_TopfightShopReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_TopfightShopReturn_descriptor_,
      DB_TopfightShopReturn::default_instance_,
      DB_TopfightShopReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TopfightShopReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TopfightShopReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_TopfightShopReturn));
  DB_TopfightShop_descriptor_ = file->message_type(4);
  static const int DB_TopfightShop_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TopfightShop, m_objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TopfightShop, m_buytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TopfightShop, m_buycount_),
  };
  DB_TopfightShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_TopfightShop_descriptor_,
      DB_TopfightShop::default_instance_,
      DB_TopfightShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TopfightShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TopfightShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_TopfightShop));
  SM_CancleMatch_descriptor_ = file->message_type(5);
  static const int SM_CancleMatch_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_CancleMatch, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_CancleMatch, m_gradelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_CancleMatch, m_areanum_),
  };
  SM_CancleMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_CancleMatch_descriptor_,
      SM_CancleMatch::default_instance_,
      SM_CancleMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_CancleMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_CancleMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_CancleMatch));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SP_5fTopfight_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_TopfightRequest_descriptor_, &DB_TopfightRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_TopfightReturn_descriptor_, &DB_TopfightReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_TopfightData_descriptor_, &DB_TopfightData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_TopfightShopReturn_descriptor_, &DB_TopfightShopReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_TopfightShop_descriptor_, &DB_TopfightShop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_CancleMatch_descriptor_, &SM_CancleMatch::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SP_5fTopfight_2etxt() {
  delete DB_TopfightRequest::default_instance_;
  delete DB_TopfightRequest_reflection_;
  delete DB_TopfightReturn::default_instance_;
  delete DB_TopfightReturn_reflection_;
  delete DB_TopfightData::default_instance_;
  delete DB_TopfightData_reflection_;
  delete DB_TopfightShopReturn::default_instance_;
  delete DB_TopfightShopReturn_reflection_;
  delete DB_TopfightShop::default_instance_;
  delete DB_TopfightShop_reflection_;
  delete SM_CancleMatch::default_instance_;
  delete SM_CancleMatch_reflection_;
}

void protobuf_AddDesc_SP_5fTopfight_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017SP_Topfight.txt\"&\n\022DB_TopfightRequest\022"
    "\020\n\010m_roleid\030\001 \002(\005\"O\n\021DB_TopfightReturn\022\017"
    "\n\007m_count\030\001 \002(\005\022)\n\017m_topfightDatas\030\002 \003(\013"
    "2\020.DB_TopfightData\"\273\001\n\017DB_TopfightData\022\020"
    "\n\010m_roleid\030\001 \002(\005\022\021\n\tm_toptime\030\002 \001(\005\022\020\n\010m"
    "_rolelv\030\003 \001(\005\022\024\n\014m_profession\030\004 \001(\005\022\022\n\nm"
    "_rolename\030\005 \001(\t\022\017\n\007m_socre\030\006 \001(\005\022\021\n\tm_gr"
    "adelv\030\007 \001(\005\022\020\n\010m_ischam\030\010 \001(\005\022\021\n\tm_isfir"
    "st\030\t \001(\005\"T\n\025DB_TopfightShopReturn\022\020\n\010m_r"
    "oleid\030\001 \002(\005\022)\n\017m_topfightShops\030\002 \003(\0132\020.D"
    "B_TopfightShop\"L\n\017DB_TopfightShop\022\022\n\nm_o"
    "bjectid\030\001 \001(\005\022\021\n\tm_buytype\030\002 \001(\005\022\022\n\nm_bu"
    "ycount\030\003 \001(\005\"H\n\016SM_CancleMatch\022\020\n\010m_role"
    "id\030\001 \002(\005\022\021\n\tm_gradeLv\030\002 \001(\005\022\021\n\tm_areaNum"
    "\030\003 \001(\005", 566);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SP_Topfight.txt", &protobuf_RegisterTypes);
  DB_TopfightRequest::default_instance_ = new DB_TopfightRequest();
  DB_TopfightReturn::default_instance_ = new DB_TopfightReturn();
  DB_TopfightData::default_instance_ = new DB_TopfightData();
  DB_TopfightShopReturn::default_instance_ = new DB_TopfightShopReturn();
  DB_TopfightShop::default_instance_ = new DB_TopfightShop();
  SM_CancleMatch::default_instance_ = new SM_CancleMatch();
  DB_TopfightRequest::default_instance_->InitAsDefaultInstance();
  DB_TopfightReturn::default_instance_->InitAsDefaultInstance();
  DB_TopfightData::default_instance_->InitAsDefaultInstance();
  DB_TopfightShopReturn::default_instance_->InitAsDefaultInstance();
  DB_TopfightShop::default_instance_->InitAsDefaultInstance();
  SM_CancleMatch::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SP_5fTopfight_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SP_5fTopfight_2etxt {
  StaticDescriptorInitializer_SP_5fTopfight_2etxt() {
    protobuf_AddDesc_SP_5fTopfight_2etxt();
  }
} static_descriptor_initializer_SP_5fTopfight_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int DB_TopfightRequest::kMRoleidFieldNumber;
#endif  // !_MSC_VER

DB_TopfightRequest::DB_TopfightRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_TopfightRequest::InitAsDefaultInstance() {
}

DB_TopfightRequest::DB_TopfightRequest(const DB_TopfightRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_TopfightRequest::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_TopfightRequest::~DB_TopfightRequest() {
  SharedDtor();
}

void DB_TopfightRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_TopfightRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_TopfightRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_TopfightRequest_descriptor_;
}

const DB_TopfightRequest& DB_TopfightRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fTopfight_2etxt();
  return *default_instance_;
}

DB_TopfightRequest* DB_TopfightRequest::default_instance_ = NULL;

DB_TopfightRequest* DB_TopfightRequest::New() const {
  return new DB_TopfightRequest;
}

void DB_TopfightRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_TopfightRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_TopfightRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_TopfightRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_TopfightRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_TopfightRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_TopfightRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_TopfightRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_TopfightRequest::MergeFrom(const DB_TopfightRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_TopfightRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_TopfightRequest::CopyFrom(const DB_TopfightRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_TopfightRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DB_TopfightRequest::Swap(DB_TopfightRequest* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_TopfightRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_TopfightRequest_descriptor_;
  metadata.reflection = DB_TopfightRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_TopfightReturn::kMCountFieldNumber;
const int DB_TopfightReturn::kMTopfightDatasFieldNumber;
#endif  // !_MSC_VER

DB_TopfightReturn::DB_TopfightReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_TopfightReturn::InitAsDefaultInstance() {
}

DB_TopfightReturn::DB_TopfightReturn(const DB_TopfightReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_TopfightReturn::SharedCtor() {
  _cached_size_ = 0;
  m_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_TopfightReturn::~DB_TopfightReturn() {
  SharedDtor();
}

void DB_TopfightReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_TopfightReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_TopfightReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_TopfightReturn_descriptor_;
}

const DB_TopfightReturn& DB_TopfightReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fTopfight_2etxt();
  return *default_instance_;
}

DB_TopfightReturn* DB_TopfightReturn::default_instance_ = NULL;

DB_TopfightReturn* DB_TopfightReturn::New() const {
  return new DB_TopfightReturn;
}

void DB_TopfightReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_count_ = 0;
  }
  m_topfightdatas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_TopfightReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_topfightDatas;
        break;
      }

      // repeated .DB_TopfightData m_topfightDatas = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_topfightDatas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_topfightdatas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_topfightDatas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_TopfightReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_count = 1;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_count(), output);
  }

  // repeated .DB_TopfightData m_topfightDatas = 2;
  for (int i = 0; i < this->m_topfightdatas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_topfightdatas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_TopfightReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_count = 1;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_count(), target);
  }

  // repeated .DB_TopfightData m_topfightDatas = 2;
  for (int i = 0; i < this->m_topfightdatas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_topfightdatas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_TopfightReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_count = 1;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_count());
    }

  }
  // repeated .DB_TopfightData m_topfightDatas = 2;
  total_size += 1 * this->m_topfightdatas_size();
  for (int i = 0; i < this->m_topfightdatas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_topfightdatas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_TopfightReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_TopfightReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_TopfightReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_TopfightReturn::MergeFrom(const DB_TopfightReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_topfightdatas_.MergeFrom(from.m_topfightdatas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_TopfightReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_TopfightReturn::CopyFrom(const DB_TopfightReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_TopfightReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_topfightdatas_size(); i++) {
    if (!this->m_topfightdatas(i).IsInitialized()) return false;
  }
  return true;
}

void DB_TopfightReturn::Swap(DB_TopfightReturn* other) {
  if (other != this) {
    std::swap(m_count_, other->m_count_);
    m_topfightdatas_.Swap(&other->m_topfightdatas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_TopfightReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_TopfightReturn_descriptor_;
  metadata.reflection = DB_TopfightReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_TopfightData::kMRoleidFieldNumber;
const int DB_TopfightData::kMToptimeFieldNumber;
const int DB_TopfightData::kMRolelvFieldNumber;
const int DB_TopfightData::kMProfessionFieldNumber;
const int DB_TopfightData::kMRolenameFieldNumber;
const int DB_TopfightData::kMSocreFieldNumber;
const int DB_TopfightData::kMGradelvFieldNumber;
const int DB_TopfightData::kMIschamFieldNumber;
const int DB_TopfightData::kMIsfirstFieldNumber;
#endif  // !_MSC_VER

DB_TopfightData::DB_TopfightData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_TopfightData::InitAsDefaultInstance() {
}

DB_TopfightData::DB_TopfightData(const DB_TopfightData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_TopfightData::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_toptime_ = 0;
  m_rolelv_ = 0;
  m_profession_ = 0;
  m_rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_socre_ = 0;
  m_gradelv_ = 0;
  m_ischam_ = 0;
  m_isfirst_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_TopfightData::~DB_TopfightData() {
  SharedDtor();
}

void DB_TopfightData::SharedDtor() {
  if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_rolename_;
  }
  if (this != default_instance_) {
  }
}

void DB_TopfightData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_TopfightData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_TopfightData_descriptor_;
}

const DB_TopfightData& DB_TopfightData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fTopfight_2etxt();
  return *default_instance_;
}

DB_TopfightData* DB_TopfightData::default_instance_ = NULL;

DB_TopfightData* DB_TopfightData::New() const {
  return new DB_TopfightData;
}

void DB_TopfightData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_toptime_ = 0;
    m_rolelv_ = 0;
    m_profession_ = 0;
    if (has_m_rolename()) {
      if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
        m_rolename_->clear();
      }
    }
    m_socre_ = 0;
    m_gradelv_ = 0;
    m_ischam_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_isfirst_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_TopfightData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_toptime;
        break;
      }

      // optional int32 m_toptime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_toptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_toptime_)));
          set_has_m_toptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_rolelv;
        break;
      }

      // optional int32 m_rolelv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rolelv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rolelv_)));
          set_has_m_rolelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_profession;
        break;
      }

      // optional int32 m_profession = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_profession_)));
          set_has_m_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_rolename;
        break;
      }

      // optional string m_rolename = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_rolename().data(), this->m_rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_socre;
        break;
      }

      // optional int32 m_socre = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_socre:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_socre_)));
          set_has_m_socre();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_gradelv;
        break;
      }

      // optional int32 m_gradelv = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gradelv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gradelv_)));
          set_has_m_gradelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_ischam;
        break;
      }

      // optional int32 m_ischam = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ischam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ischam_)));
          set_has_m_ischam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_isfirst;
        break;
      }

      // optional int32 m_isfirst = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_isfirst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_isfirst_)));
          set_has_m_isfirst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_TopfightData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int32 m_toptime = 2;
  if (has_m_toptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_toptime(), output);
  }

  // optional int32 m_rolelv = 3;
  if (has_m_rolelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_rolelv(), output);
  }

  // optional int32 m_profession = 4;
  if (has_m_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_profession(), output);
  }

  // optional string m_rolename = 5;
  if (has_m_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rolename().data(), this->m_rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_rolename(), output);
  }

  // optional int32 m_socre = 6;
  if (has_m_socre()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_socre(), output);
  }

  // optional int32 m_gradelv = 7;
  if (has_m_gradelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_gradelv(), output);
  }

  // optional int32 m_ischam = 8;
  if (has_m_ischam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_ischam(), output);
  }

  // optional int32 m_isfirst = 9;
  if (has_m_isfirst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_isfirst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_TopfightData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int32 m_toptime = 2;
  if (has_m_toptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_toptime(), target);
  }

  // optional int32 m_rolelv = 3;
  if (has_m_rolelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_rolelv(), target);
  }

  // optional int32 m_profession = 4;
  if (has_m_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_profession(), target);
  }

  // optional string m_rolename = 5;
  if (has_m_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rolename().data(), this->m_rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_rolename(), target);
  }

  // optional int32 m_socre = 6;
  if (has_m_socre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_socre(), target);
  }

  // optional int32 m_gradelv = 7;
  if (has_m_gradelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_gradelv(), target);
  }

  // optional int32 m_ischam = 8;
  if (has_m_ischam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_ischam(), target);
  }

  // optional int32 m_isfirst = 9;
  if (has_m_isfirst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_isfirst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_TopfightData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_toptime = 2;
    if (has_m_toptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_toptime());
    }

    // optional int32 m_rolelv = 3;
    if (has_m_rolelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rolelv());
    }

    // optional int32 m_profession = 4;
    if (has_m_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_profession());
    }

    // optional string m_rolename = 5;
    if (has_m_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_rolename());
    }

    // optional int32 m_socre = 6;
    if (has_m_socre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_socre());
    }

    // optional int32 m_gradelv = 7;
    if (has_m_gradelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gradelv());
    }

    // optional int32 m_ischam = 8;
    if (has_m_ischam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ischam());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_isfirst = 9;
    if (has_m_isfirst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_isfirst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_TopfightData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_TopfightData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_TopfightData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_TopfightData::MergeFrom(const DB_TopfightData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_toptime()) {
      set_m_toptime(from.m_toptime());
    }
    if (from.has_m_rolelv()) {
      set_m_rolelv(from.m_rolelv());
    }
    if (from.has_m_profession()) {
      set_m_profession(from.m_profession());
    }
    if (from.has_m_rolename()) {
      set_m_rolename(from.m_rolename());
    }
    if (from.has_m_socre()) {
      set_m_socre(from.m_socre());
    }
    if (from.has_m_gradelv()) {
      set_m_gradelv(from.m_gradelv());
    }
    if (from.has_m_ischam()) {
      set_m_ischam(from.m_ischam());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_isfirst()) {
      set_m_isfirst(from.m_isfirst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_TopfightData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_TopfightData::CopyFrom(const DB_TopfightData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_TopfightData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DB_TopfightData::Swap(DB_TopfightData* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_toptime_, other->m_toptime_);
    std::swap(m_rolelv_, other->m_rolelv_);
    std::swap(m_profession_, other->m_profession_);
    std::swap(m_rolename_, other->m_rolename_);
    std::swap(m_socre_, other->m_socre_);
    std::swap(m_gradelv_, other->m_gradelv_);
    std::swap(m_ischam_, other->m_ischam_);
    std::swap(m_isfirst_, other->m_isfirst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_TopfightData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_TopfightData_descriptor_;
  metadata.reflection = DB_TopfightData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_TopfightShopReturn::kMRoleidFieldNumber;
const int DB_TopfightShopReturn::kMTopfightShopsFieldNumber;
#endif  // !_MSC_VER

DB_TopfightShopReturn::DB_TopfightShopReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_TopfightShopReturn::InitAsDefaultInstance() {
}

DB_TopfightShopReturn::DB_TopfightShopReturn(const DB_TopfightShopReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_TopfightShopReturn::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_TopfightShopReturn::~DB_TopfightShopReturn() {
  SharedDtor();
}

void DB_TopfightShopReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_TopfightShopReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_TopfightShopReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_TopfightShopReturn_descriptor_;
}

const DB_TopfightShopReturn& DB_TopfightShopReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fTopfight_2etxt();
  return *default_instance_;
}

DB_TopfightShopReturn* DB_TopfightShopReturn::default_instance_ = NULL;

DB_TopfightShopReturn* DB_TopfightShopReturn::New() const {
  return new DB_TopfightShopReturn;
}

void DB_TopfightShopReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
  }
  m_topfightshops_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_TopfightShopReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_topfightShops;
        break;
      }

      // repeated .DB_TopfightShop m_topfightShops = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_topfightShops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_topfightshops()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_topfightShops;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_TopfightShopReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // repeated .DB_TopfightShop m_topfightShops = 2;
  for (int i = 0; i < this->m_topfightshops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_topfightshops(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_TopfightShopReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // repeated .DB_TopfightShop m_topfightShops = 2;
  for (int i = 0; i < this->m_topfightshops_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_topfightshops(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_TopfightShopReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

  }
  // repeated .DB_TopfightShop m_topfightShops = 2;
  total_size += 1 * this->m_topfightshops_size();
  for (int i = 0; i < this->m_topfightshops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_topfightshops(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_TopfightShopReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_TopfightShopReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_TopfightShopReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_TopfightShopReturn::MergeFrom(const DB_TopfightShopReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_topfightshops_.MergeFrom(from.m_topfightshops_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_TopfightShopReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_TopfightShopReturn::CopyFrom(const DB_TopfightShopReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_TopfightShopReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DB_TopfightShopReturn::Swap(DB_TopfightShopReturn* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    m_topfightshops_.Swap(&other->m_topfightshops_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_TopfightShopReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_TopfightShopReturn_descriptor_;
  metadata.reflection = DB_TopfightShopReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_TopfightShop::kMObjectidFieldNumber;
const int DB_TopfightShop::kMBuytypeFieldNumber;
const int DB_TopfightShop::kMBuycountFieldNumber;
#endif  // !_MSC_VER

DB_TopfightShop::DB_TopfightShop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_TopfightShop::InitAsDefaultInstance() {
}

DB_TopfightShop::DB_TopfightShop(const DB_TopfightShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_TopfightShop::SharedCtor() {
  _cached_size_ = 0;
  m_objectid_ = 0;
  m_buytype_ = 0;
  m_buycount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_TopfightShop::~DB_TopfightShop() {
  SharedDtor();
}

void DB_TopfightShop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_TopfightShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_TopfightShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_TopfightShop_descriptor_;
}

const DB_TopfightShop& DB_TopfightShop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fTopfight_2etxt();
  return *default_instance_;
}

DB_TopfightShop* DB_TopfightShop::default_instance_ = NULL;

DB_TopfightShop* DB_TopfightShop::New() const {
  return new DB_TopfightShop;
}

void DB_TopfightShop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objectid_ = 0;
    m_buytype_ = 0;
    m_buycount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_TopfightShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objectid_)));
          set_has_m_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_buytype;
        break;
      }

      // optional int32 m_buytype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_buytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_buytype_)));
          set_has_m_buytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_buycount;
        break;
      }

      // optional int32 m_buycount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_buycount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_buycount_)));
          set_has_m_buycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_TopfightShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_objectid = 1;
  if (has_m_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objectid(), output);
  }

  // optional int32 m_buytype = 2;
  if (has_m_buytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_buytype(), output);
  }

  // optional int32 m_buycount = 3;
  if (has_m_buycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_buycount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_TopfightShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_objectid = 1;
  if (has_m_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objectid(), target);
  }

  // optional int32 m_buytype = 2;
  if (has_m_buytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_buytype(), target);
  }

  // optional int32 m_buycount = 3;
  if (has_m_buycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_buycount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_TopfightShop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_objectid = 1;
    if (has_m_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objectid());
    }

    // optional int32 m_buytype = 2;
    if (has_m_buytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_buytype());
    }

    // optional int32 m_buycount = 3;
    if (has_m_buycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_buycount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_TopfightShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_TopfightShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_TopfightShop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_TopfightShop::MergeFrom(const DB_TopfightShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objectid()) {
      set_m_objectid(from.m_objectid());
    }
    if (from.has_m_buytype()) {
      set_m_buytype(from.m_buytype());
    }
    if (from.has_m_buycount()) {
      set_m_buycount(from.m_buycount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_TopfightShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_TopfightShop::CopyFrom(const DB_TopfightShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_TopfightShop::IsInitialized() const {

  return true;
}

void DB_TopfightShop::Swap(DB_TopfightShop* other) {
  if (other != this) {
    std::swap(m_objectid_, other->m_objectid_);
    std::swap(m_buytype_, other->m_buytype_);
    std::swap(m_buycount_, other->m_buycount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_TopfightShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_TopfightShop_descriptor_;
  metadata.reflection = DB_TopfightShop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_CancleMatch::kMRoleidFieldNumber;
const int SM_CancleMatch::kMGradeLvFieldNumber;
const int SM_CancleMatch::kMAreaNumFieldNumber;
#endif  // !_MSC_VER

SM_CancleMatch::SM_CancleMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_CancleMatch::InitAsDefaultInstance() {
}

SM_CancleMatch::SM_CancleMatch(const SM_CancleMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_CancleMatch::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_gradelv_ = 0;
  m_areanum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_CancleMatch::~SM_CancleMatch() {
  SharedDtor();
}

void SM_CancleMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_CancleMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_CancleMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_CancleMatch_descriptor_;
}

const SM_CancleMatch& SM_CancleMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fTopfight_2etxt();
  return *default_instance_;
}

SM_CancleMatch* SM_CancleMatch::default_instance_ = NULL;

SM_CancleMatch* SM_CancleMatch::New() const {
  return new SM_CancleMatch;
}

void SM_CancleMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_gradelv_ = 0;
    m_areanum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_CancleMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_gradeLv;
        break;
      }

      // optional int32 m_gradeLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gradeLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gradelv_)));
          set_has_m_gradelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_areaNum;
        break;
      }

      // optional int32 m_areaNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_areaNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_areanum_)));
          set_has_m_areanum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_CancleMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int32 m_gradeLv = 2;
  if (has_m_gradelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_gradelv(), output);
  }

  // optional int32 m_areaNum = 3;
  if (has_m_areanum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_areanum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_CancleMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int32 m_gradeLv = 2;
  if (has_m_gradelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_gradelv(), target);
  }

  // optional int32 m_areaNum = 3;
  if (has_m_areanum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_areanum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_CancleMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_gradeLv = 2;
    if (has_m_gradelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gradelv());
    }

    // optional int32 m_areaNum = 3;
    if (has_m_areanum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_areanum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_CancleMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_CancleMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_CancleMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_CancleMatch::MergeFrom(const SM_CancleMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_gradelv()) {
      set_m_gradelv(from.m_gradelv());
    }
    if (from.has_m_areanum()) {
      set_m_areanum(from.m_areanum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_CancleMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_CancleMatch::CopyFrom(const SM_CancleMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_CancleMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_CancleMatch::Swap(SM_CancleMatch* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_gradelv_, other->m_gradelv_);
    std::swap(m_areanum_, other->m_areanum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_CancleMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_CancleMatch_descriptor_;
  metadata.reflection = SM_CancleMatch_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
