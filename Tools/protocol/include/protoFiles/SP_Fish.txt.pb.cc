// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_Fish.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SP_Fish.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SM_FishDb_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_FishDb_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_FishDb_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_FishDb_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Fish_CommonDb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Fish_CommonDb_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Fish_Common_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Fish_Common_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Fish_Common_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Fish_Common_return_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SP_5fFish_2etxt() {
  protobuf_AddDesc_SP_5fFish_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SP_Fish.txt");
  GOOGLE_CHECK(file != NULL);
  SM_FishDb_request_descriptor_ = file->message_type(0);
  static const int SM_FishDb_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_FishDb_request, roleid_),
  };
  SM_FishDb_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_FishDb_request_descriptor_,
      SM_FishDb_request::default_instance_,
      SM_FishDb_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_FishDb_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_FishDb_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_FishDb_request));
  SM_FishDb_return_descriptor_ = file->message_type(1);
  static const int SM_FishDb_return_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_FishDb_return, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_FishDb_return, debockgun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_FishDb_return, gunid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_FishDb_return, debolckrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_FishDb_return, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_FishDb_return, power_),
  };
  SM_FishDb_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_FishDb_return_descriptor_,
      SM_FishDb_return::default_instance_,
      SM_FishDb_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_FishDb_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_FishDb_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_FishDb_return));
  SM_Fish_CommonDb_descriptor_ = file->message_type(2);
  static const int SM_Fish_CommonDb_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fish_CommonDb, roleid_),
  };
  SM_Fish_CommonDb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Fish_CommonDb_descriptor_,
      SM_Fish_CommonDb::default_instance_,
      SM_Fish_CommonDb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fish_CommonDb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fish_CommonDb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Fish_CommonDb));
  SM_Fish_Common_info_descriptor_ = file->message_type(3);
  static const int SM_Fish_Common_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fish_Common_info, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fish_Common_info, type_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fish_Common_info, value_),
  };
  SM_Fish_Common_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Fish_Common_info_descriptor_,
      SM_Fish_Common_info::default_instance_,
      SM_Fish_Common_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fish_Common_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fish_Common_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Fish_Common_info));
  SM_Fish_Common_return_descriptor_ = file->message_type(4);
  static const int SM_Fish_Common_return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fish_Common_return, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fish_Common_return, data_),
  };
  SM_Fish_Common_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Fish_Common_return_descriptor_,
      SM_Fish_Common_return::default_instance_,
      SM_Fish_Common_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fish_Common_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fish_Common_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Fish_Common_return));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SP_5fFish_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_FishDb_request_descriptor_, &SM_FishDb_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_FishDb_return_descriptor_, &SM_FishDb_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Fish_CommonDb_descriptor_, &SM_Fish_CommonDb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Fish_Common_info_descriptor_, &SM_Fish_Common_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Fish_Common_return_descriptor_, &SM_Fish_Common_return::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SP_5fFish_2etxt() {
  delete SM_FishDb_request::default_instance_;
  delete SM_FishDb_request_reflection_;
  delete SM_FishDb_return::default_instance_;
  delete SM_FishDb_return_reflection_;
  delete SM_Fish_CommonDb::default_instance_;
  delete SM_Fish_CommonDb_reflection_;
  delete SM_Fish_Common_info::default_instance_;
  delete SM_Fish_Common_info_reflection_;
  delete SM_Fish_Common_return::default_instance_;
  delete SM_Fish_Common_return_reflection_;
}

void protobuf_AddDesc_SP_5fFish_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013SP_Fish.txt\"#\n\021SM_FishDb_request\022\016\n\006ro"
    "leid\030\001 \002(\005\"v\n\020SM_FishDb_return\022\016\n\006roleid"
    "\030\001 \002(\005\022\021\n\tdebockgun\030\002 \001(\t\022\r\n\005gunid\030\003 \001(\005"
    "\022\023\n\013debolckrate\030\004 \001(\005\022\014\n\004rate\030\005 \001(\005\022\r\n\005p"
    "ower\030\006 \001(\005\"\"\n\020SM_Fish_CommonDb\022\016\n\006roleid"
    "\030\001 \002(\005\"I\n\023SM_Fish_Common_info\022\017\n\007type_id"
    "\030\001 \002(\005\022\022\n\ntype_value\030\002 \001(\005\022\r\n\005value\030\003 \001("
    "\005\"K\n\025SM_Fish_Common_return\022\016\n\006roleid\030\001 \002"
    "(\005\022\"\n\004data\030\002 \003(\0132\024.SM_Fish_Common_info", 358);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SP_Fish.txt", &protobuf_RegisterTypes);
  SM_FishDb_request::default_instance_ = new SM_FishDb_request();
  SM_FishDb_return::default_instance_ = new SM_FishDb_return();
  SM_Fish_CommonDb::default_instance_ = new SM_Fish_CommonDb();
  SM_Fish_Common_info::default_instance_ = new SM_Fish_Common_info();
  SM_Fish_Common_return::default_instance_ = new SM_Fish_Common_return();
  SM_FishDb_request::default_instance_->InitAsDefaultInstance();
  SM_FishDb_return::default_instance_->InitAsDefaultInstance();
  SM_Fish_CommonDb::default_instance_->InitAsDefaultInstance();
  SM_Fish_Common_info::default_instance_->InitAsDefaultInstance();
  SM_Fish_Common_return::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SP_5fFish_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SP_5fFish_2etxt {
  StaticDescriptorInitializer_SP_5fFish_2etxt() {
    protobuf_AddDesc_SP_5fFish_2etxt();
  }
} static_descriptor_initializer_SP_5fFish_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int SM_FishDb_request::kRoleidFieldNumber;
#endif  // !_MSC_VER

SM_FishDb_request::SM_FishDb_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_FishDb_request::InitAsDefaultInstance() {
}

SM_FishDb_request::SM_FishDb_request(const SM_FishDb_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_FishDb_request::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_FishDb_request::~SM_FishDb_request() {
  SharedDtor();
}

void SM_FishDb_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_FishDb_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_FishDb_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_FishDb_request_descriptor_;
}

const SM_FishDb_request& SM_FishDb_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fFish_2etxt();
  return *default_instance_;
}

SM_FishDb_request* SM_FishDb_request::default_instance_ = NULL;

SM_FishDb_request* SM_FishDb_request::New() const {
  return new SM_FishDb_request;
}

void SM_FishDb_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_FishDb_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_FishDb_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_FishDb_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_FishDb_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_FishDb_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_FishDb_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_FishDb_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_FishDb_request::MergeFrom(const SM_FishDb_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_FishDb_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_FishDb_request::CopyFrom(const SM_FishDb_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_FishDb_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_FishDb_request::Swap(SM_FishDb_request* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_FishDb_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_FishDb_request_descriptor_;
  metadata.reflection = SM_FishDb_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_FishDb_return::kRoleidFieldNumber;
const int SM_FishDb_return::kDebockgunFieldNumber;
const int SM_FishDb_return::kGunidFieldNumber;
const int SM_FishDb_return::kDebolckrateFieldNumber;
const int SM_FishDb_return::kRateFieldNumber;
const int SM_FishDb_return::kPowerFieldNumber;
#endif  // !_MSC_VER

SM_FishDb_return::SM_FishDb_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_FishDb_return::InitAsDefaultInstance() {
}

SM_FishDb_return::SM_FishDb_return(const SM_FishDb_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_FishDb_return::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  debockgun_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gunid_ = 0;
  debolckrate_ = 0;
  rate_ = 0;
  power_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_FishDb_return::~SM_FishDb_return() {
  SharedDtor();
}

void SM_FishDb_return::SharedDtor() {
  if (debockgun_ != &::google::protobuf::internal::kEmptyString) {
    delete debockgun_;
  }
  if (this != default_instance_) {
  }
}

void SM_FishDb_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_FishDb_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_FishDb_return_descriptor_;
}

const SM_FishDb_return& SM_FishDb_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fFish_2etxt();
  return *default_instance_;
}

SM_FishDb_return* SM_FishDb_return::default_instance_ = NULL;

SM_FishDb_return* SM_FishDb_return::New() const {
  return new SM_FishDb_return;
}

void SM_FishDb_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    if (has_debockgun()) {
      if (debockgun_ != &::google::protobuf::internal::kEmptyString) {
        debockgun_->clear();
      }
    }
    gunid_ = 0;
    debolckrate_ = 0;
    rate_ = 0;
    power_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_FishDb_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_debockgun;
        break;
      }

      // optional string debockgun = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debockgun:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debockgun()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debockgun().data(), this->debockgun().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gunid;
        break;
      }

      // optional int32 gunid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gunid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gunid_)));
          set_has_gunid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_debolckrate;
        break;
      }

      // optional int32 debolckrate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_debolckrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &debolckrate_)));
          set_has_debolckrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rate;
        break;
      }

      // optional int32 rate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_power;
        break;
      }

      // optional int32 power = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_FishDb_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional string debockgun = 2;
  if (has_debockgun()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debockgun().data(), this->debockgun().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->debockgun(), output);
  }

  // optional int32 gunid = 3;
  if (has_gunid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gunid(), output);
  }

  // optional int32 debolckrate = 4;
  if (has_debolckrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->debolckrate(), output);
  }

  // optional int32 rate = 5;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rate(), output);
  }

  // optional int32 power = 6;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_FishDb_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional string debockgun = 2;
  if (has_debockgun()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debockgun().data(), this->debockgun().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->debockgun(), target);
  }

  // optional int32 gunid = 3;
  if (has_gunid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gunid(), target);
  }

  // optional int32 debolckrate = 4;
  if (has_debolckrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->debolckrate(), target);
  }

  // optional int32 rate = 5;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rate(), target);
  }

  // optional int32 power = 6;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_FishDb_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional string debockgun = 2;
    if (has_debockgun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debockgun());
    }

    // optional int32 gunid = 3;
    if (has_gunid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gunid());
    }

    // optional int32 debolckrate = 4;
    if (has_debolckrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->debolckrate());
    }

    // optional int32 rate = 5;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

    // optional int32 power = 6;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_FishDb_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_FishDb_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_FishDb_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_FishDb_return::MergeFrom(const SM_FishDb_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_debockgun()) {
      set_debockgun(from.debockgun());
    }
    if (from.has_gunid()) {
      set_gunid(from.gunid());
    }
    if (from.has_debolckrate()) {
      set_debolckrate(from.debolckrate());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_FishDb_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_FishDb_return::CopyFrom(const SM_FishDb_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_FishDb_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_FishDb_return::Swap(SM_FishDb_return* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(debockgun_, other->debockgun_);
    std::swap(gunid_, other->gunid_);
    std::swap(debolckrate_, other->debolckrate_);
    std::swap(rate_, other->rate_);
    std::swap(power_, other->power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_FishDb_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_FishDb_return_descriptor_;
  metadata.reflection = SM_FishDb_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Fish_CommonDb::kRoleidFieldNumber;
#endif  // !_MSC_VER

SM_Fish_CommonDb::SM_Fish_CommonDb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Fish_CommonDb::InitAsDefaultInstance() {
}

SM_Fish_CommonDb::SM_Fish_CommonDb(const SM_Fish_CommonDb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Fish_CommonDb::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Fish_CommonDb::~SM_Fish_CommonDb() {
  SharedDtor();
}

void SM_Fish_CommonDb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Fish_CommonDb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Fish_CommonDb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Fish_CommonDb_descriptor_;
}

const SM_Fish_CommonDb& SM_Fish_CommonDb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fFish_2etxt();
  return *default_instance_;
}

SM_Fish_CommonDb* SM_Fish_CommonDb::default_instance_ = NULL;

SM_Fish_CommonDb* SM_Fish_CommonDb::New() const {
  return new SM_Fish_CommonDb;
}

void SM_Fish_CommonDb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Fish_CommonDb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Fish_CommonDb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Fish_CommonDb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Fish_CommonDb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Fish_CommonDb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Fish_CommonDb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Fish_CommonDb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Fish_CommonDb::MergeFrom(const SM_Fish_CommonDb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Fish_CommonDb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Fish_CommonDb::CopyFrom(const SM_Fish_CommonDb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Fish_CommonDb::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Fish_CommonDb::Swap(SM_Fish_CommonDb* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Fish_CommonDb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Fish_CommonDb_descriptor_;
  metadata.reflection = SM_Fish_CommonDb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Fish_Common_info::kTypeIdFieldNumber;
const int SM_Fish_Common_info::kTypeValueFieldNumber;
const int SM_Fish_Common_info::kValueFieldNumber;
#endif  // !_MSC_VER

SM_Fish_Common_info::SM_Fish_Common_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Fish_Common_info::InitAsDefaultInstance() {
}

SM_Fish_Common_info::SM_Fish_Common_info(const SM_Fish_Common_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Fish_Common_info::SharedCtor() {
  _cached_size_ = 0;
  type_id_ = 0;
  type_value_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Fish_Common_info::~SM_Fish_Common_info() {
  SharedDtor();
}

void SM_Fish_Common_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Fish_Common_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Fish_Common_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Fish_Common_info_descriptor_;
}

const SM_Fish_Common_info& SM_Fish_Common_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fFish_2etxt();
  return *default_instance_;
}

SM_Fish_Common_info* SM_Fish_Common_info::default_instance_ = NULL;

SM_Fish_Common_info* SM_Fish_Common_info::New() const {
  return new SM_Fish_Common_info;
}

void SM_Fish_Common_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_id_ = 0;
    type_value_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Fish_Common_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type_value;
        break;
      }

      // optional int32 type_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_value_)));
          set_has_type_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional int32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Fish_Common_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type_id = 1;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_id(), output);
  }

  // optional int32 type_value = 2;
  if (has_type_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type_value(), output);
  }

  // optional int32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Fish_Common_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type_id = 1;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_id(), target);
  }

  // optional int32 type_value = 2;
  if (has_type_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type_value(), target);
  }

  // optional int32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Fish_Common_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type_id = 1;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

    // optional int32 type_value = 2;
    if (has_type_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_value());
    }

    // optional int32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Fish_Common_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Fish_Common_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Fish_Common_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Fish_Common_info::MergeFrom(const SM_Fish_Common_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_type_value()) {
      set_type_value(from.type_value());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Fish_Common_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Fish_Common_info::CopyFrom(const SM_Fish_Common_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Fish_Common_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Fish_Common_info::Swap(SM_Fish_Common_info* other) {
  if (other != this) {
    std::swap(type_id_, other->type_id_);
    std::swap(type_value_, other->type_value_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Fish_Common_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Fish_Common_info_descriptor_;
  metadata.reflection = SM_Fish_Common_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Fish_Common_return::kRoleidFieldNumber;
const int SM_Fish_Common_return::kDataFieldNumber;
#endif  // !_MSC_VER

SM_Fish_Common_return::SM_Fish_Common_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Fish_Common_return::InitAsDefaultInstance() {
}

SM_Fish_Common_return::SM_Fish_Common_return(const SM_Fish_Common_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Fish_Common_return::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Fish_Common_return::~SM_Fish_Common_return() {
  SharedDtor();
}

void SM_Fish_Common_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Fish_Common_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Fish_Common_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Fish_Common_return_descriptor_;
}

const SM_Fish_Common_return& SM_Fish_Common_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fFish_2etxt();
  return *default_instance_;
}

SM_Fish_Common_return* SM_Fish_Common_return::default_instance_ = NULL;

SM_Fish_Common_return* SM_Fish_Common_return::New() const {
  return new SM_Fish_Common_return;
}

void SM_Fish_Common_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Fish_Common_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .SM_Fish_Common_info data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Fish_Common_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // repeated .SM_Fish_Common_info data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Fish_Common_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // repeated .SM_Fish_Common_info data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Fish_Common_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  // repeated .SM_Fish_Common_info data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Fish_Common_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Fish_Common_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Fish_Common_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Fish_Common_return::MergeFrom(const SM_Fish_Common_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Fish_Common_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Fish_Common_return::CopyFrom(const SM_Fish_Common_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Fish_Common_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void SM_Fish_Common_return::Swap(SM_Fish_Common_return* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Fish_Common_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Fish_Common_return_descriptor_;
  metadata.reflection = SM_Fish_Common_return_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
