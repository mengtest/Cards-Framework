// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_Player.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SP_Player.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GMRoleList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMRoleList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMRoleSimpleInf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMRoleSimpleInf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_SigleSystemUnlockRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_SigleSystemUnlockRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_SigleSystemUnlockReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_SigleSystemUnlockReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_OnlinePlayerReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_OnlinePlayerReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ClearPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ClearPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PlayerDeleteList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PlayerDeleteList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PlayerDelete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PlayerDelete_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SP_5fPlayer_2etxt() {
  protobuf_AddDesc_SP_5fPlayer_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SP_Player.txt");
  GOOGLE_CHECK(file != NULL);
  GMRoleList_descriptor_ = file->message_type(0);
  static const int GMRoleList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleList, m_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleList, m_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleList, m_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleList, m_rolesimpleinf_),
  };
  GMRoleList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMRoleList_descriptor_,
      GMRoleList::default_instance_,
      GMRoleList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMRoleList));
  GMRoleSimpleInf_descriptor_ = file->message_type(1);
  static const int GMRoleSimpleInf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleSimpleInf, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleSimpleInf, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleSimpleInf, m_profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleSimpleInf, m_lv_),
  };
  GMRoleSimpleInf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMRoleSimpleInf_descriptor_,
      GMRoleSimpleInf::default_instance_,
      GMRoleSimpleInf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleSimpleInf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleSimpleInf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMRoleSimpleInf));
  GM_SigleSystemUnlockRequest_descriptor_ = file->message_type(2);
  static const int GM_SigleSystemUnlockRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SigleSystemUnlockRequest, enumid_),
  };
  GM_SigleSystemUnlockRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_SigleSystemUnlockRequest_descriptor_,
      GM_SigleSystemUnlockRequest::default_instance_,
      GM_SigleSystemUnlockRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SigleSystemUnlockRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SigleSystemUnlockRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_SigleSystemUnlockRequest));
  GM_SigleSystemUnlockReturn_descriptor_ = file->message_type(3);
  static const int GM_SigleSystemUnlockReturn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SigleSystemUnlockReturn, state_),
  };
  GM_SigleSystemUnlockReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_SigleSystemUnlockReturn_descriptor_,
      GM_SigleSystemUnlockReturn::default_instance_,
      GM_SigleSystemUnlockReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SigleSystemUnlockReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SigleSystemUnlockReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_SigleSystemUnlockReturn));
  GM_OnlinePlayerReturn_descriptor_ = file->message_type(4);
  static const int GM_OnlinePlayerReturn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OnlinePlayerReturn, roleid_),
  };
  GM_OnlinePlayerReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_OnlinePlayerReturn_descriptor_,
      GM_OnlinePlayerReturn::default_instance_,
      GM_OnlinePlayerReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OnlinePlayerReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OnlinePlayerReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_OnlinePlayerReturn));
  GM_ClearPlayer_descriptor_ = file->message_type(5);
  static const int GM_ClearPlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClearPlayer, roleid_),
  };
  GM_ClearPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ClearPlayer_descriptor_,
      GM_ClearPlayer::default_instance_,
      GM_ClearPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClearPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClearPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ClearPlayer));
  GM_PlayerDeleteList_descriptor_ = file->message_type(6);
  static const int GM_PlayerDeleteList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerDeleteList, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerDeleteList, playerdeletes_),
  };
  GM_PlayerDeleteList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PlayerDeleteList_descriptor_,
      GM_PlayerDeleteList::default_instance_,
      GM_PlayerDeleteList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerDeleteList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerDeleteList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PlayerDeleteList));
  GM_PlayerDelete_descriptor_ = file->message_type(7);
  static const int GM_PlayerDelete_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerDelete, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerDelete, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerDelete, deletetime_),
  };
  GM_PlayerDelete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PlayerDelete_descriptor_,
      GM_PlayerDelete::default_instance_,
      GM_PlayerDelete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerDelete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerDelete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PlayerDelete));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SP_5fPlayer_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMRoleList_descriptor_, &GMRoleList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMRoleSimpleInf_descriptor_, &GMRoleSimpleInf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_SigleSystemUnlockRequest_descriptor_, &GM_SigleSystemUnlockRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_SigleSystemUnlockReturn_descriptor_, &GM_SigleSystemUnlockReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_OnlinePlayerReturn_descriptor_, &GM_OnlinePlayerReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ClearPlayer_descriptor_, &GM_ClearPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PlayerDeleteList_descriptor_, &GM_PlayerDeleteList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PlayerDelete_descriptor_, &GM_PlayerDelete::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SP_5fPlayer_2etxt() {
  delete GMRoleList::default_instance_;
  delete GMRoleList_reflection_;
  delete GMRoleSimpleInf::default_instance_;
  delete GMRoleSimpleInf_reflection_;
  delete GM_SigleSystemUnlockRequest::default_instance_;
  delete GM_SigleSystemUnlockRequest_reflection_;
  delete GM_SigleSystemUnlockReturn::default_instance_;
  delete GM_SigleSystemUnlockReturn_reflection_;
  delete GM_OnlinePlayerReturn::default_instance_;
  delete GM_OnlinePlayerReturn_reflection_;
  delete GM_ClearPlayer::default_instance_;
  delete GM_ClearPlayer_reflection_;
  delete GM_PlayerDeleteList::default_instance_;
  delete GM_PlayerDeleteList_reflection_;
  delete GM_PlayerDelete::default_instance_;
  delete GM_PlayerDelete_reflection_;
}

void protobuf_AddDesc_SP_5fPlayer_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rSP_Player.txt\"k\n\nGMRoleList\022\021\n\tm_Accou"
    "nt\030\001 \002(\005\022\016\n\006m_Area\030\002 \002(\005\022\017\n\007m_Count\030\003 \002("
    "\005\022)\n\017m_RoleSimpleInf\030\004 \003(\0132\020.GMRoleSimpl"
    "eInf\"W\n\017GMRoleSimpleInf\022\020\n\010m_Roleid\030\001 \002("
    "\005\022\016\n\006m_Name\030\002 \002(\t\022\024\n\014m_Profession\030\003 \002(\005\022"
    "\014\n\004m_LV\030\004 \002(\005\"-\n\033GM_SigleSystemUnlockReq"
    "uest\022\016\n\006enumID\030\001 \002(\r\"+\n\032GM_SigleSystemUn"
    "lockReturn\022\r\n\005state\030\001 \002(\010\"\'\n\025GM_OnlinePl"
    "ayerReturn\022\016\n\006roleid\030\001 \003(\r\" \n\016GM_ClearPl"
    "ayer\022\016\n\006roleID\030\001 \003(\005\"M\n\023GM_PlayerDeleteL"
    "ist\022\r\n\005count\030\001 \002(\005\022\'\n\rplayerDeletes\030\002 \003("
    "\0132\020.GM_PlayerDelete\"H\n\017GM_PlayerDelete\022\016"
    "\n\006roleid\030\001 \002(\r\022\021\n\taccountid\030\002 \002(\r\022\022\n\ndel"
    "etetime\030\003 \002(\r", 533);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SP_Player.txt", &protobuf_RegisterTypes);
  GMRoleList::default_instance_ = new GMRoleList();
  GMRoleSimpleInf::default_instance_ = new GMRoleSimpleInf();
  GM_SigleSystemUnlockRequest::default_instance_ = new GM_SigleSystemUnlockRequest();
  GM_SigleSystemUnlockReturn::default_instance_ = new GM_SigleSystemUnlockReturn();
  GM_OnlinePlayerReturn::default_instance_ = new GM_OnlinePlayerReturn();
  GM_ClearPlayer::default_instance_ = new GM_ClearPlayer();
  GM_PlayerDeleteList::default_instance_ = new GM_PlayerDeleteList();
  GM_PlayerDelete::default_instance_ = new GM_PlayerDelete();
  GMRoleList::default_instance_->InitAsDefaultInstance();
  GMRoleSimpleInf::default_instance_->InitAsDefaultInstance();
  GM_SigleSystemUnlockRequest::default_instance_->InitAsDefaultInstance();
  GM_SigleSystemUnlockReturn::default_instance_->InitAsDefaultInstance();
  GM_OnlinePlayerReturn::default_instance_->InitAsDefaultInstance();
  GM_ClearPlayer::default_instance_->InitAsDefaultInstance();
  GM_PlayerDeleteList::default_instance_->InitAsDefaultInstance();
  GM_PlayerDelete::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SP_5fPlayer_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SP_5fPlayer_2etxt {
  StaticDescriptorInitializer_SP_5fPlayer_2etxt() {
    protobuf_AddDesc_SP_5fPlayer_2etxt();
  }
} static_descriptor_initializer_SP_5fPlayer_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GMRoleList::kMAccountFieldNumber;
const int GMRoleList::kMAreaFieldNumber;
const int GMRoleList::kMCountFieldNumber;
const int GMRoleList::kMRoleSimpleInfFieldNumber;
#endif  // !_MSC_VER

GMRoleList::GMRoleList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMRoleList::InitAsDefaultInstance() {
}

GMRoleList::GMRoleList(const GMRoleList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMRoleList::SharedCtor() {
  _cached_size_ = 0;
  m_account_ = 0;
  m_area_ = 0;
  m_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMRoleList::~GMRoleList() {
  SharedDtor();
}

void GMRoleList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMRoleList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMRoleList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMRoleList_descriptor_;
}

const GMRoleList& GMRoleList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fPlayer_2etxt();
  return *default_instance_;
}

GMRoleList* GMRoleList::default_instance_ = NULL;

GMRoleList* GMRoleList::New() const {
  return new GMRoleList;
}

void GMRoleList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_account_ = 0;
    m_area_ = 0;
    m_count_ = 0;
  }
  m_rolesimpleinf_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMRoleList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_account_)));
          set_has_m_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_Area;
        break;
      }

      // required int32 m_Area = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_area_)));
          set_has_m_area();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_Count;
        break;
      }

      // required int32 m_Count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_RoleSimpleInf;
        break;
      }

      // repeated .GMRoleSimpleInf m_RoleSimpleInf = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_RoleSimpleInf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_rolesimpleinf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_RoleSimpleInf;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMRoleList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Account = 1;
  if (has_m_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_account(), output);
  }

  // required int32 m_Area = 2;
  if (has_m_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_area(), output);
  }

  // required int32 m_Count = 3;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_count(), output);
  }

  // repeated .GMRoleSimpleInf m_RoleSimpleInf = 4;
  for (int i = 0; i < this->m_rolesimpleinf_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_rolesimpleinf(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMRoleList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Account = 1;
  if (has_m_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_account(), target);
  }

  // required int32 m_Area = 2;
  if (has_m_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_area(), target);
  }

  // required int32 m_Count = 3;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_count(), target);
  }

  // repeated .GMRoleSimpleInf m_RoleSimpleInf = 4;
  for (int i = 0; i < this->m_rolesimpleinf_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_rolesimpleinf(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMRoleList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Account = 1;
    if (has_m_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_account());
    }

    // required int32 m_Area = 2;
    if (has_m_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_area());
    }

    // required int32 m_Count = 3;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_count());
    }

  }
  // repeated .GMRoleSimpleInf m_RoleSimpleInf = 4;
  total_size += 1 * this->m_rolesimpleinf_size();
  for (int i = 0; i < this->m_rolesimpleinf_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_rolesimpleinf(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMRoleList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMRoleList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMRoleList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMRoleList::MergeFrom(const GMRoleList& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_rolesimpleinf_.MergeFrom(from.m_rolesimpleinf_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_account()) {
      set_m_account(from.m_account());
    }
    if (from.has_m_area()) {
      set_m_area(from.m_area());
    }
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMRoleList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMRoleList::CopyFrom(const GMRoleList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMRoleList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < m_rolesimpleinf_size(); i++) {
    if (!this->m_rolesimpleinf(i).IsInitialized()) return false;
  }
  return true;
}

void GMRoleList::Swap(GMRoleList* other) {
  if (other != this) {
    std::swap(m_account_, other->m_account_);
    std::swap(m_area_, other->m_area_);
    std::swap(m_count_, other->m_count_);
    m_rolesimpleinf_.Swap(&other->m_rolesimpleinf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMRoleList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMRoleList_descriptor_;
  metadata.reflection = GMRoleList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMRoleSimpleInf::kMRoleidFieldNumber;
const int GMRoleSimpleInf::kMNameFieldNumber;
const int GMRoleSimpleInf::kMProfessionFieldNumber;
const int GMRoleSimpleInf::kMLVFieldNumber;
#endif  // !_MSC_VER

GMRoleSimpleInf::GMRoleSimpleInf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMRoleSimpleInf::InitAsDefaultInstance() {
}

GMRoleSimpleInf::GMRoleSimpleInf(const GMRoleSimpleInf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMRoleSimpleInf::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_profession_ = 0;
  m_lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMRoleSimpleInf::~GMRoleSimpleInf() {
  SharedDtor();
}

void GMRoleSimpleInf::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (this != default_instance_) {
  }
}

void GMRoleSimpleInf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMRoleSimpleInf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMRoleSimpleInf_descriptor_;
}

const GMRoleSimpleInf& GMRoleSimpleInf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fPlayer_2etxt();
  return *default_instance_;
}

GMRoleSimpleInf* GMRoleSimpleInf::default_instance_ = NULL;

GMRoleSimpleInf* GMRoleSimpleInf::New() const {
  return new GMRoleSimpleInf;
}

void GMRoleSimpleInf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_profession_ = 0;
    m_lv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMRoleSimpleInf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_Name;
        break;
      }

      // required string m_Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_Profession;
        break;
      }

      // required int32 m_Profession = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_profession_)));
          set_has_m_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_LV;
        break;
      }

      // required int32 m_LV = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_LV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMRoleSimpleInf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // required string m_Name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // required int32 m_Profession = 3;
  if (has_m_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_profession(), output);
  }

  // required int32 m_LV = 4;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMRoleSimpleInf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // required string m_Name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // required int32 m_Profession = 3;
  if (has_m_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_profession(), target);
  }

  // required int32 m_LV = 4;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMRoleSimpleInf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // required string m_Name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // required int32 m_Profession = 3;
    if (has_m_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_profession());
    }

    // required int32 m_LV = 4;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMRoleSimpleInf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMRoleSimpleInf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMRoleSimpleInf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMRoleSimpleInf::MergeFrom(const GMRoleSimpleInf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_profession()) {
      set_m_profession(from.m_profession());
    }
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMRoleSimpleInf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMRoleSimpleInf::CopyFrom(const GMRoleSimpleInf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMRoleSimpleInf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GMRoleSimpleInf::Swap(GMRoleSimpleInf* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_profession_, other->m_profession_);
    std::swap(m_lv_, other->m_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMRoleSimpleInf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMRoleSimpleInf_descriptor_;
  metadata.reflection = GMRoleSimpleInf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_SigleSystemUnlockRequest::kEnumIDFieldNumber;
#endif  // !_MSC_VER

GM_SigleSystemUnlockRequest::GM_SigleSystemUnlockRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_SigleSystemUnlockRequest::InitAsDefaultInstance() {
}

GM_SigleSystemUnlockRequest::GM_SigleSystemUnlockRequest(const GM_SigleSystemUnlockRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_SigleSystemUnlockRequest::SharedCtor() {
  _cached_size_ = 0;
  enumid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_SigleSystemUnlockRequest::~GM_SigleSystemUnlockRequest() {
  SharedDtor();
}

void GM_SigleSystemUnlockRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_SigleSystemUnlockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_SigleSystemUnlockRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_SigleSystemUnlockRequest_descriptor_;
}

const GM_SigleSystemUnlockRequest& GM_SigleSystemUnlockRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fPlayer_2etxt();
  return *default_instance_;
}

GM_SigleSystemUnlockRequest* GM_SigleSystemUnlockRequest::default_instance_ = NULL;

GM_SigleSystemUnlockRequest* GM_SigleSystemUnlockRequest::New() const {
  return new GM_SigleSystemUnlockRequest;
}

void GM_SigleSystemUnlockRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enumid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_SigleSystemUnlockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 enumID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enumid_)));
          set_has_enumid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_SigleSystemUnlockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 enumID = 1;
  if (has_enumid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enumid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_SigleSystemUnlockRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 enumID = 1;
  if (has_enumid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->enumid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_SigleSystemUnlockRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 enumID = 1;
    if (has_enumid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enumid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_SigleSystemUnlockRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_SigleSystemUnlockRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_SigleSystemUnlockRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_SigleSystemUnlockRequest::MergeFrom(const GM_SigleSystemUnlockRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enumid()) {
      set_enumid(from.enumid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_SigleSystemUnlockRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_SigleSystemUnlockRequest::CopyFrom(const GM_SigleSystemUnlockRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_SigleSystemUnlockRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_SigleSystemUnlockRequest::Swap(GM_SigleSystemUnlockRequest* other) {
  if (other != this) {
    std::swap(enumid_, other->enumid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_SigleSystemUnlockRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_SigleSystemUnlockRequest_descriptor_;
  metadata.reflection = GM_SigleSystemUnlockRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_SigleSystemUnlockReturn::kStateFieldNumber;
#endif  // !_MSC_VER

GM_SigleSystemUnlockReturn::GM_SigleSystemUnlockReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_SigleSystemUnlockReturn::InitAsDefaultInstance() {
}

GM_SigleSystemUnlockReturn::GM_SigleSystemUnlockReturn(const GM_SigleSystemUnlockReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_SigleSystemUnlockReturn::SharedCtor() {
  _cached_size_ = 0;
  state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_SigleSystemUnlockReturn::~GM_SigleSystemUnlockReturn() {
  SharedDtor();
}

void GM_SigleSystemUnlockReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_SigleSystemUnlockReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_SigleSystemUnlockReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_SigleSystemUnlockReturn_descriptor_;
}

const GM_SigleSystemUnlockReturn& GM_SigleSystemUnlockReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fPlayer_2etxt();
  return *default_instance_;
}

GM_SigleSystemUnlockReturn* GM_SigleSystemUnlockReturn::default_instance_ = NULL;

GM_SigleSystemUnlockReturn* GM_SigleSystemUnlockReturn::New() const {
  return new GM_SigleSystemUnlockReturn;
}

void GM_SigleSystemUnlockReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_SigleSystemUnlockReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_SigleSystemUnlockReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_SigleSystemUnlockReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_SigleSystemUnlockReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool state = 1;
    if (has_state()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_SigleSystemUnlockReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_SigleSystemUnlockReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_SigleSystemUnlockReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_SigleSystemUnlockReturn::MergeFrom(const GM_SigleSystemUnlockReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_SigleSystemUnlockReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_SigleSystemUnlockReturn::CopyFrom(const GM_SigleSystemUnlockReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_SigleSystemUnlockReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_SigleSystemUnlockReturn::Swap(GM_SigleSystemUnlockReturn* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_SigleSystemUnlockReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_SigleSystemUnlockReturn_descriptor_;
  metadata.reflection = GM_SigleSystemUnlockReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_OnlinePlayerReturn::kRoleidFieldNumber;
#endif  // !_MSC_VER

GM_OnlinePlayerReturn::GM_OnlinePlayerReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_OnlinePlayerReturn::InitAsDefaultInstance() {
}

GM_OnlinePlayerReturn::GM_OnlinePlayerReturn(const GM_OnlinePlayerReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_OnlinePlayerReturn::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_OnlinePlayerReturn::~GM_OnlinePlayerReturn() {
  SharedDtor();
}

void GM_OnlinePlayerReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_OnlinePlayerReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_OnlinePlayerReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_OnlinePlayerReturn_descriptor_;
}

const GM_OnlinePlayerReturn& GM_OnlinePlayerReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fPlayer_2etxt();
  return *default_instance_;
}

GM_OnlinePlayerReturn* GM_OnlinePlayerReturn::default_instance_ = NULL;

GM_OnlinePlayerReturn* GM_OnlinePlayerReturn::New() const {
  return new GM_OnlinePlayerReturn;
}

void GM_OnlinePlayerReturn::Clear() {
  roleid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_OnlinePlayerReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_roleid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_roleid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_roleid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_OnlinePlayerReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 roleid = 1;
  for (int i = 0; i < this->roleid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->roleid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_OnlinePlayerReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 roleid = 1;
  for (int i = 0; i < this->roleid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->roleid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_OnlinePlayerReturn::ByteSize() const {
  int total_size = 0;

  // repeated uint32 roleid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->roleid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->roleid(i));
    }
    total_size += 1 * this->roleid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_OnlinePlayerReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_OnlinePlayerReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_OnlinePlayerReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_OnlinePlayerReturn::MergeFrom(const GM_OnlinePlayerReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleid_.MergeFrom(from.roleid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_OnlinePlayerReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_OnlinePlayerReturn::CopyFrom(const GM_OnlinePlayerReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_OnlinePlayerReturn::IsInitialized() const {

  return true;
}

void GM_OnlinePlayerReturn::Swap(GM_OnlinePlayerReturn* other) {
  if (other != this) {
    roleid_.Swap(&other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_OnlinePlayerReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_OnlinePlayerReturn_descriptor_;
  metadata.reflection = GM_OnlinePlayerReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ClearPlayer::kRoleIDFieldNumber;
#endif  // !_MSC_VER

GM_ClearPlayer::GM_ClearPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ClearPlayer::InitAsDefaultInstance() {
}

GM_ClearPlayer::GM_ClearPlayer(const GM_ClearPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ClearPlayer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ClearPlayer::~GM_ClearPlayer() {
  SharedDtor();
}

void GM_ClearPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ClearPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ClearPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ClearPlayer_descriptor_;
}

const GM_ClearPlayer& GM_ClearPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fPlayer_2etxt();
  return *default_instance_;
}

GM_ClearPlayer* GM_ClearPlayer::default_instance_ = NULL;

GM_ClearPlayer* GM_ClearPlayer::New() const {
  return new GM_ClearPlayer;
}

void GM_ClearPlayer::Clear() {
  roleid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ClearPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_roleid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_roleid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_roleID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ClearPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 roleID = 1;
  for (int i = 0; i < this->roleid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->roleid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ClearPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 roleID = 1;
  for (int i = 0; i < this->roleid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->roleid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ClearPlayer::ByteSize() const {
  int total_size = 0;

  // repeated int32 roleID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->roleid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->roleid(i));
    }
    total_size += 1 * this->roleid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ClearPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ClearPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ClearPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ClearPlayer::MergeFrom(const GM_ClearPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleid_.MergeFrom(from.roleid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ClearPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ClearPlayer::CopyFrom(const GM_ClearPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ClearPlayer::IsInitialized() const {

  return true;
}

void GM_ClearPlayer::Swap(GM_ClearPlayer* other) {
  if (other != this) {
    roleid_.Swap(&other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ClearPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ClearPlayer_descriptor_;
  metadata.reflection = GM_ClearPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PlayerDeleteList::kCountFieldNumber;
const int GM_PlayerDeleteList::kPlayerDeletesFieldNumber;
#endif  // !_MSC_VER

GM_PlayerDeleteList::GM_PlayerDeleteList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PlayerDeleteList::InitAsDefaultInstance() {
}

GM_PlayerDeleteList::GM_PlayerDeleteList(const GM_PlayerDeleteList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PlayerDeleteList::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PlayerDeleteList::~GM_PlayerDeleteList() {
  SharedDtor();
}

void GM_PlayerDeleteList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PlayerDeleteList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PlayerDeleteList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PlayerDeleteList_descriptor_;
}

const GM_PlayerDeleteList& GM_PlayerDeleteList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fPlayer_2etxt();
  return *default_instance_;
}

GM_PlayerDeleteList* GM_PlayerDeleteList::default_instance_ = NULL;

GM_PlayerDeleteList* GM_PlayerDeleteList::New() const {
  return new GM_PlayerDeleteList;
}

void GM_PlayerDeleteList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  playerdeletes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PlayerDeleteList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerDeletes;
        break;
      }

      // repeated .GM_PlayerDelete playerDeletes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerDeletes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerdeletes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerDeletes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PlayerDeleteList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated .GM_PlayerDelete playerDeletes = 2;
  for (int i = 0; i < this->playerdeletes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playerdeletes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PlayerDeleteList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated .GM_PlayerDelete playerDeletes = 2;
  for (int i = 0; i < this->playerdeletes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playerdeletes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PlayerDeleteList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .GM_PlayerDelete playerDeletes = 2;
  total_size += 1 * this->playerdeletes_size();
  for (int i = 0; i < this->playerdeletes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerdeletes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PlayerDeleteList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PlayerDeleteList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PlayerDeleteList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PlayerDeleteList::MergeFrom(const GM_PlayerDeleteList& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerdeletes_.MergeFrom(from.playerdeletes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PlayerDeleteList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PlayerDeleteList::CopyFrom(const GM_PlayerDeleteList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PlayerDeleteList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < playerdeletes_size(); i++) {
    if (!this->playerdeletes(i).IsInitialized()) return false;
  }
  return true;
}

void GM_PlayerDeleteList::Swap(GM_PlayerDeleteList* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    playerdeletes_.Swap(&other->playerdeletes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PlayerDeleteList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PlayerDeleteList_descriptor_;
  metadata.reflection = GM_PlayerDeleteList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PlayerDelete::kRoleidFieldNumber;
const int GM_PlayerDelete::kAccountidFieldNumber;
const int GM_PlayerDelete::kDeletetimeFieldNumber;
#endif  // !_MSC_VER

GM_PlayerDelete::GM_PlayerDelete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PlayerDelete::InitAsDefaultInstance() {
}

GM_PlayerDelete::GM_PlayerDelete(const GM_PlayerDelete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PlayerDelete::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  accountid_ = 0u;
  deletetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PlayerDelete::~GM_PlayerDelete() {
  SharedDtor();
}

void GM_PlayerDelete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PlayerDelete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PlayerDelete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PlayerDelete_descriptor_;
}

const GM_PlayerDelete& GM_PlayerDelete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fPlayer_2etxt();
  return *default_instance_;
}

GM_PlayerDelete* GM_PlayerDelete::default_instance_ = NULL;

GM_PlayerDelete* GM_PlayerDelete::New() const {
  return new GM_PlayerDelete;
}

void GM_PlayerDelete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    accountid_ = 0u;
    deletetime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PlayerDelete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accountid;
        break;
      }

      // required uint32 accountid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_deletetime;
        break;
      }

      // required uint32 deletetime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deletetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deletetime_)));
          set_has_deletetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PlayerDelete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roleid(), output);
  }

  // required uint32 accountid = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid(), output);
  }

  // required uint32 deletetime = 3;
  if (has_deletetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->deletetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PlayerDelete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roleid(), target);
  }

  // required uint32 accountid = 2;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid(), target);
  }

  // required uint32 deletetime = 3;
  if (has_deletetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->deletetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PlayerDelete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }

    // required uint32 accountid = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // required uint32 deletetime = 3;
    if (has_deletetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deletetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PlayerDelete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PlayerDelete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PlayerDelete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PlayerDelete::MergeFrom(const GM_PlayerDelete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_deletetime()) {
      set_deletetime(from.deletetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PlayerDelete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PlayerDelete::CopyFrom(const GM_PlayerDelete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PlayerDelete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_PlayerDelete::Swap(GM_PlayerDelete* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(accountid_, other->accountid_);
    std::swap(deletetime_, other->deletetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PlayerDelete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PlayerDelete_descriptor_;
  metadata.reflection = GM_PlayerDelete_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
