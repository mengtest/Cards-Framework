// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "player.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GMRoleListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMRoleListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMRoleListEx_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMRoleListEx_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMEquipInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMEquipInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMLogServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMLogServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMRoleCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMRoleCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMRoleCreateReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMRoleCreateReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMRoleLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMRoleLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMOffLineReconnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMOffLineReconnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMRoleNameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMRoleNameRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMRoleNameReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMRoleNameReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_UPDATEFightVal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_UPDATEFightVal_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ProfessionChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ProfessionChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ProfessionChangeReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ProfessionChangeReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_FightDataChangeItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_FightDataChangeItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_FightDataChangeNotifyInFB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_FightDataChangeNotifyInFB_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_FightDataChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_FightDataChangeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_UnlockSystem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_UnlockSystem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_UnlockSystemList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_UnlockSystemList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Commonint32ChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Commonint32ChangeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_CommonLONG64ChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_CommonLONG64ChangeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_CommonfloatChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_CommonfloatChangeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_RoleDelete_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_RoleDelete_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_RoleDelete_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_RoleDelete_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_TiredValueInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_TiredValueInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_QueryOtherPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_QueryOtherPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangInfoResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangInfoResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Crckey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Crckey_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Recover_DeleteRole_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Recover_DeleteRole_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Recover_DeleteRole_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Recover_DeleteRole_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Cancel_Recover_DeleteRole_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Cancel_Recover_DeleteRole_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Cancel_Recover_DeleteRole_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Cancel_Recover_DeleteRole_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Recover_DeleteRole_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Recover_DeleteRole_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Player_Recovery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Player_Recovery_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Player_changeSex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Player_changeSex_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Ip_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Ip_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Ip_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Ip_return_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_player_2etxt() {
  protobuf_AddDesc_player_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "player.txt");
  GOOGLE_CHECK(file != NULL);
  GMRoleListRequest_descriptor_ = file->message_type(0);
  static const int GMRoleListRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleListRequest, m_accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleListRequest, m_area_),
  };
  GMRoleListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMRoleListRequest_descriptor_,
      GMRoleListRequest::default_instance_,
      GMRoleListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMRoleListRequest));
  GMRoleListEx_descriptor_ = file->message_type(1);
  static const int GMRoleListEx_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleListEx, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleListEx, communid_),
  };
  GMRoleListEx_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMRoleListEx_descriptor_,
      GMRoleListEx::default_instance_,
      GMRoleListEx_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleListEx, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleListEx, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMRoleListEx));
  GMEquipInfo_descriptor_ = file->message_type(2);
  static const int GMEquipInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMEquipInfo, packid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMEquipInfo, grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMEquipInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMEquipInfo, gmid_),
  };
  GMEquipInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMEquipInfo_descriptor_,
      GMEquipInfo::default_instance_,
      GMEquipInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMEquipInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMEquipInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMEquipInfo));
  GMLogServerInfo_descriptor_ = file->message_type(3);
  static const int GMLogServerInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMLogServerInfo, platformid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMLogServerInfo, ditchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMLogServerInfo, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMLogServerInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMLogServerInfo, ipaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMLogServerInfo, macaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMLogServerInfo, deviceuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMLogServerInfo, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMLogServerInfo, idfa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMLogServerInfo, devicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMLogServerInfo, networktype_),
  };
  GMLogServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMLogServerInfo_descriptor_,
      GMLogServerInfo::default_instance_,
      GMLogServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMLogServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMLogServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMLogServerInfo));
  GMRoleCreate_descriptor_ = file->message_type(4);
  static const int GMRoleCreate_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleCreate, m_accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleCreate, m_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleCreate, m_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleCreate, m_headphotourl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleCreate, m_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleCreate, m_unionid_),
  };
  GMRoleCreate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMRoleCreate_descriptor_,
      GMRoleCreate::default_instance_,
      GMRoleCreate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleCreate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleCreate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMRoleCreate));
  GMRoleCreateReturn_descriptor_ = file->message_type(5);
  static const int GMRoleCreateReturn_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleCreateReturn, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleCreateReturn, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleCreateReturn, m_accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleCreateReturn, m_rolename_),
  };
  GMRoleCreateReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMRoleCreateReturn_descriptor_,
      GMRoleCreateReturn::default_instance_,
      GMRoleCreateReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleCreateReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleCreateReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMRoleCreateReturn));
  GMRoleLogin_descriptor_ = file->message_type(6);
  static const int GMRoleLogin_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleLogin, m_accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleLogin, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleLogin, m_randstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleLogin, m_info_),
  };
  GMRoleLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMRoleLogin_descriptor_,
      GMRoleLogin::default_instance_,
      GMRoleLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMRoleLogin));
  GMOffLineReconnect_descriptor_ = file->message_type(7);
  static const int GMOffLineReconnect_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMOffLineReconnect, m_accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMOffLineReconnect, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMOffLineReconnect, m_randstr_),
  };
  GMOffLineReconnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMOffLineReconnect_descriptor_,
      GMOffLineReconnect::default_instance_,
      GMOffLineReconnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMOffLineReconnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMOffLineReconnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMOffLineReconnect));
  GMRoleNameRequest_descriptor_ = file->message_type(8);
  static const int GMRoleNameRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleNameRequest, m_roleprofession_),
  };
  GMRoleNameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMRoleNameRequest_descriptor_,
      GMRoleNameRequest::default_instance_,
      GMRoleNameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleNameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleNameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMRoleNameRequest));
  GMRoleNameReturn_descriptor_ = file->message_type(9);
  static const int GMRoleNameReturn_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleNameReturn, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleNameReturn, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleNameReturn, type_),
  };
  GMRoleNameReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMRoleNameReturn_descriptor_,
      GMRoleNameReturn::default_instance_,
      GMRoleNameReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleNameReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleNameReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMRoleNameReturn));
  GM_UPDATEFightVal_descriptor_ = file->message_type(10);
  static const int GM_UPDATEFightVal_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UPDATEFightVal, fightval_),
  };
  GM_UPDATEFightVal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_UPDATEFightVal_descriptor_,
      GM_UPDATEFightVal::default_instance_,
      GM_UPDATEFightVal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UPDATEFightVal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UPDATEFightVal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_UPDATEFightVal));
  GM_ProfessionChange_descriptor_ = file->message_type(11);
  static const int GM_ProfessionChange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ProfessionChange, professionid_),
  };
  GM_ProfessionChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ProfessionChange_descriptor_,
      GM_ProfessionChange::default_instance_,
      GM_ProfessionChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ProfessionChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ProfessionChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ProfessionChange));
  GM_ProfessionChangeReturn_descriptor_ = file->message_type(12);
  static const int GM_ProfessionChangeReturn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ProfessionChangeReturn, result_),
  };
  GM_ProfessionChangeReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ProfessionChangeReturn_descriptor_,
      GM_ProfessionChangeReturn::default_instance_,
      GM_ProfessionChangeReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ProfessionChangeReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ProfessionChangeReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ProfessionChangeReturn));
  GM_FightDataChangeItem_descriptor_ = file->message_type(13);
  static const int GM_FightDataChangeItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FightDataChangeItem, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FightDataChangeItem, changevalue_),
  };
  GM_FightDataChangeItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_FightDataChangeItem_descriptor_,
      GM_FightDataChangeItem::default_instance_,
      GM_FightDataChangeItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FightDataChangeItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FightDataChangeItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_FightDataChangeItem));
  GM_FightDataChangeNotifyInFB_descriptor_ = file->message_type(14);
  static const int GM_FightDataChangeNotifyInFB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FightDataChangeNotifyInFB, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FightDataChangeNotifyInFB, roletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FightDataChangeNotifyInFB, changeitems_),
  };
  GM_FightDataChangeNotifyInFB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_FightDataChangeNotifyInFB_descriptor_,
      GM_FightDataChangeNotifyInFB::default_instance_,
      GM_FightDataChangeNotifyInFB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FightDataChangeNotifyInFB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FightDataChangeNotifyInFB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_FightDataChangeNotifyInFB));
  GM_FightDataChangeNotify_descriptor_ = file->message_type(15);
  static const int GM_FightDataChangeNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FightDataChangeNotify, changeitems_),
  };
  GM_FightDataChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_FightDataChangeNotify_descriptor_,
      GM_FightDataChangeNotify::default_instance_,
      GM_FightDataChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FightDataChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FightDataChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_FightDataChangeNotify));
  GM_UnlockSystem_descriptor_ = file->message_type(16);
  static const int GM_UnlockSystem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UnlockSystem, enumid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UnlockSystem, isspecialeffect_),
  };
  GM_UnlockSystem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_UnlockSystem_descriptor_,
      GM_UnlockSystem::default_instance_,
      GM_UnlockSystem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UnlockSystem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UnlockSystem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_UnlockSystem));
  GM_UnlockSystemList_descriptor_ = file->message_type(17);
  static const int GM_UnlockSystemList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UnlockSystemList, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UnlockSystemList, enumid_),
  };
  GM_UnlockSystemList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_UnlockSystemList_descriptor_,
      GM_UnlockSystemList::default_instance_,
      GM_UnlockSystemList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UnlockSystemList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UnlockSystemList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_UnlockSystemList));
  GM_Commonint32ChangeNotify_descriptor_ = file->message_type(18);
  static const int GM_Commonint32ChangeNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Commonint32ChangeNotify, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Commonint32ChangeNotify, value_),
  };
  GM_Commonint32ChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Commonint32ChangeNotify_descriptor_,
      GM_Commonint32ChangeNotify::default_instance_,
      GM_Commonint32ChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Commonint32ChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Commonint32ChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Commonint32ChangeNotify));
  GM_CommonLONG64ChangeNotify_descriptor_ = file->message_type(19);
  static const int GM_CommonLONG64ChangeNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CommonLONG64ChangeNotify, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CommonLONG64ChangeNotify, value_),
  };
  GM_CommonLONG64ChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_CommonLONG64ChangeNotify_descriptor_,
      GM_CommonLONG64ChangeNotify::default_instance_,
      GM_CommonLONG64ChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CommonLONG64ChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CommonLONG64ChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_CommonLONG64ChangeNotify));
  GM_CommonfloatChangeNotify_descriptor_ = file->message_type(20);
  static const int GM_CommonfloatChangeNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CommonfloatChangeNotify, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CommonfloatChangeNotify, value_),
  };
  GM_CommonfloatChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_CommonfloatChangeNotify_descriptor_,
      GM_CommonfloatChangeNotify::default_instance_,
      GM_CommonfloatChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CommonfloatChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CommonfloatChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_CommonfloatChangeNotify));
  GM_RoleDelete_Request_descriptor_ = file->message_type(21);
  static const int GM_RoleDelete_Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleDelete_Request, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleDelete_Request, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleDelete_Request, m_info_),
  };
  GM_RoleDelete_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_RoleDelete_Request_descriptor_,
      GM_RoleDelete_Request::default_instance_,
      GM_RoleDelete_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleDelete_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleDelete_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_RoleDelete_Request));
  GM_RoleDelete_Return_descriptor_ = file->message_type(22);
  static const int GM_RoleDelete_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleDelete_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleDelete_Return, roleid_),
  };
  GM_RoleDelete_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_RoleDelete_Return_descriptor_,
      GM_RoleDelete_Return::default_instance_,
      GM_RoleDelete_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleDelete_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleDelete_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_RoleDelete_Return));
  GM_TiredValueInfo_descriptor_ = file->message_type(23);
  static const int GM_TiredValueInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TiredValueInfo, tiredvaluemax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TiredValueInfo, tiredvalue_),
  };
  GM_TiredValueInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_TiredValueInfo_descriptor_,
      GM_TiredValueInfo::default_instance_,
      GM_TiredValueInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TiredValueInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TiredValueInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_TiredValueInfo));
  GM_QueryOtherPlayer_descriptor_ = file->message_type(24);
  static const int GM_QueryOtherPlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_QueryOtherPlayer, targetid_),
  };
  GM_QueryOtherPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_QueryOtherPlayer_descriptor_,
      GM_QueryOtherPlayer::default_instance_,
      GM_QueryOtherPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_QueryOtherPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_QueryOtherPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_QueryOtherPlayer));
  GM_GangInfoResult_descriptor_ = file->message_type(25);
  static const int GM_GangInfoResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangInfoResult, gangname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangInfoResult, gangjob_),
  };
  GM_GangInfoResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangInfoResult_descriptor_,
      GM_GangInfoResult::default_instance_,
      GM_GangInfoResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangInfoResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangInfoResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangInfoResult));
  GM_Crckey_descriptor_ = file->message_type(26);
  static const int GM_Crckey_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Crckey, crckey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Crckey, messageid_),
  };
  GM_Crckey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Crckey_descriptor_,
      GM_Crckey::default_instance_,
      GM_Crckey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Crckey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Crckey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Crckey));
  GM_Recover_DeleteRole_Request_descriptor_ = file->message_type(27);
  static const int GM_Recover_DeleteRole_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recover_DeleteRole_Request, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recover_DeleteRole_Request, roleid_),
  };
  GM_Recover_DeleteRole_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Recover_DeleteRole_Request_descriptor_,
      GM_Recover_DeleteRole_Request::default_instance_,
      GM_Recover_DeleteRole_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recover_DeleteRole_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recover_DeleteRole_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Recover_DeleteRole_Request));
  GM_Recover_DeleteRole_Return_descriptor_ = file->message_type(28);
  static const int GM_Recover_DeleteRole_Return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recover_DeleteRole_Return, result_),
  };
  GM_Recover_DeleteRole_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Recover_DeleteRole_Return_descriptor_,
      GM_Recover_DeleteRole_Return::default_instance_,
      GM_Recover_DeleteRole_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recover_DeleteRole_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recover_DeleteRole_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Recover_DeleteRole_Return));
  GM_Cancel_Recover_DeleteRole_Request_descriptor_ = file->message_type(29);
  static const int GM_Cancel_Recover_DeleteRole_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Cancel_Recover_DeleteRole_Request, roleid_),
  };
  GM_Cancel_Recover_DeleteRole_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Cancel_Recover_DeleteRole_Request_descriptor_,
      GM_Cancel_Recover_DeleteRole_Request::default_instance_,
      GM_Cancel_Recover_DeleteRole_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Cancel_Recover_DeleteRole_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Cancel_Recover_DeleteRole_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Cancel_Recover_DeleteRole_Request));
  GM_Cancel_Recover_DeleteRole_Return_descriptor_ = file->message_type(30);
  static const int GM_Cancel_Recover_DeleteRole_Return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Cancel_Recover_DeleteRole_Return, result_),
  };
  GM_Cancel_Recover_DeleteRole_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Cancel_Recover_DeleteRole_Return_descriptor_,
      GM_Cancel_Recover_DeleteRole_Return::default_instance_,
      GM_Cancel_Recover_DeleteRole_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Cancel_Recover_DeleteRole_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Cancel_Recover_DeleteRole_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Cancel_Recover_DeleteRole_Return));
  GM_Recover_DeleteRole_Notify_descriptor_ = file->message_type(31);
  static const int GM_Recover_DeleteRole_Notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recover_DeleteRole_Notify, roleid_),
  };
  GM_Recover_DeleteRole_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Recover_DeleteRole_Notify_descriptor_,
      GM_Recover_DeleteRole_Notify::default_instance_,
      GM_Recover_DeleteRole_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recover_DeleteRole_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recover_DeleteRole_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Recover_DeleteRole_Notify));
  GM_Player_Recovery_descriptor_ = file->message_type(32);
  static const int GM_Player_Recovery_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Recovery, tiredremainder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Recovery, chastenremainder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Recovery, tiredrecover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Recovery, chastenrecover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Recovery, tirednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Recovery, chastennum_),
  };
  GM_Player_Recovery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Player_Recovery_descriptor_,
      GM_Player_Recovery::default_instance_,
      GM_Player_Recovery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Recovery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Recovery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Player_Recovery));
  GM_Player_changeSex_descriptor_ = file->message_type(33);
  static const int GM_Player_changeSex_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_changeSex, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_changeSex, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_changeSex, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_changeSex, errorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_changeSex, headurl_),
  };
  GM_Player_changeSex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Player_changeSex_descriptor_,
      GM_Player_changeSex::default_instance_,
      GM_Player_changeSex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_changeSex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_changeSex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Player_changeSex));
  GM_Ip_request_descriptor_ = file->message_type(34);
  static const int GM_Ip_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Ip_request, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Ip_request, roleid_),
  };
  GM_Ip_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Ip_request_descriptor_,
      GM_Ip_request::default_instance_,
      GM_Ip_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Ip_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Ip_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Ip_request));
  GM_Ip_return_descriptor_ = file->message_type(35);
  static const int GM_Ip_return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Ip_return, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Ip_return, roleid_),
  };
  GM_Ip_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Ip_return_descriptor_,
      GM_Ip_return::default_instance_,
      GM_Ip_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Ip_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Ip_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Ip_return));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_player_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMRoleListRequest_descriptor_, &GMRoleListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMRoleListEx_descriptor_, &GMRoleListEx::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMEquipInfo_descriptor_, &GMEquipInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMLogServerInfo_descriptor_, &GMLogServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMRoleCreate_descriptor_, &GMRoleCreate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMRoleCreateReturn_descriptor_, &GMRoleCreateReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMRoleLogin_descriptor_, &GMRoleLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMOffLineReconnect_descriptor_, &GMOffLineReconnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMRoleNameRequest_descriptor_, &GMRoleNameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMRoleNameReturn_descriptor_, &GMRoleNameReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_UPDATEFightVal_descriptor_, &GM_UPDATEFightVal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ProfessionChange_descriptor_, &GM_ProfessionChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ProfessionChangeReturn_descriptor_, &GM_ProfessionChangeReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_FightDataChangeItem_descriptor_, &GM_FightDataChangeItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_FightDataChangeNotifyInFB_descriptor_, &GM_FightDataChangeNotifyInFB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_FightDataChangeNotify_descriptor_, &GM_FightDataChangeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_UnlockSystem_descriptor_, &GM_UnlockSystem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_UnlockSystemList_descriptor_, &GM_UnlockSystemList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Commonint32ChangeNotify_descriptor_, &GM_Commonint32ChangeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_CommonLONG64ChangeNotify_descriptor_, &GM_CommonLONG64ChangeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_CommonfloatChangeNotify_descriptor_, &GM_CommonfloatChangeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_RoleDelete_Request_descriptor_, &GM_RoleDelete_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_RoleDelete_Return_descriptor_, &GM_RoleDelete_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_TiredValueInfo_descriptor_, &GM_TiredValueInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_QueryOtherPlayer_descriptor_, &GM_QueryOtherPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangInfoResult_descriptor_, &GM_GangInfoResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Crckey_descriptor_, &GM_Crckey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Recover_DeleteRole_Request_descriptor_, &GM_Recover_DeleteRole_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Recover_DeleteRole_Return_descriptor_, &GM_Recover_DeleteRole_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Cancel_Recover_DeleteRole_Request_descriptor_, &GM_Cancel_Recover_DeleteRole_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Cancel_Recover_DeleteRole_Return_descriptor_, &GM_Cancel_Recover_DeleteRole_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Recover_DeleteRole_Notify_descriptor_, &GM_Recover_DeleteRole_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Player_Recovery_descriptor_, &GM_Player_Recovery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Player_changeSex_descriptor_, &GM_Player_changeSex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Ip_request_descriptor_, &GM_Ip_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Ip_return_descriptor_, &GM_Ip_return::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_player_2etxt() {
  delete GMRoleListRequest::default_instance_;
  delete GMRoleListRequest_reflection_;
  delete GMRoleListEx::default_instance_;
  delete GMRoleListEx_reflection_;
  delete GMEquipInfo::default_instance_;
  delete GMEquipInfo_reflection_;
  delete GMLogServerInfo::default_instance_;
  delete GMLogServerInfo_reflection_;
  delete GMRoleCreate::default_instance_;
  delete GMRoleCreate_reflection_;
  delete GMRoleCreateReturn::default_instance_;
  delete GMRoleCreateReturn_reflection_;
  delete GMRoleLogin::default_instance_;
  delete GMRoleLogin_reflection_;
  delete GMOffLineReconnect::default_instance_;
  delete GMOffLineReconnect_reflection_;
  delete GMRoleNameRequest::default_instance_;
  delete GMRoleNameRequest_reflection_;
  delete GMRoleNameReturn::default_instance_;
  delete GMRoleNameReturn_reflection_;
  delete GM_UPDATEFightVal::default_instance_;
  delete GM_UPDATEFightVal_reflection_;
  delete GM_ProfessionChange::default_instance_;
  delete GM_ProfessionChange_reflection_;
  delete GM_ProfessionChangeReturn::default_instance_;
  delete GM_ProfessionChangeReturn_reflection_;
  delete GM_FightDataChangeItem::default_instance_;
  delete GM_FightDataChangeItem_reflection_;
  delete GM_FightDataChangeNotifyInFB::default_instance_;
  delete GM_FightDataChangeNotifyInFB_reflection_;
  delete GM_FightDataChangeNotify::default_instance_;
  delete GM_FightDataChangeNotify_reflection_;
  delete GM_UnlockSystem::default_instance_;
  delete GM_UnlockSystem_reflection_;
  delete GM_UnlockSystemList::default_instance_;
  delete GM_UnlockSystemList_reflection_;
  delete GM_Commonint32ChangeNotify::default_instance_;
  delete GM_Commonint32ChangeNotify_reflection_;
  delete GM_CommonLONG64ChangeNotify::default_instance_;
  delete GM_CommonLONG64ChangeNotify_reflection_;
  delete GM_CommonfloatChangeNotify::default_instance_;
  delete GM_CommonfloatChangeNotify_reflection_;
  delete GM_RoleDelete_Request::default_instance_;
  delete GM_RoleDelete_Request_reflection_;
  delete GM_RoleDelete_Return::default_instance_;
  delete GM_RoleDelete_Return_reflection_;
  delete GM_TiredValueInfo::default_instance_;
  delete GM_TiredValueInfo_reflection_;
  delete GM_QueryOtherPlayer::default_instance_;
  delete GM_QueryOtherPlayer_reflection_;
  delete GM_GangInfoResult::default_instance_;
  delete GM_GangInfoResult_reflection_;
  delete GM_Crckey::default_instance_;
  delete GM_Crckey_reflection_;
  delete GM_Recover_DeleteRole_Request::default_instance_;
  delete GM_Recover_DeleteRole_Request_reflection_;
  delete GM_Recover_DeleteRole_Return::default_instance_;
  delete GM_Recover_DeleteRole_Return_reflection_;
  delete GM_Cancel_Recover_DeleteRole_Request::default_instance_;
  delete GM_Cancel_Recover_DeleteRole_Request_reflection_;
  delete GM_Cancel_Recover_DeleteRole_Return::default_instance_;
  delete GM_Cancel_Recover_DeleteRole_Return_reflection_;
  delete GM_Recover_DeleteRole_Notify::default_instance_;
  delete GM_Recover_DeleteRole_Notify_reflection_;
  delete GM_Player_Recovery::default_instance_;
  delete GM_Player_Recovery_reflection_;
  delete GM_Player_changeSex::default_instance_;
  delete GM_Player_changeSex_reflection_;
  delete GM_Ip_request::default_instance_;
  delete GM_Ip_request_reflection_;
  delete GM_Ip_return::default_instance_;
  delete GM_Ip_return_reflection_;
}

void protobuf_AddDesc_player_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nplayer.txt\"8\n\021GMRoleListRequest\022\023\n\013m_a"
    "ccountID\030\001 \002(\005\022\016\n\006m_area\030\002 \002(\005\"2\n\014GMRole"
    "ListEx\022\020\n\010m_roleid\030\001 \001(\005\022\020\n\010communid\030\002 \001"
    "(\005\"G\n\013GMEquipInfo\022\016\n\006packid\030\001 \002(\005\022\014\n\004gri"
    "d\030\002 \002(\005\022\014\n\004type\030\003 \002(\005\022\014\n\004gmid\030\004 \001(\003\"\332\001\n\017"
    "GMLogServerInfo\022\022\n\nplatformid\030\001 \002(\005\022\017\n\007d"
    "itchid\030\002 \002(\t\022\017\n\007version\030\003 \002(\t\022\020\n\010serveri"
    "d\030\004 \001(\005\022\021\n\tipaddress\030\005 \001(\t\022\022\n\nmacAddress"
    "\030\006 \001(\t\022\022\n\ndeviceUUID\030\007 \001(\t\022\r\n\005token\030\010 \001("
    "\t\022\014\n\004idfa\030\t \001(\t\022\022\n\ndevicetype\030\n \001(\t\022\023\n\013n"
    "etworktype\030\013 \001(\t\"\223\001\n\014GMRoleCreate\022\023\n\013m_A"
    "ccountID\030\001 \002(\005\022 \n\006m_info\030\002 \001(\0132\020.GMLogSe"
    "rverInfo\022\022\n\nm_NickName\030\003 \001(\t\022\026\n\016m_HeadPh"
    "otoUrl\030\004 \001(\t\022\r\n\005m_sex\030\005 \001(\005\022\021\n\tm_UnionID"
    "\030\006 \001(\t\"a\n\022GMRoleCreateReturn\022\020\n\010m_Result"
    "\030\001 \002(\005\022\020\n\010m_RoleID\030\002 \002(\005\022\023\n\013m_accountid\030"
    "\003 \001(\005\022\022\n\nm_rolename\030\004 \001(\t\"i\n\013GMRoleLogin"
    "\022\023\n\013m_AccountID\030\001 \002(\005\022\020\n\010m_RoleID\030\002 \002(\005\022"
    "\021\n\tm_randstr\030\003 \002(\t\022 \n\006m_info\030\004 \001(\0132\020.GML"
    "ogServerInfo\"N\n\022GMOffLineReconnect\022\023\n\013m_"
    "AccountID\030\001 \002(\005\022\020\n\010m_RoleID\030\002 \002(\005\022\021\n\tm_r"
    "andstr\030\003 \002(\t\"-\n\021GMRoleNameRequest\022\030\n\020m_R"
    "oleProfession\030\001 \002(\005\">\n\020GMRoleNameReturn\022"
    "\014\n\004Name\030\001 \002(\t\022\016\n\006result\030\002 \001(\005\022\014\n\004type\030\003 "
    "\001(\005\"%\n\021GM_UPDATEFightVal\022\020\n\010fightval\030\001 \002"
    "(\005\"+\n\023GM_ProfessionChange\022\024\n\014professionI"
    "D\030\001 \002(\005\"+\n\031GM_ProfessionChangeReturn\022\016\n\006"
    "result\030\001 \002(\005\"\?\n\026GM_FightDataChangeItem\022\020"
    "\n\010property\030\001 \002(\005\022\023\n\013changevalue\030\002 \002(\005\"n\n"
    "\034GM_FightDataChangeNotifyInFB\022\016\n\006roleID\030"
    "\002 \002(\r\022\020\n\010roleType\030\003 \002(\r\022,\n\013changeitems\030\001"
    " \003(\0132\027.GM_FightDataChangeItem\"H\n\030GM_Figh"
    "tDataChangeNotify\022,\n\013changeitems\030\001 \003(\0132\027"
    ".GM_FightDataChangeItem\":\n\017GM_UnlockSyst"
    "em\022\016\n\006enumID\030\001 \002(\005\022\027\n\017isSpecialEffect\030\002 "
    "\002(\005\"4\n\023GM_UnlockSystemList\022\r\n\005count\030\002 \002("
    "\005\022\016\n\006enumID\030\001 \003(\005\"=\n\032GM_Commonint32Chang"
    "eNotify\022\020\n\010property\030\001 \002(\005\022\r\n\005value\030\002 \002(\005"
    "\">\n\033GM_CommonLONG64ChangeNotify\022\020\n\010prope"
    "rty\030\001 \002(\005\022\r\n\005value\030\002 \002(\003\"=\n\032GM_Commonflo"
    "atChangeNotify\022\020\n\010property\030\001 \002(\005\022\r\n\005valu"
    "e\030\002 \002(\002\"\\\n\025GM_RoleDelete_Request\022\021\n\tacco"
    "untid\030\001 \002(\005\022\016\n\006roleID\030\002 \002(\005\022 \n\006m_info\030\003 "
    "\001(\0132\020.GMLogServerInfo\"6\n\024GM_RoleDelete_R"
    "eturn\022\016\n\006result\030\001 \002(\005\022\016\n\006roleid\030\002 \001(\005\">\n"
    "\021GM_TiredValueInfo\022\025\n\rtiredvaluemax\030\001 \002("
    "\005\022\022\n\ntiredvalue\030\002 \002(\005\"\'\n\023GM_QueryOtherPl"
    "ayer\022\020\n\010targetid\030\001 \002(\005\"6\n\021GM_GangInfoRes"
    "ult\022\020\n\010gangname\030\001 \002(\t\022\017\n\007gangjob\030\002 \002(\005\"."
    "\n\tGM_Crckey\022\016\n\006crcKey\030\001 \002(\r\022\021\n\tmessageid"
    "\030\002 \003(\005\"B\n\035GM_Recover_DeleteRole_Request\022"
    "\021\n\taccountid\030\001 \002(\005\022\016\n\006roleid\030\002 \002(\005\".\n\034GM"
    "_Recover_DeleteRole_Return\022\016\n\006result\030\001 \002"
    "(\005\"6\n$GM_Cancel_Recover_DeleteRole_Reque"
    "st\022\016\n\006roleid\030\001 \002(\005\"5\n#GM_Cancel_Recover_"
    "DeleteRole_Return\022\016\n\006result\030\001 \002(\005\".\n\034GM_"
    "Recover_DeleteRole_Notify\022\016\n\006roleid\030\001 \002("
    "\005\"\232\001\n\022GM_Player_Recovery\022\026\n\016tiredremaind"
    "er\030\001 \002(\005\022\030\n\020chastenremainder\030\002 \001(\005\022\024\n\014ti"
    "redRecover\030\003 \001(\005\022\026\n\016chastenRecover\030\004 \001(\005"
    "\022\020\n\010tirednum\030\005 \001(\005\022\022\n\nchastennum\030\006 \001(\005\"a"
    "\n\023GM_Player_changeSex\022\013\n\003sex\030\001 \002(\005\022\014\n\004he"
    "ad\030\002 \001(\005\022\r\n\005frame\030\003 \001(\005\022\017\n\007errorid\030\004 \001(\005"
    "\022\017\n\007headurl\030\005 \001(\t\"1\n\rGM_Ip_request\022\020\n\010se"
    "rverid\030\001 \002(\005\022\016\n\006roleid\030\002 \001(\005\"*\n\014GM_Ip_re"
    "turn\022\n\n\002ip\030\001 \002(\t\022\016\n\006roleid\030\002 \001(\005", 2632);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "player.txt", &protobuf_RegisterTypes);
  GMRoleListRequest::default_instance_ = new GMRoleListRequest();
  GMRoleListEx::default_instance_ = new GMRoleListEx();
  GMEquipInfo::default_instance_ = new GMEquipInfo();
  GMLogServerInfo::default_instance_ = new GMLogServerInfo();
  GMRoleCreate::default_instance_ = new GMRoleCreate();
  GMRoleCreateReturn::default_instance_ = new GMRoleCreateReturn();
  GMRoleLogin::default_instance_ = new GMRoleLogin();
  GMOffLineReconnect::default_instance_ = new GMOffLineReconnect();
  GMRoleNameRequest::default_instance_ = new GMRoleNameRequest();
  GMRoleNameReturn::default_instance_ = new GMRoleNameReturn();
  GM_UPDATEFightVal::default_instance_ = new GM_UPDATEFightVal();
  GM_ProfessionChange::default_instance_ = new GM_ProfessionChange();
  GM_ProfessionChangeReturn::default_instance_ = new GM_ProfessionChangeReturn();
  GM_FightDataChangeItem::default_instance_ = new GM_FightDataChangeItem();
  GM_FightDataChangeNotifyInFB::default_instance_ = new GM_FightDataChangeNotifyInFB();
  GM_FightDataChangeNotify::default_instance_ = new GM_FightDataChangeNotify();
  GM_UnlockSystem::default_instance_ = new GM_UnlockSystem();
  GM_UnlockSystemList::default_instance_ = new GM_UnlockSystemList();
  GM_Commonint32ChangeNotify::default_instance_ = new GM_Commonint32ChangeNotify();
  GM_CommonLONG64ChangeNotify::default_instance_ = new GM_CommonLONG64ChangeNotify();
  GM_CommonfloatChangeNotify::default_instance_ = new GM_CommonfloatChangeNotify();
  GM_RoleDelete_Request::default_instance_ = new GM_RoleDelete_Request();
  GM_RoleDelete_Return::default_instance_ = new GM_RoleDelete_Return();
  GM_TiredValueInfo::default_instance_ = new GM_TiredValueInfo();
  GM_QueryOtherPlayer::default_instance_ = new GM_QueryOtherPlayer();
  GM_GangInfoResult::default_instance_ = new GM_GangInfoResult();
  GM_Crckey::default_instance_ = new GM_Crckey();
  GM_Recover_DeleteRole_Request::default_instance_ = new GM_Recover_DeleteRole_Request();
  GM_Recover_DeleteRole_Return::default_instance_ = new GM_Recover_DeleteRole_Return();
  GM_Cancel_Recover_DeleteRole_Request::default_instance_ = new GM_Cancel_Recover_DeleteRole_Request();
  GM_Cancel_Recover_DeleteRole_Return::default_instance_ = new GM_Cancel_Recover_DeleteRole_Return();
  GM_Recover_DeleteRole_Notify::default_instance_ = new GM_Recover_DeleteRole_Notify();
  GM_Player_Recovery::default_instance_ = new GM_Player_Recovery();
  GM_Player_changeSex::default_instance_ = new GM_Player_changeSex();
  GM_Ip_request::default_instance_ = new GM_Ip_request();
  GM_Ip_return::default_instance_ = new GM_Ip_return();
  GMRoleListRequest::default_instance_->InitAsDefaultInstance();
  GMRoleListEx::default_instance_->InitAsDefaultInstance();
  GMEquipInfo::default_instance_->InitAsDefaultInstance();
  GMLogServerInfo::default_instance_->InitAsDefaultInstance();
  GMRoleCreate::default_instance_->InitAsDefaultInstance();
  GMRoleCreateReturn::default_instance_->InitAsDefaultInstance();
  GMRoleLogin::default_instance_->InitAsDefaultInstance();
  GMOffLineReconnect::default_instance_->InitAsDefaultInstance();
  GMRoleNameRequest::default_instance_->InitAsDefaultInstance();
  GMRoleNameReturn::default_instance_->InitAsDefaultInstance();
  GM_UPDATEFightVal::default_instance_->InitAsDefaultInstance();
  GM_ProfessionChange::default_instance_->InitAsDefaultInstance();
  GM_ProfessionChangeReturn::default_instance_->InitAsDefaultInstance();
  GM_FightDataChangeItem::default_instance_->InitAsDefaultInstance();
  GM_FightDataChangeNotifyInFB::default_instance_->InitAsDefaultInstance();
  GM_FightDataChangeNotify::default_instance_->InitAsDefaultInstance();
  GM_UnlockSystem::default_instance_->InitAsDefaultInstance();
  GM_UnlockSystemList::default_instance_->InitAsDefaultInstance();
  GM_Commonint32ChangeNotify::default_instance_->InitAsDefaultInstance();
  GM_CommonLONG64ChangeNotify::default_instance_->InitAsDefaultInstance();
  GM_CommonfloatChangeNotify::default_instance_->InitAsDefaultInstance();
  GM_RoleDelete_Request::default_instance_->InitAsDefaultInstance();
  GM_RoleDelete_Return::default_instance_->InitAsDefaultInstance();
  GM_TiredValueInfo::default_instance_->InitAsDefaultInstance();
  GM_QueryOtherPlayer::default_instance_->InitAsDefaultInstance();
  GM_GangInfoResult::default_instance_->InitAsDefaultInstance();
  GM_Crckey::default_instance_->InitAsDefaultInstance();
  GM_Recover_DeleteRole_Request::default_instance_->InitAsDefaultInstance();
  GM_Recover_DeleteRole_Return::default_instance_->InitAsDefaultInstance();
  GM_Cancel_Recover_DeleteRole_Request::default_instance_->InitAsDefaultInstance();
  GM_Cancel_Recover_DeleteRole_Return::default_instance_->InitAsDefaultInstance();
  GM_Recover_DeleteRole_Notify::default_instance_->InitAsDefaultInstance();
  GM_Player_Recovery::default_instance_->InitAsDefaultInstance();
  GM_Player_changeSex::default_instance_->InitAsDefaultInstance();
  GM_Ip_request::default_instance_->InitAsDefaultInstance();
  GM_Ip_return::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_player_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_player_2etxt {
  StaticDescriptorInitializer_player_2etxt() {
    protobuf_AddDesc_player_2etxt();
  }
} static_descriptor_initializer_player_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GMRoleListRequest::kMAccountIDFieldNumber;
const int GMRoleListRequest::kMAreaFieldNumber;
#endif  // !_MSC_VER

GMRoleListRequest::GMRoleListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMRoleListRequest::InitAsDefaultInstance() {
}

GMRoleListRequest::GMRoleListRequest(const GMRoleListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMRoleListRequest::SharedCtor() {
  _cached_size_ = 0;
  m_accountid_ = 0;
  m_area_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMRoleListRequest::~GMRoleListRequest() {
  SharedDtor();
}

void GMRoleListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMRoleListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMRoleListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMRoleListRequest_descriptor_;
}

const GMRoleListRequest& GMRoleListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GMRoleListRequest* GMRoleListRequest::default_instance_ = NULL;

GMRoleListRequest* GMRoleListRequest::New() const {
  return new GMRoleListRequest;
}

void GMRoleListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_accountid_ = 0;
    m_area_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMRoleListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_accountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_accountid_)));
          set_has_m_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_area;
        break;
      }

      // required int32 m_area = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_area_)));
          set_has_m_area();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMRoleListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_accountID = 1;
  if (has_m_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_accountid(), output);
  }

  // required int32 m_area = 2;
  if (has_m_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_area(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMRoleListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_accountID = 1;
  if (has_m_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_accountid(), target);
  }

  // required int32 m_area = 2;
  if (has_m_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_area(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMRoleListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_accountID = 1;
    if (has_m_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_accountid());
    }

    // required int32 m_area = 2;
    if (has_m_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_area());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMRoleListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMRoleListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMRoleListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMRoleListRequest::MergeFrom(const GMRoleListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_accountid()) {
      set_m_accountid(from.m_accountid());
    }
    if (from.has_m_area()) {
      set_m_area(from.m_area());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMRoleListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMRoleListRequest::CopyFrom(const GMRoleListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMRoleListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GMRoleListRequest::Swap(GMRoleListRequest* other) {
  if (other != this) {
    std::swap(m_accountid_, other->m_accountid_);
    std::swap(m_area_, other->m_area_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMRoleListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMRoleListRequest_descriptor_;
  metadata.reflection = GMRoleListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMRoleListEx::kMRoleidFieldNumber;
const int GMRoleListEx::kCommunidFieldNumber;
#endif  // !_MSC_VER

GMRoleListEx::GMRoleListEx()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMRoleListEx::InitAsDefaultInstance() {
}

GMRoleListEx::GMRoleListEx(const GMRoleListEx& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMRoleListEx::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  communid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMRoleListEx::~GMRoleListEx() {
  SharedDtor();
}

void GMRoleListEx::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMRoleListEx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMRoleListEx::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMRoleListEx_descriptor_;
}

const GMRoleListEx& GMRoleListEx::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GMRoleListEx* GMRoleListEx::default_instance_ = NULL;

GMRoleListEx* GMRoleListEx::New() const {
  return new GMRoleListEx;
}

void GMRoleListEx::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    communid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMRoleListEx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_communid;
        break;
      }

      // optional int32 communid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_communid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &communid_)));
          set_has_communid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMRoleListEx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int32 communid = 2;
  if (has_communid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->communid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMRoleListEx::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int32 communid = 2;
  if (has_communid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->communid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMRoleListEx::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 communid = 2;
    if (has_communid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->communid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMRoleListEx::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMRoleListEx* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMRoleListEx*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMRoleListEx::MergeFrom(const GMRoleListEx& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_communid()) {
      set_communid(from.communid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMRoleListEx::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMRoleListEx::CopyFrom(const GMRoleListEx& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMRoleListEx::IsInitialized() const {

  return true;
}

void GMRoleListEx::Swap(GMRoleListEx* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(communid_, other->communid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMRoleListEx::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMRoleListEx_descriptor_;
  metadata.reflection = GMRoleListEx_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMEquipInfo::kPackidFieldNumber;
const int GMEquipInfo::kGridFieldNumber;
const int GMEquipInfo::kTypeFieldNumber;
const int GMEquipInfo::kGmidFieldNumber;
#endif  // !_MSC_VER

GMEquipInfo::GMEquipInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMEquipInfo::InitAsDefaultInstance() {
}

GMEquipInfo::GMEquipInfo(const GMEquipInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMEquipInfo::SharedCtor() {
  _cached_size_ = 0;
  packid_ = 0;
  grid_ = 0;
  type_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMEquipInfo::~GMEquipInfo() {
  SharedDtor();
}

void GMEquipInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMEquipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMEquipInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMEquipInfo_descriptor_;
}

const GMEquipInfo& GMEquipInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GMEquipInfo* GMEquipInfo::default_instance_ = NULL;

GMEquipInfo* GMEquipInfo::New() const {
  return new GMEquipInfo;
}

void GMEquipInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packid_ = 0;
    grid_ = 0;
    type_ = 0;
    gmid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMEquipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 packid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packid_)));
          set_has_packid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grid;
        break;
      }

      // required int32 grid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid_)));
          set_has_grid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gmid;
        break;
      }

      // optional int64 gmid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMEquipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 packid = 1;
  if (has_packid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packid(), output);
  }

  // required int32 grid = 2;
  if (has_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grid(), output);
  }

  // required int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int64 gmid = 4;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMEquipInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 packid = 1;
  if (has_packid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packid(), target);
  }

  // required int32 grid = 2;
  if (has_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grid(), target);
  }

  // required int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int64 gmid = 4;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMEquipInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 packid = 1;
    if (has_packid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packid());
    }

    // required int32 grid = 2;
    if (has_grid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grid());
    }

    // required int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 gmid = 4;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMEquipInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMEquipInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMEquipInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMEquipInfo::MergeFrom(const GMEquipInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packid()) {
      set_packid(from.packid());
    }
    if (from.has_grid()) {
      set_grid(from.grid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMEquipInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMEquipInfo::CopyFrom(const GMEquipInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMEquipInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GMEquipInfo::Swap(GMEquipInfo* other) {
  if (other != this) {
    std::swap(packid_, other->packid_);
    std::swap(grid_, other->grid_);
    std::swap(type_, other->type_);
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMEquipInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMEquipInfo_descriptor_;
  metadata.reflection = GMEquipInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMLogServerInfo::kPlatformidFieldNumber;
const int GMLogServerInfo::kDitchidFieldNumber;
const int GMLogServerInfo::kVersionFieldNumber;
const int GMLogServerInfo::kServeridFieldNumber;
const int GMLogServerInfo::kIpaddressFieldNumber;
const int GMLogServerInfo::kMacAddressFieldNumber;
const int GMLogServerInfo::kDeviceUUIDFieldNumber;
const int GMLogServerInfo::kTokenFieldNumber;
const int GMLogServerInfo::kIdfaFieldNumber;
const int GMLogServerInfo::kDevicetypeFieldNumber;
const int GMLogServerInfo::kNetworktypeFieldNumber;
#endif  // !_MSC_VER

GMLogServerInfo::GMLogServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMLogServerInfo::InitAsDefaultInstance() {
}

GMLogServerInfo::GMLogServerInfo(const GMLogServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMLogServerInfo::SharedCtor() {
  _cached_size_ = 0;
  platformid_ = 0;
  ditchid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = 0;
  ipaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  macaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceuuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  networktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMLogServerInfo::~GMLogServerInfo() {
  SharedDtor();
}

void GMLogServerInfo::SharedDtor() {
  if (ditchid_ != &::google::protobuf::internal::kEmptyString) {
    delete ditchid_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (ipaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete ipaddress_;
  }
  if (macaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete macaddress_;
  }
  if (deviceuuid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceuuid_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (idfa_ != &::google::protobuf::internal::kEmptyString) {
    delete idfa_;
  }
  if (devicetype_ != &::google::protobuf::internal::kEmptyString) {
    delete devicetype_;
  }
  if (networktype_ != &::google::protobuf::internal::kEmptyString) {
    delete networktype_;
  }
  if (this != default_instance_) {
  }
}

void GMLogServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMLogServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMLogServerInfo_descriptor_;
}

const GMLogServerInfo& GMLogServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GMLogServerInfo* GMLogServerInfo::default_instance_ = NULL;

GMLogServerInfo* GMLogServerInfo::New() const {
  return new GMLogServerInfo;
}

void GMLogServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    platformid_ = 0;
    if (has_ditchid()) {
      if (ditchid_ != &::google::protobuf::internal::kEmptyString) {
        ditchid_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    serverid_ = 0;
    if (has_ipaddress()) {
      if (ipaddress_ != &::google::protobuf::internal::kEmptyString) {
        ipaddress_->clear();
      }
    }
    if (has_macaddress()) {
      if (macaddress_ != &::google::protobuf::internal::kEmptyString) {
        macaddress_->clear();
      }
    }
    if (has_deviceuuid()) {
      if (deviceuuid_ != &::google::protobuf::internal::kEmptyString) {
        deviceuuid_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_idfa()) {
      if (idfa_ != &::google::protobuf::internal::kEmptyString) {
        idfa_->clear();
      }
    }
    if (has_devicetype()) {
      if (devicetype_ != &::google::protobuf::internal::kEmptyString) {
        devicetype_->clear();
      }
    }
    if (has_networktype()) {
      if (networktype_ != &::google::protobuf::internal::kEmptyString) {
        networktype_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMLogServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 platformid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platformid_)));
          set_has_platformid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ditchid;
        break;
      }

      // required string ditchid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ditchid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ditchid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ditchid().data(), this->ditchid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }

      // required string version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_serverid;
        break;
      }

      // optional int32 serverid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ipaddress;
        break;
      }

      // optional string ipaddress = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipaddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ipaddress().data(), this->ipaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_macAddress;
        break;
      }

      // optional string macAddress = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_macAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->macaddress().data(), this->macaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_deviceUUID;
        break;
      }

      // optional string deviceUUID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceUUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceuuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceuuid().data(), this->deviceuuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_token;
        break;
      }

      // optional string token = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_idfa;
        break;
      }

      // optional string idfa = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_idfa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idfa()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idfa().data(), this->idfa().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_devicetype;
        break;
      }

      // optional string devicetype = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_devicetype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devicetype().data(), this->devicetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_networktype;
        break;
      }

      // optional string networktype = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_networktype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_networktype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->networktype().data(), this->networktype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMLogServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 platformid = 1;
  if (has_platformid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->platformid(), output);
  }

  // required string ditchid = 2;
  if (has_ditchid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ditchid().data(), this->ditchid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ditchid(), output);
  }

  // required string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->version(), output);
  }

  // optional int32 serverid = 4;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->serverid(), output);
  }

  // optional string ipaddress = 5;
  if (has_ipaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ipaddress(), output);
  }

  // optional string macAddress = 6;
  if (has_macaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->macaddress().data(), this->macaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->macaddress(), output);
  }

  // optional string deviceUUID = 7;
  if (has_deviceuuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceuuid().data(), this->deviceuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->deviceuuid(), output);
  }

  // optional string token = 8;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->token(), output);
  }

  // optional string idfa = 9;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->idfa(), output);
  }

  // optional string devicetype = 10;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicetype().data(), this->devicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->devicetype(), output);
  }

  // optional string networktype = 11;
  if (has_networktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->networktype().data(), this->networktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->networktype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMLogServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 platformid = 1;
  if (has_platformid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->platformid(), target);
  }

  // required string ditchid = 2;
  if (has_ditchid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ditchid().data(), this->ditchid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ditchid(), target);
  }

  // required string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  // optional int32 serverid = 4;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->serverid(), target);
  }

  // optional string ipaddress = 5;
  if (has_ipaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ipaddress(), target);
  }

  // optional string macAddress = 6;
  if (has_macaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->macaddress().data(), this->macaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->macaddress(), target);
  }

  // optional string deviceUUID = 7;
  if (has_deviceuuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceuuid().data(), this->deviceuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->deviceuuid(), target);
  }

  // optional string token = 8;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->token(), target);
  }

  // optional string idfa = 9;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->idfa(), target);
  }

  // optional string devicetype = 10;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicetype().data(), this->devicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->devicetype(), target);
  }

  // optional string networktype = 11;
  if (has_networktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->networktype().data(), this->networktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->networktype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMLogServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 platformid = 1;
    if (has_platformid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platformid());
    }

    // required string ditchid = 2;
    if (has_ditchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ditchid());
    }

    // required string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional int32 serverid = 4;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // optional string ipaddress = 5;
    if (has_ipaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipaddress());
    }

    // optional string macAddress = 6;
    if (has_macaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->macaddress());
    }

    // optional string deviceUUID = 7;
    if (has_deviceuuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceuuid());
    }

    // optional string token = 8;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string idfa = 9;
    if (has_idfa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idfa());
    }

    // optional string devicetype = 10;
    if (has_devicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicetype());
    }

    // optional string networktype = 11;
    if (has_networktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->networktype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMLogServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMLogServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMLogServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMLogServerInfo::MergeFrom(const GMLogServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platformid()) {
      set_platformid(from.platformid());
    }
    if (from.has_ditchid()) {
      set_ditchid(from.ditchid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_ipaddress()) {
      set_ipaddress(from.ipaddress());
    }
    if (from.has_macaddress()) {
      set_macaddress(from.macaddress());
    }
    if (from.has_deviceuuid()) {
      set_deviceuuid(from.deviceuuid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_idfa()) {
      set_idfa(from.idfa());
    }
    if (from.has_devicetype()) {
      set_devicetype(from.devicetype());
    }
    if (from.has_networktype()) {
      set_networktype(from.networktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMLogServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMLogServerInfo::CopyFrom(const GMLogServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMLogServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GMLogServerInfo::Swap(GMLogServerInfo* other) {
  if (other != this) {
    std::swap(platformid_, other->platformid_);
    std::swap(ditchid_, other->ditchid_);
    std::swap(version_, other->version_);
    std::swap(serverid_, other->serverid_);
    std::swap(ipaddress_, other->ipaddress_);
    std::swap(macaddress_, other->macaddress_);
    std::swap(deviceuuid_, other->deviceuuid_);
    std::swap(token_, other->token_);
    std::swap(idfa_, other->idfa_);
    std::swap(devicetype_, other->devicetype_);
    std::swap(networktype_, other->networktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMLogServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMLogServerInfo_descriptor_;
  metadata.reflection = GMLogServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMRoleCreate::kMAccountIDFieldNumber;
const int GMRoleCreate::kMInfoFieldNumber;
const int GMRoleCreate::kMNickNameFieldNumber;
const int GMRoleCreate::kMHeadPhotoUrlFieldNumber;
const int GMRoleCreate::kMSexFieldNumber;
const int GMRoleCreate::kMUnionIDFieldNumber;
#endif  // !_MSC_VER

GMRoleCreate::GMRoleCreate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMRoleCreate::InitAsDefaultInstance() {
  m_info_ = const_cast< ::GMLogServerInfo*>(&::GMLogServerInfo::default_instance());
}

GMRoleCreate::GMRoleCreate(const GMRoleCreate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMRoleCreate::SharedCtor() {
  _cached_size_ = 0;
  m_accountid_ = 0;
  m_info_ = NULL;
  m_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_headphotourl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_sex_ = 0;
  m_unionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMRoleCreate::~GMRoleCreate() {
  SharedDtor();
}

void GMRoleCreate::SharedDtor() {
  if (m_nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_nickname_;
  }
  if (m_headphotourl_ != &::google::protobuf::internal::kEmptyString) {
    delete m_headphotourl_;
  }
  if (m_unionid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_unionid_;
  }
  if (this != default_instance_) {
    delete m_info_;
  }
}

void GMRoleCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMRoleCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMRoleCreate_descriptor_;
}

const GMRoleCreate& GMRoleCreate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GMRoleCreate* GMRoleCreate::default_instance_ = NULL;

GMRoleCreate* GMRoleCreate::New() const {
  return new GMRoleCreate;
}

void GMRoleCreate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_accountid_ = 0;
    if (has_m_info()) {
      if (m_info_ != NULL) m_info_->::GMLogServerInfo::Clear();
    }
    if (has_m_nickname()) {
      if (m_nickname_ != &::google::protobuf::internal::kEmptyString) {
        m_nickname_->clear();
      }
    }
    if (has_m_headphotourl()) {
      if (m_headphotourl_ != &::google::protobuf::internal::kEmptyString) {
        m_headphotourl_->clear();
      }
    }
    m_sex_ = 0;
    if (has_m_unionid()) {
      if (m_unionid_ != &::google::protobuf::internal::kEmptyString) {
        m_unionid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMRoleCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_AccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_accountid_)));
          set_has_m_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_info;
        break;
      }

      // optional .GMLogServerInfo m_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_NickName;
        break;
      }

      // optional string m_NickName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_NickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_nickname().data(), this->m_nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_HeadPhotoUrl;
        break;
      }

      // optional string m_HeadPhotoUrl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_HeadPhotoUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_headphotourl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_headphotourl().data(), this->m_headphotourl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_sex;
        break;
      }

      // optional int32 m_sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sex_)));
          set_has_m_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_UnionID;
        break;
      }

      // optional string m_UnionID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_UnionID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_unionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_unionid().data(), this->m_unionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMRoleCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_AccountID = 1;
  if (has_m_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_accountid(), output);
  }

  // optional .GMLogServerInfo m_info = 2;
  if (has_m_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_info(), output);
  }

  // optional string m_NickName = 3;
  if (has_m_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_nickname().data(), this->m_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_nickname(), output);
  }

  // optional string m_HeadPhotoUrl = 4;
  if (has_m_headphotourl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_headphotourl().data(), this->m_headphotourl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_headphotourl(), output);
  }

  // optional int32 m_sex = 5;
  if (has_m_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_sex(), output);
  }

  // optional string m_UnionID = 6;
  if (has_m_unionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_unionid().data(), this->m_unionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->m_unionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMRoleCreate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_AccountID = 1;
  if (has_m_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_accountid(), target);
  }

  // optional .GMLogServerInfo m_info = 2;
  if (has_m_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_info(), target);
  }

  // optional string m_NickName = 3;
  if (has_m_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_nickname().data(), this->m_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_nickname(), target);
  }

  // optional string m_HeadPhotoUrl = 4;
  if (has_m_headphotourl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_headphotourl().data(), this->m_headphotourl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_headphotourl(), target);
  }

  // optional int32 m_sex = 5;
  if (has_m_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_sex(), target);
  }

  // optional string m_UnionID = 6;
  if (has_m_unionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_unionid().data(), this->m_unionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->m_unionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMRoleCreate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_AccountID = 1;
    if (has_m_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_accountid());
    }

    // optional .GMLogServerInfo m_info = 2;
    if (has_m_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_info());
    }

    // optional string m_NickName = 3;
    if (has_m_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_nickname());
    }

    // optional string m_HeadPhotoUrl = 4;
    if (has_m_headphotourl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_headphotourl());
    }

    // optional int32 m_sex = 5;
    if (has_m_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sex());
    }

    // optional string m_UnionID = 6;
    if (has_m_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_unionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMRoleCreate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMRoleCreate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMRoleCreate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMRoleCreate::MergeFrom(const GMRoleCreate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_accountid()) {
      set_m_accountid(from.m_accountid());
    }
    if (from.has_m_info()) {
      mutable_m_info()->::GMLogServerInfo::MergeFrom(from.m_info());
    }
    if (from.has_m_nickname()) {
      set_m_nickname(from.m_nickname());
    }
    if (from.has_m_headphotourl()) {
      set_m_headphotourl(from.m_headphotourl());
    }
    if (from.has_m_sex()) {
      set_m_sex(from.m_sex());
    }
    if (from.has_m_unionid()) {
      set_m_unionid(from.m_unionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMRoleCreate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMRoleCreate::CopyFrom(const GMRoleCreate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMRoleCreate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_m_info()) {
    if (!this->m_info().IsInitialized()) return false;
  }
  return true;
}

void GMRoleCreate::Swap(GMRoleCreate* other) {
  if (other != this) {
    std::swap(m_accountid_, other->m_accountid_);
    std::swap(m_info_, other->m_info_);
    std::swap(m_nickname_, other->m_nickname_);
    std::swap(m_headphotourl_, other->m_headphotourl_);
    std::swap(m_sex_, other->m_sex_);
    std::swap(m_unionid_, other->m_unionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMRoleCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMRoleCreate_descriptor_;
  metadata.reflection = GMRoleCreate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMRoleCreateReturn::kMResultFieldNumber;
const int GMRoleCreateReturn::kMRoleIDFieldNumber;
const int GMRoleCreateReturn::kMAccountidFieldNumber;
const int GMRoleCreateReturn::kMRolenameFieldNumber;
#endif  // !_MSC_VER

GMRoleCreateReturn::GMRoleCreateReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMRoleCreateReturn::InitAsDefaultInstance() {
}

GMRoleCreateReturn::GMRoleCreateReturn(const GMRoleCreateReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMRoleCreateReturn::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  m_roleid_ = 0;
  m_accountid_ = 0;
  m_rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMRoleCreateReturn::~GMRoleCreateReturn() {
  SharedDtor();
}

void GMRoleCreateReturn::SharedDtor() {
  if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_rolename_;
  }
  if (this != default_instance_) {
  }
}

void GMRoleCreateReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMRoleCreateReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMRoleCreateReturn_descriptor_;
}

const GMRoleCreateReturn& GMRoleCreateReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GMRoleCreateReturn* GMRoleCreateReturn::default_instance_ = NULL;

GMRoleCreateReturn* GMRoleCreateReturn::New() const {
  return new GMRoleCreateReturn;
}

void GMRoleCreateReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    m_roleid_ = 0;
    m_accountid_ = 0;
    if (has_m_rolename()) {
      if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
        m_rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMRoleCreateReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_RoleID;
        break;
      }

      // required int32 m_RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_RoleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_accountid;
        break;
      }

      // optional int32 m_accountid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_accountid_)));
          set_has_m_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_rolename;
        break;
      }

      // optional string m_rolename = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_rolename().data(), this->m_rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMRoleCreateReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // required int32 m_RoleID = 2;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_roleid(), output);
  }

  // optional int32 m_accountid = 3;
  if (has_m_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_accountid(), output);
  }

  // optional string m_rolename = 4;
  if (has_m_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rolename().data(), this->m_rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_rolename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMRoleCreateReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // required int32 m_RoleID = 2;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_roleid(), target);
  }

  // optional int32 m_accountid = 3;
  if (has_m_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_accountid(), target);
  }

  // optional string m_rolename = 4;
  if (has_m_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rolename().data(), this->m_rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_rolename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMRoleCreateReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // required int32 m_RoleID = 2;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_accountid = 3;
    if (has_m_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_accountid());
    }

    // optional string m_rolename = 4;
    if (has_m_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_rolename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMRoleCreateReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMRoleCreateReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMRoleCreateReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMRoleCreateReturn::MergeFrom(const GMRoleCreateReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_accountid()) {
      set_m_accountid(from.m_accountid());
    }
    if (from.has_m_rolename()) {
      set_m_rolename(from.m_rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMRoleCreateReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMRoleCreateReturn::CopyFrom(const GMRoleCreateReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMRoleCreateReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GMRoleCreateReturn::Swap(GMRoleCreateReturn* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_accountid_, other->m_accountid_);
    std::swap(m_rolename_, other->m_rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMRoleCreateReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMRoleCreateReturn_descriptor_;
  metadata.reflection = GMRoleCreateReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMRoleLogin::kMAccountIDFieldNumber;
const int GMRoleLogin::kMRoleIDFieldNumber;
const int GMRoleLogin::kMRandstrFieldNumber;
const int GMRoleLogin::kMInfoFieldNumber;
#endif  // !_MSC_VER

GMRoleLogin::GMRoleLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMRoleLogin::InitAsDefaultInstance() {
  m_info_ = const_cast< ::GMLogServerInfo*>(&::GMLogServerInfo::default_instance());
}

GMRoleLogin::GMRoleLogin(const GMRoleLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMRoleLogin::SharedCtor() {
  _cached_size_ = 0;
  m_accountid_ = 0;
  m_roleid_ = 0;
  m_randstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMRoleLogin::~GMRoleLogin() {
  SharedDtor();
}

void GMRoleLogin::SharedDtor() {
  if (m_randstr_ != &::google::protobuf::internal::kEmptyString) {
    delete m_randstr_;
  }
  if (this != default_instance_) {
    delete m_info_;
  }
}

void GMRoleLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMRoleLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMRoleLogin_descriptor_;
}

const GMRoleLogin& GMRoleLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GMRoleLogin* GMRoleLogin::default_instance_ = NULL;

GMRoleLogin* GMRoleLogin::New() const {
  return new GMRoleLogin;
}

void GMRoleLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_accountid_ = 0;
    m_roleid_ = 0;
    if (has_m_randstr()) {
      if (m_randstr_ != &::google::protobuf::internal::kEmptyString) {
        m_randstr_->clear();
      }
    }
    if (has_m_info()) {
      if (m_info_ != NULL) m_info_->::GMLogServerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMRoleLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_AccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_accountid_)));
          set_has_m_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_RoleID;
        break;
      }

      // required int32 m_RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_RoleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_randstr;
        break;
      }

      // required string m_randstr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_randstr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_randstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_randstr().data(), this->m_randstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_info;
        break;
      }

      // optional .GMLogServerInfo m_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMRoleLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_AccountID = 1;
  if (has_m_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_accountid(), output);
  }

  // required int32 m_RoleID = 2;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_roleid(), output);
  }

  // required string m_randstr = 3;
  if (has_m_randstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_randstr().data(), this->m_randstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_randstr(), output);
  }

  // optional .GMLogServerInfo m_info = 4;
  if (has_m_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMRoleLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_AccountID = 1;
  if (has_m_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_accountid(), target);
  }

  // required int32 m_RoleID = 2;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_roleid(), target);
  }

  // required string m_randstr = 3;
  if (has_m_randstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_randstr().data(), this->m_randstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_randstr(), target);
  }

  // optional .GMLogServerInfo m_info = 4;
  if (has_m_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMRoleLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_AccountID = 1;
    if (has_m_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_accountid());
    }

    // required int32 m_RoleID = 2;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // required string m_randstr = 3;
    if (has_m_randstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_randstr());
    }

    // optional .GMLogServerInfo m_info = 4;
    if (has_m_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMRoleLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMRoleLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMRoleLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMRoleLogin::MergeFrom(const GMRoleLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_accountid()) {
      set_m_accountid(from.m_accountid());
    }
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_randstr()) {
      set_m_randstr(from.m_randstr());
    }
    if (from.has_m_info()) {
      mutable_m_info()->::GMLogServerInfo::MergeFrom(from.m_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMRoleLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMRoleLogin::CopyFrom(const GMRoleLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMRoleLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_m_info()) {
    if (!this->m_info().IsInitialized()) return false;
  }
  return true;
}

void GMRoleLogin::Swap(GMRoleLogin* other) {
  if (other != this) {
    std::swap(m_accountid_, other->m_accountid_);
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_randstr_, other->m_randstr_);
    std::swap(m_info_, other->m_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMRoleLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMRoleLogin_descriptor_;
  metadata.reflection = GMRoleLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMOffLineReconnect::kMAccountIDFieldNumber;
const int GMOffLineReconnect::kMRoleIDFieldNumber;
const int GMOffLineReconnect::kMRandstrFieldNumber;
#endif  // !_MSC_VER

GMOffLineReconnect::GMOffLineReconnect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMOffLineReconnect::InitAsDefaultInstance() {
}

GMOffLineReconnect::GMOffLineReconnect(const GMOffLineReconnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMOffLineReconnect::SharedCtor() {
  _cached_size_ = 0;
  m_accountid_ = 0;
  m_roleid_ = 0;
  m_randstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMOffLineReconnect::~GMOffLineReconnect() {
  SharedDtor();
}

void GMOffLineReconnect::SharedDtor() {
  if (m_randstr_ != &::google::protobuf::internal::kEmptyString) {
    delete m_randstr_;
  }
  if (this != default_instance_) {
  }
}

void GMOffLineReconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMOffLineReconnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMOffLineReconnect_descriptor_;
}

const GMOffLineReconnect& GMOffLineReconnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GMOffLineReconnect* GMOffLineReconnect::default_instance_ = NULL;

GMOffLineReconnect* GMOffLineReconnect::New() const {
  return new GMOffLineReconnect;
}

void GMOffLineReconnect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_accountid_ = 0;
    m_roleid_ = 0;
    if (has_m_randstr()) {
      if (m_randstr_ != &::google::protobuf::internal::kEmptyString) {
        m_randstr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMOffLineReconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_AccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_accountid_)));
          set_has_m_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_RoleID;
        break;
      }

      // required int32 m_RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_RoleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_randstr;
        break;
      }

      // required string m_randstr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_randstr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_randstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_randstr().data(), this->m_randstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMOffLineReconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_AccountID = 1;
  if (has_m_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_accountid(), output);
  }

  // required int32 m_RoleID = 2;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_roleid(), output);
  }

  // required string m_randstr = 3;
  if (has_m_randstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_randstr().data(), this->m_randstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_randstr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMOffLineReconnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_AccountID = 1;
  if (has_m_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_accountid(), target);
  }

  // required int32 m_RoleID = 2;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_roleid(), target);
  }

  // required string m_randstr = 3;
  if (has_m_randstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_randstr().data(), this->m_randstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_randstr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMOffLineReconnect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_AccountID = 1;
    if (has_m_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_accountid());
    }

    // required int32 m_RoleID = 2;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // required string m_randstr = 3;
    if (has_m_randstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_randstr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMOffLineReconnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMOffLineReconnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMOffLineReconnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMOffLineReconnect::MergeFrom(const GMOffLineReconnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_accountid()) {
      set_m_accountid(from.m_accountid());
    }
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_randstr()) {
      set_m_randstr(from.m_randstr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMOffLineReconnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMOffLineReconnect::CopyFrom(const GMOffLineReconnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMOffLineReconnect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GMOffLineReconnect::Swap(GMOffLineReconnect* other) {
  if (other != this) {
    std::swap(m_accountid_, other->m_accountid_);
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_randstr_, other->m_randstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMOffLineReconnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMOffLineReconnect_descriptor_;
  metadata.reflection = GMOffLineReconnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMRoleNameRequest::kMRoleProfessionFieldNumber;
#endif  // !_MSC_VER

GMRoleNameRequest::GMRoleNameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMRoleNameRequest::InitAsDefaultInstance() {
}

GMRoleNameRequest::GMRoleNameRequest(const GMRoleNameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMRoleNameRequest::SharedCtor() {
  _cached_size_ = 0;
  m_roleprofession_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMRoleNameRequest::~GMRoleNameRequest() {
  SharedDtor();
}

void GMRoleNameRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMRoleNameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMRoleNameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMRoleNameRequest_descriptor_;
}

const GMRoleNameRequest& GMRoleNameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GMRoleNameRequest* GMRoleNameRequest::default_instance_ = NULL;

GMRoleNameRequest* GMRoleNameRequest::New() const {
  return new GMRoleNameRequest;
}

void GMRoleNameRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleprofession_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMRoleNameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_RoleProfession = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleprofession_)));
          set_has_m_roleprofession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMRoleNameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_RoleProfession = 1;
  if (has_m_roleprofession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleprofession(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMRoleNameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_RoleProfession = 1;
  if (has_m_roleprofession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleprofession(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMRoleNameRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_RoleProfession = 1;
    if (has_m_roleprofession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleprofession());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMRoleNameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMRoleNameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMRoleNameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMRoleNameRequest::MergeFrom(const GMRoleNameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleprofession()) {
      set_m_roleprofession(from.m_roleprofession());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMRoleNameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMRoleNameRequest::CopyFrom(const GMRoleNameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMRoleNameRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMRoleNameRequest::Swap(GMRoleNameRequest* other) {
  if (other != this) {
    std::swap(m_roleprofession_, other->m_roleprofession_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMRoleNameRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMRoleNameRequest_descriptor_;
  metadata.reflection = GMRoleNameRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMRoleNameReturn::kNameFieldNumber;
const int GMRoleNameReturn::kResultFieldNumber;
const int GMRoleNameReturn::kTypeFieldNumber;
#endif  // !_MSC_VER

GMRoleNameReturn::GMRoleNameReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMRoleNameReturn::InitAsDefaultInstance() {
}

GMRoleNameReturn::GMRoleNameReturn(const GMRoleNameReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMRoleNameReturn::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMRoleNameReturn::~GMRoleNameReturn() {
  SharedDtor();
}

void GMRoleNameReturn::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GMRoleNameReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMRoleNameReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMRoleNameReturn_descriptor_;
}

const GMRoleNameReturn& GMRoleNameReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GMRoleNameReturn* GMRoleNameReturn::default_instance_ = NULL;

GMRoleNameReturn* GMRoleNameReturn::New() const {
  return new GMRoleNameReturn;
}

void GMRoleNameReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    result_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMRoleNameReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMRoleNameReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMRoleNameReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMRoleNameReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMRoleNameReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMRoleNameReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMRoleNameReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMRoleNameReturn::MergeFrom(const GMRoleNameReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMRoleNameReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMRoleNameReturn::CopyFrom(const GMRoleNameReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMRoleNameReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMRoleNameReturn::Swap(GMRoleNameReturn* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(result_, other->result_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMRoleNameReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMRoleNameReturn_descriptor_;
  metadata.reflection = GMRoleNameReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_UPDATEFightVal::kFightvalFieldNumber;
#endif  // !_MSC_VER

GM_UPDATEFightVal::GM_UPDATEFightVal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_UPDATEFightVal::InitAsDefaultInstance() {
}

GM_UPDATEFightVal::GM_UPDATEFightVal(const GM_UPDATEFightVal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_UPDATEFightVal::SharedCtor() {
  _cached_size_ = 0;
  fightval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_UPDATEFightVal::~GM_UPDATEFightVal() {
  SharedDtor();
}

void GM_UPDATEFightVal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_UPDATEFightVal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_UPDATEFightVal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_UPDATEFightVal_descriptor_;
}

const GM_UPDATEFightVal& GM_UPDATEFightVal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GM_UPDATEFightVal* GM_UPDATEFightVal::default_instance_ = NULL;

GM_UPDATEFightVal* GM_UPDATEFightVal::New() const {
  return new GM_UPDATEFightVal;
}

void GM_UPDATEFightVal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fightval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_UPDATEFightVal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fightval = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightval_)));
          set_has_fightval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_UPDATEFightVal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 fightval = 1;
  if (has_fightval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fightval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_UPDATEFightVal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 fightval = 1;
  if (has_fightval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fightval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_UPDATEFightVal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fightval = 1;
    if (has_fightval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_UPDATEFightVal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_UPDATEFightVal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_UPDATEFightVal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_UPDATEFightVal::MergeFrom(const GM_UPDATEFightVal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fightval()) {
      set_fightval(from.fightval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_UPDATEFightVal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_UPDATEFightVal::CopyFrom(const GM_UPDATEFightVal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_UPDATEFightVal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_UPDATEFightVal::Swap(GM_UPDATEFightVal* other) {
  if (other != this) {
    std::swap(fightval_, other->fightval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_UPDATEFightVal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_UPDATEFightVal_descriptor_;
  metadata.reflection = GM_UPDATEFightVal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ProfessionChange::kProfessionIDFieldNumber;
#endif  // !_MSC_VER

GM_ProfessionChange::GM_ProfessionChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ProfessionChange::InitAsDefaultInstance() {
}

GM_ProfessionChange::GM_ProfessionChange(const GM_ProfessionChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ProfessionChange::SharedCtor() {
  _cached_size_ = 0;
  professionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ProfessionChange::~GM_ProfessionChange() {
  SharedDtor();
}

void GM_ProfessionChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ProfessionChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ProfessionChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ProfessionChange_descriptor_;
}

const GM_ProfessionChange& GM_ProfessionChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GM_ProfessionChange* GM_ProfessionChange::default_instance_ = NULL;

GM_ProfessionChange* GM_ProfessionChange::New() const {
  return new GM_ProfessionChange;
}

void GM_ProfessionChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    professionid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ProfessionChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 professionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &professionid_)));
          set_has_professionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ProfessionChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 professionID = 1;
  if (has_professionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->professionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ProfessionChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 professionID = 1;
  if (has_professionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->professionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ProfessionChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 professionID = 1;
    if (has_professionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->professionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ProfessionChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ProfessionChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ProfessionChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ProfessionChange::MergeFrom(const GM_ProfessionChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_professionid()) {
      set_professionid(from.professionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ProfessionChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ProfessionChange::CopyFrom(const GM_ProfessionChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ProfessionChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_ProfessionChange::Swap(GM_ProfessionChange* other) {
  if (other != this) {
    std::swap(professionid_, other->professionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ProfessionChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ProfessionChange_descriptor_;
  metadata.reflection = GM_ProfessionChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ProfessionChangeReturn::kResultFieldNumber;
#endif  // !_MSC_VER

GM_ProfessionChangeReturn::GM_ProfessionChangeReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ProfessionChangeReturn::InitAsDefaultInstance() {
}

GM_ProfessionChangeReturn::GM_ProfessionChangeReturn(const GM_ProfessionChangeReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ProfessionChangeReturn::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ProfessionChangeReturn::~GM_ProfessionChangeReturn() {
  SharedDtor();
}

void GM_ProfessionChangeReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ProfessionChangeReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ProfessionChangeReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ProfessionChangeReturn_descriptor_;
}

const GM_ProfessionChangeReturn& GM_ProfessionChangeReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GM_ProfessionChangeReturn* GM_ProfessionChangeReturn::default_instance_ = NULL;

GM_ProfessionChangeReturn* GM_ProfessionChangeReturn::New() const {
  return new GM_ProfessionChangeReturn;
}

void GM_ProfessionChangeReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ProfessionChangeReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ProfessionChangeReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ProfessionChangeReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ProfessionChangeReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ProfessionChangeReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ProfessionChangeReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ProfessionChangeReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ProfessionChangeReturn::MergeFrom(const GM_ProfessionChangeReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ProfessionChangeReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ProfessionChangeReturn::CopyFrom(const GM_ProfessionChangeReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ProfessionChangeReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_ProfessionChangeReturn::Swap(GM_ProfessionChangeReturn* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ProfessionChangeReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ProfessionChangeReturn_descriptor_;
  metadata.reflection = GM_ProfessionChangeReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_FightDataChangeItem::kPropertyFieldNumber;
const int GM_FightDataChangeItem::kChangevalueFieldNumber;
#endif  // !_MSC_VER

GM_FightDataChangeItem::GM_FightDataChangeItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_FightDataChangeItem::InitAsDefaultInstance() {
}

GM_FightDataChangeItem::GM_FightDataChangeItem(const GM_FightDataChangeItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_FightDataChangeItem::SharedCtor() {
  _cached_size_ = 0;
  property_ = 0;
  changevalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_FightDataChangeItem::~GM_FightDataChangeItem() {
  SharedDtor();
}

void GM_FightDataChangeItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_FightDataChangeItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_FightDataChangeItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_FightDataChangeItem_descriptor_;
}

const GM_FightDataChangeItem& GM_FightDataChangeItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GM_FightDataChangeItem* GM_FightDataChangeItem::default_instance_ = NULL;

GM_FightDataChangeItem* GM_FightDataChangeItem::New() const {
  return new GM_FightDataChangeItem;
}

void GM_FightDataChangeItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    property_ = 0;
    changevalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_FightDataChangeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 property = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &property_)));
          set_has_property();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_changevalue;
        break;
      }

      // required int32 changevalue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_changevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changevalue_)));
          set_has_changevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_FightDataChangeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 property = 1;
  if (has_property()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->property(), output);
  }

  // required int32 changevalue = 2;
  if (has_changevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->changevalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_FightDataChangeItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 property = 1;
  if (has_property()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->property(), target);
  }

  // required int32 changevalue = 2;
  if (has_changevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->changevalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_FightDataChangeItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 property = 1;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->property());
    }

    // required int32 changevalue = 2;
    if (has_changevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->changevalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_FightDataChangeItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_FightDataChangeItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_FightDataChangeItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_FightDataChangeItem::MergeFrom(const GM_FightDataChangeItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_property()) {
      set_property(from.property());
    }
    if (from.has_changevalue()) {
      set_changevalue(from.changevalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_FightDataChangeItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_FightDataChangeItem::CopyFrom(const GM_FightDataChangeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_FightDataChangeItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_FightDataChangeItem::Swap(GM_FightDataChangeItem* other) {
  if (other != this) {
    std::swap(property_, other->property_);
    std::swap(changevalue_, other->changevalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_FightDataChangeItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_FightDataChangeItem_descriptor_;
  metadata.reflection = GM_FightDataChangeItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_FightDataChangeNotifyInFB::kRoleIDFieldNumber;
const int GM_FightDataChangeNotifyInFB::kRoleTypeFieldNumber;
const int GM_FightDataChangeNotifyInFB::kChangeitemsFieldNumber;
#endif  // !_MSC_VER

GM_FightDataChangeNotifyInFB::GM_FightDataChangeNotifyInFB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_FightDataChangeNotifyInFB::InitAsDefaultInstance() {
}

GM_FightDataChangeNotifyInFB::GM_FightDataChangeNotifyInFB(const GM_FightDataChangeNotifyInFB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_FightDataChangeNotifyInFB::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  roletype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_FightDataChangeNotifyInFB::~GM_FightDataChangeNotifyInFB() {
  SharedDtor();
}

void GM_FightDataChangeNotifyInFB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_FightDataChangeNotifyInFB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_FightDataChangeNotifyInFB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_FightDataChangeNotifyInFB_descriptor_;
}

const GM_FightDataChangeNotifyInFB& GM_FightDataChangeNotifyInFB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GM_FightDataChangeNotifyInFB* GM_FightDataChangeNotifyInFB::default_instance_ = NULL;

GM_FightDataChangeNotifyInFB* GM_FightDataChangeNotifyInFB::New() const {
  return new GM_FightDataChangeNotifyInFB;
}

void GM_FightDataChangeNotifyInFB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    roletype_ = 0u;
  }
  changeitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_FightDataChangeNotifyInFB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GM_FightDataChangeItem changeitems = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_changeitems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_changeitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_changeitems;
        if (input->ExpectTag(16)) goto parse_roleID;
        break;
      }

      // required uint32 roleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roleType;
        break;
      }

      // required uint32 roleType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roletype_)));
          set_has_roletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_FightDataChangeNotifyInFB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GM_FightDataChangeItem changeitems = 1;
  for (int i = 0; i < this->changeitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->changeitems(i), output);
  }

  // required uint32 roleID = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roleid(), output);
  }

  // required uint32 roleType = 3;
  if (has_roletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->roletype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_FightDataChangeNotifyInFB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GM_FightDataChangeItem changeitems = 1;
  for (int i = 0; i < this->changeitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->changeitems(i), target);
  }

  // required uint32 roleID = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roleid(), target);
  }

  // required uint32 roleType = 3;
  if (has_roletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->roletype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_FightDataChangeNotifyInFB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 roleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }

    // required uint32 roleType = 3;
    if (has_roletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roletype());
    }

  }
  // repeated .GM_FightDataChangeItem changeitems = 1;
  total_size += 1 * this->changeitems_size();
  for (int i = 0; i < this->changeitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->changeitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_FightDataChangeNotifyInFB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_FightDataChangeNotifyInFB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_FightDataChangeNotifyInFB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_FightDataChangeNotifyInFB::MergeFrom(const GM_FightDataChangeNotifyInFB& from) {
  GOOGLE_CHECK_NE(&from, this);
  changeitems_.MergeFrom(from.changeitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_roletype()) {
      set_roletype(from.roletype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_FightDataChangeNotifyInFB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_FightDataChangeNotifyInFB::CopyFrom(const GM_FightDataChangeNotifyInFB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_FightDataChangeNotifyInFB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < changeitems_size(); i++) {
    if (!this->changeitems(i).IsInitialized()) return false;
  }
  return true;
}

void GM_FightDataChangeNotifyInFB::Swap(GM_FightDataChangeNotifyInFB* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(roletype_, other->roletype_);
    changeitems_.Swap(&other->changeitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_FightDataChangeNotifyInFB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_FightDataChangeNotifyInFB_descriptor_;
  metadata.reflection = GM_FightDataChangeNotifyInFB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_FightDataChangeNotify::kChangeitemsFieldNumber;
#endif  // !_MSC_VER

GM_FightDataChangeNotify::GM_FightDataChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_FightDataChangeNotify::InitAsDefaultInstance() {
}

GM_FightDataChangeNotify::GM_FightDataChangeNotify(const GM_FightDataChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_FightDataChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_FightDataChangeNotify::~GM_FightDataChangeNotify() {
  SharedDtor();
}

void GM_FightDataChangeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_FightDataChangeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_FightDataChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_FightDataChangeNotify_descriptor_;
}

const GM_FightDataChangeNotify& GM_FightDataChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GM_FightDataChangeNotify* GM_FightDataChangeNotify::default_instance_ = NULL;

GM_FightDataChangeNotify* GM_FightDataChangeNotify::New() const {
  return new GM_FightDataChangeNotify;
}

void GM_FightDataChangeNotify::Clear() {
  changeitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_FightDataChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GM_FightDataChangeItem changeitems = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_changeitems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_changeitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_changeitems;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_FightDataChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GM_FightDataChangeItem changeitems = 1;
  for (int i = 0; i < this->changeitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->changeitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_FightDataChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GM_FightDataChangeItem changeitems = 1;
  for (int i = 0; i < this->changeitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->changeitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_FightDataChangeNotify::ByteSize() const {
  int total_size = 0;

  // repeated .GM_FightDataChangeItem changeitems = 1;
  total_size += 1 * this->changeitems_size();
  for (int i = 0; i < this->changeitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->changeitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_FightDataChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_FightDataChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_FightDataChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_FightDataChangeNotify::MergeFrom(const GM_FightDataChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  changeitems_.MergeFrom(from.changeitems_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_FightDataChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_FightDataChangeNotify::CopyFrom(const GM_FightDataChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_FightDataChangeNotify::IsInitialized() const {

  for (int i = 0; i < changeitems_size(); i++) {
    if (!this->changeitems(i).IsInitialized()) return false;
  }
  return true;
}

void GM_FightDataChangeNotify::Swap(GM_FightDataChangeNotify* other) {
  if (other != this) {
    changeitems_.Swap(&other->changeitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_FightDataChangeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_FightDataChangeNotify_descriptor_;
  metadata.reflection = GM_FightDataChangeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_UnlockSystem::kEnumIDFieldNumber;
const int GM_UnlockSystem::kIsSpecialEffectFieldNumber;
#endif  // !_MSC_VER

GM_UnlockSystem::GM_UnlockSystem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_UnlockSystem::InitAsDefaultInstance() {
}

GM_UnlockSystem::GM_UnlockSystem(const GM_UnlockSystem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_UnlockSystem::SharedCtor() {
  _cached_size_ = 0;
  enumid_ = 0;
  isspecialeffect_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_UnlockSystem::~GM_UnlockSystem() {
  SharedDtor();
}

void GM_UnlockSystem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_UnlockSystem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_UnlockSystem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_UnlockSystem_descriptor_;
}

const GM_UnlockSystem& GM_UnlockSystem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GM_UnlockSystem* GM_UnlockSystem::default_instance_ = NULL;

GM_UnlockSystem* GM_UnlockSystem::New() const {
  return new GM_UnlockSystem;
}

void GM_UnlockSystem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enumid_ = 0;
    isspecialeffect_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_UnlockSystem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 enumID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enumid_)));
          set_has_enumid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isSpecialEffect;
        break;
      }

      // required int32 isSpecialEffect = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSpecialEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isspecialeffect_)));
          set_has_isspecialeffect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_UnlockSystem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 enumID = 1;
  if (has_enumid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->enumid(), output);
  }

  // required int32 isSpecialEffect = 2;
  if (has_isspecialeffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isspecialeffect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_UnlockSystem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 enumID = 1;
  if (has_enumid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->enumid(), target);
  }

  // required int32 isSpecialEffect = 2;
  if (has_isspecialeffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isspecialeffect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_UnlockSystem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 enumID = 1;
    if (has_enumid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enumid());
    }

    // required int32 isSpecialEffect = 2;
    if (has_isspecialeffect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isspecialeffect());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_UnlockSystem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_UnlockSystem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_UnlockSystem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_UnlockSystem::MergeFrom(const GM_UnlockSystem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enumid()) {
      set_enumid(from.enumid());
    }
    if (from.has_isspecialeffect()) {
      set_isspecialeffect(from.isspecialeffect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_UnlockSystem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_UnlockSystem::CopyFrom(const GM_UnlockSystem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_UnlockSystem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_UnlockSystem::Swap(GM_UnlockSystem* other) {
  if (other != this) {
    std::swap(enumid_, other->enumid_);
    std::swap(isspecialeffect_, other->isspecialeffect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_UnlockSystem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_UnlockSystem_descriptor_;
  metadata.reflection = GM_UnlockSystem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_UnlockSystemList::kCountFieldNumber;
const int GM_UnlockSystemList::kEnumIDFieldNumber;
#endif  // !_MSC_VER

GM_UnlockSystemList::GM_UnlockSystemList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_UnlockSystemList::InitAsDefaultInstance() {
}

GM_UnlockSystemList::GM_UnlockSystemList(const GM_UnlockSystemList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_UnlockSystemList::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_UnlockSystemList::~GM_UnlockSystemList() {
  SharedDtor();
}

void GM_UnlockSystemList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_UnlockSystemList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_UnlockSystemList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_UnlockSystemList_descriptor_;
}

const GM_UnlockSystemList& GM_UnlockSystemList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GM_UnlockSystemList* GM_UnlockSystemList::default_instance_ = NULL;

GM_UnlockSystemList* GM_UnlockSystemList::New() const {
  return new GM_UnlockSystemList;
}

void GM_UnlockSystemList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  enumid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_UnlockSystemList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 enumID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enumID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_enumid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_enumid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_enumID;
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_UnlockSystemList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 enumID = 1;
  for (int i = 0; i < this->enumid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->enumid(i), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_UnlockSystemList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 enumID = 1;
  for (int i = 0; i < this->enumid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->enumid(i), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_UnlockSystemList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated int32 enumID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->enumid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->enumid(i));
    }
    total_size += 1 * this->enumid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_UnlockSystemList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_UnlockSystemList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_UnlockSystemList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_UnlockSystemList::MergeFrom(const GM_UnlockSystemList& from) {
  GOOGLE_CHECK_NE(&from, this);
  enumid_.MergeFrom(from.enumid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_UnlockSystemList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_UnlockSystemList::CopyFrom(const GM_UnlockSystemList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_UnlockSystemList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_UnlockSystemList::Swap(GM_UnlockSystemList* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    enumid_.Swap(&other->enumid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_UnlockSystemList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_UnlockSystemList_descriptor_;
  metadata.reflection = GM_UnlockSystemList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Commonint32ChangeNotify::kPropertyFieldNumber;
const int GM_Commonint32ChangeNotify::kValueFieldNumber;
#endif  // !_MSC_VER

GM_Commonint32ChangeNotify::GM_Commonint32ChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Commonint32ChangeNotify::InitAsDefaultInstance() {
}

GM_Commonint32ChangeNotify::GM_Commonint32ChangeNotify(const GM_Commonint32ChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Commonint32ChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  property_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Commonint32ChangeNotify::~GM_Commonint32ChangeNotify() {
  SharedDtor();
}

void GM_Commonint32ChangeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Commonint32ChangeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Commonint32ChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Commonint32ChangeNotify_descriptor_;
}

const GM_Commonint32ChangeNotify& GM_Commonint32ChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GM_Commonint32ChangeNotify* GM_Commonint32ChangeNotify::default_instance_ = NULL;

GM_Commonint32ChangeNotify* GM_Commonint32ChangeNotify::New() const {
  return new GM_Commonint32ChangeNotify;
}

void GM_Commonint32ChangeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    property_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Commonint32ChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 property = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &property_)));
          set_has_property();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Commonint32ChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 property = 1;
  if (has_property()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->property(), output);
  }

  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Commonint32ChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 property = 1;
  if (has_property()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->property(), target);
  }

  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Commonint32ChangeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 property = 1;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->property());
    }

    // required int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Commonint32ChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Commonint32ChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Commonint32ChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Commonint32ChangeNotify::MergeFrom(const GM_Commonint32ChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_property()) {
      set_property(from.property());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Commonint32ChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Commonint32ChangeNotify::CopyFrom(const GM_Commonint32ChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Commonint32ChangeNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_Commonint32ChangeNotify::Swap(GM_Commonint32ChangeNotify* other) {
  if (other != this) {
    std::swap(property_, other->property_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Commonint32ChangeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Commonint32ChangeNotify_descriptor_;
  metadata.reflection = GM_Commonint32ChangeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_CommonLONG64ChangeNotify::kPropertyFieldNumber;
const int GM_CommonLONG64ChangeNotify::kValueFieldNumber;
#endif  // !_MSC_VER

GM_CommonLONG64ChangeNotify::GM_CommonLONG64ChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_CommonLONG64ChangeNotify::InitAsDefaultInstance() {
}

GM_CommonLONG64ChangeNotify::GM_CommonLONG64ChangeNotify(const GM_CommonLONG64ChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_CommonLONG64ChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  property_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_CommonLONG64ChangeNotify::~GM_CommonLONG64ChangeNotify() {
  SharedDtor();
}

void GM_CommonLONG64ChangeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_CommonLONG64ChangeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_CommonLONG64ChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_CommonLONG64ChangeNotify_descriptor_;
}

const GM_CommonLONG64ChangeNotify& GM_CommonLONG64ChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GM_CommonLONG64ChangeNotify* GM_CommonLONG64ChangeNotify::default_instance_ = NULL;

GM_CommonLONG64ChangeNotify* GM_CommonLONG64ChangeNotify::New() const {
  return new GM_CommonLONG64ChangeNotify;
}

void GM_CommonLONG64ChangeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    property_ = 0;
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_CommonLONG64ChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 property = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &property_)));
          set_has_property();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_CommonLONG64ChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 property = 1;
  if (has_property()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->property(), output);
  }

  // required int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_CommonLONG64ChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 property = 1;
  if (has_property()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->property(), target);
  }

  // required int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_CommonLONG64ChangeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 property = 1;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->property());
    }

    // required int64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_CommonLONG64ChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_CommonLONG64ChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_CommonLONG64ChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_CommonLONG64ChangeNotify::MergeFrom(const GM_CommonLONG64ChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_property()) {
      set_property(from.property());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_CommonLONG64ChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_CommonLONG64ChangeNotify::CopyFrom(const GM_CommonLONG64ChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_CommonLONG64ChangeNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_CommonLONG64ChangeNotify::Swap(GM_CommonLONG64ChangeNotify* other) {
  if (other != this) {
    std::swap(property_, other->property_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_CommonLONG64ChangeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_CommonLONG64ChangeNotify_descriptor_;
  metadata.reflection = GM_CommonLONG64ChangeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_CommonfloatChangeNotify::kPropertyFieldNumber;
const int GM_CommonfloatChangeNotify::kValueFieldNumber;
#endif  // !_MSC_VER

GM_CommonfloatChangeNotify::GM_CommonfloatChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_CommonfloatChangeNotify::InitAsDefaultInstance() {
}

GM_CommonfloatChangeNotify::GM_CommonfloatChangeNotify(const GM_CommonfloatChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_CommonfloatChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  property_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_CommonfloatChangeNotify::~GM_CommonfloatChangeNotify() {
  SharedDtor();
}

void GM_CommonfloatChangeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_CommonfloatChangeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_CommonfloatChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_CommonfloatChangeNotify_descriptor_;
}

const GM_CommonfloatChangeNotify& GM_CommonfloatChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GM_CommonfloatChangeNotify* GM_CommonfloatChangeNotify::default_instance_ = NULL;

GM_CommonfloatChangeNotify* GM_CommonfloatChangeNotify::New() const {
  return new GM_CommonfloatChangeNotify;
}

void GM_CommonfloatChangeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    property_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_CommonfloatChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 property = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &property_)));
          set_has_property();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_value;
        break;
      }

      // required float value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_CommonfloatChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 property = 1;
  if (has_property()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->property(), output);
  }

  // required float value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_CommonfloatChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 property = 1;
  if (has_property()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->property(), target);
  }

  // required float value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_CommonfloatChangeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 property = 1;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->property());
    }

    // required float value = 2;
    if (has_value()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_CommonfloatChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_CommonfloatChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_CommonfloatChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_CommonfloatChangeNotify::MergeFrom(const GM_CommonfloatChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_property()) {
      set_property(from.property());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_CommonfloatChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_CommonfloatChangeNotify::CopyFrom(const GM_CommonfloatChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_CommonfloatChangeNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_CommonfloatChangeNotify::Swap(GM_CommonfloatChangeNotify* other) {
  if (other != this) {
    std::swap(property_, other->property_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_CommonfloatChangeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_CommonfloatChangeNotify_descriptor_;
  metadata.reflection = GM_CommonfloatChangeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_RoleDelete_Request::kAccountidFieldNumber;
const int GM_RoleDelete_Request::kRoleIDFieldNumber;
const int GM_RoleDelete_Request::kMInfoFieldNumber;
#endif  // !_MSC_VER

GM_RoleDelete_Request::GM_RoleDelete_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_RoleDelete_Request::InitAsDefaultInstance() {
  m_info_ = const_cast< ::GMLogServerInfo*>(&::GMLogServerInfo::default_instance());
}

GM_RoleDelete_Request::GM_RoleDelete_Request(const GM_RoleDelete_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_RoleDelete_Request::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0;
  roleid_ = 0;
  m_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_RoleDelete_Request::~GM_RoleDelete_Request() {
  SharedDtor();
}

void GM_RoleDelete_Request::SharedDtor() {
  if (this != default_instance_) {
    delete m_info_;
  }
}

void GM_RoleDelete_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_RoleDelete_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_RoleDelete_Request_descriptor_;
}

const GM_RoleDelete_Request& GM_RoleDelete_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GM_RoleDelete_Request* GM_RoleDelete_Request::default_instance_ = NULL;

GM_RoleDelete_Request* GM_RoleDelete_Request::New() const {
  return new GM_RoleDelete_Request;
}

void GM_RoleDelete_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0;
    roleid_ = 0;
    if (has_m_info()) {
      if (m_info_ != NULL) m_info_->::GMLogServerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_RoleDelete_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleID;
        break;
      }

      // required int32 roleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_info;
        break;
      }

      // optional .GMLogServerInfo m_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_RoleDelete_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->accountid(), output);
  }

  // required int32 roleID = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  // optional .GMLogServerInfo m_info = 3;
  if (has_m_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_RoleDelete_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->accountid(), target);
  }

  // required int32 roleID = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleid(), target);
  }

  // optional .GMLogServerInfo m_info = 3;
  if (has_m_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_RoleDelete_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accountid());
    }

    // required int32 roleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional .GMLogServerInfo m_info = 3;
    if (has_m_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_RoleDelete_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_RoleDelete_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_RoleDelete_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_RoleDelete_Request::MergeFrom(const GM_RoleDelete_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_m_info()) {
      mutable_m_info()->::GMLogServerInfo::MergeFrom(from.m_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_RoleDelete_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_RoleDelete_Request::CopyFrom(const GM_RoleDelete_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_RoleDelete_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_m_info()) {
    if (!this->m_info().IsInitialized()) return false;
  }
  return true;
}

void GM_RoleDelete_Request::Swap(GM_RoleDelete_Request* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(roleid_, other->roleid_);
    std::swap(m_info_, other->m_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_RoleDelete_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_RoleDelete_Request_descriptor_;
  metadata.reflection = GM_RoleDelete_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_RoleDelete_Return::kResultFieldNumber;
const int GM_RoleDelete_Return::kRoleidFieldNumber;
#endif  // !_MSC_VER

GM_RoleDelete_Return::GM_RoleDelete_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_RoleDelete_Return::InitAsDefaultInstance() {
}

GM_RoleDelete_Return::GM_RoleDelete_Return(const GM_RoleDelete_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_RoleDelete_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_RoleDelete_Return::~GM_RoleDelete_Return() {
  SharedDtor();
}

void GM_RoleDelete_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_RoleDelete_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_RoleDelete_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_RoleDelete_Return_descriptor_;
}

const GM_RoleDelete_Return& GM_RoleDelete_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GM_RoleDelete_Return* GM_RoleDelete_Return::default_instance_ = NULL;

GM_RoleDelete_Return* GM_RoleDelete_Return::New() const {
  return new GM_RoleDelete_Return;
}

void GM_RoleDelete_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_RoleDelete_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // optional int32 roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_RoleDelete_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_RoleDelete_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_RoleDelete_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_RoleDelete_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_RoleDelete_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_RoleDelete_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_RoleDelete_Return::MergeFrom(const GM_RoleDelete_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_RoleDelete_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_RoleDelete_Return::CopyFrom(const GM_RoleDelete_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_RoleDelete_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_RoleDelete_Return::Swap(GM_RoleDelete_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_RoleDelete_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_RoleDelete_Return_descriptor_;
  metadata.reflection = GM_RoleDelete_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_TiredValueInfo::kTiredvaluemaxFieldNumber;
const int GM_TiredValueInfo::kTiredvalueFieldNumber;
#endif  // !_MSC_VER

GM_TiredValueInfo::GM_TiredValueInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_TiredValueInfo::InitAsDefaultInstance() {
}

GM_TiredValueInfo::GM_TiredValueInfo(const GM_TiredValueInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_TiredValueInfo::SharedCtor() {
  _cached_size_ = 0;
  tiredvaluemax_ = 0;
  tiredvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_TiredValueInfo::~GM_TiredValueInfo() {
  SharedDtor();
}

void GM_TiredValueInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_TiredValueInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_TiredValueInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_TiredValueInfo_descriptor_;
}

const GM_TiredValueInfo& GM_TiredValueInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GM_TiredValueInfo* GM_TiredValueInfo::default_instance_ = NULL;

GM_TiredValueInfo* GM_TiredValueInfo::New() const {
  return new GM_TiredValueInfo;
}

void GM_TiredValueInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tiredvaluemax_ = 0;
    tiredvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_TiredValueInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tiredvaluemax = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tiredvaluemax_)));
          set_has_tiredvaluemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tiredvalue;
        break;
      }

      // required int32 tiredvalue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tiredvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tiredvalue_)));
          set_has_tiredvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_TiredValueInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tiredvaluemax = 1;
  if (has_tiredvaluemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tiredvaluemax(), output);
  }

  // required int32 tiredvalue = 2;
  if (has_tiredvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tiredvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_TiredValueInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tiredvaluemax = 1;
  if (has_tiredvaluemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tiredvaluemax(), target);
  }

  // required int32 tiredvalue = 2;
  if (has_tiredvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tiredvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_TiredValueInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tiredvaluemax = 1;
    if (has_tiredvaluemax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tiredvaluemax());
    }

    // required int32 tiredvalue = 2;
    if (has_tiredvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tiredvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_TiredValueInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_TiredValueInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_TiredValueInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_TiredValueInfo::MergeFrom(const GM_TiredValueInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tiredvaluemax()) {
      set_tiredvaluemax(from.tiredvaluemax());
    }
    if (from.has_tiredvalue()) {
      set_tiredvalue(from.tiredvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_TiredValueInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_TiredValueInfo::CopyFrom(const GM_TiredValueInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_TiredValueInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_TiredValueInfo::Swap(GM_TiredValueInfo* other) {
  if (other != this) {
    std::swap(tiredvaluemax_, other->tiredvaluemax_);
    std::swap(tiredvalue_, other->tiredvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_TiredValueInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_TiredValueInfo_descriptor_;
  metadata.reflection = GM_TiredValueInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_QueryOtherPlayer::kTargetidFieldNumber;
#endif  // !_MSC_VER

GM_QueryOtherPlayer::GM_QueryOtherPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_QueryOtherPlayer::InitAsDefaultInstance() {
}

GM_QueryOtherPlayer::GM_QueryOtherPlayer(const GM_QueryOtherPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_QueryOtherPlayer::SharedCtor() {
  _cached_size_ = 0;
  targetid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_QueryOtherPlayer::~GM_QueryOtherPlayer() {
  SharedDtor();
}

void GM_QueryOtherPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_QueryOtherPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_QueryOtherPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_QueryOtherPlayer_descriptor_;
}

const GM_QueryOtherPlayer& GM_QueryOtherPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GM_QueryOtherPlayer* GM_QueryOtherPlayer::default_instance_ = NULL;

GM_QueryOtherPlayer* GM_QueryOtherPlayer::New() const {
  return new GM_QueryOtherPlayer;
}

void GM_QueryOtherPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    targetid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_QueryOtherPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 targetid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_QueryOtherPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 targetid = 1;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_QueryOtherPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 targetid = 1;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_QueryOtherPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 targetid = 1;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_QueryOtherPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_QueryOtherPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_QueryOtherPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_QueryOtherPlayer::MergeFrom(const GM_QueryOtherPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_QueryOtherPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_QueryOtherPlayer::CopyFrom(const GM_QueryOtherPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_QueryOtherPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_QueryOtherPlayer::Swap(GM_QueryOtherPlayer* other) {
  if (other != this) {
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_QueryOtherPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_QueryOtherPlayer_descriptor_;
  metadata.reflection = GM_QueryOtherPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangInfoResult::kGangnameFieldNumber;
const int GM_GangInfoResult::kGangjobFieldNumber;
#endif  // !_MSC_VER

GM_GangInfoResult::GM_GangInfoResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangInfoResult::InitAsDefaultInstance() {
}

GM_GangInfoResult::GM_GangInfoResult(const GM_GangInfoResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangInfoResult::SharedCtor() {
  _cached_size_ = 0;
  gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gangjob_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangInfoResult::~GM_GangInfoResult() {
  SharedDtor();
}

void GM_GangInfoResult::SharedDtor() {
  if (gangname_ != &::google::protobuf::internal::kEmptyString) {
    delete gangname_;
  }
  if (this != default_instance_) {
  }
}

void GM_GangInfoResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangInfoResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangInfoResult_descriptor_;
}

const GM_GangInfoResult& GM_GangInfoResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GM_GangInfoResult* GM_GangInfoResult::default_instance_ = NULL;

GM_GangInfoResult* GM_GangInfoResult::New() const {
  return new GM_GangInfoResult;
}

void GM_GangInfoResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gangname()) {
      if (gangname_ != &::google::protobuf::internal::kEmptyString) {
        gangname_->clear();
      }
    }
    gangjob_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangInfoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string gangname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gangname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gangname().data(), this->gangname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gangjob;
        break;
      }

      // required int32 gangjob = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gangjob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangjob_)));
          set_has_gangjob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangInfoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string gangname = 1;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gangname(), output);
  }

  // required int32 gangjob = 2;
  if (has_gangjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gangjob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangInfoResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string gangname = 1;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gangname(), target);
  }

  // required int32 gangjob = 2;
  if (has_gangjob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gangjob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangInfoResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string gangname = 1;
    if (has_gangname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gangname());
    }

    // required int32 gangjob = 2;
    if (has_gangjob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangjob());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangInfoResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangInfoResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangInfoResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangInfoResult::MergeFrom(const GM_GangInfoResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gangname()) {
      set_gangname(from.gangname());
    }
    if (from.has_gangjob()) {
      set_gangjob(from.gangjob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangInfoResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangInfoResult::CopyFrom(const GM_GangInfoResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangInfoResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_GangInfoResult::Swap(GM_GangInfoResult* other) {
  if (other != this) {
    std::swap(gangname_, other->gangname_);
    std::swap(gangjob_, other->gangjob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangInfoResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangInfoResult_descriptor_;
  metadata.reflection = GM_GangInfoResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Crckey::kCrcKeyFieldNumber;
const int GM_Crckey::kMessageidFieldNumber;
#endif  // !_MSC_VER

GM_Crckey::GM_Crckey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Crckey::InitAsDefaultInstance() {
}

GM_Crckey::GM_Crckey(const GM_Crckey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Crckey::SharedCtor() {
  _cached_size_ = 0;
  crckey_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Crckey::~GM_Crckey() {
  SharedDtor();
}

void GM_Crckey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Crckey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Crckey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Crckey_descriptor_;
}

const GM_Crckey& GM_Crckey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GM_Crckey* GM_Crckey::default_instance_ = NULL;

GM_Crckey* GM_Crckey::New() const {
  return new GM_Crckey;
}

void GM_Crckey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    crckey_ = 0u;
  }
  messageid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Crckey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 crcKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crckey_)));
          set_has_crckey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_messageid;
        break;
      }

      // repeated int32 messageid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_messageid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_messageid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_messageid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Crckey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 crcKey = 1;
  if (has_crckey()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->crckey(), output);
  }

  // repeated int32 messageid = 2;
  for (int i = 0; i < this->messageid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->messageid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Crckey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 crcKey = 1;
  if (has_crckey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->crckey(), target);
  }

  // repeated int32 messageid = 2;
  for (int i = 0; i < this->messageid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->messageid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Crckey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 crcKey = 1;
    if (has_crckey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crckey());
    }

  }
  // repeated int32 messageid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->messageid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->messageid(i));
    }
    total_size += 1 * this->messageid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Crckey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Crckey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Crckey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Crckey::MergeFrom(const GM_Crckey& from) {
  GOOGLE_CHECK_NE(&from, this);
  messageid_.MergeFrom(from.messageid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_crckey()) {
      set_crckey(from.crckey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Crckey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Crckey::CopyFrom(const GM_Crckey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Crckey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Crckey::Swap(GM_Crckey* other) {
  if (other != this) {
    std::swap(crckey_, other->crckey_);
    messageid_.Swap(&other->messageid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Crckey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Crckey_descriptor_;
  metadata.reflection = GM_Crckey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Recover_DeleteRole_Request::kAccountidFieldNumber;
const int GM_Recover_DeleteRole_Request::kRoleidFieldNumber;
#endif  // !_MSC_VER

GM_Recover_DeleteRole_Request::GM_Recover_DeleteRole_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Recover_DeleteRole_Request::InitAsDefaultInstance() {
}

GM_Recover_DeleteRole_Request::GM_Recover_DeleteRole_Request(const GM_Recover_DeleteRole_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Recover_DeleteRole_Request::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Recover_DeleteRole_Request::~GM_Recover_DeleteRole_Request() {
  SharedDtor();
}

void GM_Recover_DeleteRole_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Recover_DeleteRole_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Recover_DeleteRole_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Recover_DeleteRole_Request_descriptor_;
}

const GM_Recover_DeleteRole_Request& GM_Recover_DeleteRole_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GM_Recover_DeleteRole_Request* GM_Recover_DeleteRole_Request::default_instance_ = NULL;

GM_Recover_DeleteRole_Request* GM_Recover_DeleteRole_Request::New() const {
  return new GM_Recover_DeleteRole_Request;
}

void GM_Recover_DeleteRole_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0;
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Recover_DeleteRole_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // required int32 roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Recover_DeleteRole_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->accountid(), output);
  }

  // required int32 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Recover_DeleteRole_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->accountid(), target);
  }

  // required int32 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Recover_DeleteRole_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accountid());
    }

    // required int32 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Recover_DeleteRole_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Recover_DeleteRole_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Recover_DeleteRole_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Recover_DeleteRole_Request::MergeFrom(const GM_Recover_DeleteRole_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Recover_DeleteRole_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Recover_DeleteRole_Request::CopyFrom(const GM_Recover_DeleteRole_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Recover_DeleteRole_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_Recover_DeleteRole_Request::Swap(GM_Recover_DeleteRole_Request* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Recover_DeleteRole_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Recover_DeleteRole_Request_descriptor_;
  metadata.reflection = GM_Recover_DeleteRole_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Recover_DeleteRole_Return::kResultFieldNumber;
#endif  // !_MSC_VER

GM_Recover_DeleteRole_Return::GM_Recover_DeleteRole_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Recover_DeleteRole_Return::InitAsDefaultInstance() {
}

GM_Recover_DeleteRole_Return::GM_Recover_DeleteRole_Return(const GM_Recover_DeleteRole_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Recover_DeleteRole_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Recover_DeleteRole_Return::~GM_Recover_DeleteRole_Return() {
  SharedDtor();
}

void GM_Recover_DeleteRole_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Recover_DeleteRole_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Recover_DeleteRole_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Recover_DeleteRole_Return_descriptor_;
}

const GM_Recover_DeleteRole_Return& GM_Recover_DeleteRole_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GM_Recover_DeleteRole_Return* GM_Recover_DeleteRole_Return::default_instance_ = NULL;

GM_Recover_DeleteRole_Return* GM_Recover_DeleteRole_Return::New() const {
  return new GM_Recover_DeleteRole_Return;
}

void GM_Recover_DeleteRole_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Recover_DeleteRole_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Recover_DeleteRole_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Recover_DeleteRole_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Recover_DeleteRole_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Recover_DeleteRole_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Recover_DeleteRole_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Recover_DeleteRole_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Recover_DeleteRole_Return::MergeFrom(const GM_Recover_DeleteRole_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Recover_DeleteRole_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Recover_DeleteRole_Return::CopyFrom(const GM_Recover_DeleteRole_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Recover_DeleteRole_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Recover_DeleteRole_Return::Swap(GM_Recover_DeleteRole_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Recover_DeleteRole_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Recover_DeleteRole_Return_descriptor_;
  metadata.reflection = GM_Recover_DeleteRole_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Cancel_Recover_DeleteRole_Request::kRoleidFieldNumber;
#endif  // !_MSC_VER

GM_Cancel_Recover_DeleteRole_Request::GM_Cancel_Recover_DeleteRole_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Cancel_Recover_DeleteRole_Request::InitAsDefaultInstance() {
}

GM_Cancel_Recover_DeleteRole_Request::GM_Cancel_Recover_DeleteRole_Request(const GM_Cancel_Recover_DeleteRole_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Cancel_Recover_DeleteRole_Request::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Cancel_Recover_DeleteRole_Request::~GM_Cancel_Recover_DeleteRole_Request() {
  SharedDtor();
}

void GM_Cancel_Recover_DeleteRole_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Cancel_Recover_DeleteRole_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Cancel_Recover_DeleteRole_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Cancel_Recover_DeleteRole_Request_descriptor_;
}

const GM_Cancel_Recover_DeleteRole_Request& GM_Cancel_Recover_DeleteRole_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GM_Cancel_Recover_DeleteRole_Request* GM_Cancel_Recover_DeleteRole_Request::default_instance_ = NULL;

GM_Cancel_Recover_DeleteRole_Request* GM_Cancel_Recover_DeleteRole_Request::New() const {
  return new GM_Cancel_Recover_DeleteRole_Request;
}

void GM_Cancel_Recover_DeleteRole_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Cancel_Recover_DeleteRole_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Cancel_Recover_DeleteRole_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Cancel_Recover_DeleteRole_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Cancel_Recover_DeleteRole_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Cancel_Recover_DeleteRole_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Cancel_Recover_DeleteRole_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Cancel_Recover_DeleteRole_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Cancel_Recover_DeleteRole_Request::MergeFrom(const GM_Cancel_Recover_DeleteRole_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Cancel_Recover_DeleteRole_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Cancel_Recover_DeleteRole_Request::CopyFrom(const GM_Cancel_Recover_DeleteRole_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Cancel_Recover_DeleteRole_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Cancel_Recover_DeleteRole_Request::Swap(GM_Cancel_Recover_DeleteRole_Request* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Cancel_Recover_DeleteRole_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Cancel_Recover_DeleteRole_Request_descriptor_;
  metadata.reflection = GM_Cancel_Recover_DeleteRole_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Cancel_Recover_DeleteRole_Return::kResultFieldNumber;
#endif  // !_MSC_VER

GM_Cancel_Recover_DeleteRole_Return::GM_Cancel_Recover_DeleteRole_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Cancel_Recover_DeleteRole_Return::InitAsDefaultInstance() {
}

GM_Cancel_Recover_DeleteRole_Return::GM_Cancel_Recover_DeleteRole_Return(const GM_Cancel_Recover_DeleteRole_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Cancel_Recover_DeleteRole_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Cancel_Recover_DeleteRole_Return::~GM_Cancel_Recover_DeleteRole_Return() {
  SharedDtor();
}

void GM_Cancel_Recover_DeleteRole_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Cancel_Recover_DeleteRole_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Cancel_Recover_DeleteRole_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Cancel_Recover_DeleteRole_Return_descriptor_;
}

const GM_Cancel_Recover_DeleteRole_Return& GM_Cancel_Recover_DeleteRole_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GM_Cancel_Recover_DeleteRole_Return* GM_Cancel_Recover_DeleteRole_Return::default_instance_ = NULL;

GM_Cancel_Recover_DeleteRole_Return* GM_Cancel_Recover_DeleteRole_Return::New() const {
  return new GM_Cancel_Recover_DeleteRole_Return;
}

void GM_Cancel_Recover_DeleteRole_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Cancel_Recover_DeleteRole_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Cancel_Recover_DeleteRole_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Cancel_Recover_DeleteRole_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Cancel_Recover_DeleteRole_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Cancel_Recover_DeleteRole_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Cancel_Recover_DeleteRole_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Cancel_Recover_DeleteRole_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Cancel_Recover_DeleteRole_Return::MergeFrom(const GM_Cancel_Recover_DeleteRole_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Cancel_Recover_DeleteRole_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Cancel_Recover_DeleteRole_Return::CopyFrom(const GM_Cancel_Recover_DeleteRole_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Cancel_Recover_DeleteRole_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Cancel_Recover_DeleteRole_Return::Swap(GM_Cancel_Recover_DeleteRole_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Cancel_Recover_DeleteRole_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Cancel_Recover_DeleteRole_Return_descriptor_;
  metadata.reflection = GM_Cancel_Recover_DeleteRole_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Recover_DeleteRole_Notify::kRoleidFieldNumber;
#endif  // !_MSC_VER

GM_Recover_DeleteRole_Notify::GM_Recover_DeleteRole_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Recover_DeleteRole_Notify::InitAsDefaultInstance() {
}

GM_Recover_DeleteRole_Notify::GM_Recover_DeleteRole_Notify(const GM_Recover_DeleteRole_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Recover_DeleteRole_Notify::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Recover_DeleteRole_Notify::~GM_Recover_DeleteRole_Notify() {
  SharedDtor();
}

void GM_Recover_DeleteRole_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Recover_DeleteRole_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Recover_DeleteRole_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Recover_DeleteRole_Notify_descriptor_;
}

const GM_Recover_DeleteRole_Notify& GM_Recover_DeleteRole_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GM_Recover_DeleteRole_Notify* GM_Recover_DeleteRole_Notify::default_instance_ = NULL;

GM_Recover_DeleteRole_Notify* GM_Recover_DeleteRole_Notify::New() const {
  return new GM_Recover_DeleteRole_Notify;
}

void GM_Recover_DeleteRole_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Recover_DeleteRole_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Recover_DeleteRole_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Recover_DeleteRole_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Recover_DeleteRole_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Recover_DeleteRole_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Recover_DeleteRole_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Recover_DeleteRole_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Recover_DeleteRole_Notify::MergeFrom(const GM_Recover_DeleteRole_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Recover_DeleteRole_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Recover_DeleteRole_Notify::CopyFrom(const GM_Recover_DeleteRole_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Recover_DeleteRole_Notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Recover_DeleteRole_Notify::Swap(GM_Recover_DeleteRole_Notify* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Recover_DeleteRole_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Recover_DeleteRole_Notify_descriptor_;
  metadata.reflection = GM_Recover_DeleteRole_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Player_Recovery::kTiredremainderFieldNumber;
const int GM_Player_Recovery::kChastenremainderFieldNumber;
const int GM_Player_Recovery::kTiredRecoverFieldNumber;
const int GM_Player_Recovery::kChastenRecoverFieldNumber;
const int GM_Player_Recovery::kTirednumFieldNumber;
const int GM_Player_Recovery::kChastennumFieldNumber;
#endif  // !_MSC_VER

GM_Player_Recovery::GM_Player_Recovery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Player_Recovery::InitAsDefaultInstance() {
}

GM_Player_Recovery::GM_Player_Recovery(const GM_Player_Recovery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Player_Recovery::SharedCtor() {
  _cached_size_ = 0;
  tiredremainder_ = 0;
  chastenremainder_ = 0;
  tiredrecover_ = 0;
  chastenrecover_ = 0;
  tirednum_ = 0;
  chastennum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Player_Recovery::~GM_Player_Recovery() {
  SharedDtor();
}

void GM_Player_Recovery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Player_Recovery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Player_Recovery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Player_Recovery_descriptor_;
}

const GM_Player_Recovery& GM_Player_Recovery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GM_Player_Recovery* GM_Player_Recovery::default_instance_ = NULL;

GM_Player_Recovery* GM_Player_Recovery::New() const {
  return new GM_Player_Recovery;
}

void GM_Player_Recovery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tiredremainder_ = 0;
    chastenremainder_ = 0;
    tiredrecover_ = 0;
    chastenrecover_ = 0;
    tirednum_ = 0;
    chastennum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Player_Recovery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tiredremainder = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tiredremainder_)));
          set_has_tiredremainder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chastenremainder;
        break;
      }

      // optional int32 chastenremainder = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chastenremainder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chastenremainder_)));
          set_has_chastenremainder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tiredRecover;
        break;
      }

      // optional int32 tiredRecover = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tiredRecover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tiredrecover_)));
          set_has_tiredrecover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_chastenRecover;
        break;
      }

      // optional int32 chastenRecover = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chastenRecover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chastenrecover_)));
          set_has_chastenrecover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tirednum;
        break;
      }

      // optional int32 tirednum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tirednum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tirednum_)));
          set_has_tirednum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_chastennum;
        break;
      }

      // optional int32 chastennum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chastennum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chastennum_)));
          set_has_chastennum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Player_Recovery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tiredremainder = 1;
  if (has_tiredremainder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tiredremainder(), output);
  }

  // optional int32 chastenremainder = 2;
  if (has_chastenremainder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chastenremainder(), output);
  }

  // optional int32 tiredRecover = 3;
  if (has_tiredrecover()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tiredrecover(), output);
  }

  // optional int32 chastenRecover = 4;
  if (has_chastenrecover()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chastenrecover(), output);
  }

  // optional int32 tirednum = 5;
  if (has_tirednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tirednum(), output);
  }

  // optional int32 chastennum = 6;
  if (has_chastennum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->chastennum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Player_Recovery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tiredremainder = 1;
  if (has_tiredremainder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tiredremainder(), target);
  }

  // optional int32 chastenremainder = 2;
  if (has_chastenremainder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chastenremainder(), target);
  }

  // optional int32 tiredRecover = 3;
  if (has_tiredrecover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tiredrecover(), target);
  }

  // optional int32 chastenRecover = 4;
  if (has_chastenrecover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chastenrecover(), target);
  }

  // optional int32 tirednum = 5;
  if (has_tirednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tirednum(), target);
  }

  // optional int32 chastennum = 6;
  if (has_chastennum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->chastennum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Player_Recovery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tiredremainder = 1;
    if (has_tiredremainder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tiredremainder());
    }

    // optional int32 chastenremainder = 2;
    if (has_chastenremainder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chastenremainder());
    }

    // optional int32 tiredRecover = 3;
    if (has_tiredrecover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tiredrecover());
    }

    // optional int32 chastenRecover = 4;
    if (has_chastenrecover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chastenrecover());
    }

    // optional int32 tirednum = 5;
    if (has_tirednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tirednum());
    }

    // optional int32 chastennum = 6;
    if (has_chastennum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chastennum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Player_Recovery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Player_Recovery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Player_Recovery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Player_Recovery::MergeFrom(const GM_Player_Recovery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tiredremainder()) {
      set_tiredremainder(from.tiredremainder());
    }
    if (from.has_chastenremainder()) {
      set_chastenremainder(from.chastenremainder());
    }
    if (from.has_tiredrecover()) {
      set_tiredrecover(from.tiredrecover());
    }
    if (from.has_chastenrecover()) {
      set_chastenrecover(from.chastenrecover());
    }
    if (from.has_tirednum()) {
      set_tirednum(from.tirednum());
    }
    if (from.has_chastennum()) {
      set_chastennum(from.chastennum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Player_Recovery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Player_Recovery::CopyFrom(const GM_Player_Recovery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Player_Recovery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Player_Recovery::Swap(GM_Player_Recovery* other) {
  if (other != this) {
    std::swap(tiredremainder_, other->tiredremainder_);
    std::swap(chastenremainder_, other->chastenremainder_);
    std::swap(tiredrecover_, other->tiredrecover_);
    std::swap(chastenrecover_, other->chastenrecover_);
    std::swap(tirednum_, other->tirednum_);
    std::swap(chastennum_, other->chastennum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Player_Recovery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Player_Recovery_descriptor_;
  metadata.reflection = GM_Player_Recovery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Player_changeSex::kSexFieldNumber;
const int GM_Player_changeSex::kHeadFieldNumber;
const int GM_Player_changeSex::kFrameFieldNumber;
const int GM_Player_changeSex::kErroridFieldNumber;
const int GM_Player_changeSex::kHeadurlFieldNumber;
#endif  // !_MSC_VER

GM_Player_changeSex::GM_Player_changeSex()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Player_changeSex::InitAsDefaultInstance() {
}

GM_Player_changeSex::GM_Player_changeSex(const GM_Player_changeSex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Player_changeSex::SharedCtor() {
  _cached_size_ = 0;
  sex_ = 0;
  head_ = 0;
  frame_ = 0;
  errorid_ = 0;
  headurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Player_changeSex::~GM_Player_changeSex() {
  SharedDtor();
}

void GM_Player_changeSex::SharedDtor() {
  if (headurl_ != &::google::protobuf::internal::kEmptyString) {
    delete headurl_;
  }
  if (this != default_instance_) {
  }
}

void GM_Player_changeSex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Player_changeSex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Player_changeSex_descriptor_;
}

const GM_Player_changeSex& GM_Player_changeSex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GM_Player_changeSex* GM_Player_changeSex::default_instance_ = NULL;

GM_Player_changeSex* GM_Player_changeSex::New() const {
  return new GM_Player_changeSex;
}

void GM_Player_changeSex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sex_ = 0;
    head_ = 0;
    frame_ = 0;
    errorid_ = 0;
    if (has_headurl()) {
      if (headurl_ != &::google::protobuf::internal::kEmptyString) {
        headurl_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Player_changeSex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_head;
        break;
      }

      // optional int32 head = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_frame;
        break;
      }

      // optional int32 frame = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_)));
          set_has_frame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_errorid;
        break;
      }

      // optional int32 errorid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorid_)));
          set_has_errorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_headurl;
        break;
      }

      // optional string headurl = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headurl().data(), this->headurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Player_changeSex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sex = 1;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sex(), output);
  }

  // optional int32 head = 2;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->head(), output);
  }

  // optional int32 frame = 3;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frame(), output);
  }

  // optional int32 errorid = 4;
  if (has_errorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->errorid(), output);
  }

  // optional string headurl = 5;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->headurl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Player_changeSex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sex = 1;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sex(), target);
  }

  // optional int32 head = 2;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->head(), target);
  }

  // optional int32 frame = 3;
  if (has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->frame(), target);
  }

  // optional int32 errorid = 4;
  if (has_errorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->errorid(), target);
  }

  // optional string headurl = 5;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->headurl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Player_changeSex::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sex = 1;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 head = 2;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head());
    }

    // optional int32 frame = 3;
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frame());
    }

    // optional int32 errorid = 4;
    if (has_errorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorid());
    }

    // optional string headurl = 5;
    if (has_headurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headurl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Player_changeSex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Player_changeSex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Player_changeSex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Player_changeSex::MergeFrom(const GM_Player_changeSex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_frame()) {
      set_frame(from.frame());
    }
    if (from.has_errorid()) {
      set_errorid(from.errorid());
    }
    if (from.has_headurl()) {
      set_headurl(from.headurl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Player_changeSex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Player_changeSex::CopyFrom(const GM_Player_changeSex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Player_changeSex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Player_changeSex::Swap(GM_Player_changeSex* other) {
  if (other != this) {
    std::swap(sex_, other->sex_);
    std::swap(head_, other->head_);
    std::swap(frame_, other->frame_);
    std::swap(errorid_, other->errorid_);
    std::swap(headurl_, other->headurl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Player_changeSex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Player_changeSex_descriptor_;
  metadata.reflection = GM_Player_changeSex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Ip_request::kServeridFieldNumber;
const int GM_Ip_request::kRoleidFieldNumber;
#endif  // !_MSC_VER

GM_Ip_request::GM_Ip_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Ip_request::InitAsDefaultInstance() {
}

GM_Ip_request::GM_Ip_request(const GM_Ip_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Ip_request::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Ip_request::~GM_Ip_request() {
  SharedDtor();
}

void GM_Ip_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Ip_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Ip_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Ip_request_descriptor_;
}

const GM_Ip_request& GM_Ip_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GM_Ip_request* GM_Ip_request::default_instance_ = NULL;

GM_Ip_request* GM_Ip_request::New() const {
  return new GM_Ip_request;
}

void GM_Ip_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = 0;
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Ip_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 serverid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // optional int32 roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Ip_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 serverid = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serverid(), output);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Ip_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 serverid = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serverid(), target);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Ip_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 serverid = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // optional int32 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Ip_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Ip_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Ip_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Ip_request::MergeFrom(const GM_Ip_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Ip_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Ip_request::CopyFrom(const GM_Ip_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Ip_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Ip_request::Swap(GM_Ip_request* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Ip_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Ip_request_descriptor_;
  metadata.reflection = GM_Ip_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Ip_return::kIpFieldNumber;
const int GM_Ip_return::kRoleidFieldNumber;
#endif  // !_MSC_VER

GM_Ip_return::GM_Ip_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Ip_return::InitAsDefaultInstance() {
}

GM_Ip_return::GM_Ip_return(const GM_Ip_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Ip_return::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Ip_return::~GM_Ip_return() {
  SharedDtor();
}

void GM_Ip_return::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void GM_Ip_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Ip_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Ip_return_descriptor_;
}

const GM_Ip_return& GM_Ip_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2etxt();
  return *default_instance_;
}

GM_Ip_return* GM_Ip_return::default_instance_ = NULL;

GM_Ip_return* GM_Ip_return::New() const {
  return new GM_Ip_return;
}

void GM_Ip_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Ip_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // optional int32 roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Ip_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Ip_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Ip_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Ip_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Ip_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Ip_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Ip_return::MergeFrom(const GM_Ip_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Ip_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Ip_return::CopyFrom(const GM_Ip_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Ip_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Ip_return::Swap(GM_Ip_return* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Ip_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Ip_return_descriptor_;
  metadata.reflection = GM_Ip_return_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
