// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_ChooseArea.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SP_ChooseArea.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_EnsureChooseArea_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EnsureChooseArea_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_RequestGameServerConnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_RequestGameServerConnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GameServerIpReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GameServerIpReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_ServerInfoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_ServerInfoProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_DeleteRoleNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_DeleteRoleNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_LevelChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_LevelChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ChooseAreaToGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ChooseAreaToGate_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SP_5fChooseArea_2etxt() {
  protobuf_AddDesc_SP_5fChooseArea_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SP_ChooseArea.txt");
  GOOGLE_CHECK(file != NULL);
  GM_EnsureChooseArea_descriptor_ = file->message_type(0);
  static const int GM_EnsureChooseArea_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EnsureChooseArea, m_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EnsureChooseArea, m_areaid_),
  };
  GM_EnsureChooseArea_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EnsureChooseArea_descriptor_,
      GM_EnsureChooseArea::default_instance_,
      GM_EnsureChooseArea_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EnsureChooseArea, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EnsureChooseArea, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EnsureChooseArea));
  GM_RequestGameServerConnect_descriptor_ = file->message_type(1);
  static const int GM_RequestGameServerConnect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RequestGameServerConnect, m_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RequestGameServerConnect, m_randstr_),
  };
  GM_RequestGameServerConnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_RequestGameServerConnect_descriptor_,
      GM_RequestGameServerConnect::default_instance_,
      GM_RequestGameServerConnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RequestGameServerConnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RequestGameServerConnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_RequestGameServerConnect));
  GM_GameServerIpReturn_descriptor_ = file->message_type(2);
  static const int GM_GameServerIpReturn_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GameServerIpReturn, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GameServerIpReturn, m_serverip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GameServerIpReturn, m_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GameServerIpReturn, m_portnumber_),
  };
  GM_GameServerIpReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GameServerIpReturn_descriptor_,
      GM_GameServerIpReturn::default_instance_,
      GM_GameServerIpReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GameServerIpReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GameServerIpReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GameServerIpReturn));
  SM_ServerInfoProto_descriptor_ = file->message_type(3);
  static const int SM_ServerInfoProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_ServerInfoProto, serverstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_ServerInfoProto, serverflag_),
  };
  SM_ServerInfoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_ServerInfoProto_descriptor_,
      SM_ServerInfoProto::default_instance_,
      SM_ServerInfoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_ServerInfoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_ServerInfoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_ServerInfoProto));
  GM_DeleteRoleNotify_descriptor_ = file->message_type(4);
  static const int GM_DeleteRoleNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DeleteRoleNotify, m_accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DeleteRoleNotify, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DeleteRoleNotify, m_areaid_),
  };
  GM_DeleteRoleNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_DeleteRoleNotify_descriptor_,
      GM_DeleteRoleNotify::default_instance_,
      GM_DeleteRoleNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DeleteRoleNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DeleteRoleNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_DeleteRoleNotify));
  GM_LevelChange_descriptor_ = file->message_type(5);
  static const int GM_LevelChange_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LevelChange, m_accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LevelChange, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LevelChange, m_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LevelChange, m_areaid_),
  };
  GM_LevelChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_LevelChange_descriptor_,
      GM_LevelChange::default_instance_,
      GM_LevelChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LevelChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LevelChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_LevelChange));
  GM_ChooseAreaToGate_descriptor_ = file->message_type(6);
  static const int GM_ChooseAreaToGate_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChooseAreaToGate, m_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChooseAreaToGate, m_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChooseAreaToGate, m_randstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChooseAreaToGate, m_clientip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChooseAreaToGate, m_gateserverip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChooseAreaToGate, m_gateserverport_),
  };
  GM_ChooseAreaToGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ChooseAreaToGate_descriptor_,
      GM_ChooseAreaToGate::default_instance_,
      GM_ChooseAreaToGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChooseAreaToGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChooseAreaToGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ChooseAreaToGate));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SP_5fChooseArea_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EnsureChooseArea_descriptor_, &GM_EnsureChooseArea::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_RequestGameServerConnect_descriptor_, &GM_RequestGameServerConnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GameServerIpReturn_descriptor_, &GM_GameServerIpReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_ServerInfoProto_descriptor_, &SM_ServerInfoProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_DeleteRoleNotify_descriptor_, &GM_DeleteRoleNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_LevelChange_descriptor_, &GM_LevelChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ChooseAreaToGate_descriptor_, &GM_ChooseAreaToGate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SP_5fChooseArea_2etxt() {
  delete GM_EnsureChooseArea::default_instance_;
  delete GM_EnsureChooseArea_reflection_;
  delete GM_RequestGameServerConnect::default_instance_;
  delete GM_RequestGameServerConnect_reflection_;
  delete GM_GameServerIpReturn::default_instance_;
  delete GM_GameServerIpReturn_reflection_;
  delete SM_ServerInfoProto::default_instance_;
  delete SM_ServerInfoProto_reflection_;
  delete GM_DeleteRoleNotify::default_instance_;
  delete GM_DeleteRoleNotify_reflection_;
  delete GM_LevelChange::default_instance_;
  delete GM_LevelChange_reflection_;
  delete GM_ChooseAreaToGate::default_instance_;
  delete GM_ChooseAreaToGate_reflection_;
}

void protobuf_AddDesc_SP_5fChooseArea_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021SP_ChooseArea.txt\":\n\023GM_EnsureChooseAr"
    "ea\022\021\n\tm_Account\030\001 \002(\005\022\020\n\010m_AreaID\030\002 \002(\005\""
    "C\n\033GM_RequestGameServerConnect\022\021\n\tm_Acco"
    "unt\030\001 \002(\005\022\021\n\tm_RandStr\030\002 \002(\t\"g\n\025GM_GameS"
    "erverIpReturn\022\020\n\010m_Result\030\001 \002(\005\022\022\n\nm_Ser"
    "verIP\030\002 \002(\t\022\022\n\nm_Password\030\003 \002(\t\022\024\n\014m_Por"
    "tNumber\030\004 \002(\005\"=\n\022SM_ServerInfoProto\022\023\n\013s"
    "erverState\030\001 \002(\005\022\022\n\nserverFlag\030\002 \001(\005\"N\n\023"
    "GM_DeleteRoleNotify\022\023\n\013m_accountID\030\001 \002(\005"
    "\022\020\n\010m_roleID\030\002 \002(\005\022\020\n\010m_areaid\030\003 \001(\005\"Z\n\016"
    "GM_LevelChange\022\023\n\013m_accountId\030\001 \002(\005\022\020\n\010m"
    "_roleId\030\002 \002(\005\022\017\n\007m_level\030\003 \002(\005\022\020\n\010m_area"
    "id\030\004 \001(\005\"\221\001\n\023GM_ChooseAreaToGate\022\021\n\tm_ac"
    "count\030\001 \002(\r\022\016\n\006m_area\030\002 \002(\r\022\021\n\tm_randstr"
    "\030\003 \002(\t\022\022\n\nm_clientip\030\004 \002(\t\022\026\n\016m_gateserv"
    "erip\030\005 \001(\t\022\030\n\020m_gateserverport\030\006 \001(\r", 636);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SP_ChooseArea.txt", &protobuf_RegisterTypes);
  GM_EnsureChooseArea::default_instance_ = new GM_EnsureChooseArea();
  GM_RequestGameServerConnect::default_instance_ = new GM_RequestGameServerConnect();
  GM_GameServerIpReturn::default_instance_ = new GM_GameServerIpReturn();
  SM_ServerInfoProto::default_instance_ = new SM_ServerInfoProto();
  GM_DeleteRoleNotify::default_instance_ = new GM_DeleteRoleNotify();
  GM_LevelChange::default_instance_ = new GM_LevelChange();
  GM_ChooseAreaToGate::default_instance_ = new GM_ChooseAreaToGate();
  GM_EnsureChooseArea::default_instance_->InitAsDefaultInstance();
  GM_RequestGameServerConnect::default_instance_->InitAsDefaultInstance();
  GM_GameServerIpReturn::default_instance_->InitAsDefaultInstance();
  SM_ServerInfoProto::default_instance_->InitAsDefaultInstance();
  GM_DeleteRoleNotify::default_instance_->InitAsDefaultInstance();
  GM_LevelChange::default_instance_->InitAsDefaultInstance();
  GM_ChooseAreaToGate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SP_5fChooseArea_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SP_5fChooseArea_2etxt {
  StaticDescriptorInitializer_SP_5fChooseArea_2etxt() {
    protobuf_AddDesc_SP_5fChooseArea_2etxt();
  }
} static_descriptor_initializer_SP_5fChooseArea_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_EnsureChooseArea::kMAccountFieldNumber;
const int GM_EnsureChooseArea::kMAreaIDFieldNumber;
#endif  // !_MSC_VER

GM_EnsureChooseArea::GM_EnsureChooseArea()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EnsureChooseArea::InitAsDefaultInstance() {
}

GM_EnsureChooseArea::GM_EnsureChooseArea(const GM_EnsureChooseArea& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EnsureChooseArea::SharedCtor() {
  _cached_size_ = 0;
  m_account_ = 0;
  m_areaid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EnsureChooseArea::~GM_EnsureChooseArea() {
  SharedDtor();
}

void GM_EnsureChooseArea::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_EnsureChooseArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EnsureChooseArea::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EnsureChooseArea_descriptor_;
}

const GM_EnsureChooseArea& GM_EnsureChooseArea::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fChooseArea_2etxt();
  return *default_instance_;
}

GM_EnsureChooseArea* GM_EnsureChooseArea::default_instance_ = NULL;

GM_EnsureChooseArea* GM_EnsureChooseArea::New() const {
  return new GM_EnsureChooseArea;
}

void GM_EnsureChooseArea::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_account_ = 0;
    m_areaid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EnsureChooseArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_account_)));
          set_has_m_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_AreaID;
        break;
      }

      // required int32 m_AreaID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_AreaID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_areaid_)));
          set_has_m_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EnsureChooseArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Account = 1;
  if (has_m_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_account(), output);
  }

  // required int32 m_AreaID = 2;
  if (has_m_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_areaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EnsureChooseArea::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Account = 1;
  if (has_m_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_account(), target);
  }

  // required int32 m_AreaID = 2;
  if (has_m_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_areaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EnsureChooseArea::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Account = 1;
    if (has_m_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_account());
    }

    // required int32 m_AreaID = 2;
    if (has_m_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_areaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EnsureChooseArea::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EnsureChooseArea* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EnsureChooseArea*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EnsureChooseArea::MergeFrom(const GM_EnsureChooseArea& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_account()) {
      set_m_account(from.m_account());
    }
    if (from.has_m_areaid()) {
      set_m_areaid(from.m_areaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EnsureChooseArea::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EnsureChooseArea::CopyFrom(const GM_EnsureChooseArea& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EnsureChooseArea::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_EnsureChooseArea::Swap(GM_EnsureChooseArea* other) {
  if (other != this) {
    std::swap(m_account_, other->m_account_);
    std::swap(m_areaid_, other->m_areaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EnsureChooseArea::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EnsureChooseArea_descriptor_;
  metadata.reflection = GM_EnsureChooseArea_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_RequestGameServerConnect::kMAccountFieldNumber;
const int GM_RequestGameServerConnect::kMRandStrFieldNumber;
#endif  // !_MSC_VER

GM_RequestGameServerConnect::GM_RequestGameServerConnect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_RequestGameServerConnect::InitAsDefaultInstance() {
}

GM_RequestGameServerConnect::GM_RequestGameServerConnect(const GM_RequestGameServerConnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_RequestGameServerConnect::SharedCtor() {
  _cached_size_ = 0;
  m_account_ = 0;
  m_randstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_RequestGameServerConnect::~GM_RequestGameServerConnect() {
  SharedDtor();
}

void GM_RequestGameServerConnect::SharedDtor() {
  if (m_randstr_ != &::google::protobuf::internal::kEmptyString) {
    delete m_randstr_;
  }
  if (this != default_instance_) {
  }
}

void GM_RequestGameServerConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_RequestGameServerConnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_RequestGameServerConnect_descriptor_;
}

const GM_RequestGameServerConnect& GM_RequestGameServerConnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fChooseArea_2etxt();
  return *default_instance_;
}

GM_RequestGameServerConnect* GM_RequestGameServerConnect::default_instance_ = NULL;

GM_RequestGameServerConnect* GM_RequestGameServerConnect::New() const {
  return new GM_RequestGameServerConnect;
}

void GM_RequestGameServerConnect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_account_ = 0;
    if (has_m_randstr()) {
      if (m_randstr_ != &::google::protobuf::internal::kEmptyString) {
        m_randstr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_RequestGameServerConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_account_)));
          set_has_m_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_RandStr;
        break;
      }

      // required string m_RandStr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_RandStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_randstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_randstr().data(), this->m_randstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_RequestGameServerConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Account = 1;
  if (has_m_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_account(), output);
  }

  // required string m_RandStr = 2;
  if (has_m_randstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_randstr().data(), this->m_randstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_randstr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_RequestGameServerConnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Account = 1;
  if (has_m_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_account(), target);
  }

  // required string m_RandStr = 2;
  if (has_m_randstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_randstr().data(), this->m_randstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_randstr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_RequestGameServerConnect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Account = 1;
    if (has_m_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_account());
    }

    // required string m_RandStr = 2;
    if (has_m_randstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_randstr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_RequestGameServerConnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_RequestGameServerConnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_RequestGameServerConnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_RequestGameServerConnect::MergeFrom(const GM_RequestGameServerConnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_account()) {
      set_m_account(from.m_account());
    }
    if (from.has_m_randstr()) {
      set_m_randstr(from.m_randstr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_RequestGameServerConnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_RequestGameServerConnect::CopyFrom(const GM_RequestGameServerConnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_RequestGameServerConnect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_RequestGameServerConnect::Swap(GM_RequestGameServerConnect* other) {
  if (other != this) {
    std::swap(m_account_, other->m_account_);
    std::swap(m_randstr_, other->m_randstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_RequestGameServerConnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_RequestGameServerConnect_descriptor_;
  metadata.reflection = GM_RequestGameServerConnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GameServerIpReturn::kMResultFieldNumber;
const int GM_GameServerIpReturn::kMServerIPFieldNumber;
const int GM_GameServerIpReturn::kMPasswordFieldNumber;
const int GM_GameServerIpReturn::kMPortNumberFieldNumber;
#endif  // !_MSC_VER

GM_GameServerIpReturn::GM_GameServerIpReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GameServerIpReturn::InitAsDefaultInstance() {
}

GM_GameServerIpReturn::GM_GameServerIpReturn(const GM_GameServerIpReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GameServerIpReturn::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  m_serverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_portnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GameServerIpReturn::~GM_GameServerIpReturn() {
  SharedDtor();
}

void GM_GameServerIpReturn::SharedDtor() {
  if (m_serverip_ != &::google::protobuf::internal::kEmptyString) {
    delete m_serverip_;
  }
  if (m_password_ != &::google::protobuf::internal::kEmptyString) {
    delete m_password_;
  }
  if (this != default_instance_) {
  }
}

void GM_GameServerIpReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GameServerIpReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GameServerIpReturn_descriptor_;
}

const GM_GameServerIpReturn& GM_GameServerIpReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fChooseArea_2etxt();
  return *default_instance_;
}

GM_GameServerIpReturn* GM_GameServerIpReturn::default_instance_ = NULL;

GM_GameServerIpReturn* GM_GameServerIpReturn::New() const {
  return new GM_GameServerIpReturn;
}

void GM_GameServerIpReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    if (has_m_serverip()) {
      if (m_serverip_ != &::google::protobuf::internal::kEmptyString) {
        m_serverip_->clear();
      }
    }
    if (has_m_password()) {
      if (m_password_ != &::google::protobuf::internal::kEmptyString) {
        m_password_->clear();
      }
    }
    m_portnumber_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GameServerIpReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_ServerIP;
        break;
      }

      // required string m_ServerIP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ServerIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_serverip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_serverip().data(), this->m_serverip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_Password;
        break;
      }

      // required string m_Password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_password().data(), this->m_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_PortNumber;
        break;
      }

      // required int32 m_PortNumber = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_PortNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_portnumber_)));
          set_has_m_portnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GameServerIpReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // required string m_ServerIP = 2;
  if (has_m_serverip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_serverip().data(), this->m_serverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_serverip(), output);
  }

  // required string m_Password = 3;
  if (has_m_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_password().data(), this->m_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_password(), output);
  }

  // required int32 m_PortNumber = 4;
  if (has_m_portnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_portnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GameServerIpReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // required string m_ServerIP = 2;
  if (has_m_serverip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_serverip().data(), this->m_serverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_serverip(), target);
  }

  // required string m_Password = 3;
  if (has_m_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_password().data(), this->m_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_password(), target);
  }

  // required int32 m_PortNumber = 4;
  if (has_m_portnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_portnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GameServerIpReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // required string m_ServerIP = 2;
    if (has_m_serverip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_serverip());
    }

    // required string m_Password = 3;
    if (has_m_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_password());
    }

    // required int32 m_PortNumber = 4;
    if (has_m_portnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_portnumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GameServerIpReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GameServerIpReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GameServerIpReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GameServerIpReturn::MergeFrom(const GM_GameServerIpReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_serverip()) {
      set_m_serverip(from.m_serverip());
    }
    if (from.has_m_password()) {
      set_m_password(from.m_password());
    }
    if (from.has_m_portnumber()) {
      set_m_portnumber(from.m_portnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GameServerIpReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GameServerIpReturn::CopyFrom(const GM_GameServerIpReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GameServerIpReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GM_GameServerIpReturn::Swap(GM_GameServerIpReturn* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(m_serverip_, other->m_serverip_);
    std::swap(m_password_, other->m_password_);
    std::swap(m_portnumber_, other->m_portnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GameServerIpReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GameServerIpReturn_descriptor_;
  metadata.reflection = GM_GameServerIpReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_ServerInfoProto::kServerStateFieldNumber;
const int SM_ServerInfoProto::kServerFlagFieldNumber;
#endif  // !_MSC_VER

SM_ServerInfoProto::SM_ServerInfoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_ServerInfoProto::InitAsDefaultInstance() {
}

SM_ServerInfoProto::SM_ServerInfoProto(const SM_ServerInfoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_ServerInfoProto::SharedCtor() {
  _cached_size_ = 0;
  serverstate_ = 0;
  serverflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_ServerInfoProto::~SM_ServerInfoProto() {
  SharedDtor();
}

void SM_ServerInfoProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_ServerInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_ServerInfoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_ServerInfoProto_descriptor_;
}

const SM_ServerInfoProto& SM_ServerInfoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fChooseArea_2etxt();
  return *default_instance_;
}

SM_ServerInfoProto* SM_ServerInfoProto::default_instance_ = NULL;

SM_ServerInfoProto* SM_ServerInfoProto::New() const {
  return new SM_ServerInfoProto;
}

void SM_ServerInfoProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverstate_ = 0;
    serverflag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_ServerInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 serverState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverstate_)));
          set_has_serverstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverFlag;
        break;
      }

      // optional int32 serverFlag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverflag_)));
          set_has_serverflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_ServerInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 serverState = 1;
  if (has_serverstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serverstate(), output);
  }

  // optional int32 serverFlag = 2;
  if (has_serverflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serverflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_ServerInfoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 serverState = 1;
  if (has_serverstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serverstate(), target);
  }

  // optional int32 serverFlag = 2;
  if (has_serverflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->serverflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_ServerInfoProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 serverState = 1;
    if (has_serverstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverstate());
    }

    // optional int32 serverFlag = 2;
    if (has_serverflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_ServerInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_ServerInfoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_ServerInfoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_ServerInfoProto::MergeFrom(const SM_ServerInfoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverstate()) {
      set_serverstate(from.serverstate());
    }
    if (from.has_serverflag()) {
      set_serverflag(from.serverflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_ServerInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_ServerInfoProto::CopyFrom(const SM_ServerInfoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_ServerInfoProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_ServerInfoProto::Swap(SM_ServerInfoProto* other) {
  if (other != this) {
    std::swap(serverstate_, other->serverstate_);
    std::swap(serverflag_, other->serverflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_ServerInfoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_ServerInfoProto_descriptor_;
  metadata.reflection = SM_ServerInfoProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_DeleteRoleNotify::kMAccountIDFieldNumber;
const int GM_DeleteRoleNotify::kMRoleIDFieldNumber;
const int GM_DeleteRoleNotify::kMAreaidFieldNumber;
#endif  // !_MSC_VER

GM_DeleteRoleNotify::GM_DeleteRoleNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_DeleteRoleNotify::InitAsDefaultInstance() {
}

GM_DeleteRoleNotify::GM_DeleteRoleNotify(const GM_DeleteRoleNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_DeleteRoleNotify::SharedCtor() {
  _cached_size_ = 0;
  m_accountid_ = 0;
  m_roleid_ = 0;
  m_areaid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_DeleteRoleNotify::~GM_DeleteRoleNotify() {
  SharedDtor();
}

void GM_DeleteRoleNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_DeleteRoleNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_DeleteRoleNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_DeleteRoleNotify_descriptor_;
}

const GM_DeleteRoleNotify& GM_DeleteRoleNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fChooseArea_2etxt();
  return *default_instance_;
}

GM_DeleteRoleNotify* GM_DeleteRoleNotify::default_instance_ = NULL;

GM_DeleteRoleNotify* GM_DeleteRoleNotify::New() const {
  return new GM_DeleteRoleNotify;
}

void GM_DeleteRoleNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_accountid_ = 0;
    m_roleid_ = 0;
    m_areaid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_DeleteRoleNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_accountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_accountid_)));
          set_has_m_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_roleID;
        break;
      }

      // required int32 m_roleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_areaid;
        break;
      }

      // optional int32 m_areaid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_areaid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_areaid_)));
          set_has_m_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_DeleteRoleNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_accountID = 1;
  if (has_m_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_accountid(), output);
  }

  // required int32 m_roleID = 2;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_roleid(), output);
  }

  // optional int32 m_areaid = 3;
  if (has_m_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_areaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_DeleteRoleNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_accountID = 1;
  if (has_m_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_accountid(), target);
  }

  // required int32 m_roleID = 2;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_roleid(), target);
  }

  // optional int32 m_areaid = 3;
  if (has_m_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_areaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_DeleteRoleNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_accountID = 1;
    if (has_m_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_accountid());
    }

    // required int32 m_roleID = 2;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_areaid = 3;
    if (has_m_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_areaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_DeleteRoleNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_DeleteRoleNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_DeleteRoleNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_DeleteRoleNotify::MergeFrom(const GM_DeleteRoleNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_accountid()) {
      set_m_accountid(from.m_accountid());
    }
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_areaid()) {
      set_m_areaid(from.m_areaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_DeleteRoleNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_DeleteRoleNotify::CopyFrom(const GM_DeleteRoleNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_DeleteRoleNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_DeleteRoleNotify::Swap(GM_DeleteRoleNotify* other) {
  if (other != this) {
    std::swap(m_accountid_, other->m_accountid_);
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_areaid_, other->m_areaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_DeleteRoleNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_DeleteRoleNotify_descriptor_;
  metadata.reflection = GM_DeleteRoleNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_LevelChange::kMAccountIdFieldNumber;
const int GM_LevelChange::kMRoleIdFieldNumber;
const int GM_LevelChange::kMLevelFieldNumber;
const int GM_LevelChange::kMAreaidFieldNumber;
#endif  // !_MSC_VER

GM_LevelChange::GM_LevelChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_LevelChange::InitAsDefaultInstance() {
}

GM_LevelChange::GM_LevelChange(const GM_LevelChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_LevelChange::SharedCtor() {
  _cached_size_ = 0;
  m_accountid_ = 0;
  m_roleid_ = 0;
  m_level_ = 0;
  m_areaid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_LevelChange::~GM_LevelChange() {
  SharedDtor();
}

void GM_LevelChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_LevelChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_LevelChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_LevelChange_descriptor_;
}

const GM_LevelChange& GM_LevelChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fChooseArea_2etxt();
  return *default_instance_;
}

GM_LevelChange* GM_LevelChange::default_instance_ = NULL;

GM_LevelChange* GM_LevelChange::New() const {
  return new GM_LevelChange;
}

void GM_LevelChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_accountid_ = 0;
    m_roleid_ = 0;
    m_level_ = 0;
    m_areaid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_LevelChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_accountId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_accountid_)));
          set_has_m_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_roleId;
        break;
      }

      // required int32 m_roleId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_roleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_level;
        break;
      }

      // required int32 m_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_level_)));
          set_has_m_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_areaid;
        break;
      }

      // optional int32 m_areaid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_areaid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_areaid_)));
          set_has_m_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_LevelChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_accountId = 1;
  if (has_m_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_accountid(), output);
  }

  // required int32 m_roleId = 2;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_roleid(), output);
  }

  // required int32 m_level = 3;
  if (has_m_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_level(), output);
  }

  // optional int32 m_areaid = 4;
  if (has_m_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_areaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_LevelChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_accountId = 1;
  if (has_m_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_accountid(), target);
  }

  // required int32 m_roleId = 2;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_roleid(), target);
  }

  // required int32 m_level = 3;
  if (has_m_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_level(), target);
  }

  // optional int32 m_areaid = 4;
  if (has_m_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_areaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_LevelChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_accountId = 1;
    if (has_m_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_accountid());
    }

    // required int32 m_roleId = 2;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // required int32 m_level = 3;
    if (has_m_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_level());
    }

    // optional int32 m_areaid = 4;
    if (has_m_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_areaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_LevelChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_LevelChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_LevelChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_LevelChange::MergeFrom(const GM_LevelChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_accountid()) {
      set_m_accountid(from.m_accountid());
    }
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_level()) {
      set_m_level(from.m_level());
    }
    if (from.has_m_areaid()) {
      set_m_areaid(from.m_areaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_LevelChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_LevelChange::CopyFrom(const GM_LevelChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_LevelChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_LevelChange::Swap(GM_LevelChange* other) {
  if (other != this) {
    std::swap(m_accountid_, other->m_accountid_);
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_level_, other->m_level_);
    std::swap(m_areaid_, other->m_areaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_LevelChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_LevelChange_descriptor_;
  metadata.reflection = GM_LevelChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ChooseAreaToGate::kMAccountFieldNumber;
const int GM_ChooseAreaToGate::kMAreaFieldNumber;
const int GM_ChooseAreaToGate::kMRandstrFieldNumber;
const int GM_ChooseAreaToGate::kMClientipFieldNumber;
const int GM_ChooseAreaToGate::kMGateserveripFieldNumber;
const int GM_ChooseAreaToGate::kMGateserverportFieldNumber;
#endif  // !_MSC_VER

GM_ChooseAreaToGate::GM_ChooseAreaToGate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ChooseAreaToGate::InitAsDefaultInstance() {
}

GM_ChooseAreaToGate::GM_ChooseAreaToGate(const GM_ChooseAreaToGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ChooseAreaToGate::SharedCtor() {
  _cached_size_ = 0;
  m_account_ = 0u;
  m_area_ = 0u;
  m_randstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_clientip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_gateserverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_gateserverport_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ChooseAreaToGate::~GM_ChooseAreaToGate() {
  SharedDtor();
}

void GM_ChooseAreaToGate::SharedDtor() {
  if (m_randstr_ != &::google::protobuf::internal::kEmptyString) {
    delete m_randstr_;
  }
  if (m_clientip_ != &::google::protobuf::internal::kEmptyString) {
    delete m_clientip_;
  }
  if (m_gateserverip_ != &::google::protobuf::internal::kEmptyString) {
    delete m_gateserverip_;
  }
  if (this != default_instance_) {
  }
}

void GM_ChooseAreaToGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ChooseAreaToGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ChooseAreaToGate_descriptor_;
}

const GM_ChooseAreaToGate& GM_ChooseAreaToGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fChooseArea_2etxt();
  return *default_instance_;
}

GM_ChooseAreaToGate* GM_ChooseAreaToGate::default_instance_ = NULL;

GM_ChooseAreaToGate* GM_ChooseAreaToGate::New() const {
  return new GM_ChooseAreaToGate;
}

void GM_ChooseAreaToGate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_account_ = 0u;
    m_area_ = 0u;
    if (has_m_randstr()) {
      if (m_randstr_ != &::google::protobuf::internal::kEmptyString) {
        m_randstr_->clear();
      }
    }
    if (has_m_clientip()) {
      if (m_clientip_ != &::google::protobuf::internal::kEmptyString) {
        m_clientip_->clear();
      }
    }
    if (has_m_gateserverip()) {
      if (m_gateserverip_ != &::google::protobuf::internal::kEmptyString) {
        m_gateserverip_->clear();
      }
    }
    m_gateserverport_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ChooseAreaToGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 m_account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_account_)));
          set_has_m_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_area;
        break;
      }

      // required uint32 m_area = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_area_)));
          set_has_m_area();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_randstr;
        break;
      }

      // required string m_randstr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_randstr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_randstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_randstr().data(), this->m_randstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_clientip;
        break;
      }

      // required string m_clientip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_clientip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_clientip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_clientip().data(), this->m_clientip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_gateserverip;
        break;
      }

      // optional string m_gateserverip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_gateserverip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_gateserverip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_gateserverip().data(), this->m_gateserverip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_gateserverport;
        break;
      }

      // optional uint32 m_gateserverport = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gateserverport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_gateserverport_)));
          set_has_m_gateserverport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ChooseAreaToGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 m_account = 1;
  if (has_m_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_account(), output);
  }

  // required uint32 m_area = 2;
  if (has_m_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_area(), output);
  }

  // required string m_randstr = 3;
  if (has_m_randstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_randstr().data(), this->m_randstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_randstr(), output);
  }

  // required string m_clientip = 4;
  if (has_m_clientip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_clientip().data(), this->m_clientip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_clientip(), output);
  }

  // optional string m_gateserverip = 5;
  if (has_m_gateserverip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_gateserverip().data(), this->m_gateserverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_gateserverip(), output);
  }

  // optional uint32 m_gateserverport = 6;
  if (has_m_gateserverport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->m_gateserverport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ChooseAreaToGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 m_account = 1;
  if (has_m_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_account(), target);
  }

  // required uint32 m_area = 2;
  if (has_m_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_area(), target);
  }

  // required string m_randstr = 3;
  if (has_m_randstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_randstr().data(), this->m_randstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_randstr(), target);
  }

  // required string m_clientip = 4;
  if (has_m_clientip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_clientip().data(), this->m_clientip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_clientip(), target);
  }

  // optional string m_gateserverip = 5;
  if (has_m_gateserverip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_gateserverip().data(), this->m_gateserverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_gateserverip(), target);
  }

  // optional uint32 m_gateserverport = 6;
  if (has_m_gateserverport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->m_gateserverport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ChooseAreaToGate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 m_account = 1;
    if (has_m_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_account());
    }

    // required uint32 m_area = 2;
    if (has_m_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_area());
    }

    // required string m_randstr = 3;
    if (has_m_randstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_randstr());
    }

    // required string m_clientip = 4;
    if (has_m_clientip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_clientip());
    }

    // optional string m_gateserverip = 5;
    if (has_m_gateserverip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_gateserverip());
    }

    // optional uint32 m_gateserverport = 6;
    if (has_m_gateserverport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_gateserverport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ChooseAreaToGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ChooseAreaToGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ChooseAreaToGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ChooseAreaToGate::MergeFrom(const GM_ChooseAreaToGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_account()) {
      set_m_account(from.m_account());
    }
    if (from.has_m_area()) {
      set_m_area(from.m_area());
    }
    if (from.has_m_randstr()) {
      set_m_randstr(from.m_randstr());
    }
    if (from.has_m_clientip()) {
      set_m_clientip(from.m_clientip());
    }
    if (from.has_m_gateserverip()) {
      set_m_gateserverip(from.m_gateserverip());
    }
    if (from.has_m_gateserverport()) {
      set_m_gateserverport(from.m_gateserverport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ChooseAreaToGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ChooseAreaToGate::CopyFrom(const GM_ChooseAreaToGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ChooseAreaToGate::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GM_ChooseAreaToGate::Swap(GM_ChooseAreaToGate* other) {
  if (other != this) {
    std::swap(m_account_, other->m_account_);
    std::swap(m_area_, other->m_area_);
    std::swap(m_randstr_, other->m_randstr_);
    std::swap(m_clientip_, other->m_clientip_);
    std::swap(m_gateserverip_, other->m_gateserverip_);
    std::swap(m_gateserverport_, other->m_gateserverport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ChooseAreaToGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ChooseAreaToGate_descriptor_;
  metadata.reflection = GM_ChooseAreaToGate_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
