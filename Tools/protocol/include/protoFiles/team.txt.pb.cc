// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: team.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "team.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GMTeamPerson_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMTeamPerson_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMCreateTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMCreateTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMCreateTeamResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMCreateTeamResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMInviteFriendListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMInviteFriendListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMInviteFriendList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMInviteFriendList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMInviteRoleInTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMInviteRoleInTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMInviteRoleInTeamResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMInviteRoleInTeamResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAnswerRoleInTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAnswerRoleInTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMChatRoleInTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMChatRoleInTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAnswerRoleInTeamResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAnswerRoleInTeamResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMRoleTeamNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMRoleTeamNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMKickoutTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMKickoutTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMKickoutTeamResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMKickoutTeamResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMLeaveTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMLeaveTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMLeaveTeamResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMLeaveTeamResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_NotifyActiveOver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_NotifyActiveOver_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_NotifyInviteData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_NotifyInviteData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_team_2etxt() {
  protobuf_AddDesc_team_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "team.txt");
  GOOGLE_CHECK(file != NULL);
  GMTeamPerson_descriptor_ = file->message_type(0);
  static const int GMTeamPerson_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTeamPerson, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTeamPerson, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTeamPerson, rolelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTeamPerson, fightvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTeamPerson, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTeamPerson, mstatus_),
  };
  GMTeamPerson_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMTeamPerson_descriptor_,
      GMTeamPerson::default_instance_,
      GMTeamPerson_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTeamPerson, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTeamPerson, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMTeamPerson));
  GMCreateTeam_descriptor_ = file->message_type(1);
  static const int GMCreateTeam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCreateTeam, teamtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCreateTeam, matchtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCreateTeam, fbid_),
  };
  GMCreateTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMCreateTeam_descriptor_,
      GMCreateTeam::default_instance_,
      GMCreateTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCreateTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCreateTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMCreateTeam));
  GMCreateTeamResult_descriptor_ = file->message_type(2);
  static const int GMCreateTeamResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCreateTeamResult, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCreateTeamResult, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCreateTeamResult, teamtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCreateTeamResult, matchtype_),
  };
  GMCreateTeamResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMCreateTeamResult_descriptor_,
      GMCreateTeamResult::default_instance_,
      GMCreateTeamResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCreateTeamResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCreateTeamResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMCreateTeamResult));
  GMInviteFriendListRequest_descriptor_ = file->message_type(3);
  static const int GMInviteFriendListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMInviteFriendListRequest, fbid_),
  };
  GMInviteFriendListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMInviteFriendListRequest_descriptor_,
      GMInviteFriendListRequest::default_instance_,
      GMInviteFriendListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMInviteFriendListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMInviteFriendListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMInviteFriendListRequest));
  GMInviteFriendList_descriptor_ = file->message_type(4);
  static const int GMInviteFriendList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMInviteFriendList, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMInviteFriendList, data_),
  };
  GMInviteFriendList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMInviteFriendList_descriptor_,
      GMInviteFriendList::default_instance_,
      GMInviteFriendList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMInviteFriendList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMInviteFriendList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMInviteFriendList));
  GMInviteRoleInTeam_descriptor_ = file->message_type(5);
  static const int GMInviteRoleInTeam_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMInviteRoleInTeam, inviteroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMInviteRoleInTeam, inviterolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMInviteRoleInTeam, beinvitedroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMInviteRoleInTeam, beinvitedrolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMInviteRoleInTeam, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMInviteRoleInTeam, teamtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMInviteRoleInTeam, fbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMInviteRoleInTeam, timemark_),
  };
  GMInviteRoleInTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMInviteRoleInTeam_descriptor_,
      GMInviteRoleInTeam::default_instance_,
      GMInviteRoleInTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMInviteRoleInTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMInviteRoleInTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMInviteRoleInTeam));
  GMInviteRoleInTeamResult_descriptor_ = file->message_type(6);
  static const int GMInviteRoleInTeamResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMInviteRoleInTeamResult, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMInviteRoleInTeamResult, beinvitedroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMInviteRoleInTeamResult, beinvitedrolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMInviteRoleInTeamResult, teamid_),
  };
  GMInviteRoleInTeamResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMInviteRoleInTeamResult_descriptor_,
      GMInviteRoleInTeamResult::default_instance_,
      GMInviteRoleInTeamResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMInviteRoleInTeamResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMInviteRoleInTeamResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMInviteRoleInTeamResult));
  GMAnswerRoleInTeam_descriptor_ = file->message_type(7);
  static const int GMAnswerRoleInTeam_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAnswerRoleInTeam, answerresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAnswerRoleInTeam, inviteroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAnswerRoleInTeam, inviterolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAnswerRoleInTeam, beinvitedroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAnswerRoleInTeam, beinvitedrolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAnswerRoleInTeam, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAnswerRoleInTeam, teamtype_),
  };
  GMAnswerRoleInTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAnswerRoleInTeam_descriptor_,
      GMAnswerRoleInTeam::default_instance_,
      GMAnswerRoleInTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAnswerRoleInTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAnswerRoleInTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAnswerRoleInTeam));
  GMChatRoleInTeam_descriptor_ = file->message_type(8);
  static const int GMChatRoleInTeam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMChatRoleInTeam, answerresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMChatRoleInTeam, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMChatRoleInTeam, teamid_),
  };
  GMChatRoleInTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMChatRoleInTeam_descriptor_,
      GMChatRoleInTeam::default_instance_,
      GMChatRoleInTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMChatRoleInTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMChatRoleInTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMChatRoleInTeam));
  GMAnswerRoleInTeamResult_descriptor_ = file->message_type(9);
  static const int GMAnswerRoleInTeamResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAnswerRoleInTeamResult, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAnswerRoleInTeamResult, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAnswerRoleInTeamResult, fbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAnswerRoleInTeamResult, teamtype_),
  };
  GMAnswerRoleInTeamResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAnswerRoleInTeamResult_descriptor_,
      GMAnswerRoleInTeamResult::default_instance_,
      GMAnswerRoleInTeamResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAnswerRoleInTeamResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAnswerRoleInTeamResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAnswerRoleInTeamResult));
  GMRoleTeamNotify_descriptor_ = file->message_type(10);
  static const int GMRoleTeamNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleTeamNotify, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleTeamNotify, m_teamleader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleTeamNotify, m_person_),
  };
  GMRoleTeamNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMRoleTeamNotify_descriptor_,
      GMRoleTeamNotify::default_instance_,
      GMRoleTeamNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleTeamNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRoleTeamNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMRoleTeamNotify));
  GMKickoutTeam_descriptor_ = file->message_type(11);
  static const int GMKickoutTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMKickoutTeam, m_outroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMKickoutTeam, m_teamid_),
  };
  GMKickoutTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMKickoutTeam_descriptor_,
      GMKickoutTeam::default_instance_,
      GMKickoutTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMKickoutTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMKickoutTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMKickoutTeam));
  GMKickoutTeamResult_descriptor_ = file->message_type(12);
  static const int GMKickoutTeamResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMKickoutTeamResult, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMKickoutTeamResult, m_outroleid_),
  };
  GMKickoutTeamResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMKickoutTeamResult_descriptor_,
      GMKickoutTeamResult::default_instance_,
      GMKickoutTeamResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMKickoutTeamResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMKickoutTeamResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMKickoutTeamResult));
  GMLeaveTeam_descriptor_ = file->message_type(13);
  static const int GMLeaveTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMLeaveTeam, m_teamid_),
  };
  GMLeaveTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMLeaveTeam_descriptor_,
      GMLeaveTeam::default_instance_,
      GMLeaveTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMLeaveTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMLeaveTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMLeaveTeam));
  GMLeaveTeamResult_descriptor_ = file->message_type(14);
  static const int GMLeaveTeamResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMLeaveTeamResult, m_result_),
  };
  GMLeaveTeamResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMLeaveTeamResult_descriptor_,
      GMLeaveTeamResult::default_instance_,
      GMLeaveTeamResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMLeaveTeamResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMLeaveTeamResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMLeaveTeamResult));
  GM_NotifyActiveOver_descriptor_ = file->message_type(15);
  static const int GM_NotifyActiveOver_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NotifyActiveOver, m_nfbtypeid_),
  };
  GM_NotifyActiveOver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_NotifyActiveOver_descriptor_,
      GM_NotifyActiveOver::default_instance_,
      GM_NotifyActiveOver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NotifyActiveOver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NotifyActiveOver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_NotifyActiveOver));
  GM_NotifyInviteData_descriptor_ = file->message_type(16);
  static const int GM_NotifyInviteData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NotifyInviteData, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NotifyInviteData, mdata_),
  };
  GM_NotifyInviteData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_NotifyInviteData_descriptor_,
      GM_NotifyInviteData::default_instance_,
      GM_NotifyInviteData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NotifyInviteData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NotifyInviteData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_NotifyInviteData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_team_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMTeamPerson_descriptor_, &GMTeamPerson::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMCreateTeam_descriptor_, &GMCreateTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMCreateTeamResult_descriptor_, &GMCreateTeamResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMInviteFriendListRequest_descriptor_, &GMInviteFriendListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMInviteFriendList_descriptor_, &GMInviteFriendList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMInviteRoleInTeam_descriptor_, &GMInviteRoleInTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMInviteRoleInTeamResult_descriptor_, &GMInviteRoleInTeamResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAnswerRoleInTeam_descriptor_, &GMAnswerRoleInTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMChatRoleInTeam_descriptor_, &GMChatRoleInTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAnswerRoleInTeamResult_descriptor_, &GMAnswerRoleInTeamResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMRoleTeamNotify_descriptor_, &GMRoleTeamNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMKickoutTeam_descriptor_, &GMKickoutTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMKickoutTeamResult_descriptor_, &GMKickoutTeamResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMLeaveTeam_descriptor_, &GMLeaveTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMLeaveTeamResult_descriptor_, &GMLeaveTeamResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_NotifyActiveOver_descriptor_, &GM_NotifyActiveOver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_NotifyInviteData_descriptor_, &GM_NotifyInviteData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_team_2etxt() {
  delete GMTeamPerson::default_instance_;
  delete GMTeamPerson_reflection_;
  delete GMCreateTeam::default_instance_;
  delete GMCreateTeam_reflection_;
  delete GMCreateTeamResult::default_instance_;
  delete GMCreateTeamResult_reflection_;
  delete GMInviteFriendListRequest::default_instance_;
  delete GMInviteFriendListRequest_reflection_;
  delete GMInviteFriendList::default_instance_;
  delete GMInviteFriendList_reflection_;
  delete GMInviteRoleInTeam::default_instance_;
  delete GMInviteRoleInTeam_reflection_;
  delete GMInviteRoleInTeamResult::default_instance_;
  delete GMInviteRoleInTeamResult_reflection_;
  delete GMAnswerRoleInTeam::default_instance_;
  delete GMAnswerRoleInTeam_reflection_;
  delete GMChatRoleInTeam::default_instance_;
  delete GMChatRoleInTeam_reflection_;
  delete GMAnswerRoleInTeamResult::default_instance_;
  delete GMAnswerRoleInTeamResult_reflection_;
  delete GMRoleTeamNotify::default_instance_;
  delete GMRoleTeamNotify_reflection_;
  delete GMKickoutTeam::default_instance_;
  delete GMKickoutTeam_reflection_;
  delete GMKickoutTeamResult::default_instance_;
  delete GMKickoutTeamResult_reflection_;
  delete GMLeaveTeam::default_instance_;
  delete GMLeaveTeam_reflection_;
  delete GMLeaveTeamResult::default_instance_;
  delete GMLeaveTeamResult_reflection_;
  delete GM_NotifyActiveOver::default_instance_;
  delete GM_NotifyActiveOver_reflection_;
  delete GM_NotifyInviteData::default_instance_;
  delete GM_NotifyInviteData_reflection_;
}

void protobuf_AddDesc_team_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010team.txt\"y\n\014GMTeamPerson\022\016\n\006roleID\030\001 \002"
    "(\005\022\020\n\010rolename\030\002 \001(\t\022\016\n\006rolelv\030\003 \001(\005\022\022\n\n"
    "fightvalue\030\004 \001(\005\022\022\n\nprofession\030\005 \001(\005\022\017\n\007"
    "mStatus\030\n \001(\005\"A\n\014GMCreateTeam\022\020\n\010teamtyp"
    "e\030\001 \002(\005\022\021\n\tmatchtype\030\002 \001(\005\022\014\n\004fbid\030\003 \001(\005"
    "\"[\n\022GMCreateTeamResult\022\020\n\010m_result\030\001 \002(\005"
    "\022\016\n\006teamid\030\002 \001(\005\022\020\n\010teamtype\030\003 \001(\005\022\021\n\tma"
    "tchtype\030\004 \001(\005\")\n\031GMInviteFriendListReque"
    "st\022\014\n\004fbid\030\001 \002(\005\"@\n\022GMInviteFriendList\022\r"
    "\n\005count\030\001 \002(\005\022\033\n\004data\030\002 \003(\0132\r.GMTeamPers"
    "on\"\270\001\n\022GMInviteRoleInTeam\022\024\n\014inviterolei"
    "d\030\001 \002(\005\022\026\n\016inviterolename\030\002 \001(\t\022\027\n\017beinv"
    "itedroleid\030\003 \002(\005\022\031\n\021beinvitedrolename\030\004 "
    "\001(\t\022\016\n\006teamid\030\005 \002(\005\022\020\n\010teamtype\030\006 \002(\005\022\014\n"
    "\004fbid\030\007 \002(\005\022\020\n\010timemark\030\n \001(\005\"p\n\030GMInvit"
    "eRoleInTeamResult\022\020\n\010m_result\030\001 \002(\005\022\027\n\017b"
    "einvitedroleid\030\002 \002(\005\022\031\n\021beinvitedrolenam"
    "e\030\003 \001(\t\022\016\n\006teamid\030\004 \002(\005\"\256\001\n\022GMAnswerRole"
    "InTeam\022\024\n\014answerresult\030\001 \002(\005\022\024\n\014invitero"
    "leid\030\002 \002(\005\022\026\n\016inviterolename\030\003 \001(\t\022\027\n\017be"
    "invitedroleid\030\004 \002(\005\022\031\n\021beinvitedrolename"
    "\030\005 \001(\t\022\016\n\006teamid\030\006 \002(\005\022\020\n\010teamtype\030\007 \002(\005"
    "\"H\n\020GMChatRoleInTeam\022\024\n\014answerresult\030\001 \002"
    "(\005\022\016\n\006roleid\030\006 \002(\005\022\016\n\006teamid\030\007 \001(\005\"\\\n\030GM"
    "AnswerRoleInTeamResult\022\020\n\010m_result\030\001 \002(\005"
    "\022\016\n\006teamid\030\002 \001(\005\022\014\n\004fbid\030\003 \001(\005\022\020\n\010teamty"
    "pe\030\004 \001(\005\"[\n\020GMRoleTeamNotify\022\020\n\010m_result"
    "\030\001 \002(\005\022\024\n\014m_teamleader\030\002 \001(\005\022\037\n\010m_person"
    "\030\003 \003(\0132\r.GMTeamPerson\"6\n\rGMKickoutTeam\022\023"
    "\n\013m_outroleid\030\001 \002(\005\022\020\n\010m_teamid\030\002 \002(\005\"<\n"
    "\023GMKickoutTeamResult\022\020\n\010m_result\030\001 \002(\005\022\023"
    "\n\013m_outroleid\030\002 \002(\005\"\037\n\013GMLeaveTeam\022\020\n\010m_"
    "teamid\030\001 \002(\005\"%\n\021GMLeaveTeamResult\022\020\n\010m_r"
    "esult\030\001 \002(\005\"*\n\023GM_NotifyActiveOver\022\023\n\013m_"
    "nFbTypeId\030\004 \002(\005\"H\n\023GM_NotifyInviteData\022\r"
    "\n\005count\030\001 \002(\005\022\"\n\005mdata\030\002 \003(\0132\023.GMInviteR"
    "oleInTeam", 1449);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "team.txt", &protobuf_RegisterTypes);
  GMTeamPerson::default_instance_ = new GMTeamPerson();
  GMCreateTeam::default_instance_ = new GMCreateTeam();
  GMCreateTeamResult::default_instance_ = new GMCreateTeamResult();
  GMInviteFriendListRequest::default_instance_ = new GMInviteFriendListRequest();
  GMInviteFriendList::default_instance_ = new GMInviteFriendList();
  GMInviteRoleInTeam::default_instance_ = new GMInviteRoleInTeam();
  GMInviteRoleInTeamResult::default_instance_ = new GMInviteRoleInTeamResult();
  GMAnswerRoleInTeam::default_instance_ = new GMAnswerRoleInTeam();
  GMChatRoleInTeam::default_instance_ = new GMChatRoleInTeam();
  GMAnswerRoleInTeamResult::default_instance_ = new GMAnswerRoleInTeamResult();
  GMRoleTeamNotify::default_instance_ = new GMRoleTeamNotify();
  GMKickoutTeam::default_instance_ = new GMKickoutTeam();
  GMKickoutTeamResult::default_instance_ = new GMKickoutTeamResult();
  GMLeaveTeam::default_instance_ = new GMLeaveTeam();
  GMLeaveTeamResult::default_instance_ = new GMLeaveTeamResult();
  GM_NotifyActiveOver::default_instance_ = new GM_NotifyActiveOver();
  GM_NotifyInviteData::default_instance_ = new GM_NotifyInviteData();
  GMTeamPerson::default_instance_->InitAsDefaultInstance();
  GMCreateTeam::default_instance_->InitAsDefaultInstance();
  GMCreateTeamResult::default_instance_->InitAsDefaultInstance();
  GMInviteFriendListRequest::default_instance_->InitAsDefaultInstance();
  GMInviteFriendList::default_instance_->InitAsDefaultInstance();
  GMInviteRoleInTeam::default_instance_->InitAsDefaultInstance();
  GMInviteRoleInTeamResult::default_instance_->InitAsDefaultInstance();
  GMAnswerRoleInTeam::default_instance_->InitAsDefaultInstance();
  GMChatRoleInTeam::default_instance_->InitAsDefaultInstance();
  GMAnswerRoleInTeamResult::default_instance_->InitAsDefaultInstance();
  GMRoleTeamNotify::default_instance_->InitAsDefaultInstance();
  GMKickoutTeam::default_instance_->InitAsDefaultInstance();
  GMKickoutTeamResult::default_instance_->InitAsDefaultInstance();
  GMLeaveTeam::default_instance_->InitAsDefaultInstance();
  GMLeaveTeamResult::default_instance_->InitAsDefaultInstance();
  GM_NotifyActiveOver::default_instance_->InitAsDefaultInstance();
  GM_NotifyInviteData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_team_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_team_2etxt {
  StaticDescriptorInitializer_team_2etxt() {
    protobuf_AddDesc_team_2etxt();
  }
} static_descriptor_initializer_team_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GMTeamPerson::kRoleIDFieldNumber;
const int GMTeamPerson::kRolenameFieldNumber;
const int GMTeamPerson::kRolelvFieldNumber;
const int GMTeamPerson::kFightvalueFieldNumber;
const int GMTeamPerson::kProfessionFieldNumber;
const int GMTeamPerson::kMStatusFieldNumber;
#endif  // !_MSC_VER

GMTeamPerson::GMTeamPerson()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMTeamPerson::InitAsDefaultInstance() {
}

GMTeamPerson::GMTeamPerson(const GMTeamPerson& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMTeamPerson::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolelv_ = 0;
  fightvalue_ = 0;
  profession_ = 0;
  mstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMTeamPerson::~GMTeamPerson() {
  SharedDtor();
}

void GMTeamPerson::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void GMTeamPerson::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMTeamPerson::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMTeamPerson_descriptor_;
}

const GMTeamPerson& GMTeamPerson::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2etxt();
  return *default_instance_;
}

GMTeamPerson* GMTeamPerson::default_instance_ = NULL;

GMTeamPerson* GMTeamPerson::New() const {
  return new GMTeamPerson;
}

void GMTeamPerson::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    rolelv_ = 0;
    fightvalue_ = 0;
    profession_ = 0;
    mstatus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMTeamPerson::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rolename;
        break;
      }

      // optional string rolename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rolelv;
        break;
      }

      // optional int32 rolelv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rolelv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolelv_)));
          set_has_rolelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fightvalue;
        break;
      }

      // optional int32 fightvalue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightvalue_)));
          set_has_fightvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_profession;
        break;
      }

      // optional int32 profession = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_mStatus;
        break;
      }

      // optional int32 mStatus = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mstatus_)));
          set_has_mstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMTeamPerson::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleID = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional string rolename = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }

  // optional int32 rolelv = 3;
  if (has_rolelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rolelv(), output);
  }

  // optional int32 fightvalue = 4;
  if (has_fightvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fightvalue(), output);
  }

  // optional int32 profession = 5;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->profession(), output);
  }

  // optional int32 mStatus = 10;
  if (has_mstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->mstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMTeamPerson::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleID = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional string rolename = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolename(), target);
  }

  // optional int32 rolelv = 3;
  if (has_rolelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rolelv(), target);
  }

  // optional int32 fightvalue = 4;
  if (has_fightvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fightvalue(), target);
  }

  // optional int32 profession = 5;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->profession(), target);
  }

  // optional int32 mStatus = 10;
  if (has_mstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->mstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMTeamPerson::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional string rolename = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // optional int32 rolelv = 3;
    if (has_rolelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolelv());
    }

    // optional int32 fightvalue = 4;
    if (has_fightvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightvalue());
    }

    // optional int32 profession = 5;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // optional int32 mStatus = 10;
    if (has_mstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMTeamPerson::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMTeamPerson* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMTeamPerson*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMTeamPerson::MergeFrom(const GMTeamPerson& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_rolelv()) {
      set_rolelv(from.rolelv());
    }
    if (from.has_fightvalue()) {
      set_fightvalue(from.fightvalue());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_mstatus()) {
      set_mstatus(from.mstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMTeamPerson::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMTeamPerson::CopyFrom(const GMTeamPerson& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMTeamPerson::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMTeamPerson::Swap(GMTeamPerson* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(rolelv_, other->rolelv_);
    std::swap(fightvalue_, other->fightvalue_);
    std::swap(profession_, other->profession_);
    std::swap(mstatus_, other->mstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMTeamPerson::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMTeamPerson_descriptor_;
  metadata.reflection = GMTeamPerson_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMCreateTeam::kTeamtypeFieldNumber;
const int GMCreateTeam::kMatchtypeFieldNumber;
const int GMCreateTeam::kFbidFieldNumber;
#endif  // !_MSC_VER

GMCreateTeam::GMCreateTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMCreateTeam::InitAsDefaultInstance() {
}

GMCreateTeam::GMCreateTeam(const GMCreateTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMCreateTeam::SharedCtor() {
  _cached_size_ = 0;
  teamtype_ = 0;
  matchtype_ = 0;
  fbid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMCreateTeam::~GMCreateTeam() {
  SharedDtor();
}

void GMCreateTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMCreateTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMCreateTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMCreateTeam_descriptor_;
}

const GMCreateTeam& GMCreateTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2etxt();
  return *default_instance_;
}

GMCreateTeam* GMCreateTeam::default_instance_ = NULL;

GMCreateTeam* GMCreateTeam::New() const {
  return new GMCreateTeam;
}

void GMCreateTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamtype_ = 0;
    matchtype_ = 0;
    fbid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMCreateTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 teamtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamtype_)));
          set_has_teamtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_matchtype;
        break;
      }

      // optional int32 matchtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchtype_)));
          set_has_matchtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fbid;
        break;
      }

      // optional int32 fbid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fbid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fbid_)));
          set_has_fbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMCreateTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 teamtype = 1;
  if (has_teamtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->teamtype(), output);
  }

  // optional int32 matchtype = 2;
  if (has_matchtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->matchtype(), output);
  }

  // optional int32 fbid = 3;
  if (has_fbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fbid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMCreateTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 teamtype = 1;
  if (has_teamtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->teamtype(), target);
  }

  // optional int32 matchtype = 2;
  if (has_matchtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->matchtype(), target);
  }

  // optional int32 fbid = 3;
  if (has_fbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fbid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMCreateTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 teamtype = 1;
    if (has_teamtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamtype());
    }

    // optional int32 matchtype = 2;
    if (has_matchtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchtype());
    }

    // optional int32 fbid = 3;
    if (has_fbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fbid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMCreateTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMCreateTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMCreateTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMCreateTeam::MergeFrom(const GMCreateTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamtype()) {
      set_teamtype(from.teamtype());
    }
    if (from.has_matchtype()) {
      set_matchtype(from.matchtype());
    }
    if (from.has_fbid()) {
      set_fbid(from.fbid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMCreateTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMCreateTeam::CopyFrom(const GMCreateTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMCreateTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMCreateTeam::Swap(GMCreateTeam* other) {
  if (other != this) {
    std::swap(teamtype_, other->teamtype_);
    std::swap(matchtype_, other->matchtype_);
    std::swap(fbid_, other->fbid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMCreateTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMCreateTeam_descriptor_;
  metadata.reflection = GMCreateTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMCreateTeamResult::kMResultFieldNumber;
const int GMCreateTeamResult::kTeamidFieldNumber;
const int GMCreateTeamResult::kTeamtypeFieldNumber;
const int GMCreateTeamResult::kMatchtypeFieldNumber;
#endif  // !_MSC_VER

GMCreateTeamResult::GMCreateTeamResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMCreateTeamResult::InitAsDefaultInstance() {
}

GMCreateTeamResult::GMCreateTeamResult(const GMCreateTeamResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMCreateTeamResult::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  teamid_ = 0;
  teamtype_ = 0;
  matchtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMCreateTeamResult::~GMCreateTeamResult() {
  SharedDtor();
}

void GMCreateTeamResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMCreateTeamResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMCreateTeamResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMCreateTeamResult_descriptor_;
}

const GMCreateTeamResult& GMCreateTeamResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2etxt();
  return *default_instance_;
}

GMCreateTeamResult* GMCreateTeamResult::default_instance_ = NULL;

GMCreateTeamResult* GMCreateTeamResult::New() const {
  return new GMCreateTeamResult;
}

void GMCreateTeamResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    teamid_ = 0;
    teamtype_ = 0;
    matchtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMCreateTeamResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_teamid;
        break;
      }

      // optional int32 teamid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_teamtype;
        break;
      }

      // optional int32 teamtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamtype_)));
          set_has_teamtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_matchtype;
        break;
      }

      // optional int32 matchtype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchtype_)));
          set_has_matchtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMCreateTeamResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // optional int32 teamid = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->teamid(), output);
  }

  // optional int32 teamtype = 3;
  if (has_teamtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->teamtype(), output);
  }

  // optional int32 matchtype = 4;
  if (has_matchtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->matchtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMCreateTeamResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // optional int32 teamid = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->teamid(), target);
  }

  // optional int32 teamtype = 3;
  if (has_teamtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->teamtype(), target);
  }

  // optional int32 matchtype = 4;
  if (has_matchtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->matchtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMCreateTeamResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // optional int32 teamid = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

    // optional int32 teamtype = 3;
    if (has_teamtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamtype());
    }

    // optional int32 matchtype = 4;
    if (has_matchtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMCreateTeamResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMCreateTeamResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMCreateTeamResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMCreateTeamResult::MergeFrom(const GMCreateTeamResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_teamtype()) {
      set_teamtype(from.teamtype());
    }
    if (from.has_matchtype()) {
      set_matchtype(from.matchtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMCreateTeamResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMCreateTeamResult::CopyFrom(const GMCreateTeamResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMCreateTeamResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMCreateTeamResult::Swap(GMCreateTeamResult* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(teamid_, other->teamid_);
    std::swap(teamtype_, other->teamtype_);
    std::swap(matchtype_, other->matchtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMCreateTeamResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMCreateTeamResult_descriptor_;
  metadata.reflection = GMCreateTeamResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMInviteFriendListRequest::kFbidFieldNumber;
#endif  // !_MSC_VER

GMInviteFriendListRequest::GMInviteFriendListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMInviteFriendListRequest::InitAsDefaultInstance() {
}

GMInviteFriendListRequest::GMInviteFriendListRequest(const GMInviteFriendListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMInviteFriendListRequest::SharedCtor() {
  _cached_size_ = 0;
  fbid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMInviteFriendListRequest::~GMInviteFriendListRequest() {
  SharedDtor();
}

void GMInviteFriendListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMInviteFriendListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMInviteFriendListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMInviteFriendListRequest_descriptor_;
}

const GMInviteFriendListRequest& GMInviteFriendListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2etxt();
  return *default_instance_;
}

GMInviteFriendListRequest* GMInviteFriendListRequest::default_instance_ = NULL;

GMInviteFriendListRequest* GMInviteFriendListRequest::New() const {
  return new GMInviteFriendListRequest;
}

void GMInviteFriendListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fbid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMInviteFriendListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fbid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fbid_)));
          set_has_fbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMInviteFriendListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 fbid = 1;
  if (has_fbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fbid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMInviteFriendListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 fbid = 1;
  if (has_fbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fbid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMInviteFriendListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fbid = 1;
    if (has_fbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fbid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMInviteFriendListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMInviteFriendListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMInviteFriendListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMInviteFriendListRequest::MergeFrom(const GMInviteFriendListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fbid()) {
      set_fbid(from.fbid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMInviteFriendListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMInviteFriendListRequest::CopyFrom(const GMInviteFriendListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMInviteFriendListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMInviteFriendListRequest::Swap(GMInviteFriendListRequest* other) {
  if (other != this) {
    std::swap(fbid_, other->fbid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMInviteFriendListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMInviteFriendListRequest_descriptor_;
  metadata.reflection = GMInviteFriendListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMInviteFriendList::kCountFieldNumber;
const int GMInviteFriendList::kDataFieldNumber;
#endif  // !_MSC_VER

GMInviteFriendList::GMInviteFriendList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMInviteFriendList::InitAsDefaultInstance() {
}

GMInviteFriendList::GMInviteFriendList(const GMInviteFriendList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMInviteFriendList::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMInviteFriendList::~GMInviteFriendList() {
  SharedDtor();
}

void GMInviteFriendList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMInviteFriendList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMInviteFriendList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMInviteFriendList_descriptor_;
}

const GMInviteFriendList& GMInviteFriendList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2etxt();
  return *default_instance_;
}

GMInviteFriendList* GMInviteFriendList::default_instance_ = NULL;

GMInviteFriendList* GMInviteFriendList::New() const {
  return new GMInviteFriendList;
}

void GMInviteFriendList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMInviteFriendList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .GMTeamPerson data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMInviteFriendList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated .GMTeamPerson data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMInviteFriendList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated .GMTeamPerson data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMInviteFriendList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .GMTeamPerson data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMInviteFriendList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMInviteFriendList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMInviteFriendList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMInviteFriendList::MergeFrom(const GMInviteFriendList& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMInviteFriendList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMInviteFriendList::CopyFrom(const GMInviteFriendList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMInviteFriendList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GMInviteFriendList::Swap(GMInviteFriendList* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMInviteFriendList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMInviteFriendList_descriptor_;
  metadata.reflection = GMInviteFriendList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMInviteRoleInTeam::kInviteroleidFieldNumber;
const int GMInviteRoleInTeam::kInviterolenameFieldNumber;
const int GMInviteRoleInTeam::kBeinvitedroleidFieldNumber;
const int GMInviteRoleInTeam::kBeinvitedrolenameFieldNumber;
const int GMInviteRoleInTeam::kTeamidFieldNumber;
const int GMInviteRoleInTeam::kTeamtypeFieldNumber;
const int GMInviteRoleInTeam::kFbidFieldNumber;
const int GMInviteRoleInTeam::kTimemarkFieldNumber;
#endif  // !_MSC_VER

GMInviteRoleInTeam::GMInviteRoleInTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMInviteRoleInTeam::InitAsDefaultInstance() {
}

GMInviteRoleInTeam::GMInviteRoleInTeam(const GMInviteRoleInTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMInviteRoleInTeam::SharedCtor() {
  _cached_size_ = 0;
  inviteroleid_ = 0;
  inviterolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  beinvitedroleid_ = 0;
  beinvitedrolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  teamid_ = 0;
  teamtype_ = 0;
  fbid_ = 0;
  timemark_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMInviteRoleInTeam::~GMInviteRoleInTeam() {
  SharedDtor();
}

void GMInviteRoleInTeam::SharedDtor() {
  if (inviterolename_ != &::google::protobuf::internal::kEmptyString) {
    delete inviterolename_;
  }
  if (beinvitedrolename_ != &::google::protobuf::internal::kEmptyString) {
    delete beinvitedrolename_;
  }
  if (this != default_instance_) {
  }
}

void GMInviteRoleInTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMInviteRoleInTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMInviteRoleInTeam_descriptor_;
}

const GMInviteRoleInTeam& GMInviteRoleInTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2etxt();
  return *default_instance_;
}

GMInviteRoleInTeam* GMInviteRoleInTeam::default_instance_ = NULL;

GMInviteRoleInTeam* GMInviteRoleInTeam::New() const {
  return new GMInviteRoleInTeam;
}

void GMInviteRoleInTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    inviteroleid_ = 0;
    if (has_inviterolename()) {
      if (inviterolename_ != &::google::protobuf::internal::kEmptyString) {
        inviterolename_->clear();
      }
    }
    beinvitedroleid_ = 0;
    if (has_beinvitedrolename()) {
      if (beinvitedrolename_ != &::google::protobuf::internal::kEmptyString) {
        beinvitedrolename_->clear();
      }
    }
    teamid_ = 0;
    teamtype_ = 0;
    fbid_ = 0;
    timemark_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMInviteRoleInTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 inviteroleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inviteroleid_)));
          set_has_inviteroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_inviterolename;
        break;
      }

      // optional string inviterolename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inviterolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inviterolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inviterolename().data(), this->inviterolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_beinvitedroleid;
        break;
      }

      // required int32 beinvitedroleid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beinvitedroleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beinvitedroleid_)));
          set_has_beinvitedroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_beinvitedrolename;
        break;
      }

      // optional string beinvitedrolename = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beinvitedrolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beinvitedrolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beinvitedrolename().data(), this->beinvitedrolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_teamid;
        break;
      }

      // required int32 teamid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_teamtype;
        break;
      }

      // required int32 teamtype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamtype_)));
          set_has_teamtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fbid;
        break;
      }

      // required int32 fbid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fbid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fbid_)));
          set_has_fbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_timemark;
        break;
      }

      // optional int32 timemark = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timemark_)));
          set_has_timemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMInviteRoleInTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 inviteroleid = 1;
  if (has_inviteroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->inviteroleid(), output);
  }

  // optional string inviterolename = 2;
  if (has_inviterolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inviterolename().data(), this->inviterolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->inviterolename(), output);
  }

  // required int32 beinvitedroleid = 3;
  if (has_beinvitedroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->beinvitedroleid(), output);
  }

  // optional string beinvitedrolename = 4;
  if (has_beinvitedrolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beinvitedrolename().data(), this->beinvitedrolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->beinvitedrolename(), output);
  }

  // required int32 teamid = 5;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->teamid(), output);
  }

  // required int32 teamtype = 6;
  if (has_teamtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->teamtype(), output);
  }

  // required int32 fbid = 7;
  if (has_fbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fbid(), output);
  }

  // optional int32 timemark = 10;
  if (has_timemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->timemark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMInviteRoleInTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 inviteroleid = 1;
  if (has_inviteroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->inviteroleid(), target);
  }

  // optional string inviterolename = 2;
  if (has_inviterolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inviterolename().data(), this->inviterolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->inviterolename(), target);
  }

  // required int32 beinvitedroleid = 3;
  if (has_beinvitedroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->beinvitedroleid(), target);
  }

  // optional string beinvitedrolename = 4;
  if (has_beinvitedrolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beinvitedrolename().data(), this->beinvitedrolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->beinvitedrolename(), target);
  }

  // required int32 teamid = 5;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->teamid(), target);
  }

  // required int32 teamtype = 6;
  if (has_teamtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->teamtype(), target);
  }

  // required int32 fbid = 7;
  if (has_fbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fbid(), target);
  }

  // optional int32 timemark = 10;
  if (has_timemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->timemark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMInviteRoleInTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 inviteroleid = 1;
    if (has_inviteroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inviteroleid());
    }

    // optional string inviterolename = 2;
    if (has_inviterolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inviterolename());
    }

    // required int32 beinvitedroleid = 3;
    if (has_beinvitedroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beinvitedroleid());
    }

    // optional string beinvitedrolename = 4;
    if (has_beinvitedrolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beinvitedrolename());
    }

    // required int32 teamid = 5;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

    // required int32 teamtype = 6;
    if (has_teamtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamtype());
    }

    // required int32 fbid = 7;
    if (has_fbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fbid());
    }

    // optional int32 timemark = 10;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timemark());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMInviteRoleInTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMInviteRoleInTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMInviteRoleInTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMInviteRoleInTeam::MergeFrom(const GMInviteRoleInTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inviteroleid()) {
      set_inviteroleid(from.inviteroleid());
    }
    if (from.has_inviterolename()) {
      set_inviterolename(from.inviterolename());
    }
    if (from.has_beinvitedroleid()) {
      set_beinvitedroleid(from.beinvitedroleid());
    }
    if (from.has_beinvitedrolename()) {
      set_beinvitedrolename(from.beinvitedrolename());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_teamtype()) {
      set_teamtype(from.teamtype());
    }
    if (from.has_fbid()) {
      set_fbid(from.fbid());
    }
    if (from.has_timemark()) {
      set_timemark(from.timemark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMInviteRoleInTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMInviteRoleInTeam::CopyFrom(const GMInviteRoleInTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMInviteRoleInTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000075) != 0x00000075) return false;

  return true;
}

void GMInviteRoleInTeam::Swap(GMInviteRoleInTeam* other) {
  if (other != this) {
    std::swap(inviteroleid_, other->inviteroleid_);
    std::swap(inviterolename_, other->inviterolename_);
    std::swap(beinvitedroleid_, other->beinvitedroleid_);
    std::swap(beinvitedrolename_, other->beinvitedrolename_);
    std::swap(teamid_, other->teamid_);
    std::swap(teamtype_, other->teamtype_);
    std::swap(fbid_, other->fbid_);
    std::swap(timemark_, other->timemark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMInviteRoleInTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMInviteRoleInTeam_descriptor_;
  metadata.reflection = GMInviteRoleInTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMInviteRoleInTeamResult::kMResultFieldNumber;
const int GMInviteRoleInTeamResult::kBeinvitedroleidFieldNumber;
const int GMInviteRoleInTeamResult::kBeinvitedrolenameFieldNumber;
const int GMInviteRoleInTeamResult::kTeamidFieldNumber;
#endif  // !_MSC_VER

GMInviteRoleInTeamResult::GMInviteRoleInTeamResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMInviteRoleInTeamResult::InitAsDefaultInstance() {
}

GMInviteRoleInTeamResult::GMInviteRoleInTeamResult(const GMInviteRoleInTeamResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMInviteRoleInTeamResult::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  beinvitedroleid_ = 0;
  beinvitedrolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMInviteRoleInTeamResult::~GMInviteRoleInTeamResult() {
  SharedDtor();
}

void GMInviteRoleInTeamResult::SharedDtor() {
  if (beinvitedrolename_ != &::google::protobuf::internal::kEmptyString) {
    delete beinvitedrolename_;
  }
  if (this != default_instance_) {
  }
}

void GMInviteRoleInTeamResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMInviteRoleInTeamResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMInviteRoleInTeamResult_descriptor_;
}

const GMInviteRoleInTeamResult& GMInviteRoleInTeamResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2etxt();
  return *default_instance_;
}

GMInviteRoleInTeamResult* GMInviteRoleInTeamResult::default_instance_ = NULL;

GMInviteRoleInTeamResult* GMInviteRoleInTeamResult::New() const {
  return new GMInviteRoleInTeamResult;
}

void GMInviteRoleInTeamResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    beinvitedroleid_ = 0;
    if (has_beinvitedrolename()) {
      if (beinvitedrolename_ != &::google::protobuf::internal::kEmptyString) {
        beinvitedrolename_->clear();
      }
    }
    teamid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMInviteRoleInTeamResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_beinvitedroleid;
        break;
      }

      // required int32 beinvitedroleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beinvitedroleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beinvitedroleid_)));
          set_has_beinvitedroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_beinvitedrolename;
        break;
      }

      // optional string beinvitedrolename = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beinvitedrolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beinvitedrolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beinvitedrolename().data(), this->beinvitedrolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_teamid;
        break;
      }

      // required int32 teamid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMInviteRoleInTeamResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // required int32 beinvitedroleid = 2;
  if (has_beinvitedroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->beinvitedroleid(), output);
  }

  // optional string beinvitedrolename = 3;
  if (has_beinvitedrolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beinvitedrolename().data(), this->beinvitedrolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->beinvitedrolename(), output);
  }

  // required int32 teamid = 4;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMInviteRoleInTeamResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // required int32 beinvitedroleid = 2;
  if (has_beinvitedroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->beinvitedroleid(), target);
  }

  // optional string beinvitedrolename = 3;
  if (has_beinvitedrolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beinvitedrolename().data(), this->beinvitedrolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->beinvitedrolename(), target);
  }

  // required int32 teamid = 4;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMInviteRoleInTeamResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // required int32 beinvitedroleid = 2;
    if (has_beinvitedroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beinvitedroleid());
    }

    // optional string beinvitedrolename = 3;
    if (has_beinvitedrolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beinvitedrolename());
    }

    // required int32 teamid = 4;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMInviteRoleInTeamResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMInviteRoleInTeamResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMInviteRoleInTeamResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMInviteRoleInTeamResult::MergeFrom(const GMInviteRoleInTeamResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_beinvitedroleid()) {
      set_beinvitedroleid(from.beinvitedroleid());
    }
    if (from.has_beinvitedrolename()) {
      set_beinvitedrolename(from.beinvitedrolename());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMInviteRoleInTeamResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMInviteRoleInTeamResult::CopyFrom(const GMInviteRoleInTeamResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMInviteRoleInTeamResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void GMInviteRoleInTeamResult::Swap(GMInviteRoleInTeamResult* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(beinvitedroleid_, other->beinvitedroleid_);
    std::swap(beinvitedrolename_, other->beinvitedrolename_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMInviteRoleInTeamResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMInviteRoleInTeamResult_descriptor_;
  metadata.reflection = GMInviteRoleInTeamResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMAnswerRoleInTeam::kAnswerresultFieldNumber;
const int GMAnswerRoleInTeam::kInviteroleidFieldNumber;
const int GMAnswerRoleInTeam::kInviterolenameFieldNumber;
const int GMAnswerRoleInTeam::kBeinvitedroleidFieldNumber;
const int GMAnswerRoleInTeam::kBeinvitedrolenameFieldNumber;
const int GMAnswerRoleInTeam::kTeamidFieldNumber;
const int GMAnswerRoleInTeam::kTeamtypeFieldNumber;
#endif  // !_MSC_VER

GMAnswerRoleInTeam::GMAnswerRoleInTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAnswerRoleInTeam::InitAsDefaultInstance() {
}

GMAnswerRoleInTeam::GMAnswerRoleInTeam(const GMAnswerRoleInTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAnswerRoleInTeam::SharedCtor() {
  _cached_size_ = 0;
  answerresult_ = 0;
  inviteroleid_ = 0;
  inviterolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  beinvitedroleid_ = 0;
  beinvitedrolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  teamid_ = 0;
  teamtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAnswerRoleInTeam::~GMAnswerRoleInTeam() {
  SharedDtor();
}

void GMAnswerRoleInTeam::SharedDtor() {
  if (inviterolename_ != &::google::protobuf::internal::kEmptyString) {
    delete inviterolename_;
  }
  if (beinvitedrolename_ != &::google::protobuf::internal::kEmptyString) {
    delete beinvitedrolename_;
  }
  if (this != default_instance_) {
  }
}

void GMAnswerRoleInTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAnswerRoleInTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAnswerRoleInTeam_descriptor_;
}

const GMAnswerRoleInTeam& GMAnswerRoleInTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2etxt();
  return *default_instance_;
}

GMAnswerRoleInTeam* GMAnswerRoleInTeam::default_instance_ = NULL;

GMAnswerRoleInTeam* GMAnswerRoleInTeam::New() const {
  return new GMAnswerRoleInTeam;
}

void GMAnswerRoleInTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    answerresult_ = 0;
    inviteroleid_ = 0;
    if (has_inviterolename()) {
      if (inviterolename_ != &::google::protobuf::internal::kEmptyString) {
        inviterolename_->clear();
      }
    }
    beinvitedroleid_ = 0;
    if (has_beinvitedrolename()) {
      if (beinvitedrolename_ != &::google::protobuf::internal::kEmptyString) {
        beinvitedrolename_->clear();
      }
    }
    teamid_ = 0;
    teamtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAnswerRoleInTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 answerresult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &answerresult_)));
          set_has_answerresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_inviteroleid;
        break;
      }

      // required int32 inviteroleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviteroleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inviteroleid_)));
          set_has_inviteroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_inviterolename;
        break;
      }

      // optional string inviterolename = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inviterolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inviterolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inviterolename().data(), this->inviterolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_beinvitedroleid;
        break;
      }

      // required int32 beinvitedroleid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beinvitedroleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beinvitedroleid_)));
          set_has_beinvitedroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_beinvitedrolename;
        break;
      }

      // optional string beinvitedrolename = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beinvitedrolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beinvitedrolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beinvitedrolename().data(), this->beinvitedrolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_teamid;
        break;
      }

      // required int32 teamid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_teamtype;
        break;
      }

      // required int32 teamtype = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamtype_)));
          set_has_teamtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMAnswerRoleInTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 answerresult = 1;
  if (has_answerresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->answerresult(), output);
  }

  // required int32 inviteroleid = 2;
  if (has_inviteroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->inviteroleid(), output);
  }

  // optional string inviterolename = 3;
  if (has_inviterolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inviterolename().data(), this->inviterolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->inviterolename(), output);
  }

  // required int32 beinvitedroleid = 4;
  if (has_beinvitedroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->beinvitedroleid(), output);
  }

  // optional string beinvitedrolename = 5;
  if (has_beinvitedrolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beinvitedrolename().data(), this->beinvitedrolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->beinvitedrolename(), output);
  }

  // required int32 teamid = 6;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->teamid(), output);
  }

  // required int32 teamtype = 7;
  if (has_teamtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->teamtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAnswerRoleInTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 answerresult = 1;
  if (has_answerresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->answerresult(), target);
  }

  // required int32 inviteroleid = 2;
  if (has_inviteroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->inviteroleid(), target);
  }

  // optional string inviterolename = 3;
  if (has_inviterolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inviterolename().data(), this->inviterolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->inviterolename(), target);
  }

  // required int32 beinvitedroleid = 4;
  if (has_beinvitedroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->beinvitedroleid(), target);
  }

  // optional string beinvitedrolename = 5;
  if (has_beinvitedrolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beinvitedrolename().data(), this->beinvitedrolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->beinvitedrolename(), target);
  }

  // required int32 teamid = 6;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->teamid(), target);
  }

  // required int32 teamtype = 7;
  if (has_teamtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->teamtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAnswerRoleInTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 answerresult = 1;
    if (has_answerresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->answerresult());
    }

    // required int32 inviteroleid = 2;
    if (has_inviteroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inviteroleid());
    }

    // optional string inviterolename = 3;
    if (has_inviterolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inviterolename());
    }

    // required int32 beinvitedroleid = 4;
    if (has_beinvitedroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beinvitedroleid());
    }

    // optional string beinvitedrolename = 5;
    if (has_beinvitedrolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beinvitedrolename());
    }

    // required int32 teamid = 6;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

    // required int32 teamtype = 7;
    if (has_teamtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAnswerRoleInTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAnswerRoleInTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAnswerRoleInTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAnswerRoleInTeam::MergeFrom(const GMAnswerRoleInTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_answerresult()) {
      set_answerresult(from.answerresult());
    }
    if (from.has_inviteroleid()) {
      set_inviteroleid(from.inviteroleid());
    }
    if (from.has_inviterolename()) {
      set_inviterolename(from.inviterolename());
    }
    if (from.has_beinvitedroleid()) {
      set_beinvitedroleid(from.beinvitedroleid());
    }
    if (from.has_beinvitedrolename()) {
      set_beinvitedrolename(from.beinvitedrolename());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_teamtype()) {
      set_teamtype(from.teamtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAnswerRoleInTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAnswerRoleInTeam::CopyFrom(const GMAnswerRoleInTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAnswerRoleInTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000006b) != 0x0000006b) return false;

  return true;
}

void GMAnswerRoleInTeam::Swap(GMAnswerRoleInTeam* other) {
  if (other != this) {
    std::swap(answerresult_, other->answerresult_);
    std::swap(inviteroleid_, other->inviteroleid_);
    std::swap(inviterolename_, other->inviterolename_);
    std::swap(beinvitedroleid_, other->beinvitedroleid_);
    std::swap(beinvitedrolename_, other->beinvitedrolename_);
    std::swap(teamid_, other->teamid_);
    std::swap(teamtype_, other->teamtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAnswerRoleInTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAnswerRoleInTeam_descriptor_;
  metadata.reflection = GMAnswerRoleInTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMChatRoleInTeam::kAnswerresultFieldNumber;
const int GMChatRoleInTeam::kRoleidFieldNumber;
const int GMChatRoleInTeam::kTeamidFieldNumber;
#endif  // !_MSC_VER

GMChatRoleInTeam::GMChatRoleInTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMChatRoleInTeam::InitAsDefaultInstance() {
}

GMChatRoleInTeam::GMChatRoleInTeam(const GMChatRoleInTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMChatRoleInTeam::SharedCtor() {
  _cached_size_ = 0;
  answerresult_ = 0;
  roleid_ = 0;
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMChatRoleInTeam::~GMChatRoleInTeam() {
  SharedDtor();
}

void GMChatRoleInTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMChatRoleInTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMChatRoleInTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMChatRoleInTeam_descriptor_;
}

const GMChatRoleInTeam& GMChatRoleInTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2etxt();
  return *default_instance_;
}

GMChatRoleInTeam* GMChatRoleInTeam::default_instance_ = NULL;

GMChatRoleInTeam* GMChatRoleInTeam::New() const {
  return new GMChatRoleInTeam;
}

void GMChatRoleInTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    answerresult_ = 0;
    roleid_ = 0;
    teamid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMChatRoleInTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 answerresult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &answerresult_)));
          set_has_answerresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_roleid;
        break;
      }

      // required int32 roleid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_teamid;
        break;
      }

      // optional int32 teamid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMChatRoleInTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 answerresult = 1;
  if (has_answerresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->answerresult(), output);
  }

  // required int32 roleid = 6;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->roleid(), output);
  }

  // optional int32 teamid = 7;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMChatRoleInTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 answerresult = 1;
  if (has_answerresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->answerresult(), target);
  }

  // required int32 roleid = 6;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->roleid(), target);
  }

  // optional int32 teamid = 7;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMChatRoleInTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 answerresult = 1;
    if (has_answerresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->answerresult());
    }

    // required int32 roleid = 6;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 teamid = 7;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMChatRoleInTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMChatRoleInTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMChatRoleInTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMChatRoleInTeam::MergeFrom(const GMChatRoleInTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_answerresult()) {
      set_answerresult(from.answerresult());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMChatRoleInTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMChatRoleInTeam::CopyFrom(const GMChatRoleInTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMChatRoleInTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GMChatRoleInTeam::Swap(GMChatRoleInTeam* other) {
  if (other != this) {
    std::swap(answerresult_, other->answerresult_);
    std::swap(roleid_, other->roleid_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMChatRoleInTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMChatRoleInTeam_descriptor_;
  metadata.reflection = GMChatRoleInTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMAnswerRoleInTeamResult::kMResultFieldNumber;
const int GMAnswerRoleInTeamResult::kTeamidFieldNumber;
const int GMAnswerRoleInTeamResult::kFbidFieldNumber;
const int GMAnswerRoleInTeamResult::kTeamtypeFieldNumber;
#endif  // !_MSC_VER

GMAnswerRoleInTeamResult::GMAnswerRoleInTeamResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAnswerRoleInTeamResult::InitAsDefaultInstance() {
}

GMAnswerRoleInTeamResult::GMAnswerRoleInTeamResult(const GMAnswerRoleInTeamResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAnswerRoleInTeamResult::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  teamid_ = 0;
  fbid_ = 0;
  teamtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAnswerRoleInTeamResult::~GMAnswerRoleInTeamResult() {
  SharedDtor();
}

void GMAnswerRoleInTeamResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMAnswerRoleInTeamResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAnswerRoleInTeamResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAnswerRoleInTeamResult_descriptor_;
}

const GMAnswerRoleInTeamResult& GMAnswerRoleInTeamResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2etxt();
  return *default_instance_;
}

GMAnswerRoleInTeamResult* GMAnswerRoleInTeamResult::default_instance_ = NULL;

GMAnswerRoleInTeamResult* GMAnswerRoleInTeamResult::New() const {
  return new GMAnswerRoleInTeamResult;
}

void GMAnswerRoleInTeamResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    teamid_ = 0;
    fbid_ = 0;
    teamtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAnswerRoleInTeamResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_teamid;
        break;
      }

      // optional int32 teamid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fbid;
        break;
      }

      // optional int32 fbid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fbid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fbid_)));
          set_has_fbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_teamtype;
        break;
      }

      // optional int32 teamtype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamtype_)));
          set_has_teamtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMAnswerRoleInTeamResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // optional int32 teamid = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->teamid(), output);
  }

  // optional int32 fbid = 3;
  if (has_fbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fbid(), output);
  }

  // optional int32 teamtype = 4;
  if (has_teamtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->teamtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAnswerRoleInTeamResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // optional int32 teamid = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->teamid(), target);
  }

  // optional int32 fbid = 3;
  if (has_fbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fbid(), target);
  }

  // optional int32 teamtype = 4;
  if (has_teamtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->teamtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAnswerRoleInTeamResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // optional int32 teamid = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

    // optional int32 fbid = 3;
    if (has_fbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fbid());
    }

    // optional int32 teamtype = 4;
    if (has_teamtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAnswerRoleInTeamResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAnswerRoleInTeamResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAnswerRoleInTeamResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAnswerRoleInTeamResult::MergeFrom(const GMAnswerRoleInTeamResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_fbid()) {
      set_fbid(from.fbid());
    }
    if (from.has_teamtype()) {
      set_teamtype(from.teamtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAnswerRoleInTeamResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAnswerRoleInTeamResult::CopyFrom(const GMAnswerRoleInTeamResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAnswerRoleInTeamResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMAnswerRoleInTeamResult::Swap(GMAnswerRoleInTeamResult* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(teamid_, other->teamid_);
    std::swap(fbid_, other->fbid_);
    std::swap(teamtype_, other->teamtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAnswerRoleInTeamResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAnswerRoleInTeamResult_descriptor_;
  metadata.reflection = GMAnswerRoleInTeamResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMRoleTeamNotify::kMResultFieldNumber;
const int GMRoleTeamNotify::kMTeamleaderFieldNumber;
const int GMRoleTeamNotify::kMPersonFieldNumber;
#endif  // !_MSC_VER

GMRoleTeamNotify::GMRoleTeamNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMRoleTeamNotify::InitAsDefaultInstance() {
}

GMRoleTeamNotify::GMRoleTeamNotify(const GMRoleTeamNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMRoleTeamNotify::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  m_teamleader_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMRoleTeamNotify::~GMRoleTeamNotify() {
  SharedDtor();
}

void GMRoleTeamNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMRoleTeamNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMRoleTeamNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMRoleTeamNotify_descriptor_;
}

const GMRoleTeamNotify& GMRoleTeamNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2etxt();
  return *default_instance_;
}

GMRoleTeamNotify* GMRoleTeamNotify::default_instance_ = NULL;

GMRoleTeamNotify* GMRoleTeamNotify::New() const {
  return new GMRoleTeamNotify;
}

void GMRoleTeamNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    m_teamleader_ = 0;
  }
  m_person_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMRoleTeamNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_teamleader;
        break;
      }

      // optional int32 m_teamleader = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_teamleader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_teamleader_)));
          set_has_m_teamleader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_person;
        break;
      }

      // repeated .GMTeamPerson m_person = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_person:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_person()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_person;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMRoleTeamNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // optional int32 m_teamleader = 2;
  if (has_m_teamleader()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_teamleader(), output);
  }

  // repeated .GMTeamPerson m_person = 3;
  for (int i = 0; i < this->m_person_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_person(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMRoleTeamNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // optional int32 m_teamleader = 2;
  if (has_m_teamleader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_teamleader(), target);
  }

  // repeated .GMTeamPerson m_person = 3;
  for (int i = 0; i < this->m_person_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_person(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMRoleTeamNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // optional int32 m_teamleader = 2;
    if (has_m_teamleader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_teamleader());
    }

  }
  // repeated .GMTeamPerson m_person = 3;
  total_size += 1 * this->m_person_size();
  for (int i = 0; i < this->m_person_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_person(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMRoleTeamNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMRoleTeamNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMRoleTeamNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMRoleTeamNotify::MergeFrom(const GMRoleTeamNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_person_.MergeFrom(from.m_person_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_teamleader()) {
      set_m_teamleader(from.m_teamleader());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMRoleTeamNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMRoleTeamNotify::CopyFrom(const GMRoleTeamNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMRoleTeamNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_person_size(); i++) {
    if (!this->m_person(i).IsInitialized()) return false;
  }
  return true;
}

void GMRoleTeamNotify::Swap(GMRoleTeamNotify* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(m_teamleader_, other->m_teamleader_);
    m_person_.Swap(&other->m_person_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMRoleTeamNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMRoleTeamNotify_descriptor_;
  metadata.reflection = GMRoleTeamNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMKickoutTeam::kMOutroleidFieldNumber;
const int GMKickoutTeam::kMTeamidFieldNumber;
#endif  // !_MSC_VER

GMKickoutTeam::GMKickoutTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMKickoutTeam::InitAsDefaultInstance() {
}

GMKickoutTeam::GMKickoutTeam(const GMKickoutTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMKickoutTeam::SharedCtor() {
  _cached_size_ = 0;
  m_outroleid_ = 0;
  m_teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMKickoutTeam::~GMKickoutTeam() {
  SharedDtor();
}

void GMKickoutTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMKickoutTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMKickoutTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMKickoutTeam_descriptor_;
}

const GMKickoutTeam& GMKickoutTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2etxt();
  return *default_instance_;
}

GMKickoutTeam* GMKickoutTeam::default_instance_ = NULL;

GMKickoutTeam* GMKickoutTeam::New() const {
  return new GMKickoutTeam;
}

void GMKickoutTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_outroleid_ = 0;
    m_teamid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMKickoutTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_outroleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_outroleid_)));
          set_has_m_outroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_teamid;
        break;
      }

      // required int32 m_teamid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_teamid_)));
          set_has_m_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMKickoutTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_outroleid = 1;
  if (has_m_outroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_outroleid(), output);
  }

  // required int32 m_teamid = 2;
  if (has_m_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMKickoutTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_outroleid = 1;
  if (has_m_outroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_outroleid(), target);
  }

  // required int32 m_teamid = 2;
  if (has_m_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMKickoutTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_outroleid = 1;
    if (has_m_outroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_outroleid());
    }

    // required int32 m_teamid = 2;
    if (has_m_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMKickoutTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMKickoutTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMKickoutTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMKickoutTeam::MergeFrom(const GMKickoutTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_outroleid()) {
      set_m_outroleid(from.m_outroleid());
    }
    if (from.has_m_teamid()) {
      set_m_teamid(from.m_teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMKickoutTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMKickoutTeam::CopyFrom(const GMKickoutTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMKickoutTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GMKickoutTeam::Swap(GMKickoutTeam* other) {
  if (other != this) {
    std::swap(m_outroleid_, other->m_outroleid_);
    std::swap(m_teamid_, other->m_teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMKickoutTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMKickoutTeam_descriptor_;
  metadata.reflection = GMKickoutTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMKickoutTeamResult::kMResultFieldNumber;
const int GMKickoutTeamResult::kMOutroleidFieldNumber;
#endif  // !_MSC_VER

GMKickoutTeamResult::GMKickoutTeamResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMKickoutTeamResult::InitAsDefaultInstance() {
}

GMKickoutTeamResult::GMKickoutTeamResult(const GMKickoutTeamResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMKickoutTeamResult::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  m_outroleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMKickoutTeamResult::~GMKickoutTeamResult() {
  SharedDtor();
}

void GMKickoutTeamResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMKickoutTeamResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMKickoutTeamResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMKickoutTeamResult_descriptor_;
}

const GMKickoutTeamResult& GMKickoutTeamResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2etxt();
  return *default_instance_;
}

GMKickoutTeamResult* GMKickoutTeamResult::default_instance_ = NULL;

GMKickoutTeamResult* GMKickoutTeamResult::New() const {
  return new GMKickoutTeamResult;
}

void GMKickoutTeamResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    m_outroleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMKickoutTeamResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_outroleid;
        break;
      }

      // required int32 m_outroleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_outroleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_outroleid_)));
          set_has_m_outroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMKickoutTeamResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // required int32 m_outroleid = 2;
  if (has_m_outroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_outroleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMKickoutTeamResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // required int32 m_outroleid = 2;
  if (has_m_outroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_outroleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMKickoutTeamResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // required int32 m_outroleid = 2;
    if (has_m_outroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_outroleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMKickoutTeamResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMKickoutTeamResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMKickoutTeamResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMKickoutTeamResult::MergeFrom(const GMKickoutTeamResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_outroleid()) {
      set_m_outroleid(from.m_outroleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMKickoutTeamResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMKickoutTeamResult::CopyFrom(const GMKickoutTeamResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMKickoutTeamResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GMKickoutTeamResult::Swap(GMKickoutTeamResult* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(m_outroleid_, other->m_outroleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMKickoutTeamResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMKickoutTeamResult_descriptor_;
  metadata.reflection = GMKickoutTeamResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMLeaveTeam::kMTeamidFieldNumber;
#endif  // !_MSC_VER

GMLeaveTeam::GMLeaveTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMLeaveTeam::InitAsDefaultInstance() {
}

GMLeaveTeam::GMLeaveTeam(const GMLeaveTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMLeaveTeam::SharedCtor() {
  _cached_size_ = 0;
  m_teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMLeaveTeam::~GMLeaveTeam() {
  SharedDtor();
}

void GMLeaveTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMLeaveTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMLeaveTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMLeaveTeam_descriptor_;
}

const GMLeaveTeam& GMLeaveTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2etxt();
  return *default_instance_;
}

GMLeaveTeam* GMLeaveTeam::default_instance_ = NULL;

GMLeaveTeam* GMLeaveTeam::New() const {
  return new GMLeaveTeam;
}

void GMLeaveTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_teamid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMLeaveTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_teamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_teamid_)));
          set_has_m_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMLeaveTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_teamid = 1;
  if (has_m_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMLeaveTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_teamid = 1;
  if (has_m_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMLeaveTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_teamid = 1;
    if (has_m_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMLeaveTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMLeaveTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMLeaveTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMLeaveTeam::MergeFrom(const GMLeaveTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_teamid()) {
      set_m_teamid(from.m_teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMLeaveTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMLeaveTeam::CopyFrom(const GMLeaveTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMLeaveTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMLeaveTeam::Swap(GMLeaveTeam* other) {
  if (other != this) {
    std::swap(m_teamid_, other->m_teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMLeaveTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMLeaveTeam_descriptor_;
  metadata.reflection = GMLeaveTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMLeaveTeamResult::kMResultFieldNumber;
#endif  // !_MSC_VER

GMLeaveTeamResult::GMLeaveTeamResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMLeaveTeamResult::InitAsDefaultInstance() {
}

GMLeaveTeamResult::GMLeaveTeamResult(const GMLeaveTeamResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMLeaveTeamResult::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMLeaveTeamResult::~GMLeaveTeamResult() {
  SharedDtor();
}

void GMLeaveTeamResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMLeaveTeamResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMLeaveTeamResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMLeaveTeamResult_descriptor_;
}

const GMLeaveTeamResult& GMLeaveTeamResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2etxt();
  return *default_instance_;
}

GMLeaveTeamResult* GMLeaveTeamResult::default_instance_ = NULL;

GMLeaveTeamResult* GMLeaveTeamResult::New() const {
  return new GMLeaveTeamResult;
}

void GMLeaveTeamResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMLeaveTeamResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMLeaveTeamResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMLeaveTeamResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMLeaveTeamResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMLeaveTeamResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMLeaveTeamResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMLeaveTeamResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMLeaveTeamResult::MergeFrom(const GMLeaveTeamResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMLeaveTeamResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMLeaveTeamResult::CopyFrom(const GMLeaveTeamResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMLeaveTeamResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMLeaveTeamResult::Swap(GMLeaveTeamResult* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMLeaveTeamResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMLeaveTeamResult_descriptor_;
  metadata.reflection = GMLeaveTeamResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_NotifyActiveOver::kMNFbTypeIdFieldNumber;
#endif  // !_MSC_VER

GM_NotifyActiveOver::GM_NotifyActiveOver()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_NotifyActiveOver::InitAsDefaultInstance() {
}

GM_NotifyActiveOver::GM_NotifyActiveOver(const GM_NotifyActiveOver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_NotifyActiveOver::SharedCtor() {
  _cached_size_ = 0;
  m_nfbtypeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_NotifyActiveOver::~GM_NotifyActiveOver() {
  SharedDtor();
}

void GM_NotifyActiveOver::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_NotifyActiveOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_NotifyActiveOver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_NotifyActiveOver_descriptor_;
}

const GM_NotifyActiveOver& GM_NotifyActiveOver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2etxt();
  return *default_instance_;
}

GM_NotifyActiveOver* GM_NotifyActiveOver::default_instance_ = NULL;

GM_NotifyActiveOver* GM_NotifyActiveOver::New() const {
  return new GM_NotifyActiveOver;
}

void GM_NotifyActiveOver::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nfbtypeid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_NotifyActiveOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nFbTypeId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nfbtypeid_)));
          set_has_m_nfbtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_NotifyActiveOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nFbTypeId = 4;
  if (has_m_nfbtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_nfbtypeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_NotifyActiveOver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nFbTypeId = 4;
  if (has_m_nfbtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_nfbtypeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_NotifyActiveOver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nFbTypeId = 4;
    if (has_m_nfbtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nfbtypeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_NotifyActiveOver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_NotifyActiveOver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_NotifyActiveOver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_NotifyActiveOver::MergeFrom(const GM_NotifyActiveOver& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nfbtypeid()) {
      set_m_nfbtypeid(from.m_nfbtypeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_NotifyActiveOver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_NotifyActiveOver::CopyFrom(const GM_NotifyActiveOver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_NotifyActiveOver::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_NotifyActiveOver::Swap(GM_NotifyActiveOver* other) {
  if (other != this) {
    std::swap(m_nfbtypeid_, other->m_nfbtypeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_NotifyActiveOver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_NotifyActiveOver_descriptor_;
  metadata.reflection = GM_NotifyActiveOver_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_NotifyInviteData::kCountFieldNumber;
const int GM_NotifyInviteData::kMdataFieldNumber;
#endif  // !_MSC_VER

GM_NotifyInviteData::GM_NotifyInviteData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_NotifyInviteData::InitAsDefaultInstance() {
}

GM_NotifyInviteData::GM_NotifyInviteData(const GM_NotifyInviteData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_NotifyInviteData::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_NotifyInviteData::~GM_NotifyInviteData() {
  SharedDtor();
}

void GM_NotifyInviteData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_NotifyInviteData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_NotifyInviteData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_NotifyInviteData_descriptor_;
}

const GM_NotifyInviteData& GM_NotifyInviteData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2etxt();
  return *default_instance_;
}

GM_NotifyInviteData* GM_NotifyInviteData::default_instance_ = NULL;

GM_NotifyInviteData* GM_NotifyInviteData::New() const {
  return new GM_NotifyInviteData;
}

void GM_NotifyInviteData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  mdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_NotifyInviteData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mdata;
        break;
      }

      // repeated .GMInviteRoleInTeam mdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mdata;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_NotifyInviteData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated .GMInviteRoleInTeam mdata = 2;
  for (int i = 0; i < this->mdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_NotifyInviteData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated .GMInviteRoleInTeam mdata = 2;
  for (int i = 0; i < this->mdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_NotifyInviteData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .GMInviteRoleInTeam mdata = 2;
  total_size += 1 * this->mdata_size();
  for (int i = 0; i < this->mdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_NotifyInviteData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_NotifyInviteData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_NotifyInviteData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_NotifyInviteData::MergeFrom(const GM_NotifyInviteData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mdata_.MergeFrom(from.mdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_NotifyInviteData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_NotifyInviteData::CopyFrom(const GM_NotifyInviteData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_NotifyInviteData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < mdata_size(); i++) {
    if (!this->mdata(i).IsInitialized()) return false;
  }
  return true;
}

void GM_NotifyInviteData::Swap(GM_NotifyInviteData* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    mdata_.Swap(&other->mdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_NotifyInviteData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_NotifyInviteData_descriptor_;
  metadata.reflection = GM_NotifyInviteData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
