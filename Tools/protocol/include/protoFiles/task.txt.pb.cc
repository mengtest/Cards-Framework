// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "task.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GMTaskCondition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMTaskCondition_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMTaskFinishObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMTaskFinishObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMTaskCollect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMTaskCollect_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Task_Finsh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Task_Finsh_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_TaskResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_TaskResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_CommitTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_CommitTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_AcceptTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_AcceptTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMUpdateTaskCondition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMUpdateTaskCondition_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_TalkEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_TalkEvent_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_task_2etxt() {
  protobuf_AddDesc_task_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "task.txt");
  GOOGLE_CHECK(file != NULL);
  GMTaskCondition_descriptor_ = file->message_type(0);
  static const int GMTaskCondition_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTaskCondition, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTaskCondition, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTaskCondition, m_finishnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTaskCondition, m_neednum_),
  };
  GMTaskCondition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMTaskCondition_descriptor_,
      GMTaskCondition::default_instance_,
      GMTaskCondition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTaskCondition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTaskCondition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMTaskCondition));
  GMTaskFinishObject_descriptor_ = file->message_type(1);
  static const int GMTaskFinishObject_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTaskFinishObject, m_objecttypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTaskFinishObject, m_objectnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTaskFinishObject, m_objecrank_),
  };
  GMTaskFinishObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMTaskFinishObject_descriptor_,
      GMTaskFinishObject::default_instance_,
      GMTaskFinishObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTaskFinishObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTaskFinishObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMTaskFinishObject));
  GMTask_descriptor_ = file->message_type(2);
  static const int GMTask_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTask, m_playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTask, m_taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTask, m_gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTask, m_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTask, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTask, m_acceptdescrible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTask, m_accepttaskdescribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTask, m_finishdescribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTask, m_guideid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTask, m_guidetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTask, m_guidelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTask, m_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTask, m_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTask, m_lvneed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTask, m_condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTask, m_finishobject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTask, m_acceptnpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTask, m_commitnpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTask, m_unacceptdescribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTask, m_kind_),
  };
  GMTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMTask_descriptor_,
      GMTask::default_instance_,
      GMTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMTask));
  GMTaskCollect_descriptor_ = file->message_type(3);
  static const int GMTaskCollect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTaskCollect, m_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTaskCollect, m_tasks_),
  };
  GMTaskCollect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMTaskCollect_descriptor_,
      GMTaskCollect::default_instance_,
      GMTaskCollect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTaskCollect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTaskCollect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMTaskCollect));
  GM_Task_Finsh_descriptor_ = file->message_type(4);
  static const int GM_Task_Finsh_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Task_Finsh, m_taskid_),
  };
  GM_Task_Finsh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Task_Finsh_descriptor_,
      GM_Task_Finsh::default_instance_,
      GM_Task_Finsh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Task_Finsh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Task_Finsh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Task_Finsh));
  GM_TaskResult_descriptor_ = file->message_type(5);
  static const int GM_TaskResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TaskResult, m_byte_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TaskResult, m_gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TaskResult, m_task_state_),
  };
  GM_TaskResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_TaskResult_descriptor_,
      GM_TaskResult::default_instance_,
      GM_TaskResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TaskResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TaskResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_TaskResult));
  GM_CommitTask_descriptor_ = file->message_type(6);
  static const int GM_CommitTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CommitTask, m_gmid_),
  };
  GM_CommitTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_CommitTask_descriptor_,
      GM_CommitTask::default_instance_,
      GM_CommitTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CommitTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CommitTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_CommitTask));
  GM_AcceptTask_descriptor_ = file->message_type(7);
  static const int GM_AcceptTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AcceptTask, m_gmid_),
  };
  GM_AcceptTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_AcceptTask_descriptor_,
      GM_AcceptTask::default_instance_,
      GM_AcceptTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AcceptTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AcceptTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_AcceptTask));
  GMUpdateTaskCondition_descriptor_ = file->message_type(8);
  static const int GMUpdateTaskCondition_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUpdateTaskCondition, m_gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUpdateTaskCondition, m_condition_),
  };
  GMUpdateTaskCondition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMUpdateTaskCondition_descriptor_,
      GMUpdateTaskCondition::default_instance_,
      GMUpdateTaskCondition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUpdateTaskCondition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUpdateTaskCondition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMUpdateTaskCondition));
  GM_TalkEvent_descriptor_ = file->message_type(9);
  static const int GM_TalkEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TalkEvent, npcid_),
  };
  GM_TalkEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_TalkEvent_descriptor_,
      GM_TalkEvent::default_instance_,
      GM_TalkEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TalkEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TalkEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_TalkEvent));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_task_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMTaskCondition_descriptor_, &GMTaskCondition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMTaskFinishObject_descriptor_, &GMTaskFinishObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMTask_descriptor_, &GMTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMTaskCollect_descriptor_, &GMTaskCollect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Task_Finsh_descriptor_, &GM_Task_Finsh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_TaskResult_descriptor_, &GM_TaskResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_CommitTask_descriptor_, &GM_CommitTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_AcceptTask_descriptor_, &GM_AcceptTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMUpdateTaskCondition_descriptor_, &GMUpdateTaskCondition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_TalkEvent_descriptor_, &GM_TalkEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_task_2etxt() {
  delete GMTaskCondition::default_instance_;
  delete GMTaskCondition_reflection_;
  delete GMTaskFinishObject::default_instance_;
  delete GMTaskFinishObject_reflection_;
  delete GMTask::default_instance_;
  delete GMTask_reflection_;
  delete GMTaskCollect::default_instance_;
  delete GMTaskCollect_reflection_;
  delete GM_Task_Finsh::default_instance_;
  delete GM_Task_Finsh_reflection_;
  delete GM_TaskResult::default_instance_;
  delete GM_TaskResult_reflection_;
  delete GM_CommitTask::default_instance_;
  delete GM_CommitTask_reflection_;
  delete GM_AcceptTask::default_instance_;
  delete GM_AcceptTask_reflection_;
  delete GMUpdateTaskCondition::default_instance_;
  delete GMUpdateTaskCondition_reflection_;
  delete GM_TalkEvent::default_instance_;
  delete GM_TalkEvent_reflection_;
}

void protobuf_AddDesc_task_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010task.txt\"W\n\017GMTaskCondition\022\014\n\004m_ID\030\001 "
    "\002(\r\022\016\n\006m_Type\030\002 \002(\r\022\023\n\013m_FinishNum\030\003 \002(\r"
    "\022\021\n\tm_NeedNum\030\004 \002(\r\"V\n\022GMTaskFinishObjec"
    "t\022\026\n\016m_ObjectTypeID\030\001 \002(\r\022\023\n\013m_ObjectNum"
    "\030\002 \002(\r\022\023\n\013m_ObjecRank\030\003 \002(\r\"\320\003\n\006GMTask\022\022"
    "\n\nm_PlayerID\030\001 \002(\r\022\020\n\010m_TaskID\030\002 \002(\r\022\016\n\006"
    "m_GMID\030\003 \002(\003\022\017\n\007m_State\030\004 \002(\r\022\016\n\006m_Name\030"
    "\005 \002(\t\022\031\n\021m_AcceptDescrible\030\006 \002(\t\022\034\n\024m_Ac"
    "ceptTaskDescribe\030\007 \002(\t\022\030\n\020m_FinishDescri"
    "be\030\010 \002(\t\022\021\n\tm_guideid\030\t \002(\005\022\023\n\013m_guidety"
    "pe\030\n \002(\005\022\024\n\014m_guidelevel\030\013 \002(\005\022\016\n\006m_rank"
    "\030\014 \002(\005\022\022\n\nm_Category\030\r \002(\r\022\020\n\010m_LVNeed\030\016"
    " \002(\r\022%\n\013m_Condition\030\017 \003(\0132\020.GMTaskCondit"
    "ion\022+\n\016m_FinishObject\030\020 \003(\0132\023.GMTaskFini"
    "shObject\022\023\n\013m_AcceptNPC\030\021 \002(\r\022\023\n\013m_Commi"
    "tNPC\030\022 \002(\r\022\032\n\022m_UnAcceptDescribe\030\023 \001(\t\022\016"
    "\n\006m_kind\030\024 \001(\005\":\n\rGMTaskCollect\022\017\n\007m_Cou"
    "nt\030\001 \002(\r\022\030\n\007m_Tasks\030\002 \003(\0132\007.GMTask\"!\n\rGM"
    "_Task_Finsh\022\020\n\010m_TaskID\030\001 \002(\003\"E\n\rGM_Task"
    "Result\022\016\n\006m_byte\030\001 \002(\r\022\016\n\006m_gmid\030\002 \001(\003\022\024"
    "\n\014m_task_state\030\003 \001(\005\"\037\n\rGM_CommitTask\022\016\n"
    "\006m_gmid\030\001 \002(\003\"\037\n\rGM_AcceptTask\022\016\n\006m_gmid"
    "\030\001 \002(\003\"N\n\025GMUpdateTaskCondition\022\016\n\006m_GMI"
    "D\030\001 \002(\003\022%\n\013m_condition\030\002 \003(\0132\020.GMTaskCon"
    "dition\"\035\n\014GM_TalkEvent\022\r\n\005NPCID\030\001 \002(\005", 997);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "task.txt", &protobuf_RegisterTypes);
  GMTaskCondition::default_instance_ = new GMTaskCondition();
  GMTaskFinishObject::default_instance_ = new GMTaskFinishObject();
  GMTask::default_instance_ = new GMTask();
  GMTaskCollect::default_instance_ = new GMTaskCollect();
  GM_Task_Finsh::default_instance_ = new GM_Task_Finsh();
  GM_TaskResult::default_instance_ = new GM_TaskResult();
  GM_CommitTask::default_instance_ = new GM_CommitTask();
  GM_AcceptTask::default_instance_ = new GM_AcceptTask();
  GMUpdateTaskCondition::default_instance_ = new GMUpdateTaskCondition();
  GM_TalkEvent::default_instance_ = new GM_TalkEvent();
  GMTaskCondition::default_instance_->InitAsDefaultInstance();
  GMTaskFinishObject::default_instance_->InitAsDefaultInstance();
  GMTask::default_instance_->InitAsDefaultInstance();
  GMTaskCollect::default_instance_->InitAsDefaultInstance();
  GM_Task_Finsh::default_instance_->InitAsDefaultInstance();
  GM_TaskResult::default_instance_->InitAsDefaultInstance();
  GM_CommitTask::default_instance_->InitAsDefaultInstance();
  GM_AcceptTask::default_instance_->InitAsDefaultInstance();
  GMUpdateTaskCondition::default_instance_->InitAsDefaultInstance();
  GM_TalkEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_task_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_task_2etxt {
  StaticDescriptorInitializer_task_2etxt() {
    protobuf_AddDesc_task_2etxt();
  }
} static_descriptor_initializer_task_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GMTaskCondition::kMIDFieldNumber;
const int GMTaskCondition::kMTypeFieldNumber;
const int GMTaskCondition::kMFinishNumFieldNumber;
const int GMTaskCondition::kMNeedNumFieldNumber;
#endif  // !_MSC_VER

GMTaskCondition::GMTaskCondition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMTaskCondition::InitAsDefaultInstance() {
}

GMTaskCondition::GMTaskCondition(const GMTaskCondition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMTaskCondition::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0u;
  m_type_ = 0u;
  m_finishnum_ = 0u;
  m_neednum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMTaskCondition::~GMTaskCondition() {
  SharedDtor();
}

void GMTaskCondition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMTaskCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMTaskCondition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMTaskCondition_descriptor_;
}

const GMTaskCondition& GMTaskCondition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2etxt();
  return *default_instance_;
}

GMTaskCondition* GMTaskCondition::default_instance_ = NULL;

GMTaskCondition* GMTaskCondition::New() const {
  return new GMTaskCondition;
}

void GMTaskCondition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0u;
    m_type_ = 0u;
    m_finishnum_ = 0u;
    m_neednum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMTaskCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 m_ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_Type;
        break;
      }

      // required uint32 m_Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_FinishNum;
        break;
      }

      // required uint32 m_FinishNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_FinishNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_finishnum_)));
          set_has_m_finishnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_NeedNum;
        break;
      }

      // required uint32 m_NeedNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_NeedNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_neednum_)));
          set_has_m_neednum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMTaskCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 m_ID = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_id(), output);
  }

  // required uint32 m_Type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_type(), output);
  }

  // required uint32 m_FinishNum = 3;
  if (has_m_finishnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->m_finishnum(), output);
  }

  // required uint32 m_NeedNum = 4;
  if (has_m_neednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->m_neednum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMTaskCondition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 m_ID = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_id(), target);
  }

  // required uint32 m_Type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_type(), target);
  }

  // required uint32 m_FinishNum = 3;
  if (has_m_finishnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->m_finishnum(), target);
  }

  // required uint32 m_NeedNum = 4;
  if (has_m_neednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->m_neednum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMTaskCondition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 m_ID = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_id());
    }

    // required uint32 m_Type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_type());
    }

    // required uint32 m_FinishNum = 3;
    if (has_m_finishnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_finishnum());
    }

    // required uint32 m_NeedNum = 4;
    if (has_m_neednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_neednum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMTaskCondition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMTaskCondition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMTaskCondition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMTaskCondition::MergeFrom(const GMTaskCondition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_finishnum()) {
      set_m_finishnum(from.m_finishnum());
    }
    if (from.has_m_neednum()) {
      set_m_neednum(from.m_neednum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMTaskCondition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMTaskCondition::CopyFrom(const GMTaskCondition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMTaskCondition::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GMTaskCondition::Swap(GMTaskCondition* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_finishnum_, other->m_finishnum_);
    std::swap(m_neednum_, other->m_neednum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMTaskCondition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMTaskCondition_descriptor_;
  metadata.reflection = GMTaskCondition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMTaskFinishObject::kMObjectTypeIDFieldNumber;
const int GMTaskFinishObject::kMObjectNumFieldNumber;
const int GMTaskFinishObject::kMObjecRankFieldNumber;
#endif  // !_MSC_VER

GMTaskFinishObject::GMTaskFinishObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMTaskFinishObject::InitAsDefaultInstance() {
}

GMTaskFinishObject::GMTaskFinishObject(const GMTaskFinishObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMTaskFinishObject::SharedCtor() {
  _cached_size_ = 0;
  m_objecttypeid_ = 0u;
  m_objectnum_ = 0u;
  m_objecrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMTaskFinishObject::~GMTaskFinishObject() {
  SharedDtor();
}

void GMTaskFinishObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMTaskFinishObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMTaskFinishObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMTaskFinishObject_descriptor_;
}

const GMTaskFinishObject& GMTaskFinishObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2etxt();
  return *default_instance_;
}

GMTaskFinishObject* GMTaskFinishObject::default_instance_ = NULL;

GMTaskFinishObject* GMTaskFinishObject::New() const {
  return new GMTaskFinishObject;
}

void GMTaskFinishObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objecttypeid_ = 0u;
    m_objectnum_ = 0u;
    m_objecrank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMTaskFinishObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 m_ObjectTypeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_objecttypeid_)));
          set_has_m_objecttypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_ObjectNum;
        break;
      }

      // required uint32 m_ObjectNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ObjectNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_objectnum_)));
          set_has_m_objectnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_ObjecRank;
        break;
      }

      // required uint32 m_ObjecRank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ObjecRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_objecrank_)));
          set_has_m_objecrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMTaskFinishObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 m_ObjectTypeID = 1;
  if (has_m_objecttypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_objecttypeid(), output);
  }

  // required uint32 m_ObjectNum = 2;
  if (has_m_objectnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_objectnum(), output);
  }

  // required uint32 m_ObjecRank = 3;
  if (has_m_objecrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->m_objecrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMTaskFinishObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 m_ObjectTypeID = 1;
  if (has_m_objecttypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_objecttypeid(), target);
  }

  // required uint32 m_ObjectNum = 2;
  if (has_m_objectnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_objectnum(), target);
  }

  // required uint32 m_ObjecRank = 3;
  if (has_m_objecrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->m_objecrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMTaskFinishObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 m_ObjectTypeID = 1;
    if (has_m_objecttypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_objecttypeid());
    }

    // required uint32 m_ObjectNum = 2;
    if (has_m_objectnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_objectnum());
    }

    // required uint32 m_ObjecRank = 3;
    if (has_m_objecrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_objecrank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMTaskFinishObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMTaskFinishObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMTaskFinishObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMTaskFinishObject::MergeFrom(const GMTaskFinishObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objecttypeid()) {
      set_m_objecttypeid(from.m_objecttypeid());
    }
    if (from.has_m_objectnum()) {
      set_m_objectnum(from.m_objectnum());
    }
    if (from.has_m_objecrank()) {
      set_m_objecrank(from.m_objecrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMTaskFinishObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMTaskFinishObject::CopyFrom(const GMTaskFinishObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMTaskFinishObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GMTaskFinishObject::Swap(GMTaskFinishObject* other) {
  if (other != this) {
    std::swap(m_objecttypeid_, other->m_objecttypeid_);
    std::swap(m_objectnum_, other->m_objectnum_);
    std::swap(m_objecrank_, other->m_objecrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMTaskFinishObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMTaskFinishObject_descriptor_;
  metadata.reflection = GMTaskFinishObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMTask::kMPlayerIDFieldNumber;
const int GMTask::kMTaskIDFieldNumber;
const int GMTask::kMGMIDFieldNumber;
const int GMTask::kMStateFieldNumber;
const int GMTask::kMNameFieldNumber;
const int GMTask::kMAcceptDescribleFieldNumber;
const int GMTask::kMAcceptTaskDescribeFieldNumber;
const int GMTask::kMFinishDescribeFieldNumber;
const int GMTask::kMGuideidFieldNumber;
const int GMTask::kMGuidetypeFieldNumber;
const int GMTask::kMGuidelevelFieldNumber;
const int GMTask::kMRankFieldNumber;
const int GMTask::kMCategoryFieldNumber;
const int GMTask::kMLVNeedFieldNumber;
const int GMTask::kMConditionFieldNumber;
const int GMTask::kMFinishObjectFieldNumber;
const int GMTask::kMAcceptNPCFieldNumber;
const int GMTask::kMCommitNPCFieldNumber;
const int GMTask::kMUnAcceptDescribeFieldNumber;
const int GMTask::kMKindFieldNumber;
#endif  // !_MSC_VER

GMTask::GMTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMTask::InitAsDefaultInstance() {
}

GMTask::GMTask(const GMTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMTask::SharedCtor() {
  _cached_size_ = 0;
  m_playerid_ = 0u;
  m_taskid_ = 0u;
  m_gmid_ = GOOGLE_LONGLONG(0);
  m_state_ = 0u;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_acceptdescrible_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_accepttaskdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_finishdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_guideid_ = 0;
  m_guidetype_ = 0;
  m_guidelevel_ = 0;
  m_rank_ = 0;
  m_category_ = 0u;
  m_lvneed_ = 0u;
  m_acceptnpc_ = 0u;
  m_commitnpc_ = 0u;
  m_unacceptdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_kind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMTask::~GMTask() {
  SharedDtor();
}

void GMTask::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_acceptdescrible_ != &::google::protobuf::internal::kEmptyString) {
    delete m_acceptdescrible_;
  }
  if (m_accepttaskdescribe_ != &::google::protobuf::internal::kEmptyString) {
    delete m_accepttaskdescribe_;
  }
  if (m_finishdescribe_ != &::google::protobuf::internal::kEmptyString) {
    delete m_finishdescribe_;
  }
  if (m_unacceptdescribe_ != &::google::protobuf::internal::kEmptyString) {
    delete m_unacceptdescribe_;
  }
  if (this != default_instance_) {
  }
}

void GMTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMTask_descriptor_;
}

const GMTask& GMTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2etxt();
  return *default_instance_;
}

GMTask* GMTask::default_instance_ = NULL;

GMTask* GMTask::New() const {
  return new GMTask;
}

void GMTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_playerid_ = 0u;
    m_taskid_ = 0u;
    m_gmid_ = GOOGLE_LONGLONG(0);
    m_state_ = 0u;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    if (has_m_acceptdescrible()) {
      if (m_acceptdescrible_ != &::google::protobuf::internal::kEmptyString) {
        m_acceptdescrible_->clear();
      }
    }
    if (has_m_accepttaskdescribe()) {
      if (m_accepttaskdescribe_ != &::google::protobuf::internal::kEmptyString) {
        m_accepttaskdescribe_->clear();
      }
    }
    if (has_m_finishdescribe()) {
      if (m_finishdescribe_ != &::google::protobuf::internal::kEmptyString) {
        m_finishdescribe_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_guideid_ = 0;
    m_guidetype_ = 0;
    m_guidelevel_ = 0;
    m_rank_ = 0;
    m_category_ = 0u;
    m_lvneed_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_acceptnpc_ = 0u;
    m_commitnpc_ = 0u;
    if (has_m_unacceptdescribe()) {
      if (m_unacceptdescribe_ != &::google::protobuf::internal::kEmptyString) {
        m_unacceptdescribe_->clear();
      }
    }
    m_kind_ = 0;
  }
  m_condition_.Clear();
  m_finishobject_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 m_PlayerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_TaskID;
        break;
      }

      // required uint32 m_TaskID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_TaskID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_taskid_)));
          set_has_m_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_GMID;
        break;
      }

      // required int64 m_GMID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_GMID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_gmid_)));
          set_has_m_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_State;
        break;
      }

      // required uint32 m_State = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_State:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_Name;
        break;
      }

      // required string m_Name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_AcceptDescrible;
        break;
      }

      // required string m_AcceptDescrible = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_AcceptDescrible:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_acceptdescrible()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_acceptdescrible().data(), this->m_acceptdescrible().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_AcceptTaskDescribe;
        break;
      }

      // required string m_AcceptTaskDescribe = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_AcceptTaskDescribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_accepttaskdescribe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_accepttaskdescribe().data(), this->m_accepttaskdescribe().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_FinishDescribe;
        break;
      }

      // required string m_FinishDescribe = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_FinishDescribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_finishdescribe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_finishdescribe().data(), this->m_finishdescribe().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_guideid;
        break;
      }

      // required int32 m_guideid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_guideid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_guideid_)));
          set_has_m_guideid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_guidetype;
        break;
      }

      // required int32 m_guidetype = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_guidetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_guidetype_)));
          set_has_m_guidetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_guidelevel;
        break;
      }

      // required int32 m_guidelevel = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_guidelevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_guidelevel_)));
          set_has_m_guidelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_rank;
        break;
      }

      // required int32 m_rank = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rank_)));
          set_has_m_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_Category;
        break;
      }

      // required uint32 m_Category = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_category_)));
          set_has_m_category();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_LVNeed;
        break;
      }

      // required uint32 m_LVNeed = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_LVNeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_lvneed_)));
          set_has_m_lvneed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_m_Condition;
        break;
      }

      // repeated .GMTaskCondition m_Condition = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_condition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_m_Condition;
        if (input->ExpectTag(130)) goto parse_m_FinishObject;
        break;
      }

      // repeated .GMTaskFinishObject m_FinishObject = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_FinishObject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_finishobject()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_m_FinishObject;
        if (input->ExpectTag(136)) goto parse_m_AcceptNPC;
        break;
      }

      // required uint32 m_AcceptNPC = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_AcceptNPC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_acceptnpc_)));
          set_has_m_acceptnpc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_m_CommitNPC;
        break;
      }

      // required uint32 m_CommitNPC = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_CommitNPC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_commitnpc_)));
          set_has_m_commitnpc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_m_UnAcceptDescribe;
        break;
      }

      // optional string m_UnAcceptDescribe = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_UnAcceptDescribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_unacceptdescribe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_unacceptdescribe().data(), this->m_unacceptdescribe().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_m_kind;
        break;
      }

      // optional int32 m_kind = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_kind_)));
          set_has_m_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 m_PlayerID = 1;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_playerid(), output);
  }

  // required uint32 m_TaskID = 2;
  if (has_m_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_taskid(), output);
  }

  // required int64 m_GMID = 3;
  if (has_m_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->m_gmid(), output);
  }

  // required uint32 m_State = 4;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->m_state(), output);
  }

  // required string m_Name = 5;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_name(), output);
  }

  // required string m_AcceptDescrible = 6;
  if (has_m_acceptdescrible()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_acceptdescrible().data(), this->m_acceptdescrible().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->m_acceptdescrible(), output);
  }

  // required string m_AcceptTaskDescribe = 7;
  if (has_m_accepttaskdescribe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_accepttaskdescribe().data(), this->m_accepttaskdescribe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m_accepttaskdescribe(), output);
  }

  // required string m_FinishDescribe = 8;
  if (has_m_finishdescribe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_finishdescribe().data(), this->m_finishdescribe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->m_finishdescribe(), output);
  }

  // required int32 m_guideid = 9;
  if (has_m_guideid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_guideid(), output);
  }

  // required int32 m_guidetype = 10;
  if (has_m_guidetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_guidetype(), output);
  }

  // required int32 m_guidelevel = 11;
  if (has_m_guidelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_guidelevel(), output);
  }

  // required int32 m_rank = 12;
  if (has_m_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_rank(), output);
  }

  // required uint32 m_Category = 13;
  if (has_m_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->m_category(), output);
  }

  // required uint32 m_LVNeed = 14;
  if (has_m_lvneed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->m_lvneed(), output);
  }

  // repeated .GMTaskCondition m_Condition = 15;
  for (int i = 0; i < this->m_condition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->m_condition(i), output);
  }

  // repeated .GMTaskFinishObject m_FinishObject = 16;
  for (int i = 0; i < this->m_finishobject_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->m_finishobject(i), output);
  }

  // required uint32 m_AcceptNPC = 17;
  if (has_m_acceptnpc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->m_acceptnpc(), output);
  }

  // required uint32 m_CommitNPC = 18;
  if (has_m_commitnpc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->m_commitnpc(), output);
  }

  // optional string m_UnAcceptDescribe = 19;
  if (has_m_unacceptdescribe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_unacceptdescribe().data(), this->m_unacceptdescribe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->m_unacceptdescribe(), output);
  }

  // optional int32 m_kind = 20;
  if (has_m_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->m_kind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 m_PlayerID = 1;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_playerid(), target);
  }

  // required uint32 m_TaskID = 2;
  if (has_m_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_taskid(), target);
  }

  // required int64 m_GMID = 3;
  if (has_m_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->m_gmid(), target);
  }

  // required uint32 m_State = 4;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->m_state(), target);
  }

  // required string m_Name = 5;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_name(), target);
  }

  // required string m_AcceptDescrible = 6;
  if (has_m_acceptdescrible()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_acceptdescrible().data(), this->m_acceptdescrible().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->m_acceptdescrible(), target);
  }

  // required string m_AcceptTaskDescribe = 7;
  if (has_m_accepttaskdescribe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_accepttaskdescribe().data(), this->m_accepttaskdescribe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->m_accepttaskdescribe(), target);
  }

  // required string m_FinishDescribe = 8;
  if (has_m_finishdescribe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_finishdescribe().data(), this->m_finishdescribe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->m_finishdescribe(), target);
  }

  // required int32 m_guideid = 9;
  if (has_m_guideid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_guideid(), target);
  }

  // required int32 m_guidetype = 10;
  if (has_m_guidetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_guidetype(), target);
  }

  // required int32 m_guidelevel = 11;
  if (has_m_guidelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_guidelevel(), target);
  }

  // required int32 m_rank = 12;
  if (has_m_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_rank(), target);
  }

  // required uint32 m_Category = 13;
  if (has_m_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->m_category(), target);
  }

  // required uint32 m_LVNeed = 14;
  if (has_m_lvneed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->m_lvneed(), target);
  }

  // repeated .GMTaskCondition m_Condition = 15;
  for (int i = 0; i < this->m_condition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->m_condition(i), target);
  }

  // repeated .GMTaskFinishObject m_FinishObject = 16;
  for (int i = 0; i < this->m_finishobject_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->m_finishobject(i), target);
  }

  // required uint32 m_AcceptNPC = 17;
  if (has_m_acceptnpc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->m_acceptnpc(), target);
  }

  // required uint32 m_CommitNPC = 18;
  if (has_m_commitnpc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->m_commitnpc(), target);
  }

  // optional string m_UnAcceptDescribe = 19;
  if (has_m_unacceptdescribe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_unacceptdescribe().data(), this->m_unacceptdescribe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->m_unacceptdescribe(), target);
  }

  // optional int32 m_kind = 20;
  if (has_m_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->m_kind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 m_PlayerID = 1;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_playerid());
    }

    // required uint32 m_TaskID = 2;
    if (has_m_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_taskid());
    }

    // required int64 m_GMID = 3;
    if (has_m_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_gmid());
    }

    // required uint32 m_State = 4;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_state());
    }

    // required string m_Name = 5;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // required string m_AcceptDescrible = 6;
    if (has_m_acceptdescrible()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_acceptdescrible());
    }

    // required string m_AcceptTaskDescribe = 7;
    if (has_m_accepttaskdescribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_accepttaskdescribe());
    }

    // required string m_FinishDescribe = 8;
    if (has_m_finishdescribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_finishdescribe());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 m_guideid = 9;
    if (has_m_guideid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_guideid());
    }

    // required int32 m_guidetype = 10;
    if (has_m_guidetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_guidetype());
    }

    // required int32 m_guidelevel = 11;
    if (has_m_guidelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_guidelevel());
    }

    // required int32 m_rank = 12;
    if (has_m_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rank());
    }

    // required uint32 m_Category = 13;
    if (has_m_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_category());
    }

    // required uint32 m_LVNeed = 14;
    if (has_m_lvneed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_lvneed());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 m_AcceptNPC = 17;
    if (has_m_acceptnpc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_acceptnpc());
    }

    // required uint32 m_CommitNPC = 18;
    if (has_m_commitnpc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_commitnpc());
    }

    // optional string m_UnAcceptDescribe = 19;
    if (has_m_unacceptdescribe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_unacceptdescribe());
    }

    // optional int32 m_kind = 20;
    if (has_m_kind()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_kind());
    }

  }
  // repeated .GMTaskCondition m_Condition = 15;
  total_size += 1 * this->m_condition_size();
  for (int i = 0; i < this->m_condition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_condition(i));
  }

  // repeated .GMTaskFinishObject m_FinishObject = 16;
  total_size += 2 * this->m_finishobject_size();
  for (int i = 0; i < this->m_finishobject_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_finishobject(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMTask::MergeFrom(const GMTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_condition_.MergeFrom(from.m_condition_);
  m_finishobject_.MergeFrom(from.m_finishobject_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
    if (from.has_m_taskid()) {
      set_m_taskid(from.m_taskid());
    }
    if (from.has_m_gmid()) {
      set_m_gmid(from.m_gmid());
    }
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_acceptdescrible()) {
      set_m_acceptdescrible(from.m_acceptdescrible());
    }
    if (from.has_m_accepttaskdescribe()) {
      set_m_accepttaskdescribe(from.m_accepttaskdescribe());
    }
    if (from.has_m_finishdescribe()) {
      set_m_finishdescribe(from.m_finishdescribe());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_guideid()) {
      set_m_guideid(from.m_guideid());
    }
    if (from.has_m_guidetype()) {
      set_m_guidetype(from.m_guidetype());
    }
    if (from.has_m_guidelevel()) {
      set_m_guidelevel(from.m_guidelevel());
    }
    if (from.has_m_rank()) {
      set_m_rank(from.m_rank());
    }
    if (from.has_m_category()) {
      set_m_category(from.m_category());
    }
    if (from.has_m_lvneed()) {
      set_m_lvneed(from.m_lvneed());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_acceptnpc()) {
      set_m_acceptnpc(from.m_acceptnpc());
    }
    if (from.has_m_commitnpc()) {
      set_m_commitnpc(from.m_commitnpc());
    }
    if (from.has_m_unacceptdescribe()) {
      set_m_unacceptdescribe(from.m_unacceptdescribe());
    }
    if (from.has_m_kind()) {
      set_m_kind(from.m_kind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMTask::CopyFrom(const GMTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00033fff) != 0x00033fff) return false;

  for (int i = 0; i < m_condition_size(); i++) {
    if (!this->m_condition(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_finishobject_size(); i++) {
    if (!this->m_finishobject(i).IsInitialized()) return false;
  }
  return true;
}

void GMTask::Swap(GMTask* other) {
  if (other != this) {
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(m_taskid_, other->m_taskid_);
    std::swap(m_gmid_, other->m_gmid_);
    std::swap(m_state_, other->m_state_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_acceptdescrible_, other->m_acceptdescrible_);
    std::swap(m_accepttaskdescribe_, other->m_accepttaskdescribe_);
    std::swap(m_finishdescribe_, other->m_finishdescribe_);
    std::swap(m_guideid_, other->m_guideid_);
    std::swap(m_guidetype_, other->m_guidetype_);
    std::swap(m_guidelevel_, other->m_guidelevel_);
    std::swap(m_rank_, other->m_rank_);
    std::swap(m_category_, other->m_category_);
    std::swap(m_lvneed_, other->m_lvneed_);
    m_condition_.Swap(&other->m_condition_);
    m_finishobject_.Swap(&other->m_finishobject_);
    std::swap(m_acceptnpc_, other->m_acceptnpc_);
    std::swap(m_commitnpc_, other->m_commitnpc_);
    std::swap(m_unacceptdescribe_, other->m_unacceptdescribe_);
    std::swap(m_kind_, other->m_kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMTask_descriptor_;
  metadata.reflection = GMTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMTaskCollect::kMCountFieldNumber;
const int GMTaskCollect::kMTasksFieldNumber;
#endif  // !_MSC_VER

GMTaskCollect::GMTaskCollect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMTaskCollect::InitAsDefaultInstance() {
}

GMTaskCollect::GMTaskCollect(const GMTaskCollect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMTaskCollect::SharedCtor() {
  _cached_size_ = 0;
  m_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMTaskCollect::~GMTaskCollect() {
  SharedDtor();
}

void GMTaskCollect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMTaskCollect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMTaskCollect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMTaskCollect_descriptor_;
}

const GMTaskCollect& GMTaskCollect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2etxt();
  return *default_instance_;
}

GMTaskCollect* GMTaskCollect::default_instance_ = NULL;

GMTaskCollect* GMTaskCollect::New() const {
  return new GMTaskCollect;
}

void GMTaskCollect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_count_ = 0u;
  }
  m_tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMTaskCollect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 m_Count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_Tasks;
        break;
      }

      // repeated .GMTask m_Tasks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_Tasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMTaskCollect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 m_Count = 1;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_count(), output);
  }

  // repeated .GMTask m_Tasks = 2;
  for (int i = 0; i < this->m_tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_tasks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMTaskCollect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 m_Count = 1;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_count(), target);
  }

  // repeated .GMTask m_Tasks = 2;
  for (int i = 0; i < this->m_tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_tasks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMTaskCollect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 m_Count = 1;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_count());
    }

  }
  // repeated .GMTask m_Tasks = 2;
  total_size += 1 * this->m_tasks_size();
  for (int i = 0; i < this->m_tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tasks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMTaskCollect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMTaskCollect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMTaskCollect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMTaskCollect::MergeFrom(const GMTaskCollect& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_tasks_.MergeFrom(from.m_tasks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMTaskCollect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMTaskCollect::CopyFrom(const GMTaskCollect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMTaskCollect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_tasks_size(); i++) {
    if (!this->m_tasks(i).IsInitialized()) return false;
  }
  return true;
}

void GMTaskCollect::Swap(GMTaskCollect* other) {
  if (other != this) {
    std::swap(m_count_, other->m_count_);
    m_tasks_.Swap(&other->m_tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMTaskCollect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMTaskCollect_descriptor_;
  metadata.reflection = GMTaskCollect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Task_Finsh::kMTaskIDFieldNumber;
#endif  // !_MSC_VER

GM_Task_Finsh::GM_Task_Finsh()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Task_Finsh::InitAsDefaultInstance() {
}

GM_Task_Finsh::GM_Task_Finsh(const GM_Task_Finsh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Task_Finsh::SharedCtor() {
  _cached_size_ = 0;
  m_taskid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Task_Finsh::~GM_Task_Finsh() {
  SharedDtor();
}

void GM_Task_Finsh::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Task_Finsh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Task_Finsh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Task_Finsh_descriptor_;
}

const GM_Task_Finsh& GM_Task_Finsh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2etxt();
  return *default_instance_;
}

GM_Task_Finsh* GM_Task_Finsh::default_instance_ = NULL;

GM_Task_Finsh* GM_Task_Finsh::New() const {
  return new GM_Task_Finsh;
}

void GM_Task_Finsh::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_taskid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Task_Finsh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 m_TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_taskid_)));
          set_has_m_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Task_Finsh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 m_TaskID = 1;
  if (has_m_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Task_Finsh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 m_TaskID = 1;
  if (has_m_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Task_Finsh::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 m_TaskID = 1;
    if (has_m_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Task_Finsh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Task_Finsh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Task_Finsh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Task_Finsh::MergeFrom(const GM_Task_Finsh& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_taskid()) {
      set_m_taskid(from.m_taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Task_Finsh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Task_Finsh::CopyFrom(const GM_Task_Finsh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Task_Finsh::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Task_Finsh::Swap(GM_Task_Finsh* other) {
  if (other != this) {
    std::swap(m_taskid_, other->m_taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Task_Finsh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Task_Finsh_descriptor_;
  metadata.reflection = GM_Task_Finsh_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_TaskResult::kMByteFieldNumber;
const int GM_TaskResult::kMGmidFieldNumber;
const int GM_TaskResult::kMTaskStateFieldNumber;
#endif  // !_MSC_VER

GM_TaskResult::GM_TaskResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_TaskResult::InitAsDefaultInstance() {
}

GM_TaskResult::GM_TaskResult(const GM_TaskResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_TaskResult::SharedCtor() {
  _cached_size_ = 0;
  m_byte_ = 0u;
  m_gmid_ = GOOGLE_LONGLONG(0);
  m_task_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_TaskResult::~GM_TaskResult() {
  SharedDtor();
}

void GM_TaskResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_TaskResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_TaskResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_TaskResult_descriptor_;
}

const GM_TaskResult& GM_TaskResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2etxt();
  return *default_instance_;
}

GM_TaskResult* GM_TaskResult::default_instance_ = NULL;

GM_TaskResult* GM_TaskResult::New() const {
  return new GM_TaskResult;
}

void GM_TaskResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_byte_ = 0u;
    m_gmid_ = GOOGLE_LONGLONG(0);
    m_task_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_TaskResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 m_byte = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_byte_)));
          set_has_m_byte();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_gmid;
        break;
      }

      // optional int64 m_gmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_gmid_)));
          set_has_m_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_task_state;
        break;
      }

      // optional int32 m_task_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_task_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_task_state_)));
          set_has_m_task_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_TaskResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 m_byte = 1;
  if (has_m_byte()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_byte(), output);
  }

  // optional int64 m_gmid = 2;
  if (has_m_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_gmid(), output);
  }

  // optional int32 m_task_state = 3;
  if (has_m_task_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_task_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_TaskResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 m_byte = 1;
  if (has_m_byte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_byte(), target);
  }

  // optional int64 m_gmid = 2;
  if (has_m_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_gmid(), target);
  }

  // optional int32 m_task_state = 3;
  if (has_m_task_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_task_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_TaskResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 m_byte = 1;
    if (has_m_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_byte());
    }

    // optional int64 m_gmid = 2;
    if (has_m_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_gmid());
    }

    // optional int32 m_task_state = 3;
    if (has_m_task_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_task_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_TaskResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_TaskResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_TaskResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_TaskResult::MergeFrom(const GM_TaskResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_byte()) {
      set_m_byte(from.m_byte());
    }
    if (from.has_m_gmid()) {
      set_m_gmid(from.m_gmid());
    }
    if (from.has_m_task_state()) {
      set_m_task_state(from.m_task_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_TaskResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_TaskResult::CopyFrom(const GM_TaskResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_TaskResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_TaskResult::Swap(GM_TaskResult* other) {
  if (other != this) {
    std::swap(m_byte_, other->m_byte_);
    std::swap(m_gmid_, other->m_gmid_);
    std::swap(m_task_state_, other->m_task_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_TaskResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_TaskResult_descriptor_;
  metadata.reflection = GM_TaskResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_CommitTask::kMGmidFieldNumber;
#endif  // !_MSC_VER

GM_CommitTask::GM_CommitTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_CommitTask::InitAsDefaultInstance() {
}

GM_CommitTask::GM_CommitTask(const GM_CommitTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_CommitTask::SharedCtor() {
  _cached_size_ = 0;
  m_gmid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_CommitTask::~GM_CommitTask() {
  SharedDtor();
}

void GM_CommitTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_CommitTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_CommitTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_CommitTask_descriptor_;
}

const GM_CommitTask& GM_CommitTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2etxt();
  return *default_instance_;
}

GM_CommitTask* GM_CommitTask::default_instance_ = NULL;

GM_CommitTask* GM_CommitTask::New() const {
  return new GM_CommitTask;
}

void GM_CommitTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_gmid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_CommitTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 m_gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_gmid_)));
          set_has_m_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_CommitTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 m_gmid = 1;
  if (has_m_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_CommitTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 m_gmid = 1;
  if (has_m_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_CommitTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 m_gmid = 1;
    if (has_m_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_CommitTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_CommitTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_CommitTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_CommitTask::MergeFrom(const GM_CommitTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_gmid()) {
      set_m_gmid(from.m_gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_CommitTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_CommitTask::CopyFrom(const GM_CommitTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_CommitTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_CommitTask::Swap(GM_CommitTask* other) {
  if (other != this) {
    std::swap(m_gmid_, other->m_gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_CommitTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_CommitTask_descriptor_;
  metadata.reflection = GM_CommitTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_AcceptTask::kMGmidFieldNumber;
#endif  // !_MSC_VER

GM_AcceptTask::GM_AcceptTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_AcceptTask::InitAsDefaultInstance() {
}

GM_AcceptTask::GM_AcceptTask(const GM_AcceptTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_AcceptTask::SharedCtor() {
  _cached_size_ = 0;
  m_gmid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_AcceptTask::~GM_AcceptTask() {
  SharedDtor();
}

void GM_AcceptTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_AcceptTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_AcceptTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_AcceptTask_descriptor_;
}

const GM_AcceptTask& GM_AcceptTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2etxt();
  return *default_instance_;
}

GM_AcceptTask* GM_AcceptTask::default_instance_ = NULL;

GM_AcceptTask* GM_AcceptTask::New() const {
  return new GM_AcceptTask;
}

void GM_AcceptTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_gmid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_AcceptTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 m_gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_gmid_)));
          set_has_m_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_AcceptTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 m_gmid = 1;
  if (has_m_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_AcceptTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 m_gmid = 1;
  if (has_m_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_AcceptTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 m_gmid = 1;
    if (has_m_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_AcceptTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_AcceptTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_AcceptTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_AcceptTask::MergeFrom(const GM_AcceptTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_gmid()) {
      set_m_gmid(from.m_gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_AcceptTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_AcceptTask::CopyFrom(const GM_AcceptTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_AcceptTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_AcceptTask::Swap(GM_AcceptTask* other) {
  if (other != this) {
    std::swap(m_gmid_, other->m_gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_AcceptTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_AcceptTask_descriptor_;
  metadata.reflection = GM_AcceptTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMUpdateTaskCondition::kMGMIDFieldNumber;
const int GMUpdateTaskCondition::kMConditionFieldNumber;
#endif  // !_MSC_VER

GMUpdateTaskCondition::GMUpdateTaskCondition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMUpdateTaskCondition::InitAsDefaultInstance() {
}

GMUpdateTaskCondition::GMUpdateTaskCondition(const GMUpdateTaskCondition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMUpdateTaskCondition::SharedCtor() {
  _cached_size_ = 0;
  m_gmid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMUpdateTaskCondition::~GMUpdateTaskCondition() {
  SharedDtor();
}

void GMUpdateTaskCondition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMUpdateTaskCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMUpdateTaskCondition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMUpdateTaskCondition_descriptor_;
}

const GMUpdateTaskCondition& GMUpdateTaskCondition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2etxt();
  return *default_instance_;
}

GMUpdateTaskCondition* GMUpdateTaskCondition::default_instance_ = NULL;

GMUpdateTaskCondition* GMUpdateTaskCondition::New() const {
  return new GMUpdateTaskCondition;
}

void GMUpdateTaskCondition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_gmid_ = GOOGLE_LONGLONG(0);
  }
  m_condition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMUpdateTaskCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 m_GMID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_gmid_)));
          set_has_m_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_condition;
        break;
      }

      // repeated .GMTaskCondition m_condition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_condition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_condition;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMUpdateTaskCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 m_GMID = 1;
  if (has_m_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_gmid(), output);
  }

  // repeated .GMTaskCondition m_condition = 2;
  for (int i = 0; i < this->m_condition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_condition(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMUpdateTaskCondition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 m_GMID = 1;
  if (has_m_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_gmid(), target);
  }

  // repeated .GMTaskCondition m_condition = 2;
  for (int i = 0; i < this->m_condition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_condition(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMUpdateTaskCondition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 m_GMID = 1;
    if (has_m_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_gmid());
    }

  }
  // repeated .GMTaskCondition m_condition = 2;
  total_size += 1 * this->m_condition_size();
  for (int i = 0; i < this->m_condition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_condition(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMUpdateTaskCondition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMUpdateTaskCondition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMUpdateTaskCondition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMUpdateTaskCondition::MergeFrom(const GMUpdateTaskCondition& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_condition_.MergeFrom(from.m_condition_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_gmid()) {
      set_m_gmid(from.m_gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMUpdateTaskCondition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMUpdateTaskCondition::CopyFrom(const GMUpdateTaskCondition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMUpdateTaskCondition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_condition_size(); i++) {
    if (!this->m_condition(i).IsInitialized()) return false;
  }
  return true;
}

void GMUpdateTaskCondition::Swap(GMUpdateTaskCondition* other) {
  if (other != this) {
    std::swap(m_gmid_, other->m_gmid_);
    m_condition_.Swap(&other->m_condition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMUpdateTaskCondition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMUpdateTaskCondition_descriptor_;
  metadata.reflection = GMUpdateTaskCondition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_TalkEvent::kNPCIDFieldNumber;
#endif  // !_MSC_VER

GM_TalkEvent::GM_TalkEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_TalkEvent::InitAsDefaultInstance() {
}

GM_TalkEvent::GM_TalkEvent(const GM_TalkEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_TalkEvent::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_TalkEvent::~GM_TalkEvent() {
  SharedDtor();
}

void GM_TalkEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_TalkEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_TalkEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_TalkEvent_descriptor_;
}

const GM_TalkEvent& GM_TalkEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2etxt();
  return *default_instance_;
}

GM_TalkEvent* GM_TalkEvent::default_instance_ = NULL;

GM_TalkEvent* GM_TalkEvent::New() const {
  return new GM_TalkEvent;
}

void GM_TalkEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_TalkEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 NPCID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_TalkEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 NPCID = 1;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->npcid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_TalkEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 NPCID = 1;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->npcid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_TalkEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 NPCID = 1;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npcid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_TalkEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_TalkEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_TalkEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_TalkEvent::MergeFrom(const GM_TalkEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_TalkEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_TalkEvent::CopyFrom(const GM_TalkEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_TalkEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_TalkEvent::Swap(GM_TalkEvent* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_TalkEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_TalkEvent_descriptor_;
  metadata.reflection = GM_TalkEvent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
