// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chooseArea.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chooseArea.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SD_AreaList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SD_AreaList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SD_Area_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SD_Area_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ChooseArea_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ChooseArea_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ChooseAreaReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ChooseAreaReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_DBAreaAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_DBAreaAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_DBAreaInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_DBAreaInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_chooseArea_2etxt() {
  protobuf_AddDesc_chooseArea_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chooseArea.txt");
  GOOGLE_CHECK(file != NULL);
  SD_AreaList_descriptor_ = file->message_type(0);
  static const int SD_AreaList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD_AreaList, m_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD_AreaList, m_area_),
  };
  SD_AreaList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SD_AreaList_descriptor_,
      SD_AreaList::default_instance_,
      SD_AreaList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD_AreaList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD_AreaList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SD_AreaList));
  SD_Area_descriptor_ = file->message_type(1);
  static const int SD_Area_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD_Area, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD_Area, m_areaname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD_Area, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD_Area, flag_),
  };
  SD_Area_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SD_Area_descriptor_,
      SD_Area::default_instance_,
      SD_Area_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD_Area, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD_Area, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SD_Area));
  GM_ChooseArea_descriptor_ = file->message_type(2);
  static const int GM_ChooseArea_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChooseArea, m_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChooseArea, m_areaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChooseArea, m_randstr_),
  };
  GM_ChooseArea_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ChooseArea_descriptor_,
      GM_ChooseArea::default_instance_,
      GM_ChooseArea_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChooseArea, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChooseArea, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ChooseArea));
  GM_ChooseAreaReturn_descriptor_ = file->message_type(3);
  static const int GM_ChooseAreaReturn_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChooseAreaReturn, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChooseAreaReturn, m_serverip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChooseAreaReturn, m_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChooseAreaReturn, m_portnumber_),
  };
  GM_ChooseAreaReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ChooseAreaReturn_descriptor_,
      GM_ChooseAreaReturn::default_instance_,
      GM_ChooseAreaReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChooseAreaReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChooseAreaReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ChooseAreaReturn));
  SM_DBAreaAccount_descriptor_ = file->message_type(4);
  static const int SM_DBAreaAccount_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_DBAreaAccount, m_rolecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_DBAreaAccount, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_DBAreaAccount, serverstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_DBAreaAccount, onlineplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_DBAreaAccount, useip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_DBAreaAccount, areaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_DBAreaAccount, dbareainfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_DBAreaAccount, serverflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_DBAreaAccount, accountid_),
  };
  SM_DBAreaAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_DBAreaAccount_descriptor_,
      SM_DBAreaAccount::default_instance_,
      SM_DBAreaAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_DBAreaAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_DBAreaAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_DBAreaAccount));
  SM_DBAreaInfo_descriptor_ = file->message_type(5);
  static const int SM_DBAreaInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_DBAreaInfo, m_rolelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_DBAreaInfo, m_rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_DBAreaInfo, m_accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_DBAreaInfo, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_DBAreaInfo, m_areaid_),
  };
  SM_DBAreaInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_DBAreaInfo_descriptor_,
      SM_DBAreaInfo::default_instance_,
      SM_DBAreaInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_DBAreaInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_DBAreaInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_DBAreaInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chooseArea_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SD_AreaList_descriptor_, &SD_AreaList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SD_Area_descriptor_, &SD_Area::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ChooseArea_descriptor_, &GM_ChooseArea::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ChooseAreaReturn_descriptor_, &GM_ChooseAreaReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_DBAreaAccount_descriptor_, &SM_DBAreaAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_DBAreaInfo_descriptor_, &SM_DBAreaInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chooseArea_2etxt() {
  delete SD_AreaList::default_instance_;
  delete SD_AreaList_reflection_;
  delete SD_Area::default_instance_;
  delete SD_Area_reflection_;
  delete GM_ChooseArea::default_instance_;
  delete GM_ChooseArea_reflection_;
  delete GM_ChooseAreaReturn::default_instance_;
  delete GM_ChooseAreaReturn_reflection_;
  delete SM_DBAreaAccount::default_instance_;
  delete SM_DBAreaAccount_reflection_;
  delete SM_DBAreaInfo::default_instance_;
  delete SM_DBAreaInfo_reflection_;
}

void protobuf_AddDesc_chooseArea_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016chooseArea.txt\"8\n\013SD_AreaList\022\017\n\007m_Cou"
    "nt\030\001 \002(\005\022\030\n\006m_Area\030\002 \003(\0132\010.SD_Area\"H\n\007SD"
    "_Area\022\014\n\004m_id\030\001 \002(\005\022\022\n\nm_AreaName\030\002 \002(\t\022"
    "\r\n\005state\030\003 \001(\005\022\014\n\004flag\030\004 \001(\005\"G\n\rGM_Choos"
    "eArea\022\021\n\tm_Account\030\001 \002(\005\022\020\n\010m_AreaID\030\002 \002"
    "(\005\022\021\n\tm_RandStr\030\003 \002(\t\"e\n\023GM_ChooseAreaRe"
    "turn\022\020\n\010m_Result\030\001 \002(\005\022\022\n\nm_ServerIP\030\002 \001"
    "(\t\022\022\n\nm_Password\030\003 \001(\t\022\024\n\014m_PortNumber\030\004"
    " \001(\005\"\316\001\n\020SM_DBAreaAccount\022\023\n\013m_roleCount"
    "\030\001 \002(\005\022\020\n\010serverId\030\002 \001(\005\022\023\n\013serverState\030"
    "\003 \001(\005\022\024\n\014onlinePlayer\030\004 \001(\005\022\r\n\005useip\030\005 \001"
    "(\t\022\016\n\006areaId\030\006 \001(\005\022\"\n\ndbAreaInfo\030\007 \003(\0132\016"
    ".SM_DBAreaInfo\022\022\n\nserverFlag\030\010 \001(\005\022\021\n\tac"
    "countId\030\t \001(\005\"q\n\rSM_DBAreaInfo\022\023\n\013m_role"
    "Level\030\001 \002(\005\022\022\n\nm_roleName\030\003 \002(\t\022\023\n\013m_acc"
    "ountId\030\004 \001(\005\022\020\n\010m_roleID\030\005 \001(\005\022\020\n\010m_area"
    "id\030\006 \001(\005", 648);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chooseArea.txt", &protobuf_RegisterTypes);
  SD_AreaList::default_instance_ = new SD_AreaList();
  SD_Area::default_instance_ = new SD_Area();
  GM_ChooseArea::default_instance_ = new GM_ChooseArea();
  GM_ChooseAreaReturn::default_instance_ = new GM_ChooseAreaReturn();
  SM_DBAreaAccount::default_instance_ = new SM_DBAreaAccount();
  SM_DBAreaInfo::default_instance_ = new SM_DBAreaInfo();
  SD_AreaList::default_instance_->InitAsDefaultInstance();
  SD_Area::default_instance_->InitAsDefaultInstance();
  GM_ChooseArea::default_instance_->InitAsDefaultInstance();
  GM_ChooseAreaReturn::default_instance_->InitAsDefaultInstance();
  SM_DBAreaAccount::default_instance_->InitAsDefaultInstance();
  SM_DBAreaInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chooseArea_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chooseArea_2etxt {
  StaticDescriptorInitializer_chooseArea_2etxt() {
    protobuf_AddDesc_chooseArea_2etxt();
  }
} static_descriptor_initializer_chooseArea_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int SD_AreaList::kMCountFieldNumber;
const int SD_AreaList::kMAreaFieldNumber;
#endif  // !_MSC_VER

SD_AreaList::SD_AreaList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SD_AreaList::InitAsDefaultInstance() {
}

SD_AreaList::SD_AreaList(const SD_AreaList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SD_AreaList::SharedCtor() {
  _cached_size_ = 0;
  m_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SD_AreaList::~SD_AreaList() {
  SharedDtor();
}

void SD_AreaList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SD_AreaList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SD_AreaList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SD_AreaList_descriptor_;
}

const SD_AreaList& SD_AreaList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chooseArea_2etxt();
  return *default_instance_;
}

SD_AreaList* SD_AreaList::default_instance_ = NULL;

SD_AreaList* SD_AreaList::New() const {
  return new SD_AreaList;
}

void SD_AreaList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_count_ = 0;
  }
  m_area_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SD_AreaList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_Area;
        break;
      }

      // repeated .SD_Area m_Area = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_area()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_Area;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SD_AreaList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Count = 1;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_count(), output);
  }

  // repeated .SD_Area m_Area = 2;
  for (int i = 0; i < this->m_area_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_area(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SD_AreaList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Count = 1;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_count(), target);
  }

  // repeated .SD_Area m_Area = 2;
  for (int i = 0; i < this->m_area_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_area(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SD_AreaList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Count = 1;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_count());
    }

  }
  // repeated .SD_Area m_Area = 2;
  total_size += 1 * this->m_area_size();
  for (int i = 0; i < this->m_area_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_area(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SD_AreaList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SD_AreaList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SD_AreaList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SD_AreaList::MergeFrom(const SD_AreaList& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_area_.MergeFrom(from.m_area_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SD_AreaList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SD_AreaList::CopyFrom(const SD_AreaList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SD_AreaList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_area_size(); i++) {
    if (!this->m_area(i).IsInitialized()) return false;
  }
  return true;
}

void SD_AreaList::Swap(SD_AreaList* other) {
  if (other != this) {
    std::swap(m_count_, other->m_count_);
    m_area_.Swap(&other->m_area_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SD_AreaList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SD_AreaList_descriptor_;
  metadata.reflection = SD_AreaList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SD_Area::kMIdFieldNumber;
const int SD_Area::kMAreaNameFieldNumber;
const int SD_Area::kStateFieldNumber;
const int SD_Area::kFlagFieldNumber;
#endif  // !_MSC_VER

SD_Area::SD_Area()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SD_Area::InitAsDefaultInstance() {
}

SD_Area::SD_Area(const SD_Area& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SD_Area::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_areaname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SD_Area::~SD_Area() {
  SharedDtor();
}

void SD_Area::SharedDtor() {
  if (m_areaname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_areaname_;
  }
  if (this != default_instance_) {
  }
}

void SD_Area::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SD_Area::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SD_Area_descriptor_;
}

const SD_Area& SD_Area::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chooseArea_2etxt();
  return *default_instance_;
}

SD_Area* SD_Area::default_instance_ = NULL;

SD_Area* SD_Area::New() const {
  return new SD_Area;
}

void SD_Area::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_areaname()) {
      if (m_areaname_ != &::google::protobuf::internal::kEmptyString) {
        m_areaname_->clear();
      }
    }
    state_ = 0;
    flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SD_Area::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_AreaName;
        break;
      }

      // required string m_AreaName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_AreaName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_areaname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_areaname().data(), this->m_areaname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flag;
        break;
      }

      // optional int32 flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SD_Area::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // required string m_AreaName = 2;
  if (has_m_areaname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_areaname().data(), this->m_areaname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_areaname(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // optional int32 flag = 4;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SD_Area::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // required string m_AreaName = 2;
  if (has_m_areaname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_areaname().data(), this->m_areaname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_areaname(), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // optional int32 flag = 4;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SD_Area::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // required string m_AreaName = 2;
    if (has_m_areaname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_areaname());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 flag = 4;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SD_Area::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SD_Area* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SD_Area*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SD_Area::MergeFrom(const SD_Area& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_areaname()) {
      set_m_areaname(from.m_areaname());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SD_Area::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SD_Area::CopyFrom(const SD_Area& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SD_Area::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SD_Area::Swap(SD_Area* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_areaname_, other->m_areaname_);
    std::swap(state_, other->state_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SD_Area::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SD_Area_descriptor_;
  metadata.reflection = SD_Area_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ChooseArea::kMAccountFieldNumber;
const int GM_ChooseArea::kMAreaIDFieldNumber;
const int GM_ChooseArea::kMRandStrFieldNumber;
#endif  // !_MSC_VER

GM_ChooseArea::GM_ChooseArea()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ChooseArea::InitAsDefaultInstance() {
}

GM_ChooseArea::GM_ChooseArea(const GM_ChooseArea& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ChooseArea::SharedCtor() {
  _cached_size_ = 0;
  m_account_ = 0;
  m_areaid_ = 0;
  m_randstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ChooseArea::~GM_ChooseArea() {
  SharedDtor();
}

void GM_ChooseArea::SharedDtor() {
  if (m_randstr_ != &::google::protobuf::internal::kEmptyString) {
    delete m_randstr_;
  }
  if (this != default_instance_) {
  }
}

void GM_ChooseArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ChooseArea::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ChooseArea_descriptor_;
}

const GM_ChooseArea& GM_ChooseArea::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chooseArea_2etxt();
  return *default_instance_;
}

GM_ChooseArea* GM_ChooseArea::default_instance_ = NULL;

GM_ChooseArea* GM_ChooseArea::New() const {
  return new GM_ChooseArea;
}

void GM_ChooseArea::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_account_ = 0;
    m_areaid_ = 0;
    if (has_m_randstr()) {
      if (m_randstr_ != &::google::protobuf::internal::kEmptyString) {
        m_randstr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ChooseArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_account_)));
          set_has_m_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_AreaID;
        break;
      }

      // required int32 m_AreaID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_AreaID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_areaid_)));
          set_has_m_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_RandStr;
        break;
      }

      // required string m_RandStr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_RandStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_randstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_randstr().data(), this->m_randstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ChooseArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Account = 1;
  if (has_m_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_account(), output);
  }

  // required int32 m_AreaID = 2;
  if (has_m_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_areaid(), output);
  }

  // required string m_RandStr = 3;
  if (has_m_randstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_randstr().data(), this->m_randstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_randstr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ChooseArea::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Account = 1;
  if (has_m_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_account(), target);
  }

  // required int32 m_AreaID = 2;
  if (has_m_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_areaid(), target);
  }

  // required string m_RandStr = 3;
  if (has_m_randstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_randstr().data(), this->m_randstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_randstr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ChooseArea::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Account = 1;
    if (has_m_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_account());
    }

    // required int32 m_AreaID = 2;
    if (has_m_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_areaid());
    }

    // required string m_RandStr = 3;
    if (has_m_randstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_randstr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ChooseArea::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ChooseArea* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ChooseArea*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ChooseArea::MergeFrom(const GM_ChooseArea& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_account()) {
      set_m_account(from.m_account());
    }
    if (from.has_m_areaid()) {
      set_m_areaid(from.m_areaid());
    }
    if (from.has_m_randstr()) {
      set_m_randstr(from.m_randstr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ChooseArea::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ChooseArea::CopyFrom(const GM_ChooseArea& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ChooseArea::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_ChooseArea::Swap(GM_ChooseArea* other) {
  if (other != this) {
    std::swap(m_account_, other->m_account_);
    std::swap(m_areaid_, other->m_areaid_);
    std::swap(m_randstr_, other->m_randstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ChooseArea::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ChooseArea_descriptor_;
  metadata.reflection = GM_ChooseArea_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ChooseAreaReturn::kMResultFieldNumber;
const int GM_ChooseAreaReturn::kMServerIPFieldNumber;
const int GM_ChooseAreaReturn::kMPasswordFieldNumber;
const int GM_ChooseAreaReturn::kMPortNumberFieldNumber;
#endif  // !_MSC_VER

GM_ChooseAreaReturn::GM_ChooseAreaReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ChooseAreaReturn::InitAsDefaultInstance() {
}

GM_ChooseAreaReturn::GM_ChooseAreaReturn(const GM_ChooseAreaReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ChooseAreaReturn::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  m_serverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_portnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ChooseAreaReturn::~GM_ChooseAreaReturn() {
  SharedDtor();
}

void GM_ChooseAreaReturn::SharedDtor() {
  if (m_serverip_ != &::google::protobuf::internal::kEmptyString) {
    delete m_serverip_;
  }
  if (m_password_ != &::google::protobuf::internal::kEmptyString) {
    delete m_password_;
  }
  if (this != default_instance_) {
  }
}

void GM_ChooseAreaReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ChooseAreaReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ChooseAreaReturn_descriptor_;
}

const GM_ChooseAreaReturn& GM_ChooseAreaReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chooseArea_2etxt();
  return *default_instance_;
}

GM_ChooseAreaReturn* GM_ChooseAreaReturn::default_instance_ = NULL;

GM_ChooseAreaReturn* GM_ChooseAreaReturn::New() const {
  return new GM_ChooseAreaReturn;
}

void GM_ChooseAreaReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    if (has_m_serverip()) {
      if (m_serverip_ != &::google::protobuf::internal::kEmptyString) {
        m_serverip_->clear();
      }
    }
    if (has_m_password()) {
      if (m_password_ != &::google::protobuf::internal::kEmptyString) {
        m_password_->clear();
      }
    }
    m_portnumber_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ChooseAreaReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_ServerIP;
        break;
      }

      // optional string m_ServerIP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ServerIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_serverip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_serverip().data(), this->m_serverip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_Password;
        break;
      }

      // optional string m_Password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_password().data(), this->m_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_PortNumber;
        break;
      }

      // optional int32 m_PortNumber = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_PortNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_portnumber_)));
          set_has_m_portnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ChooseAreaReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // optional string m_ServerIP = 2;
  if (has_m_serverip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_serverip().data(), this->m_serverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_serverip(), output);
  }

  // optional string m_Password = 3;
  if (has_m_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_password().data(), this->m_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_password(), output);
  }

  // optional int32 m_PortNumber = 4;
  if (has_m_portnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_portnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ChooseAreaReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // optional string m_ServerIP = 2;
  if (has_m_serverip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_serverip().data(), this->m_serverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_serverip(), target);
  }

  // optional string m_Password = 3;
  if (has_m_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_password().data(), this->m_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_password(), target);
  }

  // optional int32 m_PortNumber = 4;
  if (has_m_portnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_portnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ChooseAreaReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // optional string m_ServerIP = 2;
    if (has_m_serverip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_serverip());
    }

    // optional string m_Password = 3;
    if (has_m_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_password());
    }

    // optional int32 m_PortNumber = 4;
    if (has_m_portnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_portnumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ChooseAreaReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ChooseAreaReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ChooseAreaReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ChooseAreaReturn::MergeFrom(const GM_ChooseAreaReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_serverip()) {
      set_m_serverip(from.m_serverip());
    }
    if (from.has_m_password()) {
      set_m_password(from.m_password());
    }
    if (from.has_m_portnumber()) {
      set_m_portnumber(from.m_portnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ChooseAreaReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ChooseAreaReturn::CopyFrom(const GM_ChooseAreaReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ChooseAreaReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_ChooseAreaReturn::Swap(GM_ChooseAreaReturn* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(m_serverip_, other->m_serverip_);
    std::swap(m_password_, other->m_password_);
    std::swap(m_portnumber_, other->m_portnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ChooseAreaReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ChooseAreaReturn_descriptor_;
  metadata.reflection = GM_ChooseAreaReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_DBAreaAccount::kMRoleCountFieldNumber;
const int SM_DBAreaAccount::kServerIdFieldNumber;
const int SM_DBAreaAccount::kServerStateFieldNumber;
const int SM_DBAreaAccount::kOnlinePlayerFieldNumber;
const int SM_DBAreaAccount::kUseipFieldNumber;
const int SM_DBAreaAccount::kAreaIdFieldNumber;
const int SM_DBAreaAccount::kDbAreaInfoFieldNumber;
const int SM_DBAreaAccount::kServerFlagFieldNumber;
const int SM_DBAreaAccount::kAccountIdFieldNumber;
#endif  // !_MSC_VER

SM_DBAreaAccount::SM_DBAreaAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_DBAreaAccount::InitAsDefaultInstance() {
}

SM_DBAreaAccount::SM_DBAreaAccount(const SM_DBAreaAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_DBAreaAccount::SharedCtor() {
  _cached_size_ = 0;
  m_rolecount_ = 0;
  serverid_ = 0;
  serverstate_ = 0;
  onlineplayer_ = 0;
  useip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  areaid_ = 0;
  serverflag_ = 0;
  accountid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_DBAreaAccount::~SM_DBAreaAccount() {
  SharedDtor();
}

void SM_DBAreaAccount::SharedDtor() {
  if (useip_ != &::google::protobuf::internal::kEmptyString) {
    delete useip_;
  }
  if (this != default_instance_) {
  }
}

void SM_DBAreaAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_DBAreaAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_DBAreaAccount_descriptor_;
}

const SM_DBAreaAccount& SM_DBAreaAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chooseArea_2etxt();
  return *default_instance_;
}

SM_DBAreaAccount* SM_DBAreaAccount::default_instance_ = NULL;

SM_DBAreaAccount* SM_DBAreaAccount::New() const {
  return new SM_DBAreaAccount;
}

void SM_DBAreaAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_rolecount_ = 0;
    serverid_ = 0;
    serverstate_ = 0;
    onlineplayer_ = 0;
    if (has_useip()) {
      if (useip_ != &::google::protobuf::internal::kEmptyString) {
        useip_->clear();
      }
    }
    areaid_ = 0;
    serverflag_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    accountid_ = 0;
  }
  dbareainfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_DBAreaAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rolecount_)));
          set_has_m_rolecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverId;
        break;
      }

      // optional int32 serverId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverState;
        break;
      }

      // optional int32 serverState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverstate_)));
          set_has_serverstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_onlinePlayer;
        break;
      }

      // optional int32 onlinePlayer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlinePlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlineplayer_)));
          set_has_onlineplayer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_useip;
        break;
      }

      // optional string useip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_useip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->useip().data(), this->useip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_areaId;
        break;
      }

      // optional int32 areaId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_dbAreaInfo;
        break;
      }

      // repeated .SM_DBAreaInfo dbAreaInfo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dbAreaInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dbareainfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_dbAreaInfo;
        if (input->ExpectTag(64)) goto parse_serverFlag;
        break;
      }

      // optional int32 serverFlag = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverflag_)));
          set_has_serverflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_accountId;
        break;
      }

      // optional int32 accountId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_DBAreaAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleCount = 1;
  if (has_m_rolecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_rolecount(), output);
  }

  // optional int32 serverId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serverid(), output);
  }

  // optional int32 serverState = 3;
  if (has_serverstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->serverstate(), output);
  }

  // optional int32 onlinePlayer = 4;
  if (has_onlineplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->onlineplayer(), output);
  }

  // optional string useip = 5;
  if (has_useip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->useip().data(), this->useip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->useip(), output);
  }

  // optional int32 areaId = 6;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->areaid(), output);
  }

  // repeated .SM_DBAreaInfo dbAreaInfo = 7;
  for (int i = 0; i < this->dbareainfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->dbareainfo(i), output);
  }

  // optional int32 serverFlag = 8;
  if (has_serverflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->serverflag(), output);
  }

  // optional int32 accountId = 9;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->accountid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_DBAreaAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleCount = 1;
  if (has_m_rolecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_rolecount(), target);
  }

  // optional int32 serverId = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->serverid(), target);
  }

  // optional int32 serverState = 3;
  if (has_serverstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->serverstate(), target);
  }

  // optional int32 onlinePlayer = 4;
  if (has_onlineplayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->onlineplayer(), target);
  }

  // optional string useip = 5;
  if (has_useip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->useip().data(), this->useip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->useip(), target);
  }

  // optional int32 areaId = 6;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->areaid(), target);
  }

  // repeated .SM_DBAreaInfo dbAreaInfo = 7;
  for (int i = 0; i < this->dbareainfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->dbareainfo(i), target);
  }

  // optional int32 serverFlag = 8;
  if (has_serverflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->serverflag(), target);
  }

  // optional int32 accountId = 9;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->accountid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_DBAreaAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleCount = 1;
    if (has_m_rolecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rolecount());
    }

    // optional int32 serverId = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // optional int32 serverState = 3;
    if (has_serverstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverstate());
    }

    // optional int32 onlinePlayer = 4;
    if (has_onlineplayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onlineplayer());
    }

    // optional string useip = 5;
    if (has_useip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->useip());
    }

    // optional int32 areaId = 6;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaid());
    }

    // optional int32 serverFlag = 8;
    if (has_serverflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverflag());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 accountId = 9;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accountid());
    }

  }
  // repeated .SM_DBAreaInfo dbAreaInfo = 7;
  total_size += 1 * this->dbareainfo_size();
  for (int i = 0; i < this->dbareainfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dbareainfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_DBAreaAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_DBAreaAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_DBAreaAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_DBAreaAccount::MergeFrom(const SM_DBAreaAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  dbareainfo_.MergeFrom(from.dbareainfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_rolecount()) {
      set_m_rolecount(from.m_rolecount());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_serverstate()) {
      set_serverstate(from.serverstate());
    }
    if (from.has_onlineplayer()) {
      set_onlineplayer(from.onlineplayer());
    }
    if (from.has_useip()) {
      set_useip(from.useip());
    }
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
    if (from.has_serverflag()) {
      set_serverflag(from.serverflag());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_DBAreaAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_DBAreaAccount::CopyFrom(const SM_DBAreaAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_DBAreaAccount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < dbareainfo_size(); i++) {
    if (!this->dbareainfo(i).IsInitialized()) return false;
  }
  return true;
}

void SM_DBAreaAccount::Swap(SM_DBAreaAccount* other) {
  if (other != this) {
    std::swap(m_rolecount_, other->m_rolecount_);
    std::swap(serverid_, other->serverid_);
    std::swap(serverstate_, other->serverstate_);
    std::swap(onlineplayer_, other->onlineplayer_);
    std::swap(useip_, other->useip_);
    std::swap(areaid_, other->areaid_);
    dbareainfo_.Swap(&other->dbareainfo_);
    std::swap(serverflag_, other->serverflag_);
    std::swap(accountid_, other->accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_DBAreaAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_DBAreaAccount_descriptor_;
  metadata.reflection = SM_DBAreaAccount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_DBAreaInfo::kMRoleLevelFieldNumber;
const int SM_DBAreaInfo::kMRoleNameFieldNumber;
const int SM_DBAreaInfo::kMAccountIdFieldNumber;
const int SM_DBAreaInfo::kMRoleIDFieldNumber;
const int SM_DBAreaInfo::kMAreaidFieldNumber;
#endif  // !_MSC_VER

SM_DBAreaInfo::SM_DBAreaInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_DBAreaInfo::InitAsDefaultInstance() {
}

SM_DBAreaInfo::SM_DBAreaInfo(const SM_DBAreaInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_DBAreaInfo::SharedCtor() {
  _cached_size_ = 0;
  m_rolelevel_ = 0;
  m_rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_accountid_ = 0;
  m_roleid_ = 0;
  m_areaid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_DBAreaInfo::~SM_DBAreaInfo() {
  SharedDtor();
}

void SM_DBAreaInfo::SharedDtor() {
  if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_rolename_;
  }
  if (this != default_instance_) {
  }
}

void SM_DBAreaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_DBAreaInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_DBAreaInfo_descriptor_;
}

const SM_DBAreaInfo& SM_DBAreaInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chooseArea_2etxt();
  return *default_instance_;
}

SM_DBAreaInfo* SM_DBAreaInfo::default_instance_ = NULL;

SM_DBAreaInfo* SM_DBAreaInfo::New() const {
  return new SM_DBAreaInfo;
}

void SM_DBAreaInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_rolelevel_ = 0;
    if (has_m_rolename()) {
      if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
        m_rolename_->clear();
      }
    }
    m_accountid_ = 0;
    m_roleid_ = 0;
    m_areaid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_DBAreaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rolelevel_)));
          set_has_m_rolelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_roleName;
        break;
      }

      // required string m_roleName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_rolename().data(), this->m_rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_accountId;
        break;
      }

      // optional int32 m_accountId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_accountId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_accountid_)));
          set_has_m_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_roleID;
        break;
      }

      // optional int32 m_roleID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_areaid;
        break;
      }

      // optional int32 m_areaid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_areaid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_areaid_)));
          set_has_m_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_DBAreaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleLevel = 1;
  if (has_m_rolelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_rolelevel(), output);
  }

  // required string m_roleName = 3;
  if (has_m_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rolename().data(), this->m_rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_rolename(), output);
  }

  // optional int32 m_accountId = 4;
  if (has_m_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_accountid(), output);
  }

  // optional int32 m_roleID = 5;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_roleid(), output);
  }

  // optional int32 m_areaid = 6;
  if (has_m_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_areaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_DBAreaInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleLevel = 1;
  if (has_m_rolelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_rolelevel(), target);
  }

  // required string m_roleName = 3;
  if (has_m_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rolename().data(), this->m_rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_rolename(), target);
  }

  // optional int32 m_accountId = 4;
  if (has_m_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_accountid(), target);
  }

  // optional int32 m_roleID = 5;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_roleid(), target);
  }

  // optional int32 m_areaid = 6;
  if (has_m_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_areaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_DBAreaInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleLevel = 1;
    if (has_m_rolelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rolelevel());
    }

    // required string m_roleName = 3;
    if (has_m_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_rolename());
    }

    // optional int32 m_accountId = 4;
    if (has_m_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_accountid());
    }

    // optional int32 m_roleID = 5;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_areaid = 6;
    if (has_m_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_areaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_DBAreaInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_DBAreaInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_DBAreaInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_DBAreaInfo::MergeFrom(const SM_DBAreaInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_rolelevel()) {
      set_m_rolelevel(from.m_rolelevel());
    }
    if (from.has_m_rolename()) {
      set_m_rolename(from.m_rolename());
    }
    if (from.has_m_accountid()) {
      set_m_accountid(from.m_accountid());
    }
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_areaid()) {
      set_m_areaid(from.m_areaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_DBAreaInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_DBAreaInfo::CopyFrom(const SM_DBAreaInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_DBAreaInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SM_DBAreaInfo::Swap(SM_DBAreaInfo* other) {
  if (other != this) {
    std::swap(m_rolelevel_, other->m_rolelevel_);
    std::swap(m_rolename_, other->m_rolename_);
    std::swap(m_accountid_, other->m_accountid_);
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_areaid_, other->m_areaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_DBAreaInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_DBAreaInfo_descriptor_;
  metadata.reflection = SM_DBAreaInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
