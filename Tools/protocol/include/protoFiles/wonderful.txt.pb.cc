// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wonderful.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "wonderful.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_WonderfulList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_WonderfulList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_WonderfulRequests_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_WonderfulRequests_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_WonderfulData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_WonderfulData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_WonderfulReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_WonderfulReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_WonderfulObj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_WonderfulObj_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_WonderfulData2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_WonderfulData2_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_SignDataReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_SignDataReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Resign_Cost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Resign_Cost_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Sign_DayObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Sign_DayObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_SignObject_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_SignObject_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_QHeroDataReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_QHeroDataReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_QHeroObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_QHeroObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_WonderfulBuyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_WonderfulBuyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_WonderfulBuyResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_WonderfulBuyResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_WonderfulAchieve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_WonderfulAchieve_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_WonderfulResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_WonderfulResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ExtraInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ExtraInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_WonderfulStateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_WonderfulStateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_WonderfulStateNotify2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_WonderfulStateNotify2_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_WonderfulChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_WonderfulChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_LoginDataReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_LoginDataReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_LoginObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_LoginObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_LoginObject_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_LoginObject_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_UpgradeDataReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_UpgradeDataReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_UpgradeObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_UpgradeObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_UpgradeObject_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_UpgradeObject_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_OnlineDataReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_OnlineDataReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_OnlineObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_OnlineObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_OnlineObject_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_OnlineObject_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_LimitpetReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_LimitpetReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_LimitpetRankReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_LimitpetRankReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ScoreRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ScoreRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_LoginReward_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_LoginReward_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_LoginReward_Receive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_LoginReward_Receive_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Wonderful_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Wonderful_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_WonderfulReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_WonderfulReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Wonderfuls_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Wonderfuls_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_WonderfulSign_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_WonderfulSign_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_WonderfulHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_WonderfulHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_HeroData_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_HeroData_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Card_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Card_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Card_info_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Card_info_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Card_red_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Card_red_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Card_db_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Card_db_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Card_db_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Card_db_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Card_db_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Card_db_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Rotate_db_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Rotate_db_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Rotate_db_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Rotate_db_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Rotate_rotate_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Rotate_rotate_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Rotate_rotate_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Rotate_rotate_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Rotate_record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Rotate_record_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Rotate_record_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Rotate_record_return_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_wonderful_2etxt() {
  protobuf_AddDesc_wonderful_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "wonderful.txt");
  GOOGLE_CHECK(file != NULL);
  GM_WonderfulList_descriptor_ = file->message_type(0);
  static const int GM_WonderfulList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulList, m_wonderfulid_),
  };
  GM_WonderfulList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_WonderfulList_descriptor_,
      GM_WonderfulList::default_instance_,
      GM_WonderfulList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_WonderfulList));
  GM_WonderfulRequests_descriptor_ = file->message_type(1);
  static const int GM_WonderfulRequests_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulRequests, m_wonderfulid_),
  };
  GM_WonderfulRequests_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_WonderfulRequests_descriptor_,
      GM_WonderfulRequests::default_instance_,
      GM_WonderfulRequests_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulRequests, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulRequests, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_WonderfulRequests));
  GM_WonderfulData_descriptor_ = file->message_type(2);
  static const int GM_WonderfulData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulData, m_wonderfulid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulData, m_wonderfuldes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulData, m_wonderfultime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulData, m_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulData, m_enjoystate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulData, m_monthstate_),
  };
  GM_WonderfulData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_WonderfulData_descriptor_,
      GM_WonderfulData::default_instance_,
      GM_WonderfulData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_WonderfulData));
  GM_WonderfulReward_descriptor_ = file->message_type(3);
  static const int GM_WonderfulReward_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulReward, m_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulReward, m_gear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulReward, m_geardes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulReward, m_obj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulReward, m_para1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulReward, m_para2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulReward, m_downtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulReward, m_giftbagid_),
  };
  GM_WonderfulReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_WonderfulReward_descriptor_,
      GM_WonderfulReward::default_instance_,
      GM_WonderfulReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_WonderfulReward));
  GM_WonderfulObj_descriptor_ = file->message_type(4);
  static const int GM_WonderfulObj_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulObj, m_objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulObj, m_objcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulObj, m_objectrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulObj, icon_),
  };
  GM_WonderfulObj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_WonderfulObj_descriptor_,
      GM_WonderfulObj::default_instance_,
      GM_WonderfulObj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulObj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulObj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_WonderfulObj));
  GM_WonderfulData2_descriptor_ = file->message_type(5);
  static const int GM_WonderfulData2_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulData2, m_wonderfulid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulData2, m_wonderfulname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulData2, m_wonderfulrule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulData2, m_guideid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulData2, m_wonderfultime_),
  };
  GM_WonderfulData2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_WonderfulData2_descriptor_,
      GM_WonderfulData2::default_instance_,
      GM_WonderfulData2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulData2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulData2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_WonderfulData2));
  GM_SignDataReturn_descriptor_ = file->message_type(6);
  static const int GM_SignDataReturn_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SignDataReturn, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SignDataReturn, m_currentsign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SignDataReturn, m_signstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SignDataReturn, m_month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SignDataReturn, m_curday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SignDataReturn, m_remaintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SignDataReturn, m_hasresigntimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SignDataReturn, m_regigncost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SignDataReturn, dayobj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SignDataReturn, costitem_),
  };
  GM_SignDataReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_SignDataReturn_descriptor_,
      GM_SignDataReturn::default_instance_,
      GM_SignDataReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SignDataReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SignDataReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_SignDataReturn));
  GM_Resign_Cost_descriptor_ = file->message_type(7);
  static const int GM_Resign_Cost_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Resign_Cost, m_resigntimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Resign_Cost, m_cost_),
  };
  GM_Resign_Cost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Resign_Cost_descriptor_,
      GM_Resign_Cost::default_instance_,
      GM_Resign_Cost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Resign_Cost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Resign_Cost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Resign_Cost));
  GM_Sign_DayObject_descriptor_ = file->message_type(8);
  static const int GM_Sign_DayObject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Sign_DayObject, m_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Sign_DayObject, items_),
  };
  GM_Sign_DayObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Sign_DayObject_descriptor_,
      GM_Sign_DayObject::default_instance_,
      GM_Sign_DayObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Sign_DayObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Sign_DayObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Sign_DayObject));
  GM_SignObject_Item_descriptor_ = file->message_type(9);
  static const int GM_SignObject_Item_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SignObject_Item, m_objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SignObject_Item, m_ojbcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SignObject_Item, m_viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SignObject_Item, m_times_),
  };
  GM_SignObject_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_SignObject_Item_descriptor_,
      GM_SignObject_Item::default_instance_,
      GM_SignObject_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SignObject_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SignObject_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_SignObject_Item));
  GM_QHeroDataReturn_descriptor_ = file->message_type(10);
  static const int GM_QHeroDataReturn_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_QHeroDataReturn, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_QHeroDataReturn, m_des_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_QHeroDataReturn, m_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_QHeroDataReturn, m_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_QHeroDataReturn, m_viplimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_QHeroDataReturn, m_objinfo_),
  };
  GM_QHeroDataReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_QHeroDataReturn_descriptor_,
      GM_QHeroDataReturn::default_instance_,
      GM_QHeroDataReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_QHeroDataReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_QHeroDataReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_QHeroDataReturn));
  GM_QHeroObject_descriptor_ = file->message_type(11);
  static const int GM_QHeroObject_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_QHeroObject, m_objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_QHeroObject, m_objcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_QHeroObject, m_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_QHeroObject, m_state_),
  };
  GM_QHeroObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_QHeroObject_descriptor_,
      GM_QHeroObject::default_instance_,
      GM_QHeroObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_QHeroObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_QHeroObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_QHeroObject));
  GM_WonderfulBuyRequest_descriptor_ = file->message_type(12);
  static const int GM_WonderfulBuyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulBuyRequest, m_wonderfulid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulBuyRequest, m_param_),
  };
  GM_WonderfulBuyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_WonderfulBuyRequest_descriptor_,
      GM_WonderfulBuyRequest::default_instance_,
      GM_WonderfulBuyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulBuyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulBuyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_WonderfulBuyRequest));
  GM_WonderfulBuyResult_descriptor_ = file->message_type(13);
  static const int GM_WonderfulBuyResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulBuyResult, m_wonderfulid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulBuyResult, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulBuyResult, m_param_),
  };
  GM_WonderfulBuyResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_WonderfulBuyResult_descriptor_,
      GM_WonderfulBuyResult::default_instance_,
      GM_WonderfulBuyResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulBuyResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulBuyResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_WonderfulBuyResult));
  GM_WonderfulAchieve_descriptor_ = file->message_type(14);
  static const int GM_WonderfulAchieve_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulAchieve, m_wonderfulid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulAchieve, m_giftbagid_),
  };
  GM_WonderfulAchieve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_WonderfulAchieve_descriptor_,
      GM_WonderfulAchieve::default_instance_,
      GM_WonderfulAchieve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulAchieve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulAchieve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_WonderfulAchieve));
  GM_WonderfulResult_descriptor_ = file->message_type(15);
  static const int GM_WonderfulResult_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulResult, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulResult, m_wonderfulid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulResult, m_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulResult, m_opencount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulResult, m_myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulResult, m_mysocre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulResult, m_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulResult, m_free_),
  };
  GM_WonderfulResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_WonderfulResult_descriptor_,
      GM_WonderfulResult::default_instance_,
      GM_WonderfulResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_WonderfulResult));
  GM_ExtraInfo_descriptor_ = file->message_type(16);
  static const int GM_ExtraInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ExtraInfo, m_describe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ExtraInfo, items_),
  };
  GM_ExtraInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ExtraInfo_descriptor_,
      GM_ExtraInfo::default_instance_,
      GM_ExtraInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ExtraInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ExtraInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ExtraInfo));
  GM_WonderfulStateNotify_descriptor_ = file->message_type(17);
  static const int GM_WonderfulStateNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulStateNotify, m_wonderfulid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulStateNotify, m_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulStateNotify, m_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulStateNotify, m_hadcharge_),
  };
  GM_WonderfulStateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_WonderfulStateNotify_descriptor_,
      GM_WonderfulStateNotify::default_instance_,
      GM_WonderfulStateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulStateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulStateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_WonderfulStateNotify));
  GM_WonderfulStateNotify2_descriptor_ = file->message_type(18);
  static const int GM_WonderfulStateNotify2_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulStateNotify2, m_wonderfulid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulStateNotify2, m_projectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulStateNotify2, m_gear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulStateNotify2, m_state_),
  };
  GM_WonderfulStateNotify2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_WonderfulStateNotify2_descriptor_,
      GM_WonderfulStateNotify2::default_instance_,
      GM_WonderfulStateNotify2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulStateNotify2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulStateNotify2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_WonderfulStateNotify2));
  GM_WonderfulChange_descriptor_ = file->message_type(19);
  static const int GM_WonderfulChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulChange, m_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulChange, m_wonderfulid_),
  };
  GM_WonderfulChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_WonderfulChange_descriptor_,
      GM_WonderfulChange::default_instance_,
      GM_WonderfulChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WonderfulChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_WonderfulChange));
  GM_LoginDataReturn_descriptor_ = file->message_type(20);
  static const int GM_LoginDataReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginDataReturn, m_wonderfulid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginDataReturn, dayobj_),
  };
  GM_LoginDataReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_LoginDataReturn_descriptor_,
      GM_LoginDataReturn::default_instance_,
      GM_LoginDataReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginDataReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginDataReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_LoginDataReturn));
  GM_LoginObject_descriptor_ = file->message_type(21);
  static const int GM_LoginObject_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginObject, m_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginObject, m_has_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginObject, items_),
  };
  GM_LoginObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_LoginObject_descriptor_,
      GM_LoginObject::default_instance_,
      GM_LoginObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_LoginObject));
  GM_LoginObject_Item_descriptor_ = file->message_type(22);
  static const int GM_LoginObject_Item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginObject_Item, m_objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginObject_Item, m_ojbcount_),
  };
  GM_LoginObject_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_LoginObject_Item_descriptor_,
      GM_LoginObject_Item::default_instance_,
      GM_LoginObject_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginObject_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginObject_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_LoginObject_Item));
  GM_UpgradeDataReturn_descriptor_ = file->message_type(23);
  static const int GM_UpgradeDataReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UpgradeDataReturn, m_wonderfulid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UpgradeDataReturn, levelobj_),
  };
  GM_UpgradeDataReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_UpgradeDataReturn_descriptor_,
      GM_UpgradeDataReturn::default_instance_,
      GM_UpgradeDataReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UpgradeDataReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UpgradeDataReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_UpgradeDataReturn));
  GM_UpgradeObject_descriptor_ = file->message_type(24);
  static const int GM_UpgradeObject_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UpgradeObject, m_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UpgradeObject, m_has_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UpgradeObject, items_),
  };
  GM_UpgradeObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_UpgradeObject_descriptor_,
      GM_UpgradeObject::default_instance_,
      GM_UpgradeObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UpgradeObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UpgradeObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_UpgradeObject));
  GM_UpgradeObject_Item_descriptor_ = file->message_type(25);
  static const int GM_UpgradeObject_Item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UpgradeObject_Item, m_objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UpgradeObject_Item, m_ojbcount_),
  };
  GM_UpgradeObject_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_UpgradeObject_Item_descriptor_,
      GM_UpgradeObject_Item::default_instance_,
      GM_UpgradeObject_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UpgradeObject_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UpgradeObject_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_UpgradeObject_Item));
  GM_OnlineDataReturn_descriptor_ = file->message_type(26);
  static const int GM_OnlineDataReturn_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OnlineDataReturn, m_wonderfulid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OnlineDataReturn, timeobj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OnlineDataReturn, m_onlinetime_),
  };
  GM_OnlineDataReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_OnlineDataReturn_descriptor_,
      GM_OnlineDataReturn::default_instance_,
      GM_OnlineDataReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OnlineDataReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OnlineDataReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_OnlineDataReturn));
  GM_OnlineObject_descriptor_ = file->message_type(27);
  static const int GM_OnlineObject_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OnlineObject, m_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OnlineObject, m_has_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OnlineObject, items_),
  };
  GM_OnlineObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_OnlineObject_descriptor_,
      GM_OnlineObject::default_instance_,
      GM_OnlineObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OnlineObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OnlineObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_OnlineObject));
  GM_OnlineObject_Item_descriptor_ = file->message_type(28);
  static const int GM_OnlineObject_Item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OnlineObject_Item, m_objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OnlineObject_Item, m_ojbcount_),
  };
  GM_OnlineObject_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_OnlineObject_Item_descriptor_,
      GM_OnlineObject_Item::default_instance_,
      GM_OnlineObject_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OnlineObject_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OnlineObject_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_OnlineObject_Item));
  GM_LimitpetReturn_descriptor_ = file->message_type(29);
  static const int GM_LimitpetReturn_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LimitpetReturn, m_opencount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LimitpetReturn, m_downtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LimitpetReturn, m_diamondcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LimitpetReturn, m_tendiamondcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LimitpetReturn, m_myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LimitpetReturn, m_socre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LimitpetReturn, m_petinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LimitpetReturn, m_rankobjs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LimitpetReturn, m_wonderfulid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LimitpetReturn, m_wonderfuldes_),
  };
  GM_LimitpetReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_LimitpetReturn_descriptor_,
      GM_LimitpetReturn::default_instance_,
      GM_LimitpetReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LimitpetReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LimitpetReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_LimitpetReturn));
  GM_PetInfo_descriptor_ = file->message_type(30);
  static const int GM_PetInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetInfo, m_objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetInfo, m_objcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetInfo, m_rank_),
  };
  GM_PetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PetInfo_descriptor_,
      GM_PetInfo::default_instance_,
      GM_PetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PetInfo));
  GM_LimitpetRankReturn_descriptor_ = file->message_type(31);
  static const int GM_LimitpetRankReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LimitpetRankReturn, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LimitpetRankReturn, m_rankinfos_),
  };
  GM_LimitpetRankReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_LimitpetRankReturn_descriptor_,
      GM_LimitpetRankReturn::default_instance_,
      GM_LimitpetRankReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LimitpetRankReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LimitpetRankReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_LimitpetRankReturn));
  GM_ScoreRankInfo_descriptor_ = file->message_type(32);
  static const int GM_ScoreRankInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ScoreRankInfo, m_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ScoreRankInfo, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ScoreRankInfo, m_socre_),
  };
  GM_ScoreRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ScoreRankInfo_descriptor_,
      GM_ScoreRankInfo::default_instance_,
      GM_ScoreRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ScoreRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ScoreRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ScoreRankInfo));
  GM_LoginReward_Return_descriptor_ = file->message_type(33);
  static const int GM_LoginReward_Return_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginReward_Return, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginReward_Return, m_equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginReward_Return, m_equipdetail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginReward_Return, m_ndelaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginReward_Return, m_ngetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginReward_Return, m_ngetnum_),
  };
  GM_LoginReward_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_LoginReward_Return_descriptor_,
      GM_LoginReward_Return::default_instance_,
      GM_LoginReward_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginReward_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginReward_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_LoginReward_Return));
  GM_LoginReward_Receive_descriptor_ = file->message_type(34);
  static const int GM_LoginReward_Receive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginReward_Receive, m_result_),
  };
  GM_LoginReward_Receive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_LoginReward_Receive_descriptor_,
      GM_LoginReward_Receive::default_instance_,
      GM_LoginReward_Receive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginReward_Receive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginReward_Receive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_LoginReward_Receive));
  DB_Wonderful_descriptor_ = file->message_type(35);
  static const int DB_Wonderful_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Wonderful, m_roleid_),
  };
  DB_Wonderful_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Wonderful_descriptor_,
      DB_Wonderful::default_instance_,
      DB_Wonderful_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Wonderful, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Wonderful, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Wonderful));
  DB_WonderfulReturn_descriptor_ = file->message_type(36);
  static const int DB_WonderfulReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WonderfulReturn, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WonderfulReturn, datas_),
  };
  DB_WonderfulReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_WonderfulReturn_descriptor_,
      DB_WonderfulReturn::default_instance_,
      DB_WonderfulReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WonderfulReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WonderfulReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_WonderfulReturn));
  DB_Wonderfuls_descriptor_ = file->message_type(37);
  static const int DB_Wonderfuls_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Wonderfuls, m_wonderfulid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Wonderfuls, m_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Wonderfuls, m_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Wonderfuls, m_gmid_),
  };
  DB_Wonderfuls_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Wonderfuls_descriptor_,
      DB_Wonderfuls::default_instance_,
      DB_Wonderfuls_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Wonderfuls, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Wonderfuls, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Wonderfuls));
  DB_WonderfulSign_descriptor_ = file->message_type(38);
  static const int DB_WonderfulSign_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WonderfulSign, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WonderfulSign, m_currentsign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WonderfulSign, m_signstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WonderfulSign, m_month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WonderfulSign, m_gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WonderfulSign, m_hasresigntimes_),
  };
  DB_WonderfulSign_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_WonderfulSign_descriptor_,
      DB_WonderfulSign::default_instance_,
      DB_WonderfulSign_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WonderfulSign, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WonderfulSign, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_WonderfulSign));
  DB_WonderfulHero_descriptor_ = file->message_type(39);
  static const int DB_WonderfulHero_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WonderfulHero, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WonderfulHero, m_projectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WonderfulHero, m_cangear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WonderfulHero, m_achievegear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WonderfulHero, m_gmid_),
  };
  DB_WonderfulHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_WonderfulHero_descriptor_,
      DB_WonderfulHero::default_instance_,
      DB_WonderfulHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WonderfulHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WonderfulHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_WonderfulHero));
  GM_HeroData_Return_descriptor_ = file->message_type(40);
  static const int GM_HeroData_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HeroData_Return, ishave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HeroData_Return, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HeroData_Return, remark_),
  };
  GM_HeroData_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_HeroData_Return_descriptor_,
      GM_HeroData_Return::default_instance_,
      GM_HeroData_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HeroData_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_HeroData_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_HeroData_Return));
  GM_Card_info_descriptor_ = file->message_type(41);
  static const int GM_Card_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Card_info, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Card_info, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Card_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Card_info, icon_),
  };
  GM_Card_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Card_info_descriptor_,
      GM_Card_info::default_instance_,
      GM_Card_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Card_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Card_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Card_info));
  GM_Card_info_return_descriptor_ = file->message_type(42);
  static const int GM_Card_info_return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Card_info_return, cardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Card_info_return, majiang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Card_info_return, data_),
  };
  GM_Card_info_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Card_info_return_descriptor_,
      GM_Card_info_return::default_instance_,
      GM_Card_info_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Card_info_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Card_info_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Card_info_return));
  GM_Card_red_return_descriptor_ = file->message_type(43);
  static const int GM_Card_red_return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Card_red_return, cardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Card_red_return, majiang_),
  };
  GM_Card_red_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Card_red_return_descriptor_,
      GM_Card_red_return::default_instance_,
      GM_Card_red_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Card_red_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Card_red_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Card_red_return));
  SM_Card_db_descriptor_ = file->message_type(44);
  static const int SM_Card_db_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Card_db, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Card_db, increasis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Card_db, order_),
  };
  SM_Card_db_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Card_db_descriptor_,
      SM_Card_db::default_instance_,
      SM_Card_db_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Card_db, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Card_db, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Card_db));
  SM_Card_db_return_descriptor_ = file->message_type(45);
  static const int SM_Card_db_return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Card_db_return, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Card_db_return, data_),
  };
  SM_Card_db_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Card_db_return_descriptor_,
      SM_Card_db_return::default_instance_,
      SM_Card_db_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Card_db_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Card_db_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Card_db_return));
  SM_Card_db_request_descriptor_ = file->message_type(46);
  static const int SM_Card_db_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Card_db_request, roleid_),
  };
  SM_Card_db_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Card_db_request_descriptor_,
      SM_Card_db_request::default_instance_,
      SM_Card_db_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Card_db_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Card_db_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Card_db_request));
  SM_Rotate_db_descriptor_ = file->message_type(47);
  static const int SM_Rotate_db_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Rotate_db, increase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Rotate_db, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Rotate_db, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Rotate_db, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Rotate_db, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Rotate_db, times_),
  };
  SM_Rotate_db_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Rotate_db_descriptor_,
      SM_Rotate_db::default_instance_,
      SM_Rotate_db_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Rotate_db, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Rotate_db, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Rotate_db));
  SM_Rotate_db_return_descriptor_ = file->message_type(48);
  static const int SM_Rotate_db_return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Rotate_db_return, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Rotate_db_return, data_),
  };
  SM_Rotate_db_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Rotate_db_return_descriptor_,
      SM_Rotate_db_return::default_instance_,
      SM_Rotate_db_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Rotate_db_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Rotate_db_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Rotate_db_return));
  GM_Rotate_rotate_Data_descriptor_ = file->message_type(49);
  static const int GM_Rotate_rotate_Data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Rotate_rotate_Data, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Rotate_rotate_Data, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Rotate_rotate_Data, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Rotate_rotate_Data, icon_),
  };
  GM_Rotate_rotate_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Rotate_rotate_Data_descriptor_,
      GM_Rotate_rotate_Data::default_instance_,
      GM_Rotate_rotate_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Rotate_rotate_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Rotate_rotate_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Rotate_rotate_Data));
  GM_Rotate_rotate_return_descriptor_ = file->message_type(50);
  static const int GM_Rotate_rotate_return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Rotate_rotate_return, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Rotate_rotate_return, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Rotate_rotate_return, times_),
  };
  GM_Rotate_rotate_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Rotate_rotate_return_descriptor_,
      GM_Rotate_rotate_return::default_instance_,
      GM_Rotate_rotate_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Rotate_rotate_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Rotate_rotate_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Rotate_rotate_return));
  GM_Rotate_record_descriptor_ = file->message_type(51);
  static const int GM_Rotate_record_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Rotate_record, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Rotate_record, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Rotate_record, name_),
  };
  GM_Rotate_record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Rotate_record_descriptor_,
      GM_Rotate_record::default_instance_,
      GM_Rotate_record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Rotate_record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Rotate_record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Rotate_record));
  GM_Rotate_record_return_descriptor_ = file->message_type(52);
  static const int GM_Rotate_record_return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Rotate_record_return, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Rotate_record_return, data_),
  };
  GM_Rotate_record_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Rotate_record_return_descriptor_,
      GM_Rotate_record_return::default_instance_,
      GM_Rotate_record_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Rotate_record_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Rotate_record_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Rotate_record_return));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_wonderful_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_WonderfulList_descriptor_, &GM_WonderfulList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_WonderfulRequests_descriptor_, &GM_WonderfulRequests::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_WonderfulData_descriptor_, &GM_WonderfulData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_WonderfulReward_descriptor_, &GM_WonderfulReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_WonderfulObj_descriptor_, &GM_WonderfulObj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_WonderfulData2_descriptor_, &GM_WonderfulData2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_SignDataReturn_descriptor_, &GM_SignDataReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Resign_Cost_descriptor_, &GM_Resign_Cost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Sign_DayObject_descriptor_, &GM_Sign_DayObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_SignObject_Item_descriptor_, &GM_SignObject_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_QHeroDataReturn_descriptor_, &GM_QHeroDataReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_QHeroObject_descriptor_, &GM_QHeroObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_WonderfulBuyRequest_descriptor_, &GM_WonderfulBuyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_WonderfulBuyResult_descriptor_, &GM_WonderfulBuyResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_WonderfulAchieve_descriptor_, &GM_WonderfulAchieve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_WonderfulResult_descriptor_, &GM_WonderfulResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ExtraInfo_descriptor_, &GM_ExtraInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_WonderfulStateNotify_descriptor_, &GM_WonderfulStateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_WonderfulStateNotify2_descriptor_, &GM_WonderfulStateNotify2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_WonderfulChange_descriptor_, &GM_WonderfulChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_LoginDataReturn_descriptor_, &GM_LoginDataReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_LoginObject_descriptor_, &GM_LoginObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_LoginObject_Item_descriptor_, &GM_LoginObject_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_UpgradeDataReturn_descriptor_, &GM_UpgradeDataReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_UpgradeObject_descriptor_, &GM_UpgradeObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_UpgradeObject_Item_descriptor_, &GM_UpgradeObject_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_OnlineDataReturn_descriptor_, &GM_OnlineDataReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_OnlineObject_descriptor_, &GM_OnlineObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_OnlineObject_Item_descriptor_, &GM_OnlineObject_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_LimitpetReturn_descriptor_, &GM_LimitpetReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PetInfo_descriptor_, &GM_PetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_LimitpetRankReturn_descriptor_, &GM_LimitpetRankReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ScoreRankInfo_descriptor_, &GM_ScoreRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_LoginReward_Return_descriptor_, &GM_LoginReward_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_LoginReward_Receive_descriptor_, &GM_LoginReward_Receive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Wonderful_descriptor_, &DB_Wonderful::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_WonderfulReturn_descriptor_, &DB_WonderfulReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Wonderfuls_descriptor_, &DB_Wonderfuls::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_WonderfulSign_descriptor_, &DB_WonderfulSign::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_WonderfulHero_descriptor_, &DB_WonderfulHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_HeroData_Return_descriptor_, &GM_HeroData_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Card_info_descriptor_, &GM_Card_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Card_info_return_descriptor_, &GM_Card_info_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Card_red_return_descriptor_, &GM_Card_red_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Card_db_descriptor_, &SM_Card_db::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Card_db_return_descriptor_, &SM_Card_db_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Card_db_request_descriptor_, &SM_Card_db_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Rotate_db_descriptor_, &SM_Rotate_db::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Rotate_db_return_descriptor_, &SM_Rotate_db_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Rotate_rotate_Data_descriptor_, &GM_Rotate_rotate_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Rotate_rotate_return_descriptor_, &GM_Rotate_rotate_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Rotate_record_descriptor_, &GM_Rotate_record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Rotate_record_return_descriptor_, &GM_Rotate_record_return::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_wonderful_2etxt() {
  delete GM_WonderfulList::default_instance_;
  delete GM_WonderfulList_reflection_;
  delete GM_WonderfulRequests::default_instance_;
  delete GM_WonderfulRequests_reflection_;
  delete GM_WonderfulData::default_instance_;
  delete GM_WonderfulData_reflection_;
  delete GM_WonderfulReward::default_instance_;
  delete GM_WonderfulReward_reflection_;
  delete GM_WonderfulObj::default_instance_;
  delete GM_WonderfulObj_reflection_;
  delete GM_WonderfulData2::default_instance_;
  delete GM_WonderfulData2_reflection_;
  delete GM_SignDataReturn::default_instance_;
  delete GM_SignDataReturn_reflection_;
  delete GM_Resign_Cost::default_instance_;
  delete GM_Resign_Cost_reflection_;
  delete GM_Sign_DayObject::default_instance_;
  delete GM_Sign_DayObject_reflection_;
  delete GM_SignObject_Item::default_instance_;
  delete GM_SignObject_Item_reflection_;
  delete GM_QHeroDataReturn::default_instance_;
  delete GM_QHeroDataReturn_reflection_;
  delete GM_QHeroObject::default_instance_;
  delete GM_QHeroObject_reflection_;
  delete GM_WonderfulBuyRequest::default_instance_;
  delete GM_WonderfulBuyRequest_reflection_;
  delete GM_WonderfulBuyResult::default_instance_;
  delete GM_WonderfulBuyResult_reflection_;
  delete GM_WonderfulAchieve::default_instance_;
  delete GM_WonderfulAchieve_reflection_;
  delete GM_WonderfulResult::default_instance_;
  delete GM_WonderfulResult_reflection_;
  delete GM_ExtraInfo::default_instance_;
  delete GM_ExtraInfo_reflection_;
  delete GM_WonderfulStateNotify::default_instance_;
  delete GM_WonderfulStateNotify_reflection_;
  delete GM_WonderfulStateNotify2::default_instance_;
  delete GM_WonderfulStateNotify2_reflection_;
  delete GM_WonderfulChange::default_instance_;
  delete GM_WonderfulChange_reflection_;
  delete GM_LoginDataReturn::default_instance_;
  delete GM_LoginDataReturn_reflection_;
  delete GM_LoginObject::default_instance_;
  delete GM_LoginObject_reflection_;
  delete GM_LoginObject_Item::default_instance_;
  delete GM_LoginObject_Item_reflection_;
  delete GM_UpgradeDataReturn::default_instance_;
  delete GM_UpgradeDataReturn_reflection_;
  delete GM_UpgradeObject::default_instance_;
  delete GM_UpgradeObject_reflection_;
  delete GM_UpgradeObject_Item::default_instance_;
  delete GM_UpgradeObject_Item_reflection_;
  delete GM_OnlineDataReturn::default_instance_;
  delete GM_OnlineDataReturn_reflection_;
  delete GM_OnlineObject::default_instance_;
  delete GM_OnlineObject_reflection_;
  delete GM_OnlineObject_Item::default_instance_;
  delete GM_OnlineObject_Item_reflection_;
  delete GM_LimitpetReturn::default_instance_;
  delete GM_LimitpetReturn_reflection_;
  delete GM_PetInfo::default_instance_;
  delete GM_PetInfo_reflection_;
  delete GM_LimitpetRankReturn::default_instance_;
  delete GM_LimitpetRankReturn_reflection_;
  delete GM_ScoreRankInfo::default_instance_;
  delete GM_ScoreRankInfo_reflection_;
  delete GM_LoginReward_Return::default_instance_;
  delete GM_LoginReward_Return_reflection_;
  delete GM_LoginReward_Receive::default_instance_;
  delete GM_LoginReward_Receive_reflection_;
  delete DB_Wonderful::default_instance_;
  delete DB_Wonderful_reflection_;
  delete DB_WonderfulReturn::default_instance_;
  delete DB_WonderfulReturn_reflection_;
  delete DB_Wonderfuls::default_instance_;
  delete DB_Wonderfuls_reflection_;
  delete DB_WonderfulSign::default_instance_;
  delete DB_WonderfulSign_reflection_;
  delete DB_WonderfulHero::default_instance_;
  delete DB_WonderfulHero_reflection_;
  delete GM_HeroData_Return::default_instance_;
  delete GM_HeroData_Return_reflection_;
  delete GM_Card_info::default_instance_;
  delete GM_Card_info_reflection_;
  delete GM_Card_info_return::default_instance_;
  delete GM_Card_info_return_reflection_;
  delete GM_Card_red_return::default_instance_;
  delete GM_Card_red_return_reflection_;
  delete SM_Card_db::default_instance_;
  delete SM_Card_db_reflection_;
  delete SM_Card_db_return::default_instance_;
  delete SM_Card_db_return_reflection_;
  delete SM_Card_db_request::default_instance_;
  delete SM_Card_db_request_reflection_;
  delete SM_Rotate_db::default_instance_;
  delete SM_Rotate_db_reflection_;
  delete SM_Rotate_db_return::default_instance_;
  delete SM_Rotate_db_return_reflection_;
  delete GM_Rotate_rotate_Data::default_instance_;
  delete GM_Rotate_rotate_Data_reflection_;
  delete GM_Rotate_rotate_return::default_instance_;
  delete GM_Rotate_rotate_return_reflection_;
  delete GM_Rotate_record::default_instance_;
  delete GM_Rotate_record_reflection_;
  delete GM_Rotate_record_return::default_instance_;
  delete GM_Rotate_record_return_reflection_;
}

void protobuf_AddDesc_wonderful_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rwonderful.txt\")\n\020GM_WonderfulList\022\025\n\rm"
    "_WonderfulId\030\001 \003(\005\"-\n\024GM_WonderfulReques"
    "ts\022\025\n\rm_WonderfulId\030\001 \002(\005\"\255\001\n\020GM_Wonderf"
    "ulData\022\025\n\rm_WonderfulId\030\001 \002(\005\022\026\n\016m_Wonde"
    "rfulDes\030\002 \001(\t\022\027\n\017m_WonderfulTime\030\003 \001(\t\022%"
    "\n\010m_reward\030\004 \003(\0132\023.GM_WonderfulReward\022\024\n"
    "\014m_EnjoyState\030\005 \001(\005\022\024\n\014m_MonthState\030\006 \001("
    "\005\"\264\001\n\022GM_WonderfulReward\022\017\n\007m_state\030\001 \002("
    "\005\022\016\n\006m_gear\030\002 \001(\005\022\021\n\tm_geardes\030\t \001(\t\022\037\n\005"
    "m_obj\030\003 \003(\0132\020.GM_WonderfulObj\022\017\n\007m_para1"
    "\030\004 \001(\005\022\017\n\007m_para2\030\005 \001(\005\022\022\n\nm_downTime\030\007 "
    "\001(\005\022\023\n\013m_giftbagId\030\010 \001(\005\"Z\n\017GM_Wonderful"
    "Obj\022\017\n\007m_objID\030\001 \002(\005\022\022\n\nm_objCount\030\002 \001(\005"
    "\022\024\n\014m_objectRank\030\003 \001(\005\022\014\n\004icon\030\004 \001(\t\"\210\001\n"
    "\021GM_WonderfulData2\022\025\n\rm_WonderfulId\030\001 \002("
    "\005\022\027\n\017m_WonderfulName\030\002 \001(\t\022\027\n\017m_Wonderfu"
    "lRule\030\003 \001(\t\022\021\n\tm_guideId\030\004 \001(\005\022\027\n\017m_Wond"
    "erfulTime\030\005 \001(\t\"\202\002\n\021GM_SignDataReturn\022\020\n"
    "\010m_roleid\030\001 \002(\005\022\025\n\rm_currentsign\030\002 \001(\005\022\023"
    "\n\013m_signstate\030\003 \001(\005\022\017\n\007m_month\030\004 \001(\005\022\020\n\010"
    "m_curday\030\005 \001(\005\022\025\n\rm_remaintimes\030\006 \001(\005\022\030\n"
    "\020m_hasresigntimes\030\007 \001(\005\022\024\n\014m_regigncost\030"
    "\010 \001(\005\022\"\n\006dayobj\030\t \003(\0132\022.GM_Sign_DayObjec"
    "t\022!\n\010costitem\030\n \003(\0132\017.GM_Resign_Cost\"7\n\016"
    "GM_Resign_Cost\022\025\n\rm_resigntimes\030\001 \002(\005\022\016\n"
    "\006m_cost\030\002 \002(\005\"F\n\021GM_Sign_DayObject\022\r\n\005m_"
    "day\030\001 \002(\005\022\"\n\005items\030\002 \003(\0132\023.GM_SignObject"
    "_Item\"[\n\022GM_SignObject_Item\022\017\n\007m_objid\030\001"
    " \001(\005\022\022\n\nm_ojbcount\030\002 \001(\005\022\017\n\007m_viplv\030\003 \001("
    "\005\022\017\n\007m_times\030\004 \001(\005\"\216\001\n\022GM_QHeroDataRetur"
    "n\022\020\n\010m_roleid\030\001 \002(\005\022\r\n\005m_des\030\002 \001(\t\022\017\n\007m_"
    "state\030\003 \001(\005\022\016\n\006m_cost\030\004 \001(\005\022\022\n\nm_viplimi"
    "t\030\005 \001(\005\022\"\n\tm_objInfo\030\006 \003(\0132\017.GM_QHeroObj"
    "ect\"W\n\016GM_QHeroObject\022\017\n\007m_objid\030\001 \002(\005\022\022"
    "\n\nm_objcount\030\002 \001(\005\022\017\n\007m_level\030\003 \001(\005\022\017\n\007m"
    "_state\030\004 \001(\005\"@\n\026GM_WonderfulBuyRequest\022\025"
    "\n\rm_wonderfulId\030\001 \002(\005\022\017\n\007m_param\030\002 \001(\005\"Q"
    "\n\025GM_WonderfulBuyResult\022\025\n\rm_wonderfulId"
    "\030\001 \002(\005\022\020\n\010m_result\030\002 \001(\005\022\017\n\007m_param\030\003 \001("
    "\005\"A\n\023GM_WonderfulAchieve\022\025\n\rm_WonderfulI"
    "d\030\001 \002(\005\022\023\n\013m_giftbagId\030\002 \001(\005\"\270\001\n\022GM_Wond"
    "erfulResult\022\020\n\010m_result\030\001 \002(\005\022\025\n\rm_wonde"
    "rfulId\030\002 \001(\005\022\017\n\007m_param\030\003 \001(\005\022\023\n\013m_openc"
    "ount\030\004 \001(\005\022\020\n\010m_myrank\030\005 \001(\005\022\021\n\tm_mysocr"
    "e\030\006 \001(\005\022\036\n\007m_infos\030\007 \001(\0132\r.GM_ExtraInfo\022"
    "\016\n\006m_free\030\010 \001(\005\"H\n\014GM_ExtraInfo\022\022\n\nm_des"
    "cribe\030\001 \002(\t\022$\n\005items\030\002 \003(\0132\025.GM_OnlineOb"
    "ject_Item\"g\n\027GM_WonderfulStateNotify\022\025\n\r"
    "m_wonderfulId\030\001 \002(\005\022\017\n\007m_param\030\002 \001(\005\022\017\n\007"
    "m_state\030\003 \001(\005\022\023\n\013m_hadcharge\030\004 \001(\005\"g\n\030GM"
    "_WonderfulStateNotify2\022\025\n\rm_wonderfulId\030"
    "\001 \002(\005\022\023\n\013m_projectid\030\002 \001(\005\022\016\n\006m_gear\030\003 \001"
    "(\005\022\017\n\007m_state\030\004 \001(\005\"=\n\022GM_WonderfulChang"
    "e\022\020\n\010m_change\030\001 \002(\005\022\025\n\rm_wonderfulId\030\002 \001"
    "(\005\"L\n\022GM_LoginDataReturn\022\025\n\rm_wonderfuli"
    "d\030\001 \002(\005\022\037\n\006dayobj\030\002 \003(\0132\017.GM_LoginObject"
    "\"S\n\016GM_LoginObject\022\r\n\005m_day\030\001 \002(\005\022\r\n\005m_h"
    "as\030\002 \002(\005\022#\n\005items\030\003 \003(\0132\024.GM_LoginObject"
    "_Item\":\n\023GM_LoginObject_Item\022\017\n\007m_objid\030"
    "\001 \001(\005\022\022\n\nm_ojbcount\030\002 \001(\005\"R\n\024GM_UpgradeD"
    "ataReturn\022\025\n\rm_wonderfulid\030\001 \002(\005\022#\n\010leve"
    "lobj\030\002 \003(\0132\021.GM_UpgradeObject\"Y\n\020GM_Upgr"
    "adeObject\022\017\n\007m_level\030\001 \002(\005\022\r\n\005m_has\030\002 \002("
    "\005\022%\n\005items\030\003 \003(\0132\026.GM_UpgradeObject_Item"
    "\"<\n\025GM_UpgradeObject_Item\022\017\n\007m_objid\030\001 \001"
    "(\005\022\022\n\nm_ojbcount\030\002 \001(\005\"e\n\023GM_OnlineDataR"
    "eturn\022\025\n\rm_wonderfulid\030\001 \002(\005\022!\n\007timeobj\030"
    "\002 \003(\0132\020.GM_OnlineObject\022\024\n\014m_onlinetime\030"
    "\003 \001(\005\"W\n\017GM_OnlineObject\022\017\n\007m_level\030\001 \002("
    "\005\022\r\n\005m_has\030\002 \002(\005\022$\n\005items\030\003 \003(\0132\025.GM_Onl"
    "ineObject_Item\";\n\024GM_OnlineObject_Item\022\017"
    "\n\007m_objid\030\001 \001(\005\022\022\n\nm_ojbcount\030\002 \001(\005\"\200\002\n\021"
    "GM_LimitpetReturn\022\023\n\013m_opencount\030\001 \002(\005\022\022"
    "\n\nm_downtime\030\002 \001(\005\022\025\n\rm_diamondcost\030\003 \001("
    "\005\022\030\n\020m_tendiamondcost\030\004 \001(\005\022\020\n\010m_myrank\030"
    "\005 \001(\005\022\017\n\007m_socre\030\006 \001(\005\022\036\n\tm_petinfo\030\007 \003("
    "\0132\013.GM_PetInfo\022\037\n\nm_rankobjs\030\n \003(\0132\013.GM_"
    "PetInfo\022\025\n\rm_wonderfulid\030\010 \001(\005\022\026\n\016m_wond"
    "erfuldes\030\t \001(\t\"A\n\nGM_PetInfo\022\017\n\007m_objid\030"
    "\001 \002(\005\022\022\n\nm_objcount\030\002 \002(\005\022\016\n\006m_rank\030\003 \001("
    "\005\"Q\n\025GM_LimitpetRankReturn\022\020\n\010m_roleid\030\001"
    " \002(\005\022&\n\013m_rankInfos\030\002 \003(\0132\021.GM_ScoreRank"
    "Info\"C\n\020GM_ScoreRankInfo\022\016\n\006m_rank\030\001 \002(\005"
    "\022\016\n\006m_name\030\002 \002(\t\022\017\n\007m_socre\030\003 \002(\005\"\216\001\n\025GM"
    "_LoginReward_Return\022\020\n\010m_Result\030\001 \002(\005\022\021\n"
    "\tm_EquipId\030\002 \002(\005\022\025\n\rm_EquipDetail\030\003 \002(\t\022"
    "\024\n\014m_nDelayTime\030\004 \001(\005\022\020\n\010m_nGetID\030\n \001(\005\022"
    "\021\n\tm_nGetNum\030\013 \001(\005\"*\n\026GM_LoginReward_Rec"
    "eive\022\020\n\010m_Result\030\001 \002(\005\" \n\014DB_Wonderful\022\020"
    "\n\010m_roleId\030\001 \002(\005\"E\n\022DB_WonderfulReturn\022\020"
    "\n\010m_roleId\030\001 \002(\005\022\035\n\005datas\030\002 \003(\0132\016.DB_Won"
    "derfuls\"W\n\rDB_Wonderfuls\022\025\n\rm_WonderfulI"
    "d\030\001 \002(\005\022\017\n\007m_state\030\002 \001(\005\022\016\n\006m_time\030\003 \001(\005"
    "\022\016\n\006m_gmid\030\004 \001(\003\"\213\001\n\020DB_WonderfulSign\022\020\n"
    "\010m_roleid\030\001 \002(\005\022\025\n\rm_currentsign\030\002 \001(\005\022\023"
    "\n\013m_signstate\030\003 \001(\005\022\017\n\007m_month\030\004 \001(\005\022\016\n\006"
    "m_gmid\030\005 \001(\003\022\030\n\020m_hasresigntimes\030\006 \001(\005\"s"
    "\n\020DB_WonderfulHero\022\020\n\010m_roleid\030\001 \002(\005\022\023\n\013"
    "m_projectid\030\002 \001(\005\022\021\n\tm_cangear\030\003 \001(\005\022\025\n\r"
    "m_achievegear\030\004 \001(\005\022\016\n\006m_gmid\030\005 \001(\003\"A\n\022G"
    "M_HeroData_Return\022\016\n\006ishave\030\001 \002(\005\022\013\n\003num"
    "\030\002 \001(\005\022\016\n\006remark\030\003 \001(\t\"G\n\014GM_Card_info\022\020"
    "\n\010objectid\030\001 \002(\005\022\013\n\003num\030\002 \001(\005\022\n\n\002id\030\003 \001("
    "\005\022\014\n\004icon\030\004 \001(\t\"T\n\023GM_Card_info_return\022\017"
    "\n\007cardnum\030\001 \002(\005\022\017\n\007majiang\030\002 \001(\005\022\033\n\004data"
    "\030\003 \003(\0132\r.GM_Card_info\"6\n\022GM_Card_red_ret"
    "urn\022\017\n\007cardnum\030\001 \002(\005\022\017\n\007majiang\030\002 \001(\005\":\n"
    "\nSM_Card_db\022\n\n\002id\030\001 \002(\005\022\021\n\tincreasis\030\002 \001"
    "(\005\022\r\n\005order\030\003 \001(\005\">\n\021SM_Card_db_return\022\016"
    "\n\006roleid\030\001 \002(\005\022\031\n\004data\030\002 \003(\0132\013.SM_Card_d"
    "b\"$\n\022SM_Card_db_request\022\016\n\006roleid\030\001 \002(\005\""
    "h\n\014SM_Rotate_db\022\020\n\010increase\030\001 \002(\005\022\014\n\004nam"
    "e\030\002 \001(\t\022\020\n\010objectid\030\003 \001(\005\022\013\n\003num\030\004 \001(\005\022\n"
    "\n\002id\030\005 \001(\005\022\r\n\005times\030\006 \001(\005\"B\n\023SM_Rotate_d"
    "b_return\022\016\n\006roleid\030\001 \002(\005\022\033\n\004data\030\002 \003(\0132\r"
    ".SM_Rotate_db\"P\n\025GM_Rotate_rotate_Data\022\n"
    "\n\002id\030\001 \002(\005\022\020\n\010objectid\030\002 \002(\005\022\013\n\003num\030\003 \001("
    "\005\022\014\n\004icon\030\004 \001(\t\"^\n\027GM_Rotate_rotate_retu"
    "rn\022\016\n\006roleid\030\001 \002(\005\022$\n\004data\030\002 \003(\0132\026.GM_Ro"
    "tate_rotate_Data\022\r\n\005times\030\003 \001(\005\"\?\n\020GM_Ro"
    "tate_record\022\020\n\010objectid\030\001 \002(\005\022\013\n\003num\030\002 \001"
    "(\005\022\014\n\004name\030\003 \001(\t\"J\n\027GM_Rotate_record_ret"
    "urn\022\016\n\006roleid\030\001 \002(\005\022\037\n\004data\030\002 \003(\0132\021.GM_R"
    "otate_record", 4932);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "wonderful.txt", &protobuf_RegisterTypes);
  GM_WonderfulList::default_instance_ = new GM_WonderfulList();
  GM_WonderfulRequests::default_instance_ = new GM_WonderfulRequests();
  GM_WonderfulData::default_instance_ = new GM_WonderfulData();
  GM_WonderfulReward::default_instance_ = new GM_WonderfulReward();
  GM_WonderfulObj::default_instance_ = new GM_WonderfulObj();
  GM_WonderfulData2::default_instance_ = new GM_WonderfulData2();
  GM_SignDataReturn::default_instance_ = new GM_SignDataReturn();
  GM_Resign_Cost::default_instance_ = new GM_Resign_Cost();
  GM_Sign_DayObject::default_instance_ = new GM_Sign_DayObject();
  GM_SignObject_Item::default_instance_ = new GM_SignObject_Item();
  GM_QHeroDataReturn::default_instance_ = new GM_QHeroDataReturn();
  GM_QHeroObject::default_instance_ = new GM_QHeroObject();
  GM_WonderfulBuyRequest::default_instance_ = new GM_WonderfulBuyRequest();
  GM_WonderfulBuyResult::default_instance_ = new GM_WonderfulBuyResult();
  GM_WonderfulAchieve::default_instance_ = new GM_WonderfulAchieve();
  GM_WonderfulResult::default_instance_ = new GM_WonderfulResult();
  GM_ExtraInfo::default_instance_ = new GM_ExtraInfo();
  GM_WonderfulStateNotify::default_instance_ = new GM_WonderfulStateNotify();
  GM_WonderfulStateNotify2::default_instance_ = new GM_WonderfulStateNotify2();
  GM_WonderfulChange::default_instance_ = new GM_WonderfulChange();
  GM_LoginDataReturn::default_instance_ = new GM_LoginDataReturn();
  GM_LoginObject::default_instance_ = new GM_LoginObject();
  GM_LoginObject_Item::default_instance_ = new GM_LoginObject_Item();
  GM_UpgradeDataReturn::default_instance_ = new GM_UpgradeDataReturn();
  GM_UpgradeObject::default_instance_ = new GM_UpgradeObject();
  GM_UpgradeObject_Item::default_instance_ = new GM_UpgradeObject_Item();
  GM_OnlineDataReturn::default_instance_ = new GM_OnlineDataReturn();
  GM_OnlineObject::default_instance_ = new GM_OnlineObject();
  GM_OnlineObject_Item::default_instance_ = new GM_OnlineObject_Item();
  GM_LimitpetReturn::default_instance_ = new GM_LimitpetReturn();
  GM_PetInfo::default_instance_ = new GM_PetInfo();
  GM_LimitpetRankReturn::default_instance_ = new GM_LimitpetRankReturn();
  GM_ScoreRankInfo::default_instance_ = new GM_ScoreRankInfo();
  GM_LoginReward_Return::default_instance_ = new GM_LoginReward_Return();
  GM_LoginReward_Receive::default_instance_ = new GM_LoginReward_Receive();
  DB_Wonderful::default_instance_ = new DB_Wonderful();
  DB_WonderfulReturn::default_instance_ = new DB_WonderfulReturn();
  DB_Wonderfuls::default_instance_ = new DB_Wonderfuls();
  DB_WonderfulSign::default_instance_ = new DB_WonderfulSign();
  DB_WonderfulHero::default_instance_ = new DB_WonderfulHero();
  GM_HeroData_Return::default_instance_ = new GM_HeroData_Return();
  GM_Card_info::default_instance_ = new GM_Card_info();
  GM_Card_info_return::default_instance_ = new GM_Card_info_return();
  GM_Card_red_return::default_instance_ = new GM_Card_red_return();
  SM_Card_db::default_instance_ = new SM_Card_db();
  SM_Card_db_return::default_instance_ = new SM_Card_db_return();
  SM_Card_db_request::default_instance_ = new SM_Card_db_request();
  SM_Rotate_db::default_instance_ = new SM_Rotate_db();
  SM_Rotate_db_return::default_instance_ = new SM_Rotate_db_return();
  GM_Rotate_rotate_Data::default_instance_ = new GM_Rotate_rotate_Data();
  GM_Rotate_rotate_return::default_instance_ = new GM_Rotate_rotate_return();
  GM_Rotate_record::default_instance_ = new GM_Rotate_record();
  GM_Rotate_record_return::default_instance_ = new GM_Rotate_record_return();
  GM_WonderfulList::default_instance_->InitAsDefaultInstance();
  GM_WonderfulRequests::default_instance_->InitAsDefaultInstance();
  GM_WonderfulData::default_instance_->InitAsDefaultInstance();
  GM_WonderfulReward::default_instance_->InitAsDefaultInstance();
  GM_WonderfulObj::default_instance_->InitAsDefaultInstance();
  GM_WonderfulData2::default_instance_->InitAsDefaultInstance();
  GM_SignDataReturn::default_instance_->InitAsDefaultInstance();
  GM_Resign_Cost::default_instance_->InitAsDefaultInstance();
  GM_Sign_DayObject::default_instance_->InitAsDefaultInstance();
  GM_SignObject_Item::default_instance_->InitAsDefaultInstance();
  GM_QHeroDataReturn::default_instance_->InitAsDefaultInstance();
  GM_QHeroObject::default_instance_->InitAsDefaultInstance();
  GM_WonderfulBuyRequest::default_instance_->InitAsDefaultInstance();
  GM_WonderfulBuyResult::default_instance_->InitAsDefaultInstance();
  GM_WonderfulAchieve::default_instance_->InitAsDefaultInstance();
  GM_WonderfulResult::default_instance_->InitAsDefaultInstance();
  GM_ExtraInfo::default_instance_->InitAsDefaultInstance();
  GM_WonderfulStateNotify::default_instance_->InitAsDefaultInstance();
  GM_WonderfulStateNotify2::default_instance_->InitAsDefaultInstance();
  GM_WonderfulChange::default_instance_->InitAsDefaultInstance();
  GM_LoginDataReturn::default_instance_->InitAsDefaultInstance();
  GM_LoginObject::default_instance_->InitAsDefaultInstance();
  GM_LoginObject_Item::default_instance_->InitAsDefaultInstance();
  GM_UpgradeDataReturn::default_instance_->InitAsDefaultInstance();
  GM_UpgradeObject::default_instance_->InitAsDefaultInstance();
  GM_UpgradeObject_Item::default_instance_->InitAsDefaultInstance();
  GM_OnlineDataReturn::default_instance_->InitAsDefaultInstance();
  GM_OnlineObject::default_instance_->InitAsDefaultInstance();
  GM_OnlineObject_Item::default_instance_->InitAsDefaultInstance();
  GM_LimitpetReturn::default_instance_->InitAsDefaultInstance();
  GM_PetInfo::default_instance_->InitAsDefaultInstance();
  GM_LimitpetRankReturn::default_instance_->InitAsDefaultInstance();
  GM_ScoreRankInfo::default_instance_->InitAsDefaultInstance();
  GM_LoginReward_Return::default_instance_->InitAsDefaultInstance();
  GM_LoginReward_Receive::default_instance_->InitAsDefaultInstance();
  DB_Wonderful::default_instance_->InitAsDefaultInstance();
  DB_WonderfulReturn::default_instance_->InitAsDefaultInstance();
  DB_Wonderfuls::default_instance_->InitAsDefaultInstance();
  DB_WonderfulSign::default_instance_->InitAsDefaultInstance();
  DB_WonderfulHero::default_instance_->InitAsDefaultInstance();
  GM_HeroData_Return::default_instance_->InitAsDefaultInstance();
  GM_Card_info::default_instance_->InitAsDefaultInstance();
  GM_Card_info_return::default_instance_->InitAsDefaultInstance();
  GM_Card_red_return::default_instance_->InitAsDefaultInstance();
  SM_Card_db::default_instance_->InitAsDefaultInstance();
  SM_Card_db_return::default_instance_->InitAsDefaultInstance();
  SM_Card_db_request::default_instance_->InitAsDefaultInstance();
  SM_Rotate_db::default_instance_->InitAsDefaultInstance();
  SM_Rotate_db_return::default_instance_->InitAsDefaultInstance();
  GM_Rotate_rotate_Data::default_instance_->InitAsDefaultInstance();
  GM_Rotate_rotate_return::default_instance_->InitAsDefaultInstance();
  GM_Rotate_record::default_instance_->InitAsDefaultInstance();
  GM_Rotate_record_return::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_wonderful_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_wonderful_2etxt {
  StaticDescriptorInitializer_wonderful_2etxt() {
    protobuf_AddDesc_wonderful_2etxt();
  }
} static_descriptor_initializer_wonderful_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_WonderfulList::kMWonderfulIdFieldNumber;
#endif  // !_MSC_VER

GM_WonderfulList::GM_WonderfulList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_WonderfulList::InitAsDefaultInstance() {
}

GM_WonderfulList::GM_WonderfulList(const GM_WonderfulList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_WonderfulList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_WonderfulList::~GM_WonderfulList() {
  SharedDtor();
}

void GM_WonderfulList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_WonderfulList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_WonderfulList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_WonderfulList_descriptor_;
}

const GM_WonderfulList& GM_WonderfulList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_WonderfulList* GM_WonderfulList::default_instance_ = NULL;

GM_WonderfulList* GM_WonderfulList::New() const {
  return new GM_WonderfulList;
}

void GM_WonderfulList::Clear() {
  m_wonderfulid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_WonderfulList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 m_WonderfulId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_WonderfulId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_m_wonderfulid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_wonderfulid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_m_WonderfulId;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_WonderfulList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 m_WonderfulId = 1;
  for (int i = 0; i < this->m_wonderfulid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->m_wonderfulid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_WonderfulList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 m_WonderfulId = 1;
  for (int i = 0; i < this->m_wonderfulid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->m_wonderfulid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_WonderfulList::ByteSize() const {
  int total_size = 0;

  // repeated int32 m_WonderfulId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_wonderfulid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_wonderfulid(i));
    }
    total_size += 1 * this->m_wonderfulid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_WonderfulList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_WonderfulList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_WonderfulList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_WonderfulList::MergeFrom(const GM_WonderfulList& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_wonderfulid_.MergeFrom(from.m_wonderfulid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_WonderfulList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_WonderfulList::CopyFrom(const GM_WonderfulList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_WonderfulList::IsInitialized() const {

  return true;
}

void GM_WonderfulList::Swap(GM_WonderfulList* other) {
  if (other != this) {
    m_wonderfulid_.Swap(&other->m_wonderfulid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_WonderfulList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_WonderfulList_descriptor_;
  metadata.reflection = GM_WonderfulList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_WonderfulRequests::kMWonderfulIdFieldNumber;
#endif  // !_MSC_VER

GM_WonderfulRequests::GM_WonderfulRequests()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_WonderfulRequests::InitAsDefaultInstance() {
}

GM_WonderfulRequests::GM_WonderfulRequests(const GM_WonderfulRequests& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_WonderfulRequests::SharedCtor() {
  _cached_size_ = 0;
  m_wonderfulid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_WonderfulRequests::~GM_WonderfulRequests() {
  SharedDtor();
}

void GM_WonderfulRequests::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_WonderfulRequests::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_WonderfulRequests::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_WonderfulRequests_descriptor_;
}

const GM_WonderfulRequests& GM_WonderfulRequests::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_WonderfulRequests* GM_WonderfulRequests::default_instance_ = NULL;

GM_WonderfulRequests* GM_WonderfulRequests::New() const {
  return new GM_WonderfulRequests;
}

void GM_WonderfulRequests::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_wonderfulid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_WonderfulRequests::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_WonderfulId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wonderfulid_)));
          set_has_m_wonderfulid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_WonderfulRequests::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_WonderfulId = 1;
  if (has_m_wonderfulid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_wonderfulid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_WonderfulRequests::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_WonderfulId = 1;
  if (has_m_wonderfulid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_wonderfulid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_WonderfulRequests::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_WonderfulId = 1;
    if (has_m_wonderfulid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wonderfulid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_WonderfulRequests::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_WonderfulRequests* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_WonderfulRequests*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_WonderfulRequests::MergeFrom(const GM_WonderfulRequests& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_wonderfulid()) {
      set_m_wonderfulid(from.m_wonderfulid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_WonderfulRequests::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_WonderfulRequests::CopyFrom(const GM_WonderfulRequests& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_WonderfulRequests::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_WonderfulRequests::Swap(GM_WonderfulRequests* other) {
  if (other != this) {
    std::swap(m_wonderfulid_, other->m_wonderfulid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_WonderfulRequests::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_WonderfulRequests_descriptor_;
  metadata.reflection = GM_WonderfulRequests_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_WonderfulData::kMWonderfulIdFieldNumber;
const int GM_WonderfulData::kMWonderfulDesFieldNumber;
const int GM_WonderfulData::kMWonderfulTimeFieldNumber;
const int GM_WonderfulData::kMRewardFieldNumber;
const int GM_WonderfulData::kMEnjoyStateFieldNumber;
const int GM_WonderfulData::kMMonthStateFieldNumber;
#endif  // !_MSC_VER

GM_WonderfulData::GM_WonderfulData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_WonderfulData::InitAsDefaultInstance() {
}

GM_WonderfulData::GM_WonderfulData(const GM_WonderfulData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_WonderfulData::SharedCtor() {
  _cached_size_ = 0;
  m_wonderfulid_ = 0;
  m_wonderfuldes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_wonderfultime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_enjoystate_ = 0;
  m_monthstate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_WonderfulData::~GM_WonderfulData() {
  SharedDtor();
}

void GM_WonderfulData::SharedDtor() {
  if (m_wonderfuldes_ != &::google::protobuf::internal::kEmptyString) {
    delete m_wonderfuldes_;
  }
  if (m_wonderfultime_ != &::google::protobuf::internal::kEmptyString) {
    delete m_wonderfultime_;
  }
  if (this != default_instance_) {
  }
}

void GM_WonderfulData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_WonderfulData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_WonderfulData_descriptor_;
}

const GM_WonderfulData& GM_WonderfulData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_WonderfulData* GM_WonderfulData::default_instance_ = NULL;

GM_WonderfulData* GM_WonderfulData::New() const {
  return new GM_WonderfulData;
}

void GM_WonderfulData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_wonderfulid_ = 0;
    if (has_m_wonderfuldes()) {
      if (m_wonderfuldes_ != &::google::protobuf::internal::kEmptyString) {
        m_wonderfuldes_->clear();
      }
    }
    if (has_m_wonderfultime()) {
      if (m_wonderfultime_ != &::google::protobuf::internal::kEmptyString) {
        m_wonderfultime_->clear();
      }
    }
    m_enjoystate_ = 0;
    m_monthstate_ = 0;
  }
  m_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_WonderfulData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_WonderfulId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wonderfulid_)));
          set_has_m_wonderfulid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_WonderfulDes;
        break;
      }

      // optional string m_WonderfulDes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_WonderfulDes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_wonderfuldes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_wonderfuldes().data(), this->m_wonderfuldes().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_WonderfulTime;
        break;
      }

      // optional string m_WonderfulTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_WonderfulTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_wonderfultime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_wonderfultime().data(), this->m_wonderfultime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_reward;
        break;
      }

      // repeated .GM_WonderfulReward m_reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_reward;
        if (input->ExpectTag(40)) goto parse_m_EnjoyState;
        break;
      }

      // optional int32 m_EnjoyState = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_EnjoyState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_enjoystate_)));
          set_has_m_enjoystate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_MonthState;
        break;
      }

      // optional int32 m_MonthState = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_MonthState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_monthstate_)));
          set_has_m_monthstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_WonderfulData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_WonderfulId = 1;
  if (has_m_wonderfulid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_wonderfulid(), output);
  }

  // optional string m_WonderfulDes = 2;
  if (has_m_wonderfuldes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_wonderfuldes().data(), this->m_wonderfuldes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_wonderfuldes(), output);
  }

  // optional string m_WonderfulTime = 3;
  if (has_m_wonderfultime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_wonderfultime().data(), this->m_wonderfultime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_wonderfultime(), output);
  }

  // repeated .GM_WonderfulReward m_reward = 4;
  for (int i = 0; i < this->m_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_reward(i), output);
  }

  // optional int32 m_EnjoyState = 5;
  if (has_m_enjoystate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_enjoystate(), output);
  }

  // optional int32 m_MonthState = 6;
  if (has_m_monthstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_monthstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_WonderfulData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_WonderfulId = 1;
  if (has_m_wonderfulid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_wonderfulid(), target);
  }

  // optional string m_WonderfulDes = 2;
  if (has_m_wonderfuldes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_wonderfuldes().data(), this->m_wonderfuldes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_wonderfuldes(), target);
  }

  // optional string m_WonderfulTime = 3;
  if (has_m_wonderfultime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_wonderfultime().data(), this->m_wonderfultime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_wonderfultime(), target);
  }

  // repeated .GM_WonderfulReward m_reward = 4;
  for (int i = 0; i < this->m_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_reward(i), target);
  }

  // optional int32 m_EnjoyState = 5;
  if (has_m_enjoystate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_enjoystate(), target);
  }

  // optional int32 m_MonthState = 6;
  if (has_m_monthstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_monthstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_WonderfulData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_WonderfulId = 1;
    if (has_m_wonderfulid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wonderfulid());
    }

    // optional string m_WonderfulDes = 2;
    if (has_m_wonderfuldes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_wonderfuldes());
    }

    // optional string m_WonderfulTime = 3;
    if (has_m_wonderfultime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_wonderfultime());
    }

    // optional int32 m_EnjoyState = 5;
    if (has_m_enjoystate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_enjoystate());
    }

    // optional int32 m_MonthState = 6;
    if (has_m_monthstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_monthstate());
    }

  }
  // repeated .GM_WonderfulReward m_reward = 4;
  total_size += 1 * this->m_reward_size();
  for (int i = 0; i < this->m_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_WonderfulData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_WonderfulData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_WonderfulData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_WonderfulData::MergeFrom(const GM_WonderfulData& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_reward_.MergeFrom(from.m_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_wonderfulid()) {
      set_m_wonderfulid(from.m_wonderfulid());
    }
    if (from.has_m_wonderfuldes()) {
      set_m_wonderfuldes(from.m_wonderfuldes());
    }
    if (from.has_m_wonderfultime()) {
      set_m_wonderfultime(from.m_wonderfultime());
    }
    if (from.has_m_enjoystate()) {
      set_m_enjoystate(from.m_enjoystate());
    }
    if (from.has_m_monthstate()) {
      set_m_monthstate(from.m_monthstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_WonderfulData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_WonderfulData::CopyFrom(const GM_WonderfulData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_WonderfulData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_reward_size(); i++) {
    if (!this->m_reward(i).IsInitialized()) return false;
  }
  return true;
}

void GM_WonderfulData::Swap(GM_WonderfulData* other) {
  if (other != this) {
    std::swap(m_wonderfulid_, other->m_wonderfulid_);
    std::swap(m_wonderfuldes_, other->m_wonderfuldes_);
    std::swap(m_wonderfultime_, other->m_wonderfultime_);
    m_reward_.Swap(&other->m_reward_);
    std::swap(m_enjoystate_, other->m_enjoystate_);
    std::swap(m_monthstate_, other->m_monthstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_WonderfulData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_WonderfulData_descriptor_;
  metadata.reflection = GM_WonderfulData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_WonderfulReward::kMStateFieldNumber;
const int GM_WonderfulReward::kMGearFieldNumber;
const int GM_WonderfulReward::kMGeardesFieldNumber;
const int GM_WonderfulReward::kMObjFieldNumber;
const int GM_WonderfulReward::kMPara1FieldNumber;
const int GM_WonderfulReward::kMPara2FieldNumber;
const int GM_WonderfulReward::kMDownTimeFieldNumber;
const int GM_WonderfulReward::kMGiftbagIdFieldNumber;
#endif  // !_MSC_VER

GM_WonderfulReward::GM_WonderfulReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_WonderfulReward::InitAsDefaultInstance() {
}

GM_WonderfulReward::GM_WonderfulReward(const GM_WonderfulReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_WonderfulReward::SharedCtor() {
  _cached_size_ = 0;
  m_state_ = 0;
  m_gear_ = 0;
  m_geardes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_para1_ = 0;
  m_para2_ = 0;
  m_downtime_ = 0;
  m_giftbagid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_WonderfulReward::~GM_WonderfulReward() {
  SharedDtor();
}

void GM_WonderfulReward::SharedDtor() {
  if (m_geardes_ != &::google::protobuf::internal::kEmptyString) {
    delete m_geardes_;
  }
  if (this != default_instance_) {
  }
}

void GM_WonderfulReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_WonderfulReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_WonderfulReward_descriptor_;
}

const GM_WonderfulReward& GM_WonderfulReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_WonderfulReward* GM_WonderfulReward::default_instance_ = NULL;

GM_WonderfulReward* GM_WonderfulReward::New() const {
  return new GM_WonderfulReward;
}

void GM_WonderfulReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_state_ = 0;
    m_gear_ = 0;
    if (has_m_geardes()) {
      if (m_geardes_ != &::google::protobuf::internal::kEmptyString) {
        m_geardes_->clear();
      }
    }
    m_para1_ = 0;
    m_para2_ = 0;
    m_downtime_ = 0;
    m_giftbagid_ = 0;
  }
  m_obj_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_WonderfulReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_gear;
        break;
      }

      // optional int32 m_gear = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gear_)));
          set_has_m_gear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_obj;
        break;
      }

      // repeated .GM_WonderfulObj m_obj = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_obj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_obj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_obj;
        if (input->ExpectTag(32)) goto parse_m_para1;
        break;
      }

      // optional int32 m_para1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_para1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_para1_)));
          set_has_m_para1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_para2;
        break;
      }

      // optional int32 m_para2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_para2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_para2_)));
          set_has_m_para2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_downTime;
        break;
      }

      // optional int32 m_downTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_downTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_downtime_)));
          set_has_m_downtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_giftbagId;
        break;
      }

      // optional int32 m_giftbagId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_giftbagId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_giftbagid_)));
          set_has_m_giftbagid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_geardes;
        break;
      }

      // optional string m_geardes = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_geardes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_geardes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_geardes().data(), this->m_geardes().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_WonderfulReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_state = 1;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_state(), output);
  }

  // optional int32 m_gear = 2;
  if (has_m_gear()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_gear(), output);
  }

  // repeated .GM_WonderfulObj m_obj = 3;
  for (int i = 0; i < this->m_obj_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_obj(i), output);
  }

  // optional int32 m_para1 = 4;
  if (has_m_para1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_para1(), output);
  }

  // optional int32 m_para2 = 5;
  if (has_m_para2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_para2(), output);
  }

  // optional int32 m_downTime = 7;
  if (has_m_downtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_downtime(), output);
  }

  // optional int32 m_giftbagId = 8;
  if (has_m_giftbagid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_giftbagid(), output);
  }

  // optional string m_geardes = 9;
  if (has_m_geardes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_geardes().data(), this->m_geardes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->m_geardes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_WonderfulReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_state = 1;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_state(), target);
  }

  // optional int32 m_gear = 2;
  if (has_m_gear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_gear(), target);
  }

  // repeated .GM_WonderfulObj m_obj = 3;
  for (int i = 0; i < this->m_obj_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_obj(i), target);
  }

  // optional int32 m_para1 = 4;
  if (has_m_para1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_para1(), target);
  }

  // optional int32 m_para2 = 5;
  if (has_m_para2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_para2(), target);
  }

  // optional int32 m_downTime = 7;
  if (has_m_downtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_downtime(), target);
  }

  // optional int32 m_giftbagId = 8;
  if (has_m_giftbagid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_giftbagid(), target);
  }

  // optional string m_geardes = 9;
  if (has_m_geardes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_geardes().data(), this->m_geardes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->m_geardes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_WonderfulReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_state = 1;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

    // optional int32 m_gear = 2;
    if (has_m_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gear());
    }

    // optional string m_geardes = 9;
    if (has_m_geardes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_geardes());
    }

    // optional int32 m_para1 = 4;
    if (has_m_para1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_para1());
    }

    // optional int32 m_para2 = 5;
    if (has_m_para2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_para2());
    }

    // optional int32 m_downTime = 7;
    if (has_m_downtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_downtime());
    }

    // optional int32 m_giftbagId = 8;
    if (has_m_giftbagid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_giftbagid());
    }

  }
  // repeated .GM_WonderfulObj m_obj = 3;
  total_size += 1 * this->m_obj_size();
  for (int i = 0; i < this->m_obj_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_obj(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_WonderfulReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_WonderfulReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_WonderfulReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_WonderfulReward::MergeFrom(const GM_WonderfulReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_obj_.MergeFrom(from.m_obj_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
    if (from.has_m_gear()) {
      set_m_gear(from.m_gear());
    }
    if (from.has_m_geardes()) {
      set_m_geardes(from.m_geardes());
    }
    if (from.has_m_para1()) {
      set_m_para1(from.m_para1());
    }
    if (from.has_m_para2()) {
      set_m_para2(from.m_para2());
    }
    if (from.has_m_downtime()) {
      set_m_downtime(from.m_downtime());
    }
    if (from.has_m_giftbagid()) {
      set_m_giftbagid(from.m_giftbagid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_WonderfulReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_WonderfulReward::CopyFrom(const GM_WonderfulReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_WonderfulReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_obj_size(); i++) {
    if (!this->m_obj(i).IsInitialized()) return false;
  }
  return true;
}

void GM_WonderfulReward::Swap(GM_WonderfulReward* other) {
  if (other != this) {
    std::swap(m_state_, other->m_state_);
    std::swap(m_gear_, other->m_gear_);
    std::swap(m_geardes_, other->m_geardes_);
    m_obj_.Swap(&other->m_obj_);
    std::swap(m_para1_, other->m_para1_);
    std::swap(m_para2_, other->m_para2_);
    std::swap(m_downtime_, other->m_downtime_);
    std::swap(m_giftbagid_, other->m_giftbagid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_WonderfulReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_WonderfulReward_descriptor_;
  metadata.reflection = GM_WonderfulReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_WonderfulObj::kMObjIDFieldNumber;
const int GM_WonderfulObj::kMObjCountFieldNumber;
const int GM_WonderfulObj::kMObjectRankFieldNumber;
const int GM_WonderfulObj::kIconFieldNumber;
#endif  // !_MSC_VER

GM_WonderfulObj::GM_WonderfulObj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_WonderfulObj::InitAsDefaultInstance() {
}

GM_WonderfulObj::GM_WonderfulObj(const GM_WonderfulObj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_WonderfulObj::SharedCtor() {
  _cached_size_ = 0;
  m_objid_ = 0;
  m_objcount_ = 0;
  m_objectrank_ = 0;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_WonderfulObj::~GM_WonderfulObj() {
  SharedDtor();
}

void GM_WonderfulObj::SharedDtor() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (this != default_instance_) {
  }
}

void GM_WonderfulObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_WonderfulObj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_WonderfulObj_descriptor_;
}

const GM_WonderfulObj& GM_WonderfulObj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_WonderfulObj* GM_WonderfulObj::default_instance_ = NULL;

GM_WonderfulObj* GM_WonderfulObj::New() const {
  return new GM_WonderfulObj;
}

void GM_WonderfulObj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objid_ = 0;
    m_objcount_ = 0;
    m_objectrank_ = 0;
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_WonderfulObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_objID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objid_)));
          set_has_m_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_objCount;
        break;
      }

      // optional int32 m_objCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_objCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objcount_)));
          set_has_m_objcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_objectRank;
        break;
      }

      // optional int32 m_objectRank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_objectRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objectrank_)));
          set_has_m_objectrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_icon;
        break;
      }

      // optional string icon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_WonderfulObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_objID = 1;
  if (has_m_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objid(), output);
  }

  // optional int32 m_objCount = 2;
  if (has_m_objcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_objcount(), output);
  }

  // optional int32 m_objectRank = 3;
  if (has_m_objectrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_objectrank(), output);
  }

  // optional string icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->icon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_WonderfulObj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_objID = 1;
  if (has_m_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objid(), target);
  }

  // optional int32 m_objCount = 2;
  if (has_m_objcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_objcount(), target);
  }

  // optional int32 m_objectRank = 3;
  if (has_m_objectrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_objectrank(), target);
  }

  // optional string icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->icon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_WonderfulObj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_objID = 1;
    if (has_m_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objid());
    }

    // optional int32 m_objCount = 2;
    if (has_m_objcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objcount());
    }

    // optional int32 m_objectRank = 3;
    if (has_m_objectrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objectrank());
    }

    // optional string icon = 4;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_WonderfulObj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_WonderfulObj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_WonderfulObj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_WonderfulObj::MergeFrom(const GM_WonderfulObj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objid()) {
      set_m_objid(from.m_objid());
    }
    if (from.has_m_objcount()) {
      set_m_objcount(from.m_objcount());
    }
    if (from.has_m_objectrank()) {
      set_m_objectrank(from.m_objectrank());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_WonderfulObj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_WonderfulObj::CopyFrom(const GM_WonderfulObj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_WonderfulObj::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_WonderfulObj::Swap(GM_WonderfulObj* other) {
  if (other != this) {
    std::swap(m_objid_, other->m_objid_);
    std::swap(m_objcount_, other->m_objcount_);
    std::swap(m_objectrank_, other->m_objectrank_);
    std::swap(icon_, other->icon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_WonderfulObj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_WonderfulObj_descriptor_;
  metadata.reflection = GM_WonderfulObj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_WonderfulData2::kMWonderfulIdFieldNumber;
const int GM_WonderfulData2::kMWonderfulNameFieldNumber;
const int GM_WonderfulData2::kMWonderfulRuleFieldNumber;
const int GM_WonderfulData2::kMGuideIdFieldNumber;
const int GM_WonderfulData2::kMWonderfulTimeFieldNumber;
#endif  // !_MSC_VER

GM_WonderfulData2::GM_WonderfulData2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_WonderfulData2::InitAsDefaultInstance() {
}

GM_WonderfulData2::GM_WonderfulData2(const GM_WonderfulData2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_WonderfulData2::SharedCtor() {
  _cached_size_ = 0;
  m_wonderfulid_ = 0;
  m_wonderfulname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_wonderfulrule_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_guideid_ = 0;
  m_wonderfultime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_WonderfulData2::~GM_WonderfulData2() {
  SharedDtor();
}

void GM_WonderfulData2::SharedDtor() {
  if (m_wonderfulname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_wonderfulname_;
  }
  if (m_wonderfulrule_ != &::google::protobuf::internal::kEmptyString) {
    delete m_wonderfulrule_;
  }
  if (m_wonderfultime_ != &::google::protobuf::internal::kEmptyString) {
    delete m_wonderfultime_;
  }
  if (this != default_instance_) {
  }
}

void GM_WonderfulData2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_WonderfulData2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_WonderfulData2_descriptor_;
}

const GM_WonderfulData2& GM_WonderfulData2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_WonderfulData2* GM_WonderfulData2::default_instance_ = NULL;

GM_WonderfulData2* GM_WonderfulData2::New() const {
  return new GM_WonderfulData2;
}

void GM_WonderfulData2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_wonderfulid_ = 0;
    if (has_m_wonderfulname()) {
      if (m_wonderfulname_ != &::google::protobuf::internal::kEmptyString) {
        m_wonderfulname_->clear();
      }
    }
    if (has_m_wonderfulrule()) {
      if (m_wonderfulrule_ != &::google::protobuf::internal::kEmptyString) {
        m_wonderfulrule_->clear();
      }
    }
    m_guideid_ = 0;
    if (has_m_wonderfultime()) {
      if (m_wonderfultime_ != &::google::protobuf::internal::kEmptyString) {
        m_wonderfultime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_WonderfulData2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_WonderfulId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wonderfulid_)));
          set_has_m_wonderfulid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_WonderfulName;
        break;
      }

      // optional string m_WonderfulName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_WonderfulName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_wonderfulname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_wonderfulname().data(), this->m_wonderfulname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_WonderfulRule;
        break;
      }

      // optional string m_WonderfulRule = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_WonderfulRule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_wonderfulrule()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_wonderfulrule().data(), this->m_wonderfulrule().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_guideId;
        break;
      }

      // optional int32 m_guideId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_guideId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_guideid_)));
          set_has_m_guideid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_WonderfulTime;
        break;
      }

      // optional string m_WonderfulTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_WonderfulTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_wonderfultime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_wonderfultime().data(), this->m_wonderfultime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_WonderfulData2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_WonderfulId = 1;
  if (has_m_wonderfulid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_wonderfulid(), output);
  }

  // optional string m_WonderfulName = 2;
  if (has_m_wonderfulname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_wonderfulname().data(), this->m_wonderfulname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_wonderfulname(), output);
  }

  // optional string m_WonderfulRule = 3;
  if (has_m_wonderfulrule()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_wonderfulrule().data(), this->m_wonderfulrule().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_wonderfulrule(), output);
  }

  // optional int32 m_guideId = 4;
  if (has_m_guideid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_guideid(), output);
  }

  // optional string m_WonderfulTime = 5;
  if (has_m_wonderfultime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_wonderfultime().data(), this->m_wonderfultime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_wonderfultime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_WonderfulData2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_WonderfulId = 1;
  if (has_m_wonderfulid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_wonderfulid(), target);
  }

  // optional string m_WonderfulName = 2;
  if (has_m_wonderfulname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_wonderfulname().data(), this->m_wonderfulname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_wonderfulname(), target);
  }

  // optional string m_WonderfulRule = 3;
  if (has_m_wonderfulrule()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_wonderfulrule().data(), this->m_wonderfulrule().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_wonderfulrule(), target);
  }

  // optional int32 m_guideId = 4;
  if (has_m_guideid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_guideid(), target);
  }

  // optional string m_WonderfulTime = 5;
  if (has_m_wonderfultime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_wonderfultime().data(), this->m_wonderfultime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_wonderfultime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_WonderfulData2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_WonderfulId = 1;
    if (has_m_wonderfulid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wonderfulid());
    }

    // optional string m_WonderfulName = 2;
    if (has_m_wonderfulname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_wonderfulname());
    }

    // optional string m_WonderfulRule = 3;
    if (has_m_wonderfulrule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_wonderfulrule());
    }

    // optional int32 m_guideId = 4;
    if (has_m_guideid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_guideid());
    }

    // optional string m_WonderfulTime = 5;
    if (has_m_wonderfultime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_wonderfultime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_WonderfulData2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_WonderfulData2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_WonderfulData2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_WonderfulData2::MergeFrom(const GM_WonderfulData2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_wonderfulid()) {
      set_m_wonderfulid(from.m_wonderfulid());
    }
    if (from.has_m_wonderfulname()) {
      set_m_wonderfulname(from.m_wonderfulname());
    }
    if (from.has_m_wonderfulrule()) {
      set_m_wonderfulrule(from.m_wonderfulrule());
    }
    if (from.has_m_guideid()) {
      set_m_guideid(from.m_guideid());
    }
    if (from.has_m_wonderfultime()) {
      set_m_wonderfultime(from.m_wonderfultime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_WonderfulData2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_WonderfulData2::CopyFrom(const GM_WonderfulData2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_WonderfulData2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_WonderfulData2::Swap(GM_WonderfulData2* other) {
  if (other != this) {
    std::swap(m_wonderfulid_, other->m_wonderfulid_);
    std::swap(m_wonderfulname_, other->m_wonderfulname_);
    std::swap(m_wonderfulrule_, other->m_wonderfulrule_);
    std::swap(m_guideid_, other->m_guideid_);
    std::swap(m_wonderfultime_, other->m_wonderfultime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_WonderfulData2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_WonderfulData2_descriptor_;
  metadata.reflection = GM_WonderfulData2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_SignDataReturn::kMRoleidFieldNumber;
const int GM_SignDataReturn::kMCurrentsignFieldNumber;
const int GM_SignDataReturn::kMSignstateFieldNumber;
const int GM_SignDataReturn::kMMonthFieldNumber;
const int GM_SignDataReturn::kMCurdayFieldNumber;
const int GM_SignDataReturn::kMRemaintimesFieldNumber;
const int GM_SignDataReturn::kMHasresigntimesFieldNumber;
const int GM_SignDataReturn::kMRegigncostFieldNumber;
const int GM_SignDataReturn::kDayobjFieldNumber;
const int GM_SignDataReturn::kCostitemFieldNumber;
#endif  // !_MSC_VER

GM_SignDataReturn::GM_SignDataReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_SignDataReturn::InitAsDefaultInstance() {
}

GM_SignDataReturn::GM_SignDataReturn(const GM_SignDataReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_SignDataReturn::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_currentsign_ = 0;
  m_signstate_ = 0;
  m_month_ = 0;
  m_curday_ = 0;
  m_remaintimes_ = 0;
  m_hasresigntimes_ = 0;
  m_regigncost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_SignDataReturn::~GM_SignDataReturn() {
  SharedDtor();
}

void GM_SignDataReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_SignDataReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_SignDataReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_SignDataReturn_descriptor_;
}

const GM_SignDataReturn& GM_SignDataReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_SignDataReturn* GM_SignDataReturn::default_instance_ = NULL;

GM_SignDataReturn* GM_SignDataReturn::New() const {
  return new GM_SignDataReturn;
}

void GM_SignDataReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_currentsign_ = 0;
    m_signstate_ = 0;
    m_month_ = 0;
    m_curday_ = 0;
    m_remaintimes_ = 0;
    m_hasresigntimes_ = 0;
    m_regigncost_ = 0;
  }
  dayobj_.Clear();
  costitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_SignDataReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_currentsign;
        break;
      }

      // optional int32 m_currentsign = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_currentsign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_currentsign_)));
          set_has_m_currentsign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_signstate;
        break;
      }

      // optional int32 m_signstate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_signstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_signstate_)));
          set_has_m_signstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_month;
        break;
      }

      // optional int32 m_month = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_month_)));
          set_has_m_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_curday;
        break;
      }

      // optional int32 m_curday = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_curday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_curday_)));
          set_has_m_curday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_remaintimes;
        break;
      }

      // optional int32 m_remaintimes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_remaintimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_remaintimes_)));
          set_has_m_remaintimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_hasresigntimes;
        break;
      }

      // optional int32 m_hasresigntimes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_hasresigntimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_hasresigntimes_)));
          set_has_m_hasresigntimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_regigncost;
        break;
      }

      // optional int32 m_regigncost = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_regigncost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_regigncost_)));
          set_has_m_regigncost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_dayobj;
        break;
      }

      // repeated .GM_Sign_DayObject dayobj = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dayobj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dayobj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_dayobj;
        if (input->ExpectTag(82)) goto parse_costitem;
        break;
      }

      // repeated .GM_Resign_Cost costitem = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_costitem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_costitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_costitem;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_SignDataReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int32 m_currentsign = 2;
  if (has_m_currentsign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_currentsign(), output);
  }

  // optional int32 m_signstate = 3;
  if (has_m_signstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_signstate(), output);
  }

  // optional int32 m_month = 4;
  if (has_m_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_month(), output);
  }

  // optional int32 m_curday = 5;
  if (has_m_curday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_curday(), output);
  }

  // optional int32 m_remaintimes = 6;
  if (has_m_remaintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_remaintimes(), output);
  }

  // optional int32 m_hasresigntimes = 7;
  if (has_m_hasresigntimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_hasresigntimes(), output);
  }

  // optional int32 m_regigncost = 8;
  if (has_m_regigncost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_regigncost(), output);
  }

  // repeated .GM_Sign_DayObject dayobj = 9;
  for (int i = 0; i < this->dayobj_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->dayobj(i), output);
  }

  // repeated .GM_Resign_Cost costitem = 10;
  for (int i = 0; i < this->costitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->costitem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_SignDataReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int32 m_currentsign = 2;
  if (has_m_currentsign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_currentsign(), target);
  }

  // optional int32 m_signstate = 3;
  if (has_m_signstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_signstate(), target);
  }

  // optional int32 m_month = 4;
  if (has_m_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_month(), target);
  }

  // optional int32 m_curday = 5;
  if (has_m_curday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_curday(), target);
  }

  // optional int32 m_remaintimes = 6;
  if (has_m_remaintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_remaintimes(), target);
  }

  // optional int32 m_hasresigntimes = 7;
  if (has_m_hasresigntimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_hasresigntimes(), target);
  }

  // optional int32 m_regigncost = 8;
  if (has_m_regigncost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_regigncost(), target);
  }

  // repeated .GM_Sign_DayObject dayobj = 9;
  for (int i = 0; i < this->dayobj_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->dayobj(i), target);
  }

  // repeated .GM_Resign_Cost costitem = 10;
  for (int i = 0; i < this->costitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->costitem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_SignDataReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_currentsign = 2;
    if (has_m_currentsign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_currentsign());
    }

    // optional int32 m_signstate = 3;
    if (has_m_signstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_signstate());
    }

    // optional int32 m_month = 4;
    if (has_m_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_month());
    }

    // optional int32 m_curday = 5;
    if (has_m_curday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_curday());
    }

    // optional int32 m_remaintimes = 6;
    if (has_m_remaintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_remaintimes());
    }

    // optional int32 m_hasresigntimes = 7;
    if (has_m_hasresigntimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_hasresigntimes());
    }

    // optional int32 m_regigncost = 8;
    if (has_m_regigncost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_regigncost());
    }

  }
  // repeated .GM_Sign_DayObject dayobj = 9;
  total_size += 1 * this->dayobj_size();
  for (int i = 0; i < this->dayobj_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dayobj(i));
  }

  // repeated .GM_Resign_Cost costitem = 10;
  total_size += 1 * this->costitem_size();
  for (int i = 0; i < this->costitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->costitem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_SignDataReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_SignDataReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_SignDataReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_SignDataReturn::MergeFrom(const GM_SignDataReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  dayobj_.MergeFrom(from.dayobj_);
  costitem_.MergeFrom(from.costitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_currentsign()) {
      set_m_currentsign(from.m_currentsign());
    }
    if (from.has_m_signstate()) {
      set_m_signstate(from.m_signstate());
    }
    if (from.has_m_month()) {
      set_m_month(from.m_month());
    }
    if (from.has_m_curday()) {
      set_m_curday(from.m_curday());
    }
    if (from.has_m_remaintimes()) {
      set_m_remaintimes(from.m_remaintimes());
    }
    if (from.has_m_hasresigntimes()) {
      set_m_hasresigntimes(from.m_hasresigntimes());
    }
    if (from.has_m_regigncost()) {
      set_m_regigncost(from.m_regigncost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_SignDataReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_SignDataReturn::CopyFrom(const GM_SignDataReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_SignDataReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < dayobj_size(); i++) {
    if (!this->dayobj(i).IsInitialized()) return false;
  }
  for (int i = 0; i < costitem_size(); i++) {
    if (!this->costitem(i).IsInitialized()) return false;
  }
  return true;
}

void GM_SignDataReturn::Swap(GM_SignDataReturn* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_currentsign_, other->m_currentsign_);
    std::swap(m_signstate_, other->m_signstate_);
    std::swap(m_month_, other->m_month_);
    std::swap(m_curday_, other->m_curday_);
    std::swap(m_remaintimes_, other->m_remaintimes_);
    std::swap(m_hasresigntimes_, other->m_hasresigntimes_);
    std::swap(m_regigncost_, other->m_regigncost_);
    dayobj_.Swap(&other->dayobj_);
    costitem_.Swap(&other->costitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_SignDataReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_SignDataReturn_descriptor_;
  metadata.reflection = GM_SignDataReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Resign_Cost::kMResigntimesFieldNumber;
const int GM_Resign_Cost::kMCostFieldNumber;
#endif  // !_MSC_VER

GM_Resign_Cost::GM_Resign_Cost()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Resign_Cost::InitAsDefaultInstance() {
}

GM_Resign_Cost::GM_Resign_Cost(const GM_Resign_Cost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Resign_Cost::SharedCtor() {
  _cached_size_ = 0;
  m_resigntimes_ = 0;
  m_cost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Resign_Cost::~GM_Resign_Cost() {
  SharedDtor();
}

void GM_Resign_Cost::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Resign_Cost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Resign_Cost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Resign_Cost_descriptor_;
}

const GM_Resign_Cost& GM_Resign_Cost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_Resign_Cost* GM_Resign_Cost::default_instance_ = NULL;

GM_Resign_Cost* GM_Resign_Cost::New() const {
  return new GM_Resign_Cost;
}

void GM_Resign_Cost::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_resigntimes_ = 0;
    m_cost_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Resign_Cost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_resigntimes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_resigntimes_)));
          set_has_m_resigntimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_cost;
        break;
      }

      // required int32 m_cost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cost_)));
          set_has_m_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Resign_Cost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_resigntimes = 1;
  if (has_m_resigntimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_resigntimes(), output);
  }

  // required int32 m_cost = 2;
  if (has_m_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_cost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Resign_Cost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_resigntimes = 1;
  if (has_m_resigntimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_resigntimes(), target);
  }

  // required int32 m_cost = 2;
  if (has_m_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_cost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Resign_Cost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_resigntimes = 1;
    if (has_m_resigntimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_resigntimes());
    }

    // required int32 m_cost = 2;
    if (has_m_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Resign_Cost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Resign_Cost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Resign_Cost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Resign_Cost::MergeFrom(const GM_Resign_Cost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_resigntimes()) {
      set_m_resigntimes(from.m_resigntimes());
    }
    if (from.has_m_cost()) {
      set_m_cost(from.m_cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Resign_Cost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Resign_Cost::CopyFrom(const GM_Resign_Cost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Resign_Cost::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_Resign_Cost::Swap(GM_Resign_Cost* other) {
  if (other != this) {
    std::swap(m_resigntimes_, other->m_resigntimes_);
    std::swap(m_cost_, other->m_cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Resign_Cost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Resign_Cost_descriptor_;
  metadata.reflection = GM_Resign_Cost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Sign_DayObject::kMDayFieldNumber;
const int GM_Sign_DayObject::kItemsFieldNumber;
#endif  // !_MSC_VER

GM_Sign_DayObject::GM_Sign_DayObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Sign_DayObject::InitAsDefaultInstance() {
}

GM_Sign_DayObject::GM_Sign_DayObject(const GM_Sign_DayObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Sign_DayObject::SharedCtor() {
  _cached_size_ = 0;
  m_day_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Sign_DayObject::~GM_Sign_DayObject() {
  SharedDtor();
}

void GM_Sign_DayObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Sign_DayObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Sign_DayObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Sign_DayObject_descriptor_;
}

const GM_Sign_DayObject& GM_Sign_DayObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_Sign_DayObject* GM_Sign_DayObject::default_instance_ = NULL;

GM_Sign_DayObject* GM_Sign_DayObject::New() const {
  return new GM_Sign_DayObject;
}

void GM_Sign_DayObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_day_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Sign_DayObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_day_)));
          set_has_m_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .GM_SignObject_Item items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Sign_DayObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_day = 1;
  if (has_m_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_day(), output);
  }

  // repeated .GM_SignObject_Item items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Sign_DayObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_day = 1;
  if (has_m_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_day(), target);
  }

  // repeated .GM_SignObject_Item items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Sign_DayObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_day = 1;
    if (has_m_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_day());
    }

  }
  // repeated .GM_SignObject_Item items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Sign_DayObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Sign_DayObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Sign_DayObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Sign_DayObject::MergeFrom(const GM_Sign_DayObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_day()) {
      set_m_day(from.m_day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Sign_DayObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Sign_DayObject::CopyFrom(const GM_Sign_DayObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Sign_DayObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Sign_DayObject::Swap(GM_Sign_DayObject* other) {
  if (other != this) {
    std::swap(m_day_, other->m_day_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Sign_DayObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Sign_DayObject_descriptor_;
  metadata.reflection = GM_Sign_DayObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_SignObject_Item::kMObjidFieldNumber;
const int GM_SignObject_Item::kMOjbcountFieldNumber;
const int GM_SignObject_Item::kMViplvFieldNumber;
const int GM_SignObject_Item::kMTimesFieldNumber;
#endif  // !_MSC_VER

GM_SignObject_Item::GM_SignObject_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_SignObject_Item::InitAsDefaultInstance() {
}

GM_SignObject_Item::GM_SignObject_Item(const GM_SignObject_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_SignObject_Item::SharedCtor() {
  _cached_size_ = 0;
  m_objid_ = 0;
  m_ojbcount_ = 0;
  m_viplv_ = 0;
  m_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_SignObject_Item::~GM_SignObject_Item() {
  SharedDtor();
}

void GM_SignObject_Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_SignObject_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_SignObject_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_SignObject_Item_descriptor_;
}

const GM_SignObject_Item& GM_SignObject_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_SignObject_Item* GM_SignObject_Item::default_instance_ = NULL;

GM_SignObject_Item* GM_SignObject_Item::New() const {
  return new GM_SignObject_Item;
}

void GM_SignObject_Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objid_ = 0;
    m_ojbcount_ = 0;
    m_viplv_ = 0;
    m_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_SignObject_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_objid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objid_)));
          set_has_m_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_ojbcount;
        break;
      }

      // optional int32 m_ojbcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ojbcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ojbcount_)));
          set_has_m_ojbcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_viplv;
        break;
      }

      // optional int32 m_viplv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_viplv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_viplv_)));
          set_has_m_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_times;
        break;
      }

      // optional int32 m_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_times_)));
          set_has_m_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_SignObject_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_objid = 1;
  if (has_m_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objid(), output);
  }

  // optional int32 m_ojbcount = 2;
  if (has_m_ojbcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_ojbcount(), output);
  }

  // optional int32 m_viplv = 3;
  if (has_m_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_viplv(), output);
  }

  // optional int32 m_times = 4;
  if (has_m_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_SignObject_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_objid = 1;
  if (has_m_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objid(), target);
  }

  // optional int32 m_ojbcount = 2;
  if (has_m_ojbcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_ojbcount(), target);
  }

  // optional int32 m_viplv = 3;
  if (has_m_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_viplv(), target);
  }

  // optional int32 m_times = 4;
  if (has_m_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_SignObject_Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_objid = 1;
    if (has_m_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objid());
    }

    // optional int32 m_ojbcount = 2;
    if (has_m_ojbcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ojbcount());
    }

    // optional int32 m_viplv = 3;
    if (has_m_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_viplv());
    }

    // optional int32 m_times = 4;
    if (has_m_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_SignObject_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_SignObject_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_SignObject_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_SignObject_Item::MergeFrom(const GM_SignObject_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objid()) {
      set_m_objid(from.m_objid());
    }
    if (from.has_m_ojbcount()) {
      set_m_ojbcount(from.m_ojbcount());
    }
    if (from.has_m_viplv()) {
      set_m_viplv(from.m_viplv());
    }
    if (from.has_m_times()) {
      set_m_times(from.m_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_SignObject_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_SignObject_Item::CopyFrom(const GM_SignObject_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_SignObject_Item::IsInitialized() const {

  return true;
}

void GM_SignObject_Item::Swap(GM_SignObject_Item* other) {
  if (other != this) {
    std::swap(m_objid_, other->m_objid_);
    std::swap(m_ojbcount_, other->m_ojbcount_);
    std::swap(m_viplv_, other->m_viplv_);
    std::swap(m_times_, other->m_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_SignObject_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_SignObject_Item_descriptor_;
  metadata.reflection = GM_SignObject_Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_QHeroDataReturn::kMRoleidFieldNumber;
const int GM_QHeroDataReturn::kMDesFieldNumber;
const int GM_QHeroDataReturn::kMStateFieldNumber;
const int GM_QHeroDataReturn::kMCostFieldNumber;
const int GM_QHeroDataReturn::kMViplimitFieldNumber;
const int GM_QHeroDataReturn::kMObjInfoFieldNumber;
#endif  // !_MSC_VER

GM_QHeroDataReturn::GM_QHeroDataReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_QHeroDataReturn::InitAsDefaultInstance() {
}

GM_QHeroDataReturn::GM_QHeroDataReturn(const GM_QHeroDataReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_QHeroDataReturn::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_state_ = 0;
  m_cost_ = 0;
  m_viplimit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_QHeroDataReturn::~GM_QHeroDataReturn() {
  SharedDtor();
}

void GM_QHeroDataReturn::SharedDtor() {
  if (m_des_ != &::google::protobuf::internal::kEmptyString) {
    delete m_des_;
  }
  if (this != default_instance_) {
  }
}

void GM_QHeroDataReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_QHeroDataReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_QHeroDataReturn_descriptor_;
}

const GM_QHeroDataReturn& GM_QHeroDataReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_QHeroDataReturn* GM_QHeroDataReturn::default_instance_ = NULL;

GM_QHeroDataReturn* GM_QHeroDataReturn::New() const {
  return new GM_QHeroDataReturn;
}

void GM_QHeroDataReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    if (has_m_des()) {
      if (m_des_ != &::google::protobuf::internal::kEmptyString) {
        m_des_->clear();
      }
    }
    m_state_ = 0;
    m_cost_ = 0;
    m_viplimit_ = 0;
  }
  m_objinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_QHeroDataReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_des;
        break;
      }

      // optional string m_des = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_des:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_des()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_des().data(), this->m_des().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_state;
        break;
      }

      // optional int32 m_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_cost;
        break;
      }

      // optional int32 m_cost = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cost_)));
          set_has_m_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_viplimit;
        break;
      }

      // optional int32 m_viplimit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_viplimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_viplimit_)));
          set_has_m_viplimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_objInfo;
        break;
      }

      // repeated .GM_QHeroObject m_objInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_objInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_objinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_objInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_QHeroDataReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional string m_des = 2;
  if (has_m_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_des().data(), this->m_des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_des(), output);
  }

  // optional int32 m_state = 3;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_state(), output);
  }

  // optional int32 m_cost = 4;
  if (has_m_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_cost(), output);
  }

  // optional int32 m_viplimit = 5;
  if (has_m_viplimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_viplimit(), output);
  }

  // repeated .GM_QHeroObject m_objInfo = 6;
  for (int i = 0; i < this->m_objinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_objinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_QHeroDataReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional string m_des = 2;
  if (has_m_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_des().data(), this->m_des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_des(), target);
  }

  // optional int32 m_state = 3;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_state(), target);
  }

  // optional int32 m_cost = 4;
  if (has_m_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_cost(), target);
  }

  // optional int32 m_viplimit = 5;
  if (has_m_viplimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_viplimit(), target);
  }

  // repeated .GM_QHeroObject m_objInfo = 6;
  for (int i = 0; i < this->m_objinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_objinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_QHeroDataReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional string m_des = 2;
    if (has_m_des()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_des());
    }

    // optional int32 m_state = 3;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

    // optional int32 m_cost = 4;
    if (has_m_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cost());
    }

    // optional int32 m_viplimit = 5;
    if (has_m_viplimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_viplimit());
    }

  }
  // repeated .GM_QHeroObject m_objInfo = 6;
  total_size += 1 * this->m_objinfo_size();
  for (int i = 0; i < this->m_objinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_objinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_QHeroDataReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_QHeroDataReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_QHeroDataReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_QHeroDataReturn::MergeFrom(const GM_QHeroDataReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_objinfo_.MergeFrom(from.m_objinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_des()) {
      set_m_des(from.m_des());
    }
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
    if (from.has_m_cost()) {
      set_m_cost(from.m_cost());
    }
    if (from.has_m_viplimit()) {
      set_m_viplimit(from.m_viplimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_QHeroDataReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_QHeroDataReturn::CopyFrom(const GM_QHeroDataReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_QHeroDataReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_objinfo_size(); i++) {
    if (!this->m_objinfo(i).IsInitialized()) return false;
  }
  return true;
}

void GM_QHeroDataReturn::Swap(GM_QHeroDataReturn* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_des_, other->m_des_);
    std::swap(m_state_, other->m_state_);
    std::swap(m_cost_, other->m_cost_);
    std::swap(m_viplimit_, other->m_viplimit_);
    m_objinfo_.Swap(&other->m_objinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_QHeroDataReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_QHeroDataReturn_descriptor_;
  metadata.reflection = GM_QHeroDataReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_QHeroObject::kMObjidFieldNumber;
const int GM_QHeroObject::kMObjcountFieldNumber;
const int GM_QHeroObject::kMLevelFieldNumber;
const int GM_QHeroObject::kMStateFieldNumber;
#endif  // !_MSC_VER

GM_QHeroObject::GM_QHeroObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_QHeroObject::InitAsDefaultInstance() {
}

GM_QHeroObject::GM_QHeroObject(const GM_QHeroObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_QHeroObject::SharedCtor() {
  _cached_size_ = 0;
  m_objid_ = 0;
  m_objcount_ = 0;
  m_level_ = 0;
  m_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_QHeroObject::~GM_QHeroObject() {
  SharedDtor();
}

void GM_QHeroObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_QHeroObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_QHeroObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_QHeroObject_descriptor_;
}

const GM_QHeroObject& GM_QHeroObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_QHeroObject* GM_QHeroObject::default_instance_ = NULL;

GM_QHeroObject* GM_QHeroObject::New() const {
  return new GM_QHeroObject;
}

void GM_QHeroObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objid_ = 0;
    m_objcount_ = 0;
    m_level_ = 0;
    m_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_QHeroObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_objid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objid_)));
          set_has_m_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_objcount;
        break;
      }

      // optional int32 m_objcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_objcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objcount_)));
          set_has_m_objcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_level;
        break;
      }

      // optional int32 m_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_level_)));
          set_has_m_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_state;
        break;
      }

      // optional int32 m_state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_QHeroObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_objid = 1;
  if (has_m_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objid(), output);
  }

  // optional int32 m_objcount = 2;
  if (has_m_objcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_objcount(), output);
  }

  // optional int32 m_level = 3;
  if (has_m_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_level(), output);
  }

  // optional int32 m_state = 4;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_QHeroObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_objid = 1;
  if (has_m_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objid(), target);
  }

  // optional int32 m_objcount = 2;
  if (has_m_objcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_objcount(), target);
  }

  // optional int32 m_level = 3;
  if (has_m_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_level(), target);
  }

  // optional int32 m_state = 4;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_QHeroObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_objid = 1;
    if (has_m_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objid());
    }

    // optional int32 m_objcount = 2;
    if (has_m_objcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objcount());
    }

    // optional int32 m_level = 3;
    if (has_m_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_level());
    }

    // optional int32 m_state = 4;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_QHeroObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_QHeroObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_QHeroObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_QHeroObject::MergeFrom(const GM_QHeroObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objid()) {
      set_m_objid(from.m_objid());
    }
    if (from.has_m_objcount()) {
      set_m_objcount(from.m_objcount());
    }
    if (from.has_m_level()) {
      set_m_level(from.m_level());
    }
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_QHeroObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_QHeroObject::CopyFrom(const GM_QHeroObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_QHeroObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_QHeroObject::Swap(GM_QHeroObject* other) {
  if (other != this) {
    std::swap(m_objid_, other->m_objid_);
    std::swap(m_objcount_, other->m_objcount_);
    std::swap(m_level_, other->m_level_);
    std::swap(m_state_, other->m_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_QHeroObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_QHeroObject_descriptor_;
  metadata.reflection = GM_QHeroObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_WonderfulBuyRequest::kMWonderfulIdFieldNumber;
const int GM_WonderfulBuyRequest::kMParamFieldNumber;
#endif  // !_MSC_VER

GM_WonderfulBuyRequest::GM_WonderfulBuyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_WonderfulBuyRequest::InitAsDefaultInstance() {
}

GM_WonderfulBuyRequest::GM_WonderfulBuyRequest(const GM_WonderfulBuyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_WonderfulBuyRequest::SharedCtor() {
  _cached_size_ = 0;
  m_wonderfulid_ = 0;
  m_param_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_WonderfulBuyRequest::~GM_WonderfulBuyRequest() {
  SharedDtor();
}

void GM_WonderfulBuyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_WonderfulBuyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_WonderfulBuyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_WonderfulBuyRequest_descriptor_;
}

const GM_WonderfulBuyRequest& GM_WonderfulBuyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_WonderfulBuyRequest* GM_WonderfulBuyRequest::default_instance_ = NULL;

GM_WonderfulBuyRequest* GM_WonderfulBuyRequest::New() const {
  return new GM_WonderfulBuyRequest;
}

void GM_WonderfulBuyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_wonderfulid_ = 0;
    m_param_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_WonderfulBuyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_wonderfulId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wonderfulid_)));
          set_has_m_wonderfulid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_param;
        break;
      }

      // optional int32 m_param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_param_)));
          set_has_m_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_WonderfulBuyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_wonderfulId = 1;
  if (has_m_wonderfulid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_wonderfulid(), output);
  }

  // optional int32 m_param = 2;
  if (has_m_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_WonderfulBuyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_wonderfulId = 1;
  if (has_m_wonderfulid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_wonderfulid(), target);
  }

  // optional int32 m_param = 2;
  if (has_m_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_WonderfulBuyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_wonderfulId = 1;
    if (has_m_wonderfulid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wonderfulid());
    }

    // optional int32 m_param = 2;
    if (has_m_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_WonderfulBuyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_WonderfulBuyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_WonderfulBuyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_WonderfulBuyRequest::MergeFrom(const GM_WonderfulBuyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_wonderfulid()) {
      set_m_wonderfulid(from.m_wonderfulid());
    }
    if (from.has_m_param()) {
      set_m_param(from.m_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_WonderfulBuyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_WonderfulBuyRequest::CopyFrom(const GM_WonderfulBuyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_WonderfulBuyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_WonderfulBuyRequest::Swap(GM_WonderfulBuyRequest* other) {
  if (other != this) {
    std::swap(m_wonderfulid_, other->m_wonderfulid_);
    std::swap(m_param_, other->m_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_WonderfulBuyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_WonderfulBuyRequest_descriptor_;
  metadata.reflection = GM_WonderfulBuyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_WonderfulBuyResult::kMWonderfulIdFieldNumber;
const int GM_WonderfulBuyResult::kMResultFieldNumber;
const int GM_WonderfulBuyResult::kMParamFieldNumber;
#endif  // !_MSC_VER

GM_WonderfulBuyResult::GM_WonderfulBuyResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_WonderfulBuyResult::InitAsDefaultInstance() {
}

GM_WonderfulBuyResult::GM_WonderfulBuyResult(const GM_WonderfulBuyResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_WonderfulBuyResult::SharedCtor() {
  _cached_size_ = 0;
  m_wonderfulid_ = 0;
  m_result_ = 0;
  m_param_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_WonderfulBuyResult::~GM_WonderfulBuyResult() {
  SharedDtor();
}

void GM_WonderfulBuyResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_WonderfulBuyResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_WonderfulBuyResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_WonderfulBuyResult_descriptor_;
}

const GM_WonderfulBuyResult& GM_WonderfulBuyResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_WonderfulBuyResult* GM_WonderfulBuyResult::default_instance_ = NULL;

GM_WonderfulBuyResult* GM_WonderfulBuyResult::New() const {
  return new GM_WonderfulBuyResult;
}

void GM_WonderfulBuyResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_wonderfulid_ = 0;
    m_result_ = 0;
    m_param_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_WonderfulBuyResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_wonderfulId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wonderfulid_)));
          set_has_m_wonderfulid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_result;
        break;
      }

      // optional int32 m_result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_param;
        break;
      }

      // optional int32 m_param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_param_)));
          set_has_m_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_WonderfulBuyResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_wonderfulId = 1;
  if (has_m_wonderfulid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_wonderfulid(), output);
  }

  // optional int32 m_result = 2;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_result(), output);
  }

  // optional int32 m_param = 3;
  if (has_m_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_WonderfulBuyResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_wonderfulId = 1;
  if (has_m_wonderfulid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_wonderfulid(), target);
  }

  // optional int32 m_result = 2;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_result(), target);
  }

  // optional int32 m_param = 3;
  if (has_m_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_WonderfulBuyResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_wonderfulId = 1;
    if (has_m_wonderfulid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wonderfulid());
    }

    // optional int32 m_result = 2;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // optional int32 m_param = 3;
    if (has_m_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_WonderfulBuyResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_WonderfulBuyResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_WonderfulBuyResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_WonderfulBuyResult::MergeFrom(const GM_WonderfulBuyResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_wonderfulid()) {
      set_m_wonderfulid(from.m_wonderfulid());
    }
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_param()) {
      set_m_param(from.m_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_WonderfulBuyResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_WonderfulBuyResult::CopyFrom(const GM_WonderfulBuyResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_WonderfulBuyResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_WonderfulBuyResult::Swap(GM_WonderfulBuyResult* other) {
  if (other != this) {
    std::swap(m_wonderfulid_, other->m_wonderfulid_);
    std::swap(m_result_, other->m_result_);
    std::swap(m_param_, other->m_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_WonderfulBuyResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_WonderfulBuyResult_descriptor_;
  metadata.reflection = GM_WonderfulBuyResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_WonderfulAchieve::kMWonderfulIdFieldNumber;
const int GM_WonderfulAchieve::kMGiftbagIdFieldNumber;
#endif  // !_MSC_VER

GM_WonderfulAchieve::GM_WonderfulAchieve()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_WonderfulAchieve::InitAsDefaultInstance() {
}

GM_WonderfulAchieve::GM_WonderfulAchieve(const GM_WonderfulAchieve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_WonderfulAchieve::SharedCtor() {
  _cached_size_ = 0;
  m_wonderfulid_ = 0;
  m_giftbagid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_WonderfulAchieve::~GM_WonderfulAchieve() {
  SharedDtor();
}

void GM_WonderfulAchieve::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_WonderfulAchieve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_WonderfulAchieve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_WonderfulAchieve_descriptor_;
}

const GM_WonderfulAchieve& GM_WonderfulAchieve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_WonderfulAchieve* GM_WonderfulAchieve::default_instance_ = NULL;

GM_WonderfulAchieve* GM_WonderfulAchieve::New() const {
  return new GM_WonderfulAchieve;
}

void GM_WonderfulAchieve::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_wonderfulid_ = 0;
    m_giftbagid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_WonderfulAchieve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_WonderfulId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wonderfulid_)));
          set_has_m_wonderfulid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_giftbagId;
        break;
      }

      // optional int32 m_giftbagId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_giftbagId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_giftbagid_)));
          set_has_m_giftbagid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_WonderfulAchieve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_WonderfulId = 1;
  if (has_m_wonderfulid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_wonderfulid(), output);
  }

  // optional int32 m_giftbagId = 2;
  if (has_m_giftbagid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_giftbagid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_WonderfulAchieve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_WonderfulId = 1;
  if (has_m_wonderfulid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_wonderfulid(), target);
  }

  // optional int32 m_giftbagId = 2;
  if (has_m_giftbagid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_giftbagid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_WonderfulAchieve::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_WonderfulId = 1;
    if (has_m_wonderfulid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wonderfulid());
    }

    // optional int32 m_giftbagId = 2;
    if (has_m_giftbagid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_giftbagid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_WonderfulAchieve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_WonderfulAchieve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_WonderfulAchieve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_WonderfulAchieve::MergeFrom(const GM_WonderfulAchieve& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_wonderfulid()) {
      set_m_wonderfulid(from.m_wonderfulid());
    }
    if (from.has_m_giftbagid()) {
      set_m_giftbagid(from.m_giftbagid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_WonderfulAchieve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_WonderfulAchieve::CopyFrom(const GM_WonderfulAchieve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_WonderfulAchieve::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_WonderfulAchieve::Swap(GM_WonderfulAchieve* other) {
  if (other != this) {
    std::swap(m_wonderfulid_, other->m_wonderfulid_);
    std::swap(m_giftbagid_, other->m_giftbagid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_WonderfulAchieve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_WonderfulAchieve_descriptor_;
  metadata.reflection = GM_WonderfulAchieve_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_WonderfulResult::kMResultFieldNumber;
const int GM_WonderfulResult::kMWonderfulIdFieldNumber;
const int GM_WonderfulResult::kMParamFieldNumber;
const int GM_WonderfulResult::kMOpencountFieldNumber;
const int GM_WonderfulResult::kMMyrankFieldNumber;
const int GM_WonderfulResult::kMMysocreFieldNumber;
const int GM_WonderfulResult::kMInfosFieldNumber;
const int GM_WonderfulResult::kMFreeFieldNumber;
#endif  // !_MSC_VER

GM_WonderfulResult::GM_WonderfulResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_WonderfulResult::InitAsDefaultInstance() {
  m_infos_ = const_cast< ::GM_ExtraInfo*>(&::GM_ExtraInfo::default_instance());
}

GM_WonderfulResult::GM_WonderfulResult(const GM_WonderfulResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_WonderfulResult::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  m_wonderfulid_ = 0;
  m_param_ = 0;
  m_opencount_ = 0;
  m_myrank_ = 0;
  m_mysocre_ = 0;
  m_infos_ = NULL;
  m_free_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_WonderfulResult::~GM_WonderfulResult() {
  SharedDtor();
}

void GM_WonderfulResult::SharedDtor() {
  if (this != default_instance_) {
    delete m_infos_;
  }
}

void GM_WonderfulResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_WonderfulResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_WonderfulResult_descriptor_;
}

const GM_WonderfulResult& GM_WonderfulResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_WonderfulResult* GM_WonderfulResult::default_instance_ = NULL;

GM_WonderfulResult* GM_WonderfulResult::New() const {
  return new GM_WonderfulResult;
}

void GM_WonderfulResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    m_wonderfulid_ = 0;
    m_param_ = 0;
    m_opencount_ = 0;
    m_myrank_ = 0;
    m_mysocre_ = 0;
    if (has_m_infos()) {
      if (m_infos_ != NULL) m_infos_->::GM_ExtraInfo::Clear();
    }
    m_free_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_WonderfulResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_wonderfulId;
        break;
      }

      // optional int32 m_wonderfulId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_wonderfulId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wonderfulid_)));
          set_has_m_wonderfulid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_param;
        break;
      }

      // optional int32 m_param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_param_)));
          set_has_m_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_opencount;
        break;
      }

      // optional int32 m_opencount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_opencount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_opencount_)));
          set_has_m_opencount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_myrank;
        break;
      }

      // optional int32 m_myrank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_myrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_myrank_)));
          set_has_m_myrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_mysocre;
        break;
      }

      // optional int32 m_mysocre = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mysocre:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mysocre_)));
          set_has_m_mysocre();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_infos;
        break;
      }

      // optional .GM_ExtraInfo m_infos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_free;
        break;
      }

      // optional int32 m_free = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_free_)));
          set_has_m_free();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_WonderfulResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // optional int32 m_wonderfulId = 2;
  if (has_m_wonderfulid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_wonderfulid(), output);
  }

  // optional int32 m_param = 3;
  if (has_m_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_param(), output);
  }

  // optional int32 m_opencount = 4;
  if (has_m_opencount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_opencount(), output);
  }

  // optional int32 m_myrank = 5;
  if (has_m_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_myrank(), output);
  }

  // optional int32 m_mysocre = 6;
  if (has_m_mysocre()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_mysocre(), output);
  }

  // optional .GM_ExtraInfo m_infos = 7;
  if (has_m_infos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->m_infos(), output);
  }

  // optional int32 m_free = 8;
  if (has_m_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_free(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_WonderfulResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // optional int32 m_wonderfulId = 2;
  if (has_m_wonderfulid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_wonderfulid(), target);
  }

  // optional int32 m_param = 3;
  if (has_m_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_param(), target);
  }

  // optional int32 m_opencount = 4;
  if (has_m_opencount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_opencount(), target);
  }

  // optional int32 m_myrank = 5;
  if (has_m_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_myrank(), target);
  }

  // optional int32 m_mysocre = 6;
  if (has_m_mysocre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_mysocre(), target);
  }

  // optional .GM_ExtraInfo m_infos = 7;
  if (has_m_infos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->m_infos(), target);
  }

  // optional int32 m_free = 8;
  if (has_m_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_free(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_WonderfulResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // optional int32 m_wonderfulId = 2;
    if (has_m_wonderfulid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wonderfulid());
    }

    // optional int32 m_param = 3;
    if (has_m_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_param());
    }

    // optional int32 m_opencount = 4;
    if (has_m_opencount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_opencount());
    }

    // optional int32 m_myrank = 5;
    if (has_m_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_myrank());
    }

    // optional int32 m_mysocre = 6;
    if (has_m_mysocre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mysocre());
    }

    // optional .GM_ExtraInfo m_infos = 7;
    if (has_m_infos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_infos());
    }

    // optional int32 m_free = 8;
    if (has_m_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_free());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_WonderfulResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_WonderfulResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_WonderfulResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_WonderfulResult::MergeFrom(const GM_WonderfulResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_wonderfulid()) {
      set_m_wonderfulid(from.m_wonderfulid());
    }
    if (from.has_m_param()) {
      set_m_param(from.m_param());
    }
    if (from.has_m_opencount()) {
      set_m_opencount(from.m_opencount());
    }
    if (from.has_m_myrank()) {
      set_m_myrank(from.m_myrank());
    }
    if (from.has_m_mysocre()) {
      set_m_mysocre(from.m_mysocre());
    }
    if (from.has_m_infos()) {
      mutable_m_infos()->::GM_ExtraInfo::MergeFrom(from.m_infos());
    }
    if (from.has_m_free()) {
      set_m_free(from.m_free());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_WonderfulResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_WonderfulResult::CopyFrom(const GM_WonderfulResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_WonderfulResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_m_infos()) {
    if (!this->m_infos().IsInitialized()) return false;
  }
  return true;
}

void GM_WonderfulResult::Swap(GM_WonderfulResult* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(m_wonderfulid_, other->m_wonderfulid_);
    std::swap(m_param_, other->m_param_);
    std::swap(m_opencount_, other->m_opencount_);
    std::swap(m_myrank_, other->m_myrank_);
    std::swap(m_mysocre_, other->m_mysocre_);
    std::swap(m_infos_, other->m_infos_);
    std::swap(m_free_, other->m_free_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_WonderfulResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_WonderfulResult_descriptor_;
  metadata.reflection = GM_WonderfulResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ExtraInfo::kMDescribeFieldNumber;
const int GM_ExtraInfo::kItemsFieldNumber;
#endif  // !_MSC_VER

GM_ExtraInfo::GM_ExtraInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ExtraInfo::InitAsDefaultInstance() {
}

GM_ExtraInfo::GM_ExtraInfo(const GM_ExtraInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ExtraInfo::SharedCtor() {
  _cached_size_ = 0;
  m_describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ExtraInfo::~GM_ExtraInfo() {
  SharedDtor();
}

void GM_ExtraInfo::SharedDtor() {
  if (m_describe_ != &::google::protobuf::internal::kEmptyString) {
    delete m_describe_;
  }
  if (this != default_instance_) {
  }
}

void GM_ExtraInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ExtraInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ExtraInfo_descriptor_;
}

const GM_ExtraInfo& GM_ExtraInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_ExtraInfo* GM_ExtraInfo::default_instance_ = NULL;

GM_ExtraInfo* GM_ExtraInfo::New() const {
  return new GM_ExtraInfo;
}

void GM_ExtraInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_describe()) {
      if (m_describe_ != &::google::protobuf::internal::kEmptyString) {
        m_describe_->clear();
      }
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ExtraInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m_describe = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_describe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_describe().data(), this->m_describe().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .GM_OnlineObject_Item items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ExtraInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m_describe = 1;
  if (has_m_describe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_describe().data(), this->m_describe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_describe(), output);
  }

  // repeated .GM_OnlineObject_Item items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ExtraInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string m_describe = 1;
  if (has_m_describe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_describe().data(), this->m_describe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_describe(), target);
  }

  // repeated .GM_OnlineObject_Item items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ExtraInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m_describe = 1;
    if (has_m_describe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_describe());
    }

  }
  // repeated .GM_OnlineObject_Item items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ExtraInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ExtraInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ExtraInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ExtraInfo::MergeFrom(const GM_ExtraInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_describe()) {
      set_m_describe(from.m_describe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ExtraInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ExtraInfo::CopyFrom(const GM_ExtraInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ExtraInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_ExtraInfo::Swap(GM_ExtraInfo* other) {
  if (other != this) {
    std::swap(m_describe_, other->m_describe_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ExtraInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ExtraInfo_descriptor_;
  metadata.reflection = GM_ExtraInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_WonderfulStateNotify::kMWonderfulIdFieldNumber;
const int GM_WonderfulStateNotify::kMParamFieldNumber;
const int GM_WonderfulStateNotify::kMStateFieldNumber;
const int GM_WonderfulStateNotify::kMHadchargeFieldNumber;
#endif  // !_MSC_VER

GM_WonderfulStateNotify::GM_WonderfulStateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_WonderfulStateNotify::InitAsDefaultInstance() {
}

GM_WonderfulStateNotify::GM_WonderfulStateNotify(const GM_WonderfulStateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_WonderfulStateNotify::SharedCtor() {
  _cached_size_ = 0;
  m_wonderfulid_ = 0;
  m_param_ = 0;
  m_state_ = 0;
  m_hadcharge_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_WonderfulStateNotify::~GM_WonderfulStateNotify() {
  SharedDtor();
}

void GM_WonderfulStateNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_WonderfulStateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_WonderfulStateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_WonderfulStateNotify_descriptor_;
}

const GM_WonderfulStateNotify& GM_WonderfulStateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_WonderfulStateNotify* GM_WonderfulStateNotify::default_instance_ = NULL;

GM_WonderfulStateNotify* GM_WonderfulStateNotify::New() const {
  return new GM_WonderfulStateNotify;
}

void GM_WonderfulStateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_wonderfulid_ = 0;
    m_param_ = 0;
    m_state_ = 0;
    m_hadcharge_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_WonderfulStateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_wonderfulId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wonderfulid_)));
          set_has_m_wonderfulid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_param;
        break;
      }

      // optional int32 m_param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_param_)));
          set_has_m_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_state;
        break;
      }

      // optional int32 m_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_hadcharge;
        break;
      }

      // optional int32 m_hadcharge = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_hadcharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_hadcharge_)));
          set_has_m_hadcharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_WonderfulStateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_wonderfulId = 1;
  if (has_m_wonderfulid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_wonderfulid(), output);
  }

  // optional int32 m_param = 2;
  if (has_m_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_param(), output);
  }

  // optional int32 m_state = 3;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_state(), output);
  }

  // optional int32 m_hadcharge = 4;
  if (has_m_hadcharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_hadcharge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_WonderfulStateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_wonderfulId = 1;
  if (has_m_wonderfulid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_wonderfulid(), target);
  }

  // optional int32 m_param = 2;
  if (has_m_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_param(), target);
  }

  // optional int32 m_state = 3;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_state(), target);
  }

  // optional int32 m_hadcharge = 4;
  if (has_m_hadcharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_hadcharge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_WonderfulStateNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_wonderfulId = 1;
    if (has_m_wonderfulid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wonderfulid());
    }

    // optional int32 m_param = 2;
    if (has_m_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_param());
    }

    // optional int32 m_state = 3;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

    // optional int32 m_hadcharge = 4;
    if (has_m_hadcharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_hadcharge());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_WonderfulStateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_WonderfulStateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_WonderfulStateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_WonderfulStateNotify::MergeFrom(const GM_WonderfulStateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_wonderfulid()) {
      set_m_wonderfulid(from.m_wonderfulid());
    }
    if (from.has_m_param()) {
      set_m_param(from.m_param());
    }
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
    if (from.has_m_hadcharge()) {
      set_m_hadcharge(from.m_hadcharge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_WonderfulStateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_WonderfulStateNotify::CopyFrom(const GM_WonderfulStateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_WonderfulStateNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_WonderfulStateNotify::Swap(GM_WonderfulStateNotify* other) {
  if (other != this) {
    std::swap(m_wonderfulid_, other->m_wonderfulid_);
    std::swap(m_param_, other->m_param_);
    std::swap(m_state_, other->m_state_);
    std::swap(m_hadcharge_, other->m_hadcharge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_WonderfulStateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_WonderfulStateNotify_descriptor_;
  metadata.reflection = GM_WonderfulStateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_WonderfulStateNotify2::kMWonderfulIdFieldNumber;
const int GM_WonderfulStateNotify2::kMProjectidFieldNumber;
const int GM_WonderfulStateNotify2::kMGearFieldNumber;
const int GM_WonderfulStateNotify2::kMStateFieldNumber;
#endif  // !_MSC_VER

GM_WonderfulStateNotify2::GM_WonderfulStateNotify2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_WonderfulStateNotify2::InitAsDefaultInstance() {
}

GM_WonderfulStateNotify2::GM_WonderfulStateNotify2(const GM_WonderfulStateNotify2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_WonderfulStateNotify2::SharedCtor() {
  _cached_size_ = 0;
  m_wonderfulid_ = 0;
  m_projectid_ = 0;
  m_gear_ = 0;
  m_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_WonderfulStateNotify2::~GM_WonderfulStateNotify2() {
  SharedDtor();
}

void GM_WonderfulStateNotify2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_WonderfulStateNotify2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_WonderfulStateNotify2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_WonderfulStateNotify2_descriptor_;
}

const GM_WonderfulStateNotify2& GM_WonderfulStateNotify2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_WonderfulStateNotify2* GM_WonderfulStateNotify2::default_instance_ = NULL;

GM_WonderfulStateNotify2* GM_WonderfulStateNotify2::New() const {
  return new GM_WonderfulStateNotify2;
}

void GM_WonderfulStateNotify2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_wonderfulid_ = 0;
    m_projectid_ = 0;
    m_gear_ = 0;
    m_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_WonderfulStateNotify2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_wonderfulId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wonderfulid_)));
          set_has_m_wonderfulid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_projectid;
        break;
      }

      // optional int32 m_projectid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_projectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_projectid_)));
          set_has_m_projectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_gear;
        break;
      }

      // optional int32 m_gear = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gear_)));
          set_has_m_gear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_state;
        break;
      }

      // optional int32 m_state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_WonderfulStateNotify2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_wonderfulId = 1;
  if (has_m_wonderfulid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_wonderfulid(), output);
  }

  // optional int32 m_projectid = 2;
  if (has_m_projectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_projectid(), output);
  }

  // optional int32 m_gear = 3;
  if (has_m_gear()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_gear(), output);
  }

  // optional int32 m_state = 4;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_WonderfulStateNotify2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_wonderfulId = 1;
  if (has_m_wonderfulid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_wonderfulid(), target);
  }

  // optional int32 m_projectid = 2;
  if (has_m_projectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_projectid(), target);
  }

  // optional int32 m_gear = 3;
  if (has_m_gear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_gear(), target);
  }

  // optional int32 m_state = 4;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_WonderfulStateNotify2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_wonderfulId = 1;
    if (has_m_wonderfulid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wonderfulid());
    }

    // optional int32 m_projectid = 2;
    if (has_m_projectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_projectid());
    }

    // optional int32 m_gear = 3;
    if (has_m_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gear());
    }

    // optional int32 m_state = 4;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_WonderfulStateNotify2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_WonderfulStateNotify2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_WonderfulStateNotify2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_WonderfulStateNotify2::MergeFrom(const GM_WonderfulStateNotify2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_wonderfulid()) {
      set_m_wonderfulid(from.m_wonderfulid());
    }
    if (from.has_m_projectid()) {
      set_m_projectid(from.m_projectid());
    }
    if (from.has_m_gear()) {
      set_m_gear(from.m_gear());
    }
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_WonderfulStateNotify2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_WonderfulStateNotify2::CopyFrom(const GM_WonderfulStateNotify2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_WonderfulStateNotify2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_WonderfulStateNotify2::Swap(GM_WonderfulStateNotify2* other) {
  if (other != this) {
    std::swap(m_wonderfulid_, other->m_wonderfulid_);
    std::swap(m_projectid_, other->m_projectid_);
    std::swap(m_gear_, other->m_gear_);
    std::swap(m_state_, other->m_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_WonderfulStateNotify2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_WonderfulStateNotify2_descriptor_;
  metadata.reflection = GM_WonderfulStateNotify2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_WonderfulChange::kMChangeFieldNumber;
const int GM_WonderfulChange::kMWonderfulIdFieldNumber;
#endif  // !_MSC_VER

GM_WonderfulChange::GM_WonderfulChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_WonderfulChange::InitAsDefaultInstance() {
}

GM_WonderfulChange::GM_WonderfulChange(const GM_WonderfulChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_WonderfulChange::SharedCtor() {
  _cached_size_ = 0;
  m_change_ = 0;
  m_wonderfulid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_WonderfulChange::~GM_WonderfulChange() {
  SharedDtor();
}

void GM_WonderfulChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_WonderfulChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_WonderfulChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_WonderfulChange_descriptor_;
}

const GM_WonderfulChange& GM_WonderfulChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_WonderfulChange* GM_WonderfulChange::default_instance_ = NULL;

GM_WonderfulChange* GM_WonderfulChange::New() const {
  return new GM_WonderfulChange;
}

void GM_WonderfulChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_change_ = 0;
    m_wonderfulid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_WonderfulChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_change = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_change_)));
          set_has_m_change();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_wonderfulId;
        break;
      }

      // optional int32 m_wonderfulId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_wonderfulId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wonderfulid_)));
          set_has_m_wonderfulid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_WonderfulChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_change = 1;
  if (has_m_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_change(), output);
  }

  // optional int32 m_wonderfulId = 2;
  if (has_m_wonderfulid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_wonderfulid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_WonderfulChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_change = 1;
  if (has_m_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_change(), target);
  }

  // optional int32 m_wonderfulId = 2;
  if (has_m_wonderfulid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_wonderfulid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_WonderfulChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_change = 1;
    if (has_m_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_change());
    }

    // optional int32 m_wonderfulId = 2;
    if (has_m_wonderfulid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wonderfulid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_WonderfulChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_WonderfulChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_WonderfulChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_WonderfulChange::MergeFrom(const GM_WonderfulChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_change()) {
      set_m_change(from.m_change());
    }
    if (from.has_m_wonderfulid()) {
      set_m_wonderfulid(from.m_wonderfulid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_WonderfulChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_WonderfulChange::CopyFrom(const GM_WonderfulChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_WonderfulChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_WonderfulChange::Swap(GM_WonderfulChange* other) {
  if (other != this) {
    std::swap(m_change_, other->m_change_);
    std::swap(m_wonderfulid_, other->m_wonderfulid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_WonderfulChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_WonderfulChange_descriptor_;
  metadata.reflection = GM_WonderfulChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_LoginDataReturn::kMWonderfulidFieldNumber;
const int GM_LoginDataReturn::kDayobjFieldNumber;
#endif  // !_MSC_VER

GM_LoginDataReturn::GM_LoginDataReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_LoginDataReturn::InitAsDefaultInstance() {
}

GM_LoginDataReturn::GM_LoginDataReturn(const GM_LoginDataReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_LoginDataReturn::SharedCtor() {
  _cached_size_ = 0;
  m_wonderfulid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_LoginDataReturn::~GM_LoginDataReturn() {
  SharedDtor();
}

void GM_LoginDataReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_LoginDataReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_LoginDataReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_LoginDataReturn_descriptor_;
}

const GM_LoginDataReturn& GM_LoginDataReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_LoginDataReturn* GM_LoginDataReturn::default_instance_ = NULL;

GM_LoginDataReturn* GM_LoginDataReturn::New() const {
  return new GM_LoginDataReturn;
}

void GM_LoginDataReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_wonderfulid_ = 0;
  }
  dayobj_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_LoginDataReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_wonderfulid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wonderfulid_)));
          set_has_m_wonderfulid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dayobj;
        break;
      }

      // repeated .GM_LoginObject dayobj = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dayobj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dayobj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dayobj;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_LoginDataReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_wonderfulid = 1;
  if (has_m_wonderfulid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_wonderfulid(), output);
  }

  // repeated .GM_LoginObject dayobj = 2;
  for (int i = 0; i < this->dayobj_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dayobj(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_LoginDataReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_wonderfulid = 1;
  if (has_m_wonderfulid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_wonderfulid(), target);
  }

  // repeated .GM_LoginObject dayobj = 2;
  for (int i = 0; i < this->dayobj_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dayobj(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_LoginDataReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_wonderfulid = 1;
    if (has_m_wonderfulid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wonderfulid());
    }

  }
  // repeated .GM_LoginObject dayobj = 2;
  total_size += 1 * this->dayobj_size();
  for (int i = 0; i < this->dayobj_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dayobj(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_LoginDataReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_LoginDataReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_LoginDataReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_LoginDataReturn::MergeFrom(const GM_LoginDataReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  dayobj_.MergeFrom(from.dayobj_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_wonderfulid()) {
      set_m_wonderfulid(from.m_wonderfulid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_LoginDataReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_LoginDataReturn::CopyFrom(const GM_LoginDataReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_LoginDataReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < dayobj_size(); i++) {
    if (!this->dayobj(i).IsInitialized()) return false;
  }
  return true;
}

void GM_LoginDataReturn::Swap(GM_LoginDataReturn* other) {
  if (other != this) {
    std::swap(m_wonderfulid_, other->m_wonderfulid_);
    dayobj_.Swap(&other->dayobj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_LoginDataReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_LoginDataReturn_descriptor_;
  metadata.reflection = GM_LoginDataReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_LoginObject::kMDayFieldNumber;
const int GM_LoginObject::kMHasFieldNumber;
const int GM_LoginObject::kItemsFieldNumber;
#endif  // !_MSC_VER

GM_LoginObject::GM_LoginObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_LoginObject::InitAsDefaultInstance() {
}

GM_LoginObject::GM_LoginObject(const GM_LoginObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_LoginObject::SharedCtor() {
  _cached_size_ = 0;
  m_day_ = 0;
  m_has_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_LoginObject::~GM_LoginObject() {
  SharedDtor();
}

void GM_LoginObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_LoginObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_LoginObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_LoginObject_descriptor_;
}

const GM_LoginObject& GM_LoginObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_LoginObject* GM_LoginObject::default_instance_ = NULL;

GM_LoginObject* GM_LoginObject::New() const {
  return new GM_LoginObject;
}

void GM_LoginObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_day_ = 0;
    m_has_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_LoginObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_day_)));
          set_has_m_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_has;
        break;
      }

      // required int32 m_has = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_has:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_has_)));
          set_has_m_has();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .GM_LoginObject_Item items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_LoginObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_day = 1;
  if (has_m_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_day(), output);
  }

  // required int32 m_has = 2;
  if (has_m_has()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_has(), output);
  }

  // repeated .GM_LoginObject_Item items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_LoginObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_day = 1;
  if (has_m_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_day(), target);
  }

  // required int32 m_has = 2;
  if (has_m_has()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_has(), target);
  }

  // repeated .GM_LoginObject_Item items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_LoginObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_day = 1;
    if (has_m_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_day());
    }

    // required int32 m_has = 2;
    if (has_m_has()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_has());
    }

  }
  // repeated .GM_LoginObject_Item items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_LoginObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_LoginObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_LoginObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_LoginObject::MergeFrom(const GM_LoginObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_day()) {
      set_m_day(from.m_day());
    }
    if (from.has_m_has()) {
      set_m_has(from.m_has());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_LoginObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_LoginObject::CopyFrom(const GM_LoginObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_LoginObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_LoginObject::Swap(GM_LoginObject* other) {
  if (other != this) {
    std::swap(m_day_, other->m_day_);
    std::swap(m_has_, other->m_has_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_LoginObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_LoginObject_descriptor_;
  metadata.reflection = GM_LoginObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_LoginObject_Item::kMObjidFieldNumber;
const int GM_LoginObject_Item::kMOjbcountFieldNumber;
#endif  // !_MSC_VER

GM_LoginObject_Item::GM_LoginObject_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_LoginObject_Item::InitAsDefaultInstance() {
}

GM_LoginObject_Item::GM_LoginObject_Item(const GM_LoginObject_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_LoginObject_Item::SharedCtor() {
  _cached_size_ = 0;
  m_objid_ = 0;
  m_ojbcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_LoginObject_Item::~GM_LoginObject_Item() {
  SharedDtor();
}

void GM_LoginObject_Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_LoginObject_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_LoginObject_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_LoginObject_Item_descriptor_;
}

const GM_LoginObject_Item& GM_LoginObject_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_LoginObject_Item* GM_LoginObject_Item::default_instance_ = NULL;

GM_LoginObject_Item* GM_LoginObject_Item::New() const {
  return new GM_LoginObject_Item;
}

void GM_LoginObject_Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objid_ = 0;
    m_ojbcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_LoginObject_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_objid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objid_)));
          set_has_m_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_ojbcount;
        break;
      }

      // optional int32 m_ojbcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ojbcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ojbcount_)));
          set_has_m_ojbcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_LoginObject_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_objid = 1;
  if (has_m_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objid(), output);
  }

  // optional int32 m_ojbcount = 2;
  if (has_m_ojbcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_ojbcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_LoginObject_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_objid = 1;
  if (has_m_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objid(), target);
  }

  // optional int32 m_ojbcount = 2;
  if (has_m_ojbcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_ojbcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_LoginObject_Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_objid = 1;
    if (has_m_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objid());
    }

    // optional int32 m_ojbcount = 2;
    if (has_m_ojbcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ojbcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_LoginObject_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_LoginObject_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_LoginObject_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_LoginObject_Item::MergeFrom(const GM_LoginObject_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objid()) {
      set_m_objid(from.m_objid());
    }
    if (from.has_m_ojbcount()) {
      set_m_ojbcount(from.m_ojbcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_LoginObject_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_LoginObject_Item::CopyFrom(const GM_LoginObject_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_LoginObject_Item::IsInitialized() const {

  return true;
}

void GM_LoginObject_Item::Swap(GM_LoginObject_Item* other) {
  if (other != this) {
    std::swap(m_objid_, other->m_objid_);
    std::swap(m_ojbcount_, other->m_ojbcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_LoginObject_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_LoginObject_Item_descriptor_;
  metadata.reflection = GM_LoginObject_Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_UpgradeDataReturn::kMWonderfulidFieldNumber;
const int GM_UpgradeDataReturn::kLevelobjFieldNumber;
#endif  // !_MSC_VER

GM_UpgradeDataReturn::GM_UpgradeDataReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_UpgradeDataReturn::InitAsDefaultInstance() {
}

GM_UpgradeDataReturn::GM_UpgradeDataReturn(const GM_UpgradeDataReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_UpgradeDataReturn::SharedCtor() {
  _cached_size_ = 0;
  m_wonderfulid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_UpgradeDataReturn::~GM_UpgradeDataReturn() {
  SharedDtor();
}

void GM_UpgradeDataReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_UpgradeDataReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_UpgradeDataReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_UpgradeDataReturn_descriptor_;
}

const GM_UpgradeDataReturn& GM_UpgradeDataReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_UpgradeDataReturn* GM_UpgradeDataReturn::default_instance_ = NULL;

GM_UpgradeDataReturn* GM_UpgradeDataReturn::New() const {
  return new GM_UpgradeDataReturn;
}

void GM_UpgradeDataReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_wonderfulid_ = 0;
  }
  levelobj_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_UpgradeDataReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_wonderfulid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wonderfulid_)));
          set_has_m_wonderfulid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_levelobj;
        break;
      }

      // repeated .GM_UpgradeObject levelobj = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_levelobj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_levelobj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_levelobj;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_UpgradeDataReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_wonderfulid = 1;
  if (has_m_wonderfulid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_wonderfulid(), output);
  }

  // repeated .GM_UpgradeObject levelobj = 2;
  for (int i = 0; i < this->levelobj_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->levelobj(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_UpgradeDataReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_wonderfulid = 1;
  if (has_m_wonderfulid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_wonderfulid(), target);
  }

  // repeated .GM_UpgradeObject levelobj = 2;
  for (int i = 0; i < this->levelobj_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->levelobj(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_UpgradeDataReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_wonderfulid = 1;
    if (has_m_wonderfulid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wonderfulid());
    }

  }
  // repeated .GM_UpgradeObject levelobj = 2;
  total_size += 1 * this->levelobj_size();
  for (int i = 0; i < this->levelobj_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->levelobj(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_UpgradeDataReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_UpgradeDataReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_UpgradeDataReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_UpgradeDataReturn::MergeFrom(const GM_UpgradeDataReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  levelobj_.MergeFrom(from.levelobj_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_wonderfulid()) {
      set_m_wonderfulid(from.m_wonderfulid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_UpgradeDataReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_UpgradeDataReturn::CopyFrom(const GM_UpgradeDataReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_UpgradeDataReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < levelobj_size(); i++) {
    if (!this->levelobj(i).IsInitialized()) return false;
  }
  return true;
}

void GM_UpgradeDataReturn::Swap(GM_UpgradeDataReturn* other) {
  if (other != this) {
    std::swap(m_wonderfulid_, other->m_wonderfulid_);
    levelobj_.Swap(&other->levelobj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_UpgradeDataReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_UpgradeDataReturn_descriptor_;
  metadata.reflection = GM_UpgradeDataReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_UpgradeObject::kMLevelFieldNumber;
const int GM_UpgradeObject::kMHasFieldNumber;
const int GM_UpgradeObject::kItemsFieldNumber;
#endif  // !_MSC_VER

GM_UpgradeObject::GM_UpgradeObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_UpgradeObject::InitAsDefaultInstance() {
}

GM_UpgradeObject::GM_UpgradeObject(const GM_UpgradeObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_UpgradeObject::SharedCtor() {
  _cached_size_ = 0;
  m_level_ = 0;
  m_has_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_UpgradeObject::~GM_UpgradeObject() {
  SharedDtor();
}

void GM_UpgradeObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_UpgradeObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_UpgradeObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_UpgradeObject_descriptor_;
}

const GM_UpgradeObject& GM_UpgradeObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_UpgradeObject* GM_UpgradeObject::default_instance_ = NULL;

GM_UpgradeObject* GM_UpgradeObject::New() const {
  return new GM_UpgradeObject;
}

void GM_UpgradeObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_level_ = 0;
    m_has_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_UpgradeObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_level_)));
          set_has_m_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_has;
        break;
      }

      // required int32 m_has = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_has:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_has_)));
          set_has_m_has();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .GM_UpgradeObject_Item items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_UpgradeObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_level = 1;
  if (has_m_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_level(), output);
  }

  // required int32 m_has = 2;
  if (has_m_has()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_has(), output);
  }

  // repeated .GM_UpgradeObject_Item items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_UpgradeObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_level = 1;
  if (has_m_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_level(), target);
  }

  // required int32 m_has = 2;
  if (has_m_has()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_has(), target);
  }

  // repeated .GM_UpgradeObject_Item items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_UpgradeObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_level = 1;
    if (has_m_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_level());
    }

    // required int32 m_has = 2;
    if (has_m_has()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_has());
    }

  }
  // repeated .GM_UpgradeObject_Item items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_UpgradeObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_UpgradeObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_UpgradeObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_UpgradeObject::MergeFrom(const GM_UpgradeObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_level()) {
      set_m_level(from.m_level());
    }
    if (from.has_m_has()) {
      set_m_has(from.m_has());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_UpgradeObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_UpgradeObject::CopyFrom(const GM_UpgradeObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_UpgradeObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_UpgradeObject::Swap(GM_UpgradeObject* other) {
  if (other != this) {
    std::swap(m_level_, other->m_level_);
    std::swap(m_has_, other->m_has_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_UpgradeObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_UpgradeObject_descriptor_;
  metadata.reflection = GM_UpgradeObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_UpgradeObject_Item::kMObjidFieldNumber;
const int GM_UpgradeObject_Item::kMOjbcountFieldNumber;
#endif  // !_MSC_VER

GM_UpgradeObject_Item::GM_UpgradeObject_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_UpgradeObject_Item::InitAsDefaultInstance() {
}

GM_UpgradeObject_Item::GM_UpgradeObject_Item(const GM_UpgradeObject_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_UpgradeObject_Item::SharedCtor() {
  _cached_size_ = 0;
  m_objid_ = 0;
  m_ojbcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_UpgradeObject_Item::~GM_UpgradeObject_Item() {
  SharedDtor();
}

void GM_UpgradeObject_Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_UpgradeObject_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_UpgradeObject_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_UpgradeObject_Item_descriptor_;
}

const GM_UpgradeObject_Item& GM_UpgradeObject_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_UpgradeObject_Item* GM_UpgradeObject_Item::default_instance_ = NULL;

GM_UpgradeObject_Item* GM_UpgradeObject_Item::New() const {
  return new GM_UpgradeObject_Item;
}

void GM_UpgradeObject_Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objid_ = 0;
    m_ojbcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_UpgradeObject_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_objid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objid_)));
          set_has_m_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_ojbcount;
        break;
      }

      // optional int32 m_ojbcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ojbcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ojbcount_)));
          set_has_m_ojbcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_UpgradeObject_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_objid = 1;
  if (has_m_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objid(), output);
  }

  // optional int32 m_ojbcount = 2;
  if (has_m_ojbcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_ojbcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_UpgradeObject_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_objid = 1;
  if (has_m_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objid(), target);
  }

  // optional int32 m_ojbcount = 2;
  if (has_m_ojbcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_ojbcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_UpgradeObject_Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_objid = 1;
    if (has_m_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objid());
    }

    // optional int32 m_ojbcount = 2;
    if (has_m_ojbcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ojbcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_UpgradeObject_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_UpgradeObject_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_UpgradeObject_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_UpgradeObject_Item::MergeFrom(const GM_UpgradeObject_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objid()) {
      set_m_objid(from.m_objid());
    }
    if (from.has_m_ojbcount()) {
      set_m_ojbcount(from.m_ojbcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_UpgradeObject_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_UpgradeObject_Item::CopyFrom(const GM_UpgradeObject_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_UpgradeObject_Item::IsInitialized() const {

  return true;
}

void GM_UpgradeObject_Item::Swap(GM_UpgradeObject_Item* other) {
  if (other != this) {
    std::swap(m_objid_, other->m_objid_);
    std::swap(m_ojbcount_, other->m_ojbcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_UpgradeObject_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_UpgradeObject_Item_descriptor_;
  metadata.reflection = GM_UpgradeObject_Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_OnlineDataReturn::kMWonderfulidFieldNumber;
const int GM_OnlineDataReturn::kTimeobjFieldNumber;
const int GM_OnlineDataReturn::kMOnlinetimeFieldNumber;
#endif  // !_MSC_VER

GM_OnlineDataReturn::GM_OnlineDataReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_OnlineDataReturn::InitAsDefaultInstance() {
}

GM_OnlineDataReturn::GM_OnlineDataReturn(const GM_OnlineDataReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_OnlineDataReturn::SharedCtor() {
  _cached_size_ = 0;
  m_wonderfulid_ = 0;
  m_onlinetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_OnlineDataReturn::~GM_OnlineDataReturn() {
  SharedDtor();
}

void GM_OnlineDataReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_OnlineDataReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_OnlineDataReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_OnlineDataReturn_descriptor_;
}

const GM_OnlineDataReturn& GM_OnlineDataReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_OnlineDataReturn* GM_OnlineDataReturn::default_instance_ = NULL;

GM_OnlineDataReturn* GM_OnlineDataReturn::New() const {
  return new GM_OnlineDataReturn;
}

void GM_OnlineDataReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_wonderfulid_ = 0;
    m_onlinetime_ = 0;
  }
  timeobj_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_OnlineDataReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_wonderfulid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wonderfulid_)));
          set_has_m_wonderfulid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_timeobj;
        break;
      }

      // repeated .GM_OnlineObject timeobj = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timeobj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timeobj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_timeobj;
        if (input->ExpectTag(24)) goto parse_m_onlinetime;
        break;
      }

      // optional int32 m_onlinetime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_onlinetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_onlinetime_)));
          set_has_m_onlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_OnlineDataReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_wonderfulid = 1;
  if (has_m_wonderfulid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_wonderfulid(), output);
  }

  // repeated .GM_OnlineObject timeobj = 2;
  for (int i = 0; i < this->timeobj_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->timeobj(i), output);
  }

  // optional int32 m_onlinetime = 3;
  if (has_m_onlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_onlinetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_OnlineDataReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_wonderfulid = 1;
  if (has_m_wonderfulid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_wonderfulid(), target);
  }

  // repeated .GM_OnlineObject timeobj = 2;
  for (int i = 0; i < this->timeobj_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->timeobj(i), target);
  }

  // optional int32 m_onlinetime = 3;
  if (has_m_onlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_onlinetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_OnlineDataReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_wonderfulid = 1;
    if (has_m_wonderfulid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wonderfulid());
    }

    // optional int32 m_onlinetime = 3;
    if (has_m_onlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_onlinetime());
    }

  }
  // repeated .GM_OnlineObject timeobj = 2;
  total_size += 1 * this->timeobj_size();
  for (int i = 0; i < this->timeobj_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timeobj(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_OnlineDataReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_OnlineDataReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_OnlineDataReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_OnlineDataReturn::MergeFrom(const GM_OnlineDataReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  timeobj_.MergeFrom(from.timeobj_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_wonderfulid()) {
      set_m_wonderfulid(from.m_wonderfulid());
    }
    if (from.has_m_onlinetime()) {
      set_m_onlinetime(from.m_onlinetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_OnlineDataReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_OnlineDataReturn::CopyFrom(const GM_OnlineDataReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_OnlineDataReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < timeobj_size(); i++) {
    if (!this->timeobj(i).IsInitialized()) return false;
  }
  return true;
}

void GM_OnlineDataReturn::Swap(GM_OnlineDataReturn* other) {
  if (other != this) {
    std::swap(m_wonderfulid_, other->m_wonderfulid_);
    timeobj_.Swap(&other->timeobj_);
    std::swap(m_onlinetime_, other->m_onlinetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_OnlineDataReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_OnlineDataReturn_descriptor_;
  metadata.reflection = GM_OnlineDataReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_OnlineObject::kMLevelFieldNumber;
const int GM_OnlineObject::kMHasFieldNumber;
const int GM_OnlineObject::kItemsFieldNumber;
#endif  // !_MSC_VER

GM_OnlineObject::GM_OnlineObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_OnlineObject::InitAsDefaultInstance() {
}

GM_OnlineObject::GM_OnlineObject(const GM_OnlineObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_OnlineObject::SharedCtor() {
  _cached_size_ = 0;
  m_level_ = 0;
  m_has_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_OnlineObject::~GM_OnlineObject() {
  SharedDtor();
}

void GM_OnlineObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_OnlineObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_OnlineObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_OnlineObject_descriptor_;
}

const GM_OnlineObject& GM_OnlineObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_OnlineObject* GM_OnlineObject::default_instance_ = NULL;

GM_OnlineObject* GM_OnlineObject::New() const {
  return new GM_OnlineObject;
}

void GM_OnlineObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_level_ = 0;
    m_has_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_OnlineObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_level_)));
          set_has_m_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_has;
        break;
      }

      // required int32 m_has = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_has:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_has_)));
          set_has_m_has();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .GM_OnlineObject_Item items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_OnlineObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_level = 1;
  if (has_m_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_level(), output);
  }

  // required int32 m_has = 2;
  if (has_m_has()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_has(), output);
  }

  // repeated .GM_OnlineObject_Item items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_OnlineObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_level = 1;
  if (has_m_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_level(), target);
  }

  // required int32 m_has = 2;
  if (has_m_has()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_has(), target);
  }

  // repeated .GM_OnlineObject_Item items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_OnlineObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_level = 1;
    if (has_m_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_level());
    }

    // required int32 m_has = 2;
    if (has_m_has()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_has());
    }

  }
  // repeated .GM_OnlineObject_Item items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_OnlineObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_OnlineObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_OnlineObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_OnlineObject::MergeFrom(const GM_OnlineObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_level()) {
      set_m_level(from.m_level());
    }
    if (from.has_m_has()) {
      set_m_has(from.m_has());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_OnlineObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_OnlineObject::CopyFrom(const GM_OnlineObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_OnlineObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_OnlineObject::Swap(GM_OnlineObject* other) {
  if (other != this) {
    std::swap(m_level_, other->m_level_);
    std::swap(m_has_, other->m_has_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_OnlineObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_OnlineObject_descriptor_;
  metadata.reflection = GM_OnlineObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_OnlineObject_Item::kMObjidFieldNumber;
const int GM_OnlineObject_Item::kMOjbcountFieldNumber;
#endif  // !_MSC_VER

GM_OnlineObject_Item::GM_OnlineObject_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_OnlineObject_Item::InitAsDefaultInstance() {
}

GM_OnlineObject_Item::GM_OnlineObject_Item(const GM_OnlineObject_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_OnlineObject_Item::SharedCtor() {
  _cached_size_ = 0;
  m_objid_ = 0;
  m_ojbcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_OnlineObject_Item::~GM_OnlineObject_Item() {
  SharedDtor();
}

void GM_OnlineObject_Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_OnlineObject_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_OnlineObject_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_OnlineObject_Item_descriptor_;
}

const GM_OnlineObject_Item& GM_OnlineObject_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_OnlineObject_Item* GM_OnlineObject_Item::default_instance_ = NULL;

GM_OnlineObject_Item* GM_OnlineObject_Item::New() const {
  return new GM_OnlineObject_Item;
}

void GM_OnlineObject_Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objid_ = 0;
    m_ojbcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_OnlineObject_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_objid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objid_)));
          set_has_m_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_ojbcount;
        break;
      }

      // optional int32 m_ojbcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ojbcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ojbcount_)));
          set_has_m_ojbcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_OnlineObject_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_objid = 1;
  if (has_m_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objid(), output);
  }

  // optional int32 m_ojbcount = 2;
  if (has_m_ojbcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_ojbcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_OnlineObject_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_objid = 1;
  if (has_m_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objid(), target);
  }

  // optional int32 m_ojbcount = 2;
  if (has_m_ojbcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_ojbcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_OnlineObject_Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_objid = 1;
    if (has_m_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objid());
    }

    // optional int32 m_ojbcount = 2;
    if (has_m_ojbcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ojbcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_OnlineObject_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_OnlineObject_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_OnlineObject_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_OnlineObject_Item::MergeFrom(const GM_OnlineObject_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objid()) {
      set_m_objid(from.m_objid());
    }
    if (from.has_m_ojbcount()) {
      set_m_ojbcount(from.m_ojbcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_OnlineObject_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_OnlineObject_Item::CopyFrom(const GM_OnlineObject_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_OnlineObject_Item::IsInitialized() const {

  return true;
}

void GM_OnlineObject_Item::Swap(GM_OnlineObject_Item* other) {
  if (other != this) {
    std::swap(m_objid_, other->m_objid_);
    std::swap(m_ojbcount_, other->m_ojbcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_OnlineObject_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_OnlineObject_Item_descriptor_;
  metadata.reflection = GM_OnlineObject_Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_LimitpetReturn::kMOpencountFieldNumber;
const int GM_LimitpetReturn::kMDowntimeFieldNumber;
const int GM_LimitpetReturn::kMDiamondcostFieldNumber;
const int GM_LimitpetReturn::kMTendiamondcostFieldNumber;
const int GM_LimitpetReturn::kMMyrankFieldNumber;
const int GM_LimitpetReturn::kMSocreFieldNumber;
const int GM_LimitpetReturn::kMPetinfoFieldNumber;
const int GM_LimitpetReturn::kMRankobjsFieldNumber;
const int GM_LimitpetReturn::kMWonderfulidFieldNumber;
const int GM_LimitpetReturn::kMWonderfuldesFieldNumber;
#endif  // !_MSC_VER

GM_LimitpetReturn::GM_LimitpetReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_LimitpetReturn::InitAsDefaultInstance() {
}

GM_LimitpetReturn::GM_LimitpetReturn(const GM_LimitpetReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_LimitpetReturn::SharedCtor() {
  _cached_size_ = 0;
  m_opencount_ = 0;
  m_downtime_ = 0;
  m_diamondcost_ = 0;
  m_tendiamondcost_ = 0;
  m_myrank_ = 0;
  m_socre_ = 0;
  m_wonderfulid_ = 0;
  m_wonderfuldes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_LimitpetReturn::~GM_LimitpetReturn() {
  SharedDtor();
}

void GM_LimitpetReturn::SharedDtor() {
  if (m_wonderfuldes_ != &::google::protobuf::internal::kEmptyString) {
    delete m_wonderfuldes_;
  }
  if (this != default_instance_) {
  }
}

void GM_LimitpetReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_LimitpetReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_LimitpetReturn_descriptor_;
}

const GM_LimitpetReturn& GM_LimitpetReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_LimitpetReturn* GM_LimitpetReturn::default_instance_ = NULL;

GM_LimitpetReturn* GM_LimitpetReturn::New() const {
  return new GM_LimitpetReturn;
}

void GM_LimitpetReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_opencount_ = 0;
    m_downtime_ = 0;
    m_diamondcost_ = 0;
    m_tendiamondcost_ = 0;
    m_myrank_ = 0;
    m_socre_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_wonderfulid_ = 0;
    if (has_m_wonderfuldes()) {
      if (m_wonderfuldes_ != &::google::protobuf::internal::kEmptyString) {
        m_wonderfuldes_->clear();
      }
    }
  }
  m_petinfo_.Clear();
  m_rankobjs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_LimitpetReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_opencount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_opencount_)));
          set_has_m_opencount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_downtime;
        break;
      }

      // optional int32 m_downtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_downtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_downtime_)));
          set_has_m_downtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_diamondcost;
        break;
      }

      // optional int32 m_diamondcost = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_diamondcost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_diamondcost_)));
          set_has_m_diamondcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_tendiamondcost;
        break;
      }

      // optional int32 m_tendiamondcost = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_tendiamondcost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tendiamondcost_)));
          set_has_m_tendiamondcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_myrank;
        break;
      }

      // optional int32 m_myrank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_myrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_myrank_)));
          set_has_m_myrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_socre;
        break;
      }

      // optional int32 m_socre = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_socre:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_socre_)));
          set_has_m_socre();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_petinfo;
        break;
      }

      // repeated .GM_PetInfo m_petinfo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_petinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_petinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_petinfo;
        if (input->ExpectTag(64)) goto parse_m_wonderfulid;
        break;
      }

      // optional int32 m_wonderfulid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_wonderfulid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wonderfulid_)));
          set_has_m_wonderfulid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_wonderfuldes;
        break;
      }

      // optional string m_wonderfuldes = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_wonderfuldes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_wonderfuldes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_wonderfuldes().data(), this->m_wonderfuldes().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_rankobjs;
        break;
      }

      // repeated .GM_PetInfo m_rankobjs = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_rankobjs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_rankobjs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_rankobjs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_LimitpetReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_opencount = 1;
  if (has_m_opencount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_opencount(), output);
  }

  // optional int32 m_downtime = 2;
  if (has_m_downtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_downtime(), output);
  }

  // optional int32 m_diamondcost = 3;
  if (has_m_diamondcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_diamondcost(), output);
  }

  // optional int32 m_tendiamondcost = 4;
  if (has_m_tendiamondcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_tendiamondcost(), output);
  }

  // optional int32 m_myrank = 5;
  if (has_m_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_myrank(), output);
  }

  // optional int32 m_socre = 6;
  if (has_m_socre()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_socre(), output);
  }

  // repeated .GM_PetInfo m_petinfo = 7;
  for (int i = 0; i < this->m_petinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->m_petinfo(i), output);
  }

  // optional int32 m_wonderfulid = 8;
  if (has_m_wonderfulid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_wonderfulid(), output);
  }

  // optional string m_wonderfuldes = 9;
  if (has_m_wonderfuldes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_wonderfuldes().data(), this->m_wonderfuldes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->m_wonderfuldes(), output);
  }

  // repeated .GM_PetInfo m_rankobjs = 10;
  for (int i = 0; i < this->m_rankobjs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->m_rankobjs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_LimitpetReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_opencount = 1;
  if (has_m_opencount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_opencount(), target);
  }

  // optional int32 m_downtime = 2;
  if (has_m_downtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_downtime(), target);
  }

  // optional int32 m_diamondcost = 3;
  if (has_m_diamondcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_diamondcost(), target);
  }

  // optional int32 m_tendiamondcost = 4;
  if (has_m_tendiamondcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_tendiamondcost(), target);
  }

  // optional int32 m_myrank = 5;
  if (has_m_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_myrank(), target);
  }

  // optional int32 m_socre = 6;
  if (has_m_socre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_socre(), target);
  }

  // repeated .GM_PetInfo m_petinfo = 7;
  for (int i = 0; i < this->m_petinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->m_petinfo(i), target);
  }

  // optional int32 m_wonderfulid = 8;
  if (has_m_wonderfulid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_wonderfulid(), target);
  }

  // optional string m_wonderfuldes = 9;
  if (has_m_wonderfuldes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_wonderfuldes().data(), this->m_wonderfuldes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->m_wonderfuldes(), target);
  }

  // repeated .GM_PetInfo m_rankobjs = 10;
  for (int i = 0; i < this->m_rankobjs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->m_rankobjs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_LimitpetReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_opencount = 1;
    if (has_m_opencount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_opencount());
    }

    // optional int32 m_downtime = 2;
    if (has_m_downtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_downtime());
    }

    // optional int32 m_diamondcost = 3;
    if (has_m_diamondcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_diamondcost());
    }

    // optional int32 m_tendiamondcost = 4;
    if (has_m_tendiamondcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tendiamondcost());
    }

    // optional int32 m_myrank = 5;
    if (has_m_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_myrank());
    }

    // optional int32 m_socre = 6;
    if (has_m_socre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_socre());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_wonderfulid = 8;
    if (has_m_wonderfulid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wonderfulid());
    }

    // optional string m_wonderfuldes = 9;
    if (has_m_wonderfuldes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_wonderfuldes());
    }

  }
  // repeated .GM_PetInfo m_petinfo = 7;
  total_size += 1 * this->m_petinfo_size();
  for (int i = 0; i < this->m_petinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_petinfo(i));
  }

  // repeated .GM_PetInfo m_rankobjs = 10;
  total_size += 1 * this->m_rankobjs_size();
  for (int i = 0; i < this->m_rankobjs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_rankobjs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_LimitpetReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_LimitpetReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_LimitpetReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_LimitpetReturn::MergeFrom(const GM_LimitpetReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_petinfo_.MergeFrom(from.m_petinfo_);
  m_rankobjs_.MergeFrom(from.m_rankobjs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_opencount()) {
      set_m_opencount(from.m_opencount());
    }
    if (from.has_m_downtime()) {
      set_m_downtime(from.m_downtime());
    }
    if (from.has_m_diamondcost()) {
      set_m_diamondcost(from.m_diamondcost());
    }
    if (from.has_m_tendiamondcost()) {
      set_m_tendiamondcost(from.m_tendiamondcost());
    }
    if (from.has_m_myrank()) {
      set_m_myrank(from.m_myrank());
    }
    if (from.has_m_socre()) {
      set_m_socre(from.m_socre());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_wonderfulid()) {
      set_m_wonderfulid(from.m_wonderfulid());
    }
    if (from.has_m_wonderfuldes()) {
      set_m_wonderfuldes(from.m_wonderfuldes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_LimitpetReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_LimitpetReturn::CopyFrom(const GM_LimitpetReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_LimitpetReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_petinfo_size(); i++) {
    if (!this->m_petinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_rankobjs_size(); i++) {
    if (!this->m_rankobjs(i).IsInitialized()) return false;
  }
  return true;
}

void GM_LimitpetReturn::Swap(GM_LimitpetReturn* other) {
  if (other != this) {
    std::swap(m_opencount_, other->m_opencount_);
    std::swap(m_downtime_, other->m_downtime_);
    std::swap(m_diamondcost_, other->m_diamondcost_);
    std::swap(m_tendiamondcost_, other->m_tendiamondcost_);
    std::swap(m_myrank_, other->m_myrank_);
    std::swap(m_socre_, other->m_socre_);
    m_petinfo_.Swap(&other->m_petinfo_);
    m_rankobjs_.Swap(&other->m_rankobjs_);
    std::swap(m_wonderfulid_, other->m_wonderfulid_);
    std::swap(m_wonderfuldes_, other->m_wonderfuldes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_LimitpetReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_LimitpetReturn_descriptor_;
  metadata.reflection = GM_LimitpetReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PetInfo::kMObjidFieldNumber;
const int GM_PetInfo::kMObjcountFieldNumber;
const int GM_PetInfo::kMRankFieldNumber;
#endif  // !_MSC_VER

GM_PetInfo::GM_PetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PetInfo::InitAsDefaultInstance() {
}

GM_PetInfo::GM_PetInfo(const GM_PetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PetInfo::SharedCtor() {
  _cached_size_ = 0;
  m_objid_ = 0;
  m_objcount_ = 0;
  m_rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PetInfo::~GM_PetInfo() {
  SharedDtor();
}

void GM_PetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PetInfo_descriptor_;
}

const GM_PetInfo& GM_PetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_PetInfo* GM_PetInfo::default_instance_ = NULL;

GM_PetInfo* GM_PetInfo::New() const {
  return new GM_PetInfo;
}

void GM_PetInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objid_ = 0;
    m_objcount_ = 0;
    m_rank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_objid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objid_)));
          set_has_m_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_objcount;
        break;
      }

      // required int32 m_objcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_objcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objcount_)));
          set_has_m_objcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_rank;
        break;
      }

      // optional int32 m_rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rank_)));
          set_has_m_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_objid = 1;
  if (has_m_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objid(), output);
  }

  // required int32 m_objcount = 2;
  if (has_m_objcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_objcount(), output);
  }

  // optional int32 m_rank = 3;
  if (has_m_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_objid = 1;
  if (has_m_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objid(), target);
  }

  // required int32 m_objcount = 2;
  if (has_m_objcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_objcount(), target);
  }

  // optional int32 m_rank = 3;
  if (has_m_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_objid = 1;
    if (has_m_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objid());
    }

    // required int32 m_objcount = 2;
    if (has_m_objcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objcount());
    }

    // optional int32 m_rank = 3;
    if (has_m_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PetInfo::MergeFrom(const GM_PetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objid()) {
      set_m_objid(from.m_objid());
    }
    if (from.has_m_objcount()) {
      set_m_objcount(from.m_objcount());
    }
    if (from.has_m_rank()) {
      set_m_rank(from.m_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PetInfo::CopyFrom(const GM_PetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PetInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_PetInfo::Swap(GM_PetInfo* other) {
  if (other != this) {
    std::swap(m_objid_, other->m_objid_);
    std::swap(m_objcount_, other->m_objcount_);
    std::swap(m_rank_, other->m_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PetInfo_descriptor_;
  metadata.reflection = GM_PetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_LimitpetRankReturn::kMRoleidFieldNumber;
const int GM_LimitpetRankReturn::kMRankInfosFieldNumber;
#endif  // !_MSC_VER

GM_LimitpetRankReturn::GM_LimitpetRankReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_LimitpetRankReturn::InitAsDefaultInstance() {
}

GM_LimitpetRankReturn::GM_LimitpetRankReturn(const GM_LimitpetRankReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_LimitpetRankReturn::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_LimitpetRankReturn::~GM_LimitpetRankReturn() {
  SharedDtor();
}

void GM_LimitpetRankReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_LimitpetRankReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_LimitpetRankReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_LimitpetRankReturn_descriptor_;
}

const GM_LimitpetRankReturn& GM_LimitpetRankReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_LimitpetRankReturn* GM_LimitpetRankReturn::default_instance_ = NULL;

GM_LimitpetRankReturn* GM_LimitpetRankReturn::New() const {
  return new GM_LimitpetRankReturn;
}

void GM_LimitpetRankReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
  }
  m_rankinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_LimitpetRankReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_rankInfos;
        break;
      }

      // repeated .GM_ScoreRankInfo m_rankInfos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_rankInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_rankinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_rankInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_LimitpetRankReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // repeated .GM_ScoreRankInfo m_rankInfos = 2;
  for (int i = 0; i < this->m_rankinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_rankinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_LimitpetRankReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // repeated .GM_ScoreRankInfo m_rankInfos = 2;
  for (int i = 0; i < this->m_rankinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_rankinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_LimitpetRankReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

  }
  // repeated .GM_ScoreRankInfo m_rankInfos = 2;
  total_size += 1 * this->m_rankinfos_size();
  for (int i = 0; i < this->m_rankinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_rankinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_LimitpetRankReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_LimitpetRankReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_LimitpetRankReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_LimitpetRankReturn::MergeFrom(const GM_LimitpetRankReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_rankinfos_.MergeFrom(from.m_rankinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_LimitpetRankReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_LimitpetRankReturn::CopyFrom(const GM_LimitpetRankReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_LimitpetRankReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_rankinfos_size(); i++) {
    if (!this->m_rankinfos(i).IsInitialized()) return false;
  }
  return true;
}

void GM_LimitpetRankReturn::Swap(GM_LimitpetRankReturn* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    m_rankinfos_.Swap(&other->m_rankinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_LimitpetRankReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_LimitpetRankReturn_descriptor_;
  metadata.reflection = GM_LimitpetRankReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ScoreRankInfo::kMRankFieldNumber;
const int GM_ScoreRankInfo::kMNameFieldNumber;
const int GM_ScoreRankInfo::kMSocreFieldNumber;
#endif  // !_MSC_VER

GM_ScoreRankInfo::GM_ScoreRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ScoreRankInfo::InitAsDefaultInstance() {
}

GM_ScoreRankInfo::GM_ScoreRankInfo(const GM_ScoreRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ScoreRankInfo::SharedCtor() {
  _cached_size_ = 0;
  m_rank_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_socre_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ScoreRankInfo::~GM_ScoreRankInfo() {
  SharedDtor();
}

void GM_ScoreRankInfo::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (this != default_instance_) {
  }
}

void GM_ScoreRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ScoreRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ScoreRankInfo_descriptor_;
}

const GM_ScoreRankInfo& GM_ScoreRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_ScoreRankInfo* GM_ScoreRankInfo::default_instance_ = NULL;

GM_ScoreRankInfo* GM_ScoreRankInfo::New() const {
  return new GM_ScoreRankInfo;
}

void GM_ScoreRankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_rank_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_socre_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ScoreRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rank_)));
          set_has_m_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // required string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_socre;
        break;
      }

      // required int32 m_socre = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_socre:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_socre_)));
          set_has_m_socre();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ScoreRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_rank = 1;
  if (has_m_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_rank(), output);
  }

  // required string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // required int32 m_socre = 3;
  if (has_m_socre()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_socre(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ScoreRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_rank = 1;
  if (has_m_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_rank(), target);
  }

  // required string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // required int32 m_socre = 3;
  if (has_m_socre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_socre(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ScoreRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_rank = 1;
    if (has_m_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rank());
    }

    // required string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // required int32 m_socre = 3;
    if (has_m_socre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_socre());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ScoreRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ScoreRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ScoreRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ScoreRankInfo::MergeFrom(const GM_ScoreRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_rank()) {
      set_m_rank(from.m_rank());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_socre()) {
      set_m_socre(from.m_socre());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ScoreRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ScoreRankInfo::CopyFrom(const GM_ScoreRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ScoreRankInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_ScoreRankInfo::Swap(GM_ScoreRankInfo* other) {
  if (other != this) {
    std::swap(m_rank_, other->m_rank_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_socre_, other->m_socre_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ScoreRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ScoreRankInfo_descriptor_;
  metadata.reflection = GM_ScoreRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_LoginReward_Return::kMResultFieldNumber;
const int GM_LoginReward_Return::kMEquipIdFieldNumber;
const int GM_LoginReward_Return::kMEquipDetailFieldNumber;
const int GM_LoginReward_Return::kMNDelayTimeFieldNumber;
const int GM_LoginReward_Return::kMNGetIDFieldNumber;
const int GM_LoginReward_Return::kMNGetNumFieldNumber;
#endif  // !_MSC_VER

GM_LoginReward_Return::GM_LoginReward_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_LoginReward_Return::InitAsDefaultInstance() {
}

GM_LoginReward_Return::GM_LoginReward_Return(const GM_LoginReward_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_LoginReward_Return::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  m_equipid_ = 0;
  m_equipdetail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_ndelaytime_ = 0;
  m_ngetid_ = 0;
  m_ngetnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_LoginReward_Return::~GM_LoginReward_Return() {
  SharedDtor();
}

void GM_LoginReward_Return::SharedDtor() {
  if (m_equipdetail_ != &::google::protobuf::internal::kEmptyString) {
    delete m_equipdetail_;
  }
  if (this != default_instance_) {
  }
}

void GM_LoginReward_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_LoginReward_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_LoginReward_Return_descriptor_;
}

const GM_LoginReward_Return& GM_LoginReward_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_LoginReward_Return* GM_LoginReward_Return::default_instance_ = NULL;

GM_LoginReward_Return* GM_LoginReward_Return::New() const {
  return new GM_LoginReward_Return;
}

void GM_LoginReward_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    m_equipid_ = 0;
    if (has_m_equipdetail()) {
      if (m_equipdetail_ != &::google::protobuf::internal::kEmptyString) {
        m_equipdetail_->clear();
      }
    }
    m_ndelaytime_ = 0;
    m_ngetid_ = 0;
    m_ngetnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_LoginReward_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_EquipId;
        break;
      }

      // required int32 m_EquipId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_EquipId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_equipid_)));
          set_has_m_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_EquipDetail;
        break;
      }

      // required string m_EquipDetail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_EquipDetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_equipdetail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_equipdetail().data(), this->m_equipdetail().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_nDelayTime;
        break;
      }

      // optional int32 m_nDelayTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nDelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ndelaytime_)));
          set_has_m_ndelaytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_nGetID;
        break;
      }

      // optional int32 m_nGetID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nGetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ngetid_)));
          set_has_m_ngetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_nGetNum;
        break;
      }

      // optional int32 m_nGetNum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nGetNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ngetnum_)));
          set_has_m_ngetnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_LoginReward_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // required int32 m_EquipId = 2;
  if (has_m_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_equipid(), output);
  }

  // required string m_EquipDetail = 3;
  if (has_m_equipdetail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_equipdetail().data(), this->m_equipdetail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_equipdetail(), output);
  }

  // optional int32 m_nDelayTime = 4;
  if (has_m_ndelaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_ndelaytime(), output);
  }

  // optional int32 m_nGetID = 10;
  if (has_m_ngetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_ngetid(), output);
  }

  // optional int32 m_nGetNum = 11;
  if (has_m_ngetnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_ngetnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_LoginReward_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // required int32 m_EquipId = 2;
  if (has_m_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_equipid(), target);
  }

  // required string m_EquipDetail = 3;
  if (has_m_equipdetail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_equipdetail().data(), this->m_equipdetail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_equipdetail(), target);
  }

  // optional int32 m_nDelayTime = 4;
  if (has_m_ndelaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_ndelaytime(), target);
  }

  // optional int32 m_nGetID = 10;
  if (has_m_ngetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_ngetid(), target);
  }

  // optional int32 m_nGetNum = 11;
  if (has_m_ngetnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_ngetnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_LoginReward_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // required int32 m_EquipId = 2;
    if (has_m_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_equipid());
    }

    // required string m_EquipDetail = 3;
    if (has_m_equipdetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_equipdetail());
    }

    // optional int32 m_nDelayTime = 4;
    if (has_m_ndelaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ndelaytime());
    }

    // optional int32 m_nGetID = 10;
    if (has_m_ngetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ngetid());
    }

    // optional int32 m_nGetNum = 11;
    if (has_m_ngetnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ngetnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_LoginReward_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_LoginReward_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_LoginReward_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_LoginReward_Return::MergeFrom(const GM_LoginReward_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_equipid()) {
      set_m_equipid(from.m_equipid());
    }
    if (from.has_m_equipdetail()) {
      set_m_equipdetail(from.m_equipdetail());
    }
    if (from.has_m_ndelaytime()) {
      set_m_ndelaytime(from.m_ndelaytime());
    }
    if (from.has_m_ngetid()) {
      set_m_ngetid(from.m_ngetid());
    }
    if (from.has_m_ngetnum()) {
      set_m_ngetnum(from.m_ngetnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_LoginReward_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_LoginReward_Return::CopyFrom(const GM_LoginReward_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_LoginReward_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_LoginReward_Return::Swap(GM_LoginReward_Return* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(m_equipid_, other->m_equipid_);
    std::swap(m_equipdetail_, other->m_equipdetail_);
    std::swap(m_ndelaytime_, other->m_ndelaytime_);
    std::swap(m_ngetid_, other->m_ngetid_);
    std::swap(m_ngetnum_, other->m_ngetnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_LoginReward_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_LoginReward_Return_descriptor_;
  metadata.reflection = GM_LoginReward_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_LoginReward_Receive::kMResultFieldNumber;
#endif  // !_MSC_VER

GM_LoginReward_Receive::GM_LoginReward_Receive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_LoginReward_Receive::InitAsDefaultInstance() {
}

GM_LoginReward_Receive::GM_LoginReward_Receive(const GM_LoginReward_Receive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_LoginReward_Receive::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_LoginReward_Receive::~GM_LoginReward_Receive() {
  SharedDtor();
}

void GM_LoginReward_Receive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_LoginReward_Receive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_LoginReward_Receive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_LoginReward_Receive_descriptor_;
}

const GM_LoginReward_Receive& GM_LoginReward_Receive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_LoginReward_Receive* GM_LoginReward_Receive::default_instance_ = NULL;

GM_LoginReward_Receive* GM_LoginReward_Receive::New() const {
  return new GM_LoginReward_Receive;
}

void GM_LoginReward_Receive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_LoginReward_Receive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_LoginReward_Receive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_LoginReward_Receive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_LoginReward_Receive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_LoginReward_Receive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_LoginReward_Receive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_LoginReward_Receive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_LoginReward_Receive::MergeFrom(const GM_LoginReward_Receive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_LoginReward_Receive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_LoginReward_Receive::CopyFrom(const GM_LoginReward_Receive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_LoginReward_Receive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_LoginReward_Receive::Swap(GM_LoginReward_Receive* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_LoginReward_Receive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_LoginReward_Receive_descriptor_;
  metadata.reflection = GM_LoginReward_Receive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Wonderful::kMRoleIdFieldNumber;
#endif  // !_MSC_VER

DB_Wonderful::DB_Wonderful()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_Wonderful::InitAsDefaultInstance() {
}

DB_Wonderful::DB_Wonderful(const DB_Wonderful& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_Wonderful::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Wonderful::~DB_Wonderful() {
  SharedDtor();
}

void DB_Wonderful::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_Wonderful::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_Wonderful::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Wonderful_descriptor_;
}

const DB_Wonderful& DB_Wonderful::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

DB_Wonderful* DB_Wonderful::default_instance_ = NULL;

DB_Wonderful* DB_Wonderful::New() const {
  return new DB_Wonderful;
}

void DB_Wonderful::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Wonderful::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Wonderful::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleId = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Wonderful::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleId = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Wonderful::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleId = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_Wonderful::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Wonderful* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Wonderful*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Wonderful::MergeFrom(const DB_Wonderful& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Wonderful::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Wonderful::CopyFrom(const DB_Wonderful& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Wonderful::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DB_Wonderful::Swap(DB_Wonderful* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Wonderful::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Wonderful_descriptor_;
  metadata.reflection = DB_Wonderful_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_WonderfulReturn::kMRoleIdFieldNumber;
const int DB_WonderfulReturn::kDatasFieldNumber;
#endif  // !_MSC_VER

DB_WonderfulReturn::DB_WonderfulReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_WonderfulReturn::InitAsDefaultInstance() {
}

DB_WonderfulReturn::DB_WonderfulReturn(const DB_WonderfulReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_WonderfulReturn::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_WonderfulReturn::~DB_WonderfulReturn() {
  SharedDtor();
}

void DB_WonderfulReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_WonderfulReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_WonderfulReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_WonderfulReturn_descriptor_;
}

const DB_WonderfulReturn& DB_WonderfulReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

DB_WonderfulReturn* DB_WonderfulReturn::default_instance_ = NULL;

DB_WonderfulReturn* DB_WonderfulReturn::New() const {
  return new DB_WonderfulReturn;
}

void DB_WonderfulReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
  }
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_WonderfulReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_datas;
        break;
      }

      // repeated .DB_Wonderfuls datas = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_datas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_WonderfulReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleId = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // repeated .DB_Wonderfuls datas = 2;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_WonderfulReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleId = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // repeated .DB_Wonderfuls datas = 2;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_WonderfulReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleId = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

  }
  // repeated .DB_Wonderfuls datas = 2;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_WonderfulReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_WonderfulReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_WonderfulReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_WonderfulReturn::MergeFrom(const DB_WonderfulReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_WonderfulReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_WonderfulReturn::CopyFrom(const DB_WonderfulReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_WonderfulReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < datas_size(); i++) {
    if (!this->datas(i).IsInitialized()) return false;
  }
  return true;
}

void DB_WonderfulReturn::Swap(DB_WonderfulReturn* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_WonderfulReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_WonderfulReturn_descriptor_;
  metadata.reflection = DB_WonderfulReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Wonderfuls::kMWonderfulIdFieldNumber;
const int DB_Wonderfuls::kMStateFieldNumber;
const int DB_Wonderfuls::kMTimeFieldNumber;
const int DB_Wonderfuls::kMGmidFieldNumber;
#endif  // !_MSC_VER

DB_Wonderfuls::DB_Wonderfuls()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_Wonderfuls::InitAsDefaultInstance() {
}

DB_Wonderfuls::DB_Wonderfuls(const DB_Wonderfuls& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_Wonderfuls::SharedCtor() {
  _cached_size_ = 0;
  m_wonderfulid_ = 0;
  m_state_ = 0;
  m_time_ = 0;
  m_gmid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Wonderfuls::~DB_Wonderfuls() {
  SharedDtor();
}

void DB_Wonderfuls::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_Wonderfuls::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_Wonderfuls::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Wonderfuls_descriptor_;
}

const DB_Wonderfuls& DB_Wonderfuls::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

DB_Wonderfuls* DB_Wonderfuls::default_instance_ = NULL;

DB_Wonderfuls* DB_Wonderfuls::New() const {
  return new DB_Wonderfuls;
}

void DB_Wonderfuls::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_wonderfulid_ = 0;
    m_state_ = 0;
    m_time_ = 0;
    m_gmid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Wonderfuls::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_WonderfulId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wonderfulid_)));
          set_has_m_wonderfulid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_state;
        break;
      }

      // optional int32 m_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_time;
        break;
      }

      // optional int32 m_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_time_)));
          set_has_m_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_gmid;
        break;
      }

      // optional int64 m_gmid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_gmid_)));
          set_has_m_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Wonderfuls::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_WonderfulId = 1;
  if (has_m_wonderfulid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_wonderfulid(), output);
  }

  // optional int32 m_state = 2;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_state(), output);
  }

  // optional int32 m_time = 3;
  if (has_m_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_time(), output);
  }

  // optional int64 m_gmid = 4;
  if (has_m_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->m_gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Wonderfuls::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_WonderfulId = 1;
  if (has_m_wonderfulid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_wonderfulid(), target);
  }

  // optional int32 m_state = 2;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_state(), target);
  }

  // optional int32 m_time = 3;
  if (has_m_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_time(), target);
  }

  // optional int64 m_gmid = 4;
  if (has_m_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->m_gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Wonderfuls::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_WonderfulId = 1;
    if (has_m_wonderfulid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wonderfulid());
    }

    // optional int32 m_state = 2;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

    // optional int32 m_time = 3;
    if (has_m_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_time());
    }

    // optional int64 m_gmid = 4;
    if (has_m_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_Wonderfuls::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Wonderfuls* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Wonderfuls*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Wonderfuls::MergeFrom(const DB_Wonderfuls& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_wonderfulid()) {
      set_m_wonderfulid(from.m_wonderfulid());
    }
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
    if (from.has_m_time()) {
      set_m_time(from.m_time());
    }
    if (from.has_m_gmid()) {
      set_m_gmid(from.m_gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Wonderfuls::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Wonderfuls::CopyFrom(const DB_Wonderfuls& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Wonderfuls::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DB_Wonderfuls::Swap(DB_Wonderfuls* other) {
  if (other != this) {
    std::swap(m_wonderfulid_, other->m_wonderfulid_);
    std::swap(m_state_, other->m_state_);
    std::swap(m_time_, other->m_time_);
    std::swap(m_gmid_, other->m_gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Wonderfuls::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Wonderfuls_descriptor_;
  metadata.reflection = DB_Wonderfuls_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_WonderfulSign::kMRoleidFieldNumber;
const int DB_WonderfulSign::kMCurrentsignFieldNumber;
const int DB_WonderfulSign::kMSignstateFieldNumber;
const int DB_WonderfulSign::kMMonthFieldNumber;
const int DB_WonderfulSign::kMGmidFieldNumber;
const int DB_WonderfulSign::kMHasresigntimesFieldNumber;
#endif  // !_MSC_VER

DB_WonderfulSign::DB_WonderfulSign()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_WonderfulSign::InitAsDefaultInstance() {
}

DB_WonderfulSign::DB_WonderfulSign(const DB_WonderfulSign& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_WonderfulSign::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_currentsign_ = 0;
  m_signstate_ = 0;
  m_month_ = 0;
  m_gmid_ = GOOGLE_LONGLONG(0);
  m_hasresigntimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_WonderfulSign::~DB_WonderfulSign() {
  SharedDtor();
}

void DB_WonderfulSign::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_WonderfulSign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_WonderfulSign::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_WonderfulSign_descriptor_;
}

const DB_WonderfulSign& DB_WonderfulSign::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

DB_WonderfulSign* DB_WonderfulSign::default_instance_ = NULL;

DB_WonderfulSign* DB_WonderfulSign::New() const {
  return new DB_WonderfulSign;
}

void DB_WonderfulSign::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_currentsign_ = 0;
    m_signstate_ = 0;
    m_month_ = 0;
    m_gmid_ = GOOGLE_LONGLONG(0);
    m_hasresigntimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_WonderfulSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_currentsign;
        break;
      }

      // optional int32 m_currentsign = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_currentsign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_currentsign_)));
          set_has_m_currentsign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_signstate;
        break;
      }

      // optional int32 m_signstate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_signstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_signstate_)));
          set_has_m_signstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_month;
        break;
      }

      // optional int32 m_month = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_month_)));
          set_has_m_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_gmid;
        break;
      }

      // optional int64 m_gmid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_gmid_)));
          set_has_m_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_hasresigntimes;
        break;
      }

      // optional int32 m_hasresigntimes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_hasresigntimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_hasresigntimes_)));
          set_has_m_hasresigntimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_WonderfulSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int32 m_currentsign = 2;
  if (has_m_currentsign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_currentsign(), output);
  }

  // optional int32 m_signstate = 3;
  if (has_m_signstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_signstate(), output);
  }

  // optional int32 m_month = 4;
  if (has_m_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_month(), output);
  }

  // optional int64 m_gmid = 5;
  if (has_m_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->m_gmid(), output);
  }

  // optional int32 m_hasresigntimes = 6;
  if (has_m_hasresigntimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_hasresigntimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_WonderfulSign::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int32 m_currentsign = 2;
  if (has_m_currentsign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_currentsign(), target);
  }

  // optional int32 m_signstate = 3;
  if (has_m_signstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_signstate(), target);
  }

  // optional int32 m_month = 4;
  if (has_m_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_month(), target);
  }

  // optional int64 m_gmid = 5;
  if (has_m_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->m_gmid(), target);
  }

  // optional int32 m_hasresigntimes = 6;
  if (has_m_hasresigntimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_hasresigntimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_WonderfulSign::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_currentsign = 2;
    if (has_m_currentsign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_currentsign());
    }

    // optional int32 m_signstate = 3;
    if (has_m_signstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_signstate());
    }

    // optional int32 m_month = 4;
    if (has_m_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_month());
    }

    // optional int64 m_gmid = 5;
    if (has_m_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_gmid());
    }

    // optional int32 m_hasresigntimes = 6;
    if (has_m_hasresigntimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_hasresigntimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_WonderfulSign::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_WonderfulSign* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_WonderfulSign*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_WonderfulSign::MergeFrom(const DB_WonderfulSign& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_currentsign()) {
      set_m_currentsign(from.m_currentsign());
    }
    if (from.has_m_signstate()) {
      set_m_signstate(from.m_signstate());
    }
    if (from.has_m_month()) {
      set_m_month(from.m_month());
    }
    if (from.has_m_gmid()) {
      set_m_gmid(from.m_gmid());
    }
    if (from.has_m_hasresigntimes()) {
      set_m_hasresigntimes(from.m_hasresigntimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_WonderfulSign::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_WonderfulSign::CopyFrom(const DB_WonderfulSign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_WonderfulSign::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DB_WonderfulSign::Swap(DB_WonderfulSign* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_currentsign_, other->m_currentsign_);
    std::swap(m_signstate_, other->m_signstate_);
    std::swap(m_month_, other->m_month_);
    std::swap(m_gmid_, other->m_gmid_);
    std::swap(m_hasresigntimes_, other->m_hasresigntimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_WonderfulSign::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_WonderfulSign_descriptor_;
  metadata.reflection = DB_WonderfulSign_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_WonderfulHero::kMRoleidFieldNumber;
const int DB_WonderfulHero::kMProjectidFieldNumber;
const int DB_WonderfulHero::kMCangearFieldNumber;
const int DB_WonderfulHero::kMAchievegearFieldNumber;
const int DB_WonderfulHero::kMGmidFieldNumber;
#endif  // !_MSC_VER

DB_WonderfulHero::DB_WonderfulHero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_WonderfulHero::InitAsDefaultInstance() {
}

DB_WonderfulHero::DB_WonderfulHero(const DB_WonderfulHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_WonderfulHero::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_projectid_ = 0;
  m_cangear_ = 0;
  m_achievegear_ = 0;
  m_gmid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_WonderfulHero::~DB_WonderfulHero() {
  SharedDtor();
}

void DB_WonderfulHero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_WonderfulHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_WonderfulHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_WonderfulHero_descriptor_;
}

const DB_WonderfulHero& DB_WonderfulHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

DB_WonderfulHero* DB_WonderfulHero::default_instance_ = NULL;

DB_WonderfulHero* DB_WonderfulHero::New() const {
  return new DB_WonderfulHero;
}

void DB_WonderfulHero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_projectid_ = 0;
    m_cangear_ = 0;
    m_achievegear_ = 0;
    m_gmid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_WonderfulHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_projectid;
        break;
      }

      // optional int32 m_projectid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_projectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_projectid_)));
          set_has_m_projectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_cangear;
        break;
      }

      // optional int32 m_cangear = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cangear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cangear_)));
          set_has_m_cangear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_achievegear;
        break;
      }

      // optional int32 m_achievegear = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_achievegear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_achievegear_)));
          set_has_m_achievegear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_gmid;
        break;
      }

      // optional int64 m_gmid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_gmid_)));
          set_has_m_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_WonderfulHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int32 m_projectid = 2;
  if (has_m_projectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_projectid(), output);
  }

  // optional int32 m_cangear = 3;
  if (has_m_cangear()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_cangear(), output);
  }

  // optional int32 m_achievegear = 4;
  if (has_m_achievegear()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_achievegear(), output);
  }

  // optional int64 m_gmid = 5;
  if (has_m_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->m_gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_WonderfulHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int32 m_projectid = 2;
  if (has_m_projectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_projectid(), target);
  }

  // optional int32 m_cangear = 3;
  if (has_m_cangear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_cangear(), target);
  }

  // optional int32 m_achievegear = 4;
  if (has_m_achievegear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_achievegear(), target);
  }

  // optional int64 m_gmid = 5;
  if (has_m_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->m_gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_WonderfulHero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_projectid = 2;
    if (has_m_projectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_projectid());
    }

    // optional int32 m_cangear = 3;
    if (has_m_cangear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cangear());
    }

    // optional int32 m_achievegear = 4;
    if (has_m_achievegear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_achievegear());
    }

    // optional int64 m_gmid = 5;
    if (has_m_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_WonderfulHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_WonderfulHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_WonderfulHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_WonderfulHero::MergeFrom(const DB_WonderfulHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_projectid()) {
      set_m_projectid(from.m_projectid());
    }
    if (from.has_m_cangear()) {
      set_m_cangear(from.m_cangear());
    }
    if (from.has_m_achievegear()) {
      set_m_achievegear(from.m_achievegear());
    }
    if (from.has_m_gmid()) {
      set_m_gmid(from.m_gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_WonderfulHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_WonderfulHero::CopyFrom(const DB_WonderfulHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_WonderfulHero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DB_WonderfulHero::Swap(DB_WonderfulHero* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_projectid_, other->m_projectid_);
    std::swap(m_cangear_, other->m_cangear_);
    std::swap(m_achievegear_, other->m_achievegear_);
    std::swap(m_gmid_, other->m_gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_WonderfulHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_WonderfulHero_descriptor_;
  metadata.reflection = DB_WonderfulHero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_HeroData_Return::kIshaveFieldNumber;
const int GM_HeroData_Return::kNumFieldNumber;
const int GM_HeroData_Return::kRemarkFieldNumber;
#endif  // !_MSC_VER

GM_HeroData_Return::GM_HeroData_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_HeroData_Return::InitAsDefaultInstance() {
}

GM_HeroData_Return::GM_HeroData_Return(const GM_HeroData_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_HeroData_Return::SharedCtor() {
  _cached_size_ = 0;
  ishave_ = 0;
  num_ = 0;
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_HeroData_Return::~GM_HeroData_Return() {
  SharedDtor();
}

void GM_HeroData_Return::SharedDtor() {
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    delete remark_;
  }
  if (this != default_instance_) {
  }
}

void GM_HeroData_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_HeroData_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_HeroData_Return_descriptor_;
}

const GM_HeroData_Return& GM_HeroData_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_HeroData_Return* GM_HeroData_Return::default_instance_ = NULL;

GM_HeroData_Return* GM_HeroData_Return::New() const {
  return new GM_HeroData_Return;
}

void GM_HeroData_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ishave_ = 0;
    num_ = 0;
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::kEmptyString) {
        remark_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_HeroData_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ishave = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ishave_)));
          set_has_ishave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_remark;
        break;
      }

      // optional string remark = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_HeroData_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ishave = 1;
  if (has_ishave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ishave(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // optional string remark = 3;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->remark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_HeroData_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ishave = 1;
  if (has_ishave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ishave(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // optional string remark = 3;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->remark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_HeroData_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ishave = 1;
    if (has_ishave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ishave());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional string remark = 3;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_HeroData_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_HeroData_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_HeroData_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_HeroData_Return::MergeFrom(const GM_HeroData_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ishave()) {
      set_ishave(from.ishave());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_HeroData_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_HeroData_Return::CopyFrom(const GM_HeroData_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_HeroData_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_HeroData_Return::Swap(GM_HeroData_Return* other) {
  if (other != this) {
    std::swap(ishave_, other->ishave_);
    std::swap(num_, other->num_);
    std::swap(remark_, other->remark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_HeroData_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_HeroData_Return_descriptor_;
  metadata.reflection = GM_HeroData_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Card_info::kObjectidFieldNumber;
const int GM_Card_info::kNumFieldNumber;
const int GM_Card_info::kIdFieldNumber;
const int GM_Card_info::kIconFieldNumber;
#endif  // !_MSC_VER

GM_Card_info::GM_Card_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Card_info::InitAsDefaultInstance() {
}

GM_Card_info::GM_Card_info(const GM_Card_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Card_info::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = 0;
  num_ = 0;
  id_ = 0;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Card_info::~GM_Card_info() {
  SharedDtor();
}

void GM_Card_info::SharedDtor() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (this != default_instance_) {
  }
}

void GM_Card_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Card_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Card_info_descriptor_;
}

const GM_Card_info& GM_Card_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_Card_info* GM_Card_info::default_instance_ = NULL;

GM_Card_info* GM_Card_info::New() const {
  return new GM_Card_info;
}

void GM_Card_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = 0;
    num_ = 0;
    id_ = 0;
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Card_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_icon;
        break;
      }

      // optional string icon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Card_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objectid(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // optional string icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->icon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Card_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objectid(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  // optional string icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->icon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Card_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objectid = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string icon = 4;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Card_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Card_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Card_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Card_info::MergeFrom(const GM_Card_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Card_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Card_info::CopyFrom(const GM_Card_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Card_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Card_info::Swap(GM_Card_info* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(num_, other->num_);
    std::swap(id_, other->id_);
    std::swap(icon_, other->icon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Card_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Card_info_descriptor_;
  metadata.reflection = GM_Card_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Card_info_return::kCardnumFieldNumber;
const int GM_Card_info_return::kMajiangFieldNumber;
const int GM_Card_info_return::kDataFieldNumber;
#endif  // !_MSC_VER

GM_Card_info_return::GM_Card_info_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Card_info_return::InitAsDefaultInstance() {
}

GM_Card_info_return::GM_Card_info_return(const GM_Card_info_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Card_info_return::SharedCtor() {
  _cached_size_ = 0;
  cardnum_ = 0;
  majiang_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Card_info_return::~GM_Card_info_return() {
  SharedDtor();
}

void GM_Card_info_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Card_info_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Card_info_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Card_info_return_descriptor_;
}

const GM_Card_info_return& GM_Card_info_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_Card_info_return* GM_Card_info_return::default_instance_ = NULL;

GM_Card_info_return* GM_Card_info_return::New() const {
  return new GM_Card_info_return;
}

void GM_Card_info_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cardnum_ = 0;
    majiang_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Card_info_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cardnum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardnum_)));
          set_has_cardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_majiang;
        break;
      }

      // optional int32 majiang = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_majiang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &majiang_)));
          set_has_majiang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated .GM_Card_info data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Card_info_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cardnum = 1;
  if (has_cardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cardnum(), output);
  }

  // optional int32 majiang = 2;
  if (has_majiang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->majiang(), output);
  }

  // repeated .GM_Card_info data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Card_info_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cardnum = 1;
  if (has_cardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cardnum(), target);
  }

  // optional int32 majiang = 2;
  if (has_majiang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->majiang(), target);
  }

  // repeated .GM_Card_info data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Card_info_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cardnum = 1;
    if (has_cardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardnum());
    }

    // optional int32 majiang = 2;
    if (has_majiang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->majiang());
    }

  }
  // repeated .GM_Card_info data = 3;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Card_info_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Card_info_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Card_info_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Card_info_return::MergeFrom(const GM_Card_info_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cardnum()) {
      set_cardnum(from.cardnum());
    }
    if (from.has_majiang()) {
      set_majiang(from.majiang());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Card_info_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Card_info_return::CopyFrom(const GM_Card_info_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Card_info_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Card_info_return::Swap(GM_Card_info_return* other) {
  if (other != this) {
    std::swap(cardnum_, other->cardnum_);
    std::swap(majiang_, other->majiang_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Card_info_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Card_info_return_descriptor_;
  metadata.reflection = GM_Card_info_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Card_red_return::kCardnumFieldNumber;
const int GM_Card_red_return::kMajiangFieldNumber;
#endif  // !_MSC_VER

GM_Card_red_return::GM_Card_red_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Card_red_return::InitAsDefaultInstance() {
}

GM_Card_red_return::GM_Card_red_return(const GM_Card_red_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Card_red_return::SharedCtor() {
  _cached_size_ = 0;
  cardnum_ = 0;
  majiang_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Card_red_return::~GM_Card_red_return() {
  SharedDtor();
}

void GM_Card_red_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Card_red_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Card_red_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Card_red_return_descriptor_;
}

const GM_Card_red_return& GM_Card_red_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_Card_red_return* GM_Card_red_return::default_instance_ = NULL;

GM_Card_red_return* GM_Card_red_return::New() const {
  return new GM_Card_red_return;
}

void GM_Card_red_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cardnum_ = 0;
    majiang_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Card_red_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cardnum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardnum_)));
          set_has_cardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_majiang;
        break;
      }

      // optional int32 majiang = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_majiang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &majiang_)));
          set_has_majiang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Card_red_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cardnum = 1;
  if (has_cardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cardnum(), output);
  }

  // optional int32 majiang = 2;
  if (has_majiang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->majiang(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Card_red_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cardnum = 1;
  if (has_cardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cardnum(), target);
  }

  // optional int32 majiang = 2;
  if (has_majiang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->majiang(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Card_red_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cardnum = 1;
    if (has_cardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardnum());
    }

    // optional int32 majiang = 2;
    if (has_majiang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->majiang());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Card_red_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Card_red_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Card_red_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Card_red_return::MergeFrom(const GM_Card_red_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cardnum()) {
      set_cardnum(from.cardnum());
    }
    if (from.has_majiang()) {
      set_majiang(from.majiang());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Card_red_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Card_red_return::CopyFrom(const GM_Card_red_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Card_red_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Card_red_return::Swap(GM_Card_red_return* other) {
  if (other != this) {
    std::swap(cardnum_, other->cardnum_);
    std::swap(majiang_, other->majiang_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Card_red_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Card_red_return_descriptor_;
  metadata.reflection = GM_Card_red_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Card_db::kIdFieldNumber;
const int SM_Card_db::kIncreasisFieldNumber;
const int SM_Card_db::kOrderFieldNumber;
#endif  // !_MSC_VER

SM_Card_db::SM_Card_db()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Card_db::InitAsDefaultInstance() {
}

SM_Card_db::SM_Card_db(const SM_Card_db& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Card_db::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  increasis_ = 0;
  order_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Card_db::~SM_Card_db() {
  SharedDtor();
}

void SM_Card_db::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Card_db::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Card_db::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Card_db_descriptor_;
}

const SM_Card_db& SM_Card_db::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

SM_Card_db* SM_Card_db::default_instance_ = NULL;

SM_Card_db* SM_Card_db::New() const {
  return new SM_Card_db;
}

void SM_Card_db::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    increasis_ = 0;
    order_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Card_db::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_increasis;
        break;
      }

      // optional int32 increasis = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_increasis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &increasis_)));
          set_has_increasis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_order;
        break;
      }

      // optional int32 order = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Card_db::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 increasis = 2;
  if (has_increasis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->increasis(), output);
  }

  // optional int32 order = 3;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->order(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Card_db::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 increasis = 2;
  if (has_increasis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->increasis(), target);
  }

  // optional int32 order = 3;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->order(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Card_db::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 increasis = 2;
    if (has_increasis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->increasis());
    }

    // optional int32 order = 3;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Card_db::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Card_db* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Card_db*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Card_db::MergeFrom(const SM_Card_db& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_increasis()) {
      set_increasis(from.increasis());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Card_db::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Card_db::CopyFrom(const SM_Card_db& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Card_db::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Card_db::Swap(SM_Card_db* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(increasis_, other->increasis_);
    std::swap(order_, other->order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Card_db::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Card_db_descriptor_;
  metadata.reflection = SM_Card_db_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Card_db_return::kRoleidFieldNumber;
const int SM_Card_db_return::kDataFieldNumber;
#endif  // !_MSC_VER

SM_Card_db_return::SM_Card_db_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Card_db_return::InitAsDefaultInstance() {
}

SM_Card_db_return::SM_Card_db_return(const SM_Card_db_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Card_db_return::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Card_db_return::~SM_Card_db_return() {
  SharedDtor();
}

void SM_Card_db_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Card_db_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Card_db_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Card_db_return_descriptor_;
}

const SM_Card_db_return& SM_Card_db_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

SM_Card_db_return* SM_Card_db_return::default_instance_ = NULL;

SM_Card_db_return* SM_Card_db_return::New() const {
  return new SM_Card_db_return;
}

void SM_Card_db_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Card_db_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .SM_Card_db data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Card_db_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // repeated .SM_Card_db data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Card_db_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // repeated .SM_Card_db data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Card_db_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  // repeated .SM_Card_db data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Card_db_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Card_db_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Card_db_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Card_db_return::MergeFrom(const SM_Card_db_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Card_db_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Card_db_return::CopyFrom(const SM_Card_db_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Card_db_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void SM_Card_db_return::Swap(SM_Card_db_return* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Card_db_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Card_db_return_descriptor_;
  metadata.reflection = SM_Card_db_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Card_db_request::kRoleidFieldNumber;
#endif  // !_MSC_VER

SM_Card_db_request::SM_Card_db_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Card_db_request::InitAsDefaultInstance() {
}

SM_Card_db_request::SM_Card_db_request(const SM_Card_db_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Card_db_request::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Card_db_request::~SM_Card_db_request() {
  SharedDtor();
}

void SM_Card_db_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Card_db_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Card_db_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Card_db_request_descriptor_;
}

const SM_Card_db_request& SM_Card_db_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

SM_Card_db_request* SM_Card_db_request::default_instance_ = NULL;

SM_Card_db_request* SM_Card_db_request::New() const {
  return new SM_Card_db_request;
}

void SM_Card_db_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Card_db_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Card_db_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Card_db_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Card_db_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Card_db_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Card_db_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Card_db_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Card_db_request::MergeFrom(const SM_Card_db_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Card_db_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Card_db_request::CopyFrom(const SM_Card_db_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Card_db_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Card_db_request::Swap(SM_Card_db_request* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Card_db_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Card_db_request_descriptor_;
  metadata.reflection = SM_Card_db_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Rotate_db::kIncreaseFieldNumber;
const int SM_Rotate_db::kNameFieldNumber;
const int SM_Rotate_db::kObjectidFieldNumber;
const int SM_Rotate_db::kNumFieldNumber;
const int SM_Rotate_db::kIdFieldNumber;
const int SM_Rotate_db::kTimesFieldNumber;
#endif  // !_MSC_VER

SM_Rotate_db::SM_Rotate_db()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Rotate_db::InitAsDefaultInstance() {
}

SM_Rotate_db::SM_Rotate_db(const SM_Rotate_db& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Rotate_db::SharedCtor() {
  _cached_size_ = 0;
  increase_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  objectid_ = 0;
  num_ = 0;
  id_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Rotate_db::~SM_Rotate_db() {
  SharedDtor();
}

void SM_Rotate_db::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SM_Rotate_db::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Rotate_db::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Rotate_db_descriptor_;
}

const SM_Rotate_db& SM_Rotate_db::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

SM_Rotate_db* SM_Rotate_db::default_instance_ = NULL;

SM_Rotate_db* SM_Rotate_db::New() const {
  return new SM_Rotate_db;
}

void SM_Rotate_db::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    increase_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    objectid_ = 0;
    num_ = 0;
    id_ = 0;
    times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Rotate_db::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 increase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &increase_)));
          set_has_increase();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_objectid;
        break;
      }

      // optional int32 objectid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional int32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }

      // optional int32 id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_times;
        break;
      }

      // optional int32 times = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Rotate_db::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 increase = 1;
  if (has_increase()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->increase(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 objectid = 3;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->objectid(), output);
  }

  // optional int32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }

  // optional int32 id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->id(), output);
  }

  // optional int32 times = 6;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Rotate_db::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 increase = 1;
  if (has_increase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->increase(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 objectid = 3;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->objectid(), target);
  }

  // optional int32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }

  // optional int32 id = 5;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->id(), target);
  }

  // optional int32 times = 6;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Rotate_db::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 increase = 1;
    if (has_increase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->increase());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 objectid = 3;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // optional int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 id = 5;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 times = 6;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Rotate_db::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Rotate_db* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Rotate_db*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Rotate_db::MergeFrom(const SM_Rotate_db& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_increase()) {
      set_increase(from.increase());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Rotate_db::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Rotate_db::CopyFrom(const SM_Rotate_db& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Rotate_db::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Rotate_db::Swap(SM_Rotate_db* other) {
  if (other != this) {
    std::swap(increase_, other->increase_);
    std::swap(name_, other->name_);
    std::swap(objectid_, other->objectid_);
    std::swap(num_, other->num_);
    std::swap(id_, other->id_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Rotate_db::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Rotate_db_descriptor_;
  metadata.reflection = SM_Rotate_db_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Rotate_db_return::kRoleidFieldNumber;
const int SM_Rotate_db_return::kDataFieldNumber;
#endif  // !_MSC_VER

SM_Rotate_db_return::SM_Rotate_db_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Rotate_db_return::InitAsDefaultInstance() {
}

SM_Rotate_db_return::SM_Rotate_db_return(const SM_Rotate_db_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Rotate_db_return::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Rotate_db_return::~SM_Rotate_db_return() {
  SharedDtor();
}

void SM_Rotate_db_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Rotate_db_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Rotate_db_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Rotate_db_return_descriptor_;
}

const SM_Rotate_db_return& SM_Rotate_db_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

SM_Rotate_db_return* SM_Rotate_db_return::default_instance_ = NULL;

SM_Rotate_db_return* SM_Rotate_db_return::New() const {
  return new SM_Rotate_db_return;
}

void SM_Rotate_db_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Rotate_db_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .SM_Rotate_db data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Rotate_db_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // repeated .SM_Rotate_db data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Rotate_db_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // repeated .SM_Rotate_db data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Rotate_db_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  // repeated .SM_Rotate_db data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Rotate_db_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Rotate_db_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Rotate_db_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Rotate_db_return::MergeFrom(const SM_Rotate_db_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Rotate_db_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Rotate_db_return::CopyFrom(const SM_Rotate_db_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Rotate_db_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void SM_Rotate_db_return::Swap(SM_Rotate_db_return* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Rotate_db_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Rotate_db_return_descriptor_;
  metadata.reflection = SM_Rotate_db_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Rotate_rotate_Data::kIdFieldNumber;
const int GM_Rotate_rotate_Data::kObjectidFieldNumber;
const int GM_Rotate_rotate_Data::kNumFieldNumber;
const int GM_Rotate_rotate_Data::kIconFieldNumber;
#endif  // !_MSC_VER

GM_Rotate_rotate_Data::GM_Rotate_rotate_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Rotate_rotate_Data::InitAsDefaultInstance() {
}

GM_Rotate_rotate_Data::GM_Rotate_rotate_Data(const GM_Rotate_rotate_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Rotate_rotate_Data::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  objectid_ = 0;
  num_ = 0;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Rotate_rotate_Data::~GM_Rotate_rotate_Data() {
  SharedDtor();
}

void GM_Rotate_rotate_Data::SharedDtor() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (this != default_instance_) {
  }
}

void GM_Rotate_rotate_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Rotate_rotate_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Rotate_rotate_Data_descriptor_;
}

const GM_Rotate_rotate_Data& GM_Rotate_rotate_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_Rotate_rotate_Data* GM_Rotate_rotate_Data::default_instance_ = NULL;

GM_Rotate_rotate_Data* GM_Rotate_rotate_Data::New() const {
  return new GM_Rotate_rotate_Data;
}

void GM_Rotate_rotate_Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    objectid_ = 0;
    num_ = 0;
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Rotate_rotate_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_objectid;
        break;
      }

      // required int32 objectid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_icon;
        break;
      }

      // optional string icon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Rotate_rotate_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 objectid = 2;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->objectid(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional string icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->icon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Rotate_rotate_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 objectid = 2;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->objectid(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional string icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->icon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Rotate_rotate_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 objectid = 2;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional string icon = 4;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Rotate_rotate_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Rotate_rotate_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Rotate_rotate_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Rotate_rotate_Data::MergeFrom(const GM_Rotate_rotate_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Rotate_rotate_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Rotate_rotate_Data::CopyFrom(const GM_Rotate_rotate_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Rotate_rotate_Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_Rotate_rotate_Data::Swap(GM_Rotate_rotate_Data* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(objectid_, other->objectid_);
    std::swap(num_, other->num_);
    std::swap(icon_, other->icon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Rotate_rotate_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Rotate_rotate_Data_descriptor_;
  metadata.reflection = GM_Rotate_rotate_Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Rotate_rotate_return::kRoleidFieldNumber;
const int GM_Rotate_rotate_return::kDataFieldNumber;
const int GM_Rotate_rotate_return::kTimesFieldNumber;
#endif  // !_MSC_VER

GM_Rotate_rotate_return::GM_Rotate_rotate_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Rotate_rotate_return::InitAsDefaultInstance() {
}

GM_Rotate_rotate_return::GM_Rotate_rotate_return(const GM_Rotate_rotate_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Rotate_rotate_return::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Rotate_rotate_return::~GM_Rotate_rotate_return() {
  SharedDtor();
}

void GM_Rotate_rotate_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Rotate_rotate_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Rotate_rotate_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Rotate_rotate_return_descriptor_;
}

const GM_Rotate_rotate_return& GM_Rotate_rotate_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_Rotate_rotate_return* GM_Rotate_rotate_return::default_instance_ = NULL;

GM_Rotate_rotate_return* GM_Rotate_rotate_return::New() const {
  return new GM_Rotate_rotate_return;
}

void GM_Rotate_rotate_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    times_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Rotate_rotate_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .GM_Rotate_rotate_Data data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectTag(24)) goto parse_times;
        break;
      }

      // optional int32 times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Rotate_rotate_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // repeated .GM_Rotate_rotate_Data data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  // optional int32 times = 3;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Rotate_rotate_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // repeated .GM_Rotate_rotate_Data data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  // optional int32 times = 3;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Rotate_rotate_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 times = 3;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  // repeated .GM_Rotate_rotate_Data data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Rotate_rotate_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Rotate_rotate_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Rotate_rotate_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Rotate_rotate_return::MergeFrom(const GM_Rotate_rotate_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Rotate_rotate_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Rotate_rotate_return::CopyFrom(const GM_Rotate_rotate_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Rotate_rotate_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Rotate_rotate_return::Swap(GM_Rotate_rotate_return* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    data_.Swap(&other->data_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Rotate_rotate_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Rotate_rotate_return_descriptor_;
  metadata.reflection = GM_Rotate_rotate_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Rotate_record::kObjectidFieldNumber;
const int GM_Rotate_record::kNumFieldNumber;
const int GM_Rotate_record::kNameFieldNumber;
#endif  // !_MSC_VER

GM_Rotate_record::GM_Rotate_record()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Rotate_record::InitAsDefaultInstance() {
}

GM_Rotate_record::GM_Rotate_record(const GM_Rotate_record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Rotate_record::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = 0;
  num_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Rotate_record::~GM_Rotate_record() {
  SharedDtor();
}

void GM_Rotate_record::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GM_Rotate_record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Rotate_record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Rotate_record_descriptor_;
}

const GM_Rotate_record& GM_Rotate_record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_Rotate_record* GM_Rotate_record::default_instance_ = NULL;

GM_Rotate_record* GM_Rotate_record::New() const {
  return new GM_Rotate_record;
}

void GM_Rotate_record::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = 0;
    num_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Rotate_record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Rotate_record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objectid(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Rotate_record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objectid(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Rotate_record::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objectid = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Rotate_record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Rotate_record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Rotate_record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Rotate_record::MergeFrom(const GM_Rotate_record& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Rotate_record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Rotate_record::CopyFrom(const GM_Rotate_record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Rotate_record::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Rotate_record::Swap(GM_Rotate_record* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(num_, other->num_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Rotate_record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Rotate_record_descriptor_;
  metadata.reflection = GM_Rotate_record_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Rotate_record_return::kRoleidFieldNumber;
const int GM_Rotate_record_return::kDataFieldNumber;
#endif  // !_MSC_VER

GM_Rotate_record_return::GM_Rotate_record_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Rotate_record_return::InitAsDefaultInstance() {
}

GM_Rotate_record_return::GM_Rotate_record_return(const GM_Rotate_record_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Rotate_record_return::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Rotate_record_return::~GM_Rotate_record_return() {
  SharedDtor();
}

void GM_Rotate_record_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Rotate_record_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Rotate_record_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Rotate_record_return_descriptor_;
}

const GM_Rotate_record_return& GM_Rotate_record_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wonderful_2etxt();
  return *default_instance_;
}

GM_Rotate_record_return* GM_Rotate_record_return::default_instance_ = NULL;

GM_Rotate_record_return* GM_Rotate_record_return::New() const {
  return new GM_Rotate_record_return;
}

void GM_Rotate_record_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Rotate_record_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .GM_Rotate_record data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Rotate_record_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // repeated .GM_Rotate_record data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Rotate_record_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // repeated .GM_Rotate_record data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Rotate_record_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  // repeated .GM_Rotate_record data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Rotate_record_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Rotate_record_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Rotate_record_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Rotate_record_return::MergeFrom(const GM_Rotate_record_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Rotate_record_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Rotate_record_return::CopyFrom(const GM_Rotate_record_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Rotate_record_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Rotate_record_return::Swap(GM_Rotate_record_return* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Rotate_record_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Rotate_record_return_descriptor_;
  metadata.reflection = GM_Rotate_record_return_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
