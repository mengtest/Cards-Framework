// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Golden.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Golden.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_CREATEROOM_Golden_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_CREATEROOM_Golden_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_CREATEROOM_Golden_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_CREATEROOM_Golden_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_LOGINROOM_Golden_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_LOGINROOM_Golden_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_LOGINROOM_Golden_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_LOGINROOM_Golden_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_LOGINCOPY_Golden_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_LOGINCOPY_Golden_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_LOGINCOPY_Golden_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_LOGINCOPY_Golden_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GoldenData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GoldenData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Room_GoldenData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Room_GoldenData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_AreaAllinfoGolden_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_AreaAllinfoGolden_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_AreaAllinfoGoldenRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_AreaAllinfoGoldenRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_leaveGoldenRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_leaveGoldenRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_leaveGoldenReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_leaveGoldenReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_All_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_All_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_Begin_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_Begin_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_Card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_Card_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_Broad_Card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_Broad_Card_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_add_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_add_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_add_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_add_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_Compare_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_Compare_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_Compare_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_Compare_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_maker_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_maker_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_allCard_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_allCard_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_abandon_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_abandon_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_gamble_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_gamble_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_selfGamble_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_selfGamble_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Golden_Boun_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Golden_Boun_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_Begin_Time_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_Begin_Time_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_Begin_Singletime_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_Begin_Singletime_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_pause_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_pause_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_pause_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_pause_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_show_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_show_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_show_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_show_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_private_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_private_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_private_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_private_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Godlen_invite_requrest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Godlen_invite_requrest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_invite_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_invite_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_invitate_roler_eturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_invitate_roler_eturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_kick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_kick_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_kick_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_kick_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_switch_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_switch_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Golden_Notify_leave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Golden_Notify_leave_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GodlenMan_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GodlenMan_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GoldenRoom_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GoldenRoom_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_offline_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_offline_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Godlen_Charge_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Godlen_Charge_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_prepare_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_prepare_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Godlen_prepare_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Godlen_prepare_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_start_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_start_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Godlen_start_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Godlen_start_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_charge_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_charge_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Godlen_room_role_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Godlen_room_role_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Golden_roomcard_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Golden_roomcard_return_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Golden_2etxt() {
  protobuf_AddDesc_Golden_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Golden.txt");
  GOOGLE_CHECK(file != NULL);
  GM_CREATEROOM_Golden_Return_descriptor_ = file->message_type(0);
  static const int GM_CREATEROOM_Golden_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CREATEROOM_Golden_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CREATEROOM_Golden_Return, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CREATEROOM_Golden_Return, areaid_),
  };
  GM_CREATEROOM_Golden_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_CREATEROOM_Golden_Return_descriptor_,
      GM_CREATEROOM_Golden_Return::default_instance_,
      GM_CREATEROOM_Golden_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CREATEROOM_Golden_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CREATEROOM_Golden_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_CREATEROOM_Golden_Return));
  GM_CREATEROOM_Golden_Request_descriptor_ = file->message_type(1);
  static const int GM_CREATEROOM_Golden_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CREATEROOM_Golden_Request, areaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CREATEROOM_Golden_Request, rate_),
  };
  GM_CREATEROOM_Golden_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_CREATEROOM_Golden_Request_descriptor_,
      GM_CREATEROOM_Golden_Request::default_instance_,
      GM_CREATEROOM_Golden_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CREATEROOM_Golden_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CREATEROOM_Golden_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_CREATEROOM_Golden_Request));
  GM_LOGINROOM_Golden_Return_descriptor_ = file->message_type(2);
  static const int GM_LOGINROOM_Golden_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINROOM_Golden_Return, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINROOM_Golden_Return, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINROOM_Golden_Return, areaid_),
  };
  GM_LOGINROOM_Golden_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_LOGINROOM_Golden_Return_descriptor_,
      GM_LOGINROOM_Golden_Return::default_instance_,
      GM_LOGINROOM_Golden_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINROOM_Golden_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINROOM_Golden_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_LOGINROOM_Golden_Return));
  GM_LOGINROOM_Golden_Request_descriptor_ = file->message_type(3);
  static const int GM_LOGINROOM_Golden_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINROOM_Golden_Request, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINROOM_Golden_Request, areaid_),
  };
  GM_LOGINROOM_Golden_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_LOGINROOM_Golden_Request_descriptor_,
      GM_LOGINROOM_Golden_Request::default_instance_,
      GM_LOGINROOM_Golden_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINROOM_Golden_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINROOM_Golden_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_LOGINROOM_Golden_Request));
  GM_LOGINCOPY_Golden_Request_descriptor_ = file->message_type(4);
  static const int GM_LOGINCOPY_Golden_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINCOPY_Golden_Request, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINCOPY_Golden_Request, areaid_),
  };
  GM_LOGINCOPY_Golden_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_LOGINCOPY_Golden_Request_descriptor_,
      GM_LOGINCOPY_Golden_Request::default_instance_,
      GM_LOGINCOPY_Golden_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINCOPY_Golden_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINCOPY_Golden_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_LOGINCOPY_Golden_Request));
  GM_LOGINCOPY_Golden_Return_descriptor_ = file->message_type(5);
  static const int GM_LOGINCOPY_Golden_Return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINCOPY_Golden_Return, result_),
  };
  GM_LOGINCOPY_Golden_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_LOGINCOPY_Golden_Return_descriptor_,
      GM_LOGINCOPY_Golden_Return::default_instance_,
      GM_LOGINCOPY_Golden_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINCOPY_Golden_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINCOPY_Golden_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_LOGINCOPY_Golden_Return));
  GM_GoldenData_descriptor_ = file->message_type(6);
  static const int GM_GoldenData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GoldenData, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GoldenData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GoldenData, place_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GoldenData, golde_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GoldenData, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GoldenData, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GoldenData, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GoldenData, qqhead_),
  };
  GM_GoldenData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GoldenData_descriptor_,
      GM_GoldenData::default_instance_,
      GM_GoldenData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GoldenData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GoldenData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GoldenData));
  GM_Room_GoldenData_descriptor_ = file->message_type(7);
  static const int GM_Room_GoldenData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_GoldenData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_GoldenData, ownid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_GoldenData, m_fishman_),
  };
  GM_Room_GoldenData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Room_GoldenData_descriptor_,
      GM_Room_GoldenData::default_instance_,
      GM_Room_GoldenData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_GoldenData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_GoldenData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Room_GoldenData));
  GM_AreaAllinfoGolden_Return_descriptor_ = file->message_type(8);
  static const int GM_AreaAllinfoGolden_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreaAllinfoGolden_Return, areaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreaAllinfoGolden_Return, m_data_),
  };
  GM_AreaAllinfoGolden_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_AreaAllinfoGolden_Return_descriptor_,
      GM_AreaAllinfoGolden_Return::default_instance_,
      GM_AreaAllinfoGolden_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreaAllinfoGolden_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreaAllinfoGolden_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_AreaAllinfoGolden_Return));
  GM_AreaAllinfoGoldenRequest_descriptor_ = file->message_type(9);
  static const int GM_AreaAllinfoGoldenRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreaAllinfoGoldenRequest, areaid_),
  };
  GM_AreaAllinfoGoldenRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_AreaAllinfoGoldenRequest_descriptor_,
      GM_AreaAllinfoGoldenRequest::default_instance_,
      GM_AreaAllinfoGoldenRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreaAllinfoGoldenRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreaAllinfoGoldenRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_AreaAllinfoGoldenRequest));
  GM_leaveGoldenRequest_descriptor_ = file->message_type(10);
  static const int GM_leaveGoldenRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_leaveGoldenRequest, areaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_leaveGoldenRequest, roomid_),
  };
  GM_leaveGoldenRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_leaveGoldenRequest_descriptor_,
      GM_leaveGoldenRequest::default_instance_,
      GM_leaveGoldenRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_leaveGoldenRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_leaveGoldenRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_leaveGoldenRequest));
  GM_leaveGoldenReturn_descriptor_ = file->message_type(11);
  static const int GM_leaveGoldenReturn_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_leaveGoldenReturn, errorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_leaveGoldenReturn, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_leaveGoldenReturn, areaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_leaveGoldenReturn, id_),
  };
  GM_leaveGoldenReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_leaveGoldenReturn_descriptor_,
      GM_leaveGoldenReturn::default_instance_,
      GM_leaveGoldenReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_leaveGoldenReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_leaveGoldenReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_leaveGoldenReturn));
  GM_Golden_All_request_descriptor_ = file->message_type(12);
  static const int GM_Golden_All_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_All_request, areaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_All_request, id_),
  };
  GM_Golden_All_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_All_request_descriptor_,
      GM_Golden_All_request::default_instance_,
      GM_Golden_All_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_All_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_All_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_All_request));
  GM_Golden_Begin_return_descriptor_ = file->message_type(13);
  static const int GM_Golden_Begin_return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_Begin_return, backerid_),
  };
  GM_Golden_Begin_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_Begin_return_descriptor_,
      GM_Golden_Begin_return::default_instance_,
      GM_Golden_Begin_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_Begin_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_Begin_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_Begin_return));
  GM_Golden_Card_descriptor_ = file->message_type(14);
  static const int GM_Golden_Card_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_Card, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_Card, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_Card, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_Card, pos_),
  };
  GM_Golden_Card_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_Card_descriptor_,
      GM_Golden_Card::default_instance_,
      GM_Golden_Card_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_Card, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_Card, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_Card));
  GM_Golden_Broad_Card_descriptor_ = file->message_type(15);
  static const int GM_Golden_Broad_Card_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_Broad_Card, roleid_),
  };
  GM_Golden_Broad_Card_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_Broad_Card_descriptor_,
      GM_Golden_Broad_Card::default_instance_,
      GM_Golden_Broad_Card_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_Broad_Card, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_Broad_Card, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_Broad_Card));
  GM_Golden_add_request_descriptor_ = file->message_type(16);
  static const int GM_Golden_add_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_add_request, money_),
  };
  GM_Golden_add_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_add_request_descriptor_,
      GM_Golden_add_request::default_instance_,
      GM_Golden_add_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_add_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_add_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_add_request));
  GM_Golden_add_return_descriptor_ = file->message_type(17);
  static const int GM_Golden_add_return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_add_return, errorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_add_return, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_add_return, money_),
  };
  GM_Golden_add_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_add_return_descriptor_,
      GM_Golden_add_return::default_instance_,
      GM_Golden_add_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_add_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_add_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_add_return));
  GM_Golden_Compare_request_descriptor_ = file->message_type(18);
  static const int GM_Golden_Compare_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_Compare_request, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_Compare_request, nomoney_),
  };
  GM_Golden_Compare_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_Compare_request_descriptor_,
      GM_Golden_Compare_request::default_instance_,
      GM_Golden_Compare_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_Compare_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_Compare_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_Compare_request));
  GM_Golden_Compare_return_descriptor_ = file->message_type(19);
  static const int GM_Golden_Compare_return_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_Compare_return, winid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_Compare_return, failureid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_Compare_return, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_Compare_return, errorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_Compare_return, nomoney_),
  };
  GM_Golden_Compare_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_Compare_return_descriptor_,
      GM_Golden_Compare_return::default_instance_,
      GM_Golden_Compare_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_Compare_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_Compare_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_Compare_return));
  GM_Golden_maker_return_descriptor_ = file->message_type(20);
  static const int GM_Golden_maker_return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_maker_return, makerid_),
  };
  GM_Golden_maker_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_maker_return_descriptor_,
      GM_Golden_maker_return::default_instance_,
      GM_Golden_maker_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_maker_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_maker_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_maker_return));
  GM_Golden_allCard_return_descriptor_ = file->message_type(21);
  static const int GM_Golden_allCard_return_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_allCard_return, winerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_allCard_return, shouldget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_allCard_return, get_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_allCard_return, m_data_),
  };
  GM_Golden_allCard_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_allCard_return_descriptor_,
      GM_Golden_allCard_return::default_instance_,
      GM_Golden_allCard_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_allCard_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_allCard_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_allCard_return));
  GM_Golden_abandon_return_descriptor_ = file->message_type(22);
  static const int GM_Golden_abandon_return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_abandon_return, errorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_abandon_return, roleid_),
  };
  GM_Golden_abandon_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_abandon_return_descriptor_,
      GM_Golden_abandon_return::default_instance_,
      GM_Golden_abandon_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_abandon_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_abandon_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_abandon_return));
  GM_Golden_gamble_return_descriptor_ = file->message_type(23);
  static const int GM_Golden_gamble_return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_gamble_return, gamble_),
  };
  GM_Golden_gamble_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_gamble_return_descriptor_,
      GM_Golden_gamble_return::default_instance_,
      GM_Golden_gamble_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_gamble_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_gamble_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_gamble_return));
  GM_Golden_selfGamble_return_descriptor_ = file->message_type(24);
  static const int GM_Golden_selfGamble_return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_selfGamble_return, gamble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_selfGamble_return, roleid_),
  };
  GM_Golden_selfGamble_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_selfGamble_return_descriptor_,
      GM_Golden_selfGamble_return::default_instance_,
      GM_Golden_selfGamble_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_selfGamble_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_selfGamble_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_selfGamble_return));
  SM_Golden_Boun_return_descriptor_ = file->message_type(25);
  static const int SM_Golden_Boun_return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Golden_Boun_return, bout_),
  };
  SM_Golden_Boun_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Golden_Boun_return_descriptor_,
      SM_Golden_Boun_return::default_instance_,
      SM_Golden_Boun_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Golden_Boun_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Golden_Boun_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Golden_Boun_return));
  GM_Golden_Begin_Time_return_descriptor_ = file->message_type(26);
  static const int GM_Golden_Begin_Time_return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_Begin_Time_return, time_),
  };
  GM_Golden_Begin_Time_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_Begin_Time_return_descriptor_,
      GM_Golden_Begin_Time_return::default_instance_,
      GM_Golden_Begin_Time_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_Begin_Time_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_Begin_Time_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_Begin_Time_return));
  GM_Golden_Begin_Singletime_return_descriptor_ = file->message_type(27);
  static const int GM_Golden_Begin_Singletime_return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_Begin_Singletime_return, time_),
  };
  GM_Golden_Begin_Singletime_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_Begin_Singletime_return_descriptor_,
      GM_Golden_Begin_Singletime_return::default_instance_,
      GM_Golden_Begin_Singletime_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_Begin_Singletime_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_Begin_Singletime_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_Begin_Singletime_return));
  GM_Golden_pause_request_descriptor_ = file->message_type(28);
  static const int GM_Golden_pause_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_pause_request, pause_),
  };
  GM_Golden_pause_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_pause_request_descriptor_,
      GM_Golden_pause_request::default_instance_,
      GM_Golden_pause_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_pause_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_pause_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_pause_request));
  GM_Golden_pause_return_descriptor_ = file->message_type(29);
  static const int GM_Golden_pause_return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_pause_return, pause_),
  };
  GM_Golden_pause_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_pause_return_descriptor_,
      GM_Golden_pause_return::default_instance_,
      GM_Golden_pause_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_pause_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_pause_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_pause_return));
  GM_Golden_show_descriptor_ = file->message_type(30);
  static const int GM_Golden_show_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_show, roleid_),
  };
  GM_Golden_show_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_show_descriptor_,
      GM_Golden_show::default_instance_,
      GM_Golden_show_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_show, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_show, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_show));
  GM_Golden_show_return_descriptor_ = file->message_type(31);
  static const int GM_Golden_show_return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_show_return, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_show_return, data_),
  };
  GM_Golden_show_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_show_return_descriptor_,
      GM_Golden_show_return::default_instance_,
      GM_Golden_show_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_show_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_show_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_show_return));
  GM_Golden_private_request_descriptor_ = file->message_type(32);
  static const int GM_Golden_private_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_private_request, rate_),
  };
  GM_Golden_private_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_private_request_descriptor_,
      GM_Golden_private_request::default_instance_,
      GM_Golden_private_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_private_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_private_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_private_request));
  GM_Golden_private_return_descriptor_ = file->message_type(33);
  static const int GM_Golden_private_return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_private_return, errorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_private_return, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_private_return, areaid_),
  };
  GM_Golden_private_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_private_return_descriptor_,
      GM_Golden_private_return::default_instance_,
      GM_Golden_private_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_private_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_private_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_private_return));
  GM_Godlen_invite_requrest_descriptor_ = file->message_type(34);
  static const int GM_Godlen_invite_requrest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Godlen_invite_requrest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Godlen_invite_requrest, roleid_),
  };
  GM_Godlen_invite_requrest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Godlen_invite_requrest_descriptor_,
      GM_Godlen_invite_requrest::default_instance_,
      GM_Godlen_invite_requrest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Godlen_invite_requrest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Godlen_invite_requrest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Godlen_invite_requrest));
  GM_Golden_invite_return_descriptor_ = file->message_type(35);
  static const int GM_Golden_invite_return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_invite_return, errorid_),
  };
  GM_Golden_invite_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_invite_return_descriptor_,
      GM_Golden_invite_return::default_instance_,
      GM_Golden_invite_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_invite_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_invite_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_invite_return));
  GM_Golden_invitate_roler_eturn_descriptor_ = file->message_type(36);
  static const int GM_Golden_invitate_roler_eturn_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_invitate_roler_eturn, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_invitate_roler_eturn, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_invitate_roler_eturn, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_invitate_roler_eturn, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_invitate_roler_eturn, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_invitate_roler_eturn, id_),
  };
  GM_Golden_invitate_roler_eturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_invitate_roler_eturn_descriptor_,
      GM_Golden_invitate_roler_eturn::default_instance_,
      GM_Golden_invitate_roler_eturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_invitate_roler_eturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_invitate_roler_eturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_invitate_roler_eturn));
  GM_Golden_kick_descriptor_ = file->message_type(37);
  static const int GM_Golden_kick_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_kick, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_kick, makeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_kick, id_),
  };
  GM_Golden_kick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_kick_descriptor_,
      GM_Golden_kick::default_instance_,
      GM_Golden_kick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_kick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_kick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_kick));
  GM_Golden_kick_return_descriptor_ = file->message_type(38);
  static const int GM_Golden_kick_return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_kick_return, errorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_kick_return, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_kick_return, makeid_),
  };
  GM_Golden_kick_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_kick_return_descriptor_,
      GM_Golden_kick_return::default_instance_,
      GM_Golden_kick_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_kick_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_kick_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_kick_return));
  GM_Golden_switch_return_descriptor_ = file->message_type(39);
  static const int GM_Golden_switch_return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_switch_return, errorid_),
  };
  GM_Golden_switch_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_switch_return_descriptor_,
      GM_Golden_switch_return::default_instance_,
      GM_Golden_switch_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_switch_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_switch_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_switch_return));
  SM_Golden_Notify_leave_descriptor_ = file->message_type(40);
  static const int SM_Golden_Notify_leave_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Golden_Notify_leave, copyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Golden_Notify_leave, fbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Golden_Notify_leave, roleid_),
  };
  SM_Golden_Notify_leave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Golden_Notify_leave_descriptor_,
      SM_Golden_Notify_leave::default_instance_,
      SM_Golden_Notify_leave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Golden_Notify_leave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Golden_Notify_leave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Golden_Notify_leave));
  GM_GodlenMan_state_descriptor_ = file->message_type(41);
  static const int GM_GodlenMan_state_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GodlenMan_state, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GodlenMan_state, m_gamble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GodlenMan_state, m_abandon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GodlenMan_state, m_hascard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GodlenMan_state, m_iscompare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GodlenMan_state, m_money_),
  };
  GM_GodlenMan_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GodlenMan_state_descriptor_,
      GM_GodlenMan_state::default_instance_,
      GM_GodlenMan_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GodlenMan_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GodlenMan_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GodlenMan_state));
  GM_GoldenRoom_state_descriptor_ = file->message_type(42);
  static const int GM_GoldenRoom_state_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GoldenRoom_state, m_singgamble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GoldenRoom_state, m_totalgamble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GoldenRoom_state, m_singroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GoldenRoom_state, m_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GoldenRoom_state, m_groupgamble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GoldenRoom_state, m_singtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GoldenRoom_state, m_bout_),
  };
  GM_GoldenRoom_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GoldenRoom_state_descriptor_,
      GM_GoldenRoom_state::default_instance_,
      GM_GoldenRoom_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GoldenRoom_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GoldenRoom_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GoldenRoom_state));
  GM_Golden_offline_return_descriptor_ = file->message_type(43);
  static const int GM_Golden_offline_return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_offline_return, roleid_),
  };
  GM_Golden_offline_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_offline_return_descriptor_,
      GM_Golden_offline_return::default_instance_,
      GM_Golden_offline_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_offline_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_offline_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_offline_return));
  GM_Godlen_Charge_return_descriptor_ = file->message_type(44);
  static const int GM_Godlen_Charge_return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Godlen_Charge_return, roleid_),
  };
  GM_Godlen_Charge_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Godlen_Charge_return_descriptor_,
      GM_Godlen_Charge_return::default_instance_,
      GM_Godlen_Charge_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Godlen_Charge_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Godlen_Charge_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Godlen_Charge_return));
  GM_Golden_prepare_request_descriptor_ = file->message_type(45);
  static const int GM_Golden_prepare_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_prepare_request, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_prepare_request, type_),
  };
  GM_Golden_prepare_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_prepare_request_descriptor_,
      GM_Golden_prepare_request::default_instance_,
      GM_Golden_prepare_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_prepare_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_prepare_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_prepare_request));
  GM_Godlen_prepare_return_descriptor_ = file->message_type(46);
  static const int GM_Godlen_prepare_return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Godlen_prepare_return, errorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Godlen_prepare_return, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Godlen_prepare_return, type_),
  };
  GM_Godlen_prepare_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Godlen_prepare_return_descriptor_,
      GM_Godlen_prepare_return::default_instance_,
      GM_Godlen_prepare_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Godlen_prepare_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Godlen_prepare_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Godlen_prepare_return));
  GM_Golden_start_request_descriptor_ = file->message_type(47);
  static const int GM_Golden_start_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_start_request, id_),
  };
  GM_Golden_start_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_start_request_descriptor_,
      GM_Golden_start_request::default_instance_,
      GM_Golden_start_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_start_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_start_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_start_request));
  GM_Godlen_start_return_descriptor_ = file->message_type(48);
  static const int GM_Godlen_start_return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Godlen_start_return, errorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Godlen_start_return, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Godlen_start_return, lasttime_),
  };
  GM_Godlen_start_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Godlen_start_return_descriptor_,
      GM_Godlen_start_return::default_instance_,
      GM_Godlen_start_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Godlen_start_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Godlen_start_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Godlen_start_return));
  GM_Golden_charge_request_descriptor_ = file->message_type(49);
  static const int GM_Golden_charge_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_charge_request, typecharge_),
  };
  GM_Golden_charge_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_charge_request_descriptor_,
      GM_Golden_charge_request::default_instance_,
      GM_Golden_charge_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_charge_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_charge_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_charge_request));
  GM_Godlen_room_role_descriptor_ = file->message_type(50);
  static const int GM_Godlen_room_role_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Godlen_room_role, roleid_),
  };
  GM_Godlen_room_role_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Godlen_room_role_descriptor_,
      GM_Godlen_room_role::default_instance_,
      GM_Godlen_room_role_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Godlen_room_role, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Godlen_room_role, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Godlen_room_role));
  GM_Golden_roomcard_return_descriptor_ = file->message_type(51);
  static const int GM_Golden_roomcard_return_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_roomcard_return, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_roomcard_return, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_roomcard_return, copyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_roomcard_return, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_roomcard_return, roleinfo_),
  };
  GM_Golden_roomcard_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Golden_roomcard_return_descriptor_,
      GM_Golden_roomcard_return::default_instance_,
      GM_Golden_roomcard_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_roomcard_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Golden_roomcard_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Golden_roomcard_return));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Golden_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_CREATEROOM_Golden_Return_descriptor_, &GM_CREATEROOM_Golden_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_CREATEROOM_Golden_Request_descriptor_, &GM_CREATEROOM_Golden_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_LOGINROOM_Golden_Return_descriptor_, &GM_LOGINROOM_Golden_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_LOGINROOM_Golden_Request_descriptor_, &GM_LOGINROOM_Golden_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_LOGINCOPY_Golden_Request_descriptor_, &GM_LOGINCOPY_Golden_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_LOGINCOPY_Golden_Return_descriptor_, &GM_LOGINCOPY_Golden_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GoldenData_descriptor_, &GM_GoldenData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Room_GoldenData_descriptor_, &GM_Room_GoldenData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_AreaAllinfoGolden_Return_descriptor_, &GM_AreaAllinfoGolden_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_AreaAllinfoGoldenRequest_descriptor_, &GM_AreaAllinfoGoldenRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_leaveGoldenRequest_descriptor_, &GM_leaveGoldenRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_leaveGoldenReturn_descriptor_, &GM_leaveGoldenReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_All_request_descriptor_, &GM_Golden_All_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_Begin_return_descriptor_, &GM_Golden_Begin_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_Card_descriptor_, &GM_Golden_Card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_Broad_Card_descriptor_, &GM_Golden_Broad_Card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_add_request_descriptor_, &GM_Golden_add_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_add_return_descriptor_, &GM_Golden_add_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_Compare_request_descriptor_, &GM_Golden_Compare_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_Compare_return_descriptor_, &GM_Golden_Compare_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_maker_return_descriptor_, &GM_Golden_maker_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_allCard_return_descriptor_, &GM_Golden_allCard_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_abandon_return_descriptor_, &GM_Golden_abandon_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_gamble_return_descriptor_, &GM_Golden_gamble_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_selfGamble_return_descriptor_, &GM_Golden_selfGamble_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Golden_Boun_return_descriptor_, &SM_Golden_Boun_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_Begin_Time_return_descriptor_, &GM_Golden_Begin_Time_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_Begin_Singletime_return_descriptor_, &GM_Golden_Begin_Singletime_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_pause_request_descriptor_, &GM_Golden_pause_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_pause_return_descriptor_, &GM_Golden_pause_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_show_descriptor_, &GM_Golden_show::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_show_return_descriptor_, &GM_Golden_show_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_private_request_descriptor_, &GM_Golden_private_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_private_return_descriptor_, &GM_Golden_private_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Godlen_invite_requrest_descriptor_, &GM_Godlen_invite_requrest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_invite_return_descriptor_, &GM_Golden_invite_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_invitate_roler_eturn_descriptor_, &GM_Golden_invitate_roler_eturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_kick_descriptor_, &GM_Golden_kick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_kick_return_descriptor_, &GM_Golden_kick_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_switch_return_descriptor_, &GM_Golden_switch_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Golden_Notify_leave_descriptor_, &SM_Golden_Notify_leave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GodlenMan_state_descriptor_, &GM_GodlenMan_state::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GoldenRoom_state_descriptor_, &GM_GoldenRoom_state::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_offline_return_descriptor_, &GM_Golden_offline_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Godlen_Charge_return_descriptor_, &GM_Godlen_Charge_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_prepare_request_descriptor_, &GM_Golden_prepare_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Godlen_prepare_return_descriptor_, &GM_Godlen_prepare_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_start_request_descriptor_, &GM_Golden_start_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Godlen_start_return_descriptor_, &GM_Godlen_start_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_charge_request_descriptor_, &GM_Golden_charge_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Godlen_room_role_descriptor_, &GM_Godlen_room_role::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Golden_roomcard_return_descriptor_, &GM_Golden_roomcard_return::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Golden_2etxt() {
  delete GM_CREATEROOM_Golden_Return::default_instance_;
  delete GM_CREATEROOM_Golden_Return_reflection_;
  delete GM_CREATEROOM_Golden_Request::default_instance_;
  delete GM_CREATEROOM_Golden_Request_reflection_;
  delete GM_LOGINROOM_Golden_Return::default_instance_;
  delete GM_LOGINROOM_Golden_Return_reflection_;
  delete GM_LOGINROOM_Golden_Request::default_instance_;
  delete GM_LOGINROOM_Golden_Request_reflection_;
  delete GM_LOGINCOPY_Golden_Request::default_instance_;
  delete GM_LOGINCOPY_Golden_Request_reflection_;
  delete GM_LOGINCOPY_Golden_Return::default_instance_;
  delete GM_LOGINCOPY_Golden_Return_reflection_;
  delete GM_GoldenData::default_instance_;
  delete GM_GoldenData_reflection_;
  delete GM_Room_GoldenData::default_instance_;
  delete GM_Room_GoldenData_reflection_;
  delete GM_AreaAllinfoGolden_Return::default_instance_;
  delete GM_AreaAllinfoGolden_Return_reflection_;
  delete GM_AreaAllinfoGoldenRequest::default_instance_;
  delete GM_AreaAllinfoGoldenRequest_reflection_;
  delete GM_leaveGoldenRequest::default_instance_;
  delete GM_leaveGoldenRequest_reflection_;
  delete GM_leaveGoldenReturn::default_instance_;
  delete GM_leaveGoldenReturn_reflection_;
  delete GM_Golden_All_request::default_instance_;
  delete GM_Golden_All_request_reflection_;
  delete GM_Golden_Begin_return::default_instance_;
  delete GM_Golden_Begin_return_reflection_;
  delete GM_Golden_Card::default_instance_;
  delete GM_Golden_Card_reflection_;
  delete GM_Golden_Broad_Card::default_instance_;
  delete GM_Golden_Broad_Card_reflection_;
  delete GM_Golden_add_request::default_instance_;
  delete GM_Golden_add_request_reflection_;
  delete GM_Golden_add_return::default_instance_;
  delete GM_Golden_add_return_reflection_;
  delete GM_Golden_Compare_request::default_instance_;
  delete GM_Golden_Compare_request_reflection_;
  delete GM_Golden_Compare_return::default_instance_;
  delete GM_Golden_Compare_return_reflection_;
  delete GM_Golden_maker_return::default_instance_;
  delete GM_Golden_maker_return_reflection_;
  delete GM_Golden_allCard_return::default_instance_;
  delete GM_Golden_allCard_return_reflection_;
  delete GM_Golden_abandon_return::default_instance_;
  delete GM_Golden_abandon_return_reflection_;
  delete GM_Golden_gamble_return::default_instance_;
  delete GM_Golden_gamble_return_reflection_;
  delete GM_Golden_selfGamble_return::default_instance_;
  delete GM_Golden_selfGamble_return_reflection_;
  delete SM_Golden_Boun_return::default_instance_;
  delete SM_Golden_Boun_return_reflection_;
  delete GM_Golden_Begin_Time_return::default_instance_;
  delete GM_Golden_Begin_Time_return_reflection_;
  delete GM_Golden_Begin_Singletime_return::default_instance_;
  delete GM_Golden_Begin_Singletime_return_reflection_;
  delete GM_Golden_pause_request::default_instance_;
  delete GM_Golden_pause_request_reflection_;
  delete GM_Golden_pause_return::default_instance_;
  delete GM_Golden_pause_return_reflection_;
  delete GM_Golden_show::default_instance_;
  delete GM_Golden_show_reflection_;
  delete GM_Golden_show_return::default_instance_;
  delete GM_Golden_show_return_reflection_;
  delete GM_Golden_private_request::default_instance_;
  delete GM_Golden_private_request_reflection_;
  delete GM_Golden_private_return::default_instance_;
  delete GM_Golden_private_return_reflection_;
  delete GM_Godlen_invite_requrest::default_instance_;
  delete GM_Godlen_invite_requrest_reflection_;
  delete GM_Golden_invite_return::default_instance_;
  delete GM_Golden_invite_return_reflection_;
  delete GM_Golden_invitate_roler_eturn::default_instance_;
  delete GM_Golden_invitate_roler_eturn_reflection_;
  delete GM_Golden_kick::default_instance_;
  delete GM_Golden_kick_reflection_;
  delete GM_Golden_kick_return::default_instance_;
  delete GM_Golden_kick_return_reflection_;
  delete GM_Golden_switch_return::default_instance_;
  delete GM_Golden_switch_return_reflection_;
  delete SM_Golden_Notify_leave::default_instance_;
  delete SM_Golden_Notify_leave_reflection_;
  delete GM_GodlenMan_state::default_instance_;
  delete GM_GodlenMan_state_reflection_;
  delete GM_GoldenRoom_state::default_instance_;
  delete GM_GoldenRoom_state_reflection_;
  delete GM_Golden_offline_return::default_instance_;
  delete GM_Golden_offline_return_reflection_;
  delete GM_Godlen_Charge_return::default_instance_;
  delete GM_Godlen_Charge_return_reflection_;
  delete GM_Golden_prepare_request::default_instance_;
  delete GM_Golden_prepare_request_reflection_;
  delete GM_Godlen_prepare_return::default_instance_;
  delete GM_Godlen_prepare_return_reflection_;
  delete GM_Golden_start_request::default_instance_;
  delete GM_Golden_start_request_reflection_;
  delete GM_Godlen_start_return::default_instance_;
  delete GM_Godlen_start_return_reflection_;
  delete GM_Golden_charge_request::default_instance_;
  delete GM_Golden_charge_request_reflection_;
  delete GM_Godlen_room_role::default_instance_;
  delete GM_Godlen_room_role_reflection_;
  delete GM_Golden_roomcard_return::default_instance_;
  delete GM_Golden_roomcard_return_reflection_;
}

void protobuf_AddDesc_Golden_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nGolden.txt\"I\n\033GM_CREATEROOM_Golden_Ret"
    "urn\022\016\n\006result\030\001 \002(\005\022\n\n\002ID\030\002 \002(\005\022\016\n\006areai"
    "d\030\003 \002(\005\"<\n\034GM_CREATEROOM_Golden_Request\022"
    "\016\n\006areaid\030\001 \002(\005\022\014\n\004rate\030\002 \001(\005\"J\n\032GM_LOGI"
    "NROOM_Golden_Return\022\020\n\010m_result\030\001 \002(\005\022\n\n"
    "\002ID\030\002 \002(\005\022\016\n\006areaid\030\003 \001(\005\"9\n\033GM_LOGINROO"
    "M_Golden_Request\022\n\n\002ID\030\001 \002(\005\022\016\n\006areaid\030\002"
    " \002(\005\"9\n\033GM_LOGINCOPY_Golden_Request\022\n\n\002I"
    "D\030\001 \002(\005\022\016\n\006areaid\030\002 \002(\005\",\n\032GM_LOGINCOPY_"
    "Golden_Return\022\016\n\006result\030\001 \002(\005\"\207\001\n\rGM_Gol"
    "denData\022\020\n\010playerid\030\001 \002(\005\022\014\n\004name\030\002 \001(\t\022"
    "\r\n\005place\030\003 \001(\005\022\r\n\005golde\030\004 \001(\003\022\014\n\004head\030\005 "
    "\001(\005\022\r\n\005frame\030\006 \001(\005\022\013\n\003sex\030\007 \001(\005\022\016\n\006qqhea"
    "d\030\010 \001(\t\"R\n\022GM_Room_GoldenData\022\n\n\002ID\030\001 \002("
    "\005\022\r\n\005ownid\030\002 \001(\005\022!\n\tm_fishman\030\004 \003(\0132\016.GM"
    "_GoldenData\"R\n\033GM_AreaAllinfoGolden_Retu"
    "rn\022\016\n\006areaid\030\001 \002(\005\022#\n\006m_data\030\002 \003(\0132\023.GM_"
    "Room_GoldenData\"-\n\033GM_AreaAllinfoGoldenR"
    "equest\022\016\n\006areaid\030\001 \002(\005\"7\n\025GM_leaveGolden"
    "Request\022\016\n\006areaid\030\001 \002(\005\022\016\n\006roomid\030\002 \002(\005\""
    "S\n\024GM_leaveGoldenReturn\022\017\n\007errorid\030\001 \002(\005"
    "\022\016\n\006roleid\030\002 \001(\005\022\016\n\006areaid\030\003 \001(\005\022\n\n\002id\030\004"
    " \001(\005\"3\n\025GM_Golden_All_request\022\016\n\006areaid\030"
    "\001 \002(\005\022\n\n\002id\030\002 \001(\005\"*\n\026GM_Golden_Begin_ret"
    "urn\022\020\n\010backerid\030\001 \002(\005\"L\n\016GM_Golden_Card\022"
    "\016\n\006roleid\030\001 \002(\005\022\017\n\007type_id\030\002 \001(\005\022\014\n\004card"
    "\030\003 \003(\005\022\013\n\003pos\030\004 \001(\005\"&\n\024GM_Golden_Broad_C"
    "ard\022\016\n\006roleid\030\001 \002(\005\"&\n\025GM_Golden_add_req"
    "uest\022\r\n\005money\030\001 \002(\003\"F\n\024GM_Golden_add_ret"
    "urn\022\017\n\007errorid\030\001 \002(\005\022\016\n\006roleid\030\002 \002(\005\022\r\n\005"
    "money\030\003 \001(\003\"<\n\031GM_Golden_Compare_request"
    "\022\016\n\006roleid\030\001 \002(\005\022\017\n\007nomoney\030\002 \001(\005\"m\n\030GM_"
    "Golden_Compare_return\022\r\n\005winid\030\001 \002(\005\022\021\n\t"
    "failureid\030\002 \002(\005\022\r\n\005money\030\003 \002(\003\022\017\n\007errori"
    "d\030\004 \001(\005\022\017\n\007nomoney\030\005 \001(\005\")\n\026GM_Golden_ma"
    "ker_return\022\017\n\007makerid\030\001 \002(\005\"l\n\030GM_Golden"
    "_allCard_return\022\017\n\007winerid\030\001 \002(\005\022\021\n\tshou"
    "ldget\030\002 \001(\003\022\013\n\003get\030\003 \001(\003\022\037\n\006m_data\030\004 \003(\013"
    "2\017.GM_Golden_Card\";\n\030GM_Golden_abandon_r"
    "eturn\022\017\n\007errorid\030\001 \002(\005\022\016\n\006roleid\030\002 \001(\005\")"
    "\n\027GM_Golden_gamble_return\022\016\n\006gamble\030\001 \002("
    "\003\"=\n\033GM_Golden_selfGamble_return\022\016\n\006gamb"
    "le\030\001 \002(\003\022\016\n\006roleid\030\002 \001(\005\"%\n\025SM_Golden_Bo"
    "un_return\022\014\n\004bout\030\001 \002(\005\"+\n\033GM_Golden_Beg"
    "in_Time_return\022\014\n\004time\030\001 \002(\005\"1\n!GM_Golde"
    "n_Begin_Singletime_return\022\014\n\004time\030\001 \002(\005\""
    "(\n\027GM_Golden_pause_request\022\r\n\005pause\030\001 \002("
    "\005\"\'\n\026GM_Golden_pause_return\022\r\n\005pause\030\001 \002"
    "(\005\" \n\016GM_Golden_show\022\016\n\006roleid\030\001 \002(\005\"F\n\025"
    "GM_Golden_show_return\022\016\n\006roleid\030\001 \002(\005\022\035\n"
    "\004data\030\002 \001(\0132\017.GM_Golden_Card\")\n\031GM_Golde"
    "n_private_request\022\014\n\004rate\030\001 \002(\005\"G\n\030GM_Go"
    "lden_private_return\022\017\n\007errorid\030\001 \002(\005\022\n\n\002"
    "id\030\002 \001(\005\022\016\n\006areaid\030\003 \001(\005\"7\n\031GM_Godlen_in"
    "vite_requrest\022\n\n\002id\030\001 \002(\005\022\016\n\006roleid\030\002 \001("
    "\005\"*\n\027GM_Golden_invite_return\022\017\n\007errorid\030"
    "\001 \002(\005\"u\n\036GM_Golden_invitate_roler_eturn\022"
    "\016\n\006roleid\030\001 \002(\005\022\014\n\004name\030\002 \001(\t\022\014\n\004rate\030\003 "
    "\001(\005\022\014\n\004head\030\004 \001(\005\022\r\n\005frame\030\005 \001(\005\022\n\n\002id\030\006"
    " \001(\005\"<\n\016GM_Golden_kick\022\016\n\006roleid\030\001 \002(\005\022\016"
    "\n\006makeid\030\002 \001(\005\022\n\n\002id\030\003 \001(\005\"H\n\025GM_Golden_"
    "kick_return\022\017\n\007errorid\030\001 \002(\005\022\016\n\006roleid\030\002"
    " \002(\005\022\016\n\006makeid\030\003 \001(\005\"*\n\027GM_Golden_switch"
    "_return\022\017\n\007errorid\030\001 \002(\005\"F\n\026SM_Golden_No"
    "tify_leave\022\016\n\006copyid\030\001 \002(\005\022\014\n\004fbid\030\002 \001(\005"
    "\022\016\n\006roleid\030\003 \001(\005\"\202\001\n\022GM_GodlenMan_state\022"
    "\016\n\006roleid\030\001 \002(\005\022\020\n\010m_gamble\030\002 \001(\005\022\021\n\tm_a"
    "bandon\030\003 \001(\005\022\021\n\tm_hascard\030\004 \001(\005\022\023\n\013m_isC"
    "ompare\030\005 \001(\005\022\017\n\007m_money\030\006 \001(\005\"\270\001\n\023GM_Gol"
    "denRoom_state\022\024\n\014m_singgamble\030\001 \002(\005\022\025\n\rm"
    "_totalgamble\030\002 \001(\005\022\024\n\014m_Singroleid\030\003 \001(\005"
    "\022#\n\006m_data\030\004 \003(\0132\023.GM_GodlenMan_state\022\025\n"
    "\rm_groupgamble\030\005 \003(\005\022\022\n\nm_singtime\030\006 \001(\005"
    "\022\016\n\006m_bout\030\007 \001(\005\"*\n\030GM_Golden_offline_re"
    "turn\022\016\n\006roleid\030\001 \002(\005\")\n\027GM_Godlen_Charge"
    "_return\022\016\n\006roleid\030\001 \002(\005\"5\n\031GM_Golden_pre"
    "pare_request\022\n\n\002id\030\001 \002(\005\022\014\n\004type\030\002 \001(\005\"I"
    "\n\030GM_Godlen_prepare_return\022\017\n\007errorid\030\001 "
    "\002(\005\022\016\n\006roleid\030\002 \001(\005\022\014\n\004type\030\003 \001(\005\"%\n\027GM_"
    "Golden_start_request\022\n\n\002id\030\001 \002(\005\"K\n\026GM_G"
    "odlen_start_return\022\017\n\007errorid\030\001 \002(\005\022\016\n\006r"
    "oleid\030\002 \001(\005\022\020\n\010lasttime\030\003 \001(\005\".\n\030GM_Gold"
    "en_charge_request\022\022\n\ntypecharge\030\001 \002(\005\"%\n"
    "\023GM_Godlen_room_role\022\016\n\006roleid\030\001 \002(\005\"\204\001\n"
    "\031GM_Golden_roomcard_return\022\021\n\tmonsterid\030"
    "\001 \002(\005\022\016\n\006roomid\030\002 \002(\005\022\016\n\006copyid\030\003 \001(\005\022\014\n"
    "\004rate\030\004 \001(\005\022&\n\010roleinfo\030\005 \003(\0132\024.GM_Godle"
    "n_room_role", 3491);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Golden.txt", &protobuf_RegisterTypes);
  GM_CREATEROOM_Golden_Return::default_instance_ = new GM_CREATEROOM_Golden_Return();
  GM_CREATEROOM_Golden_Request::default_instance_ = new GM_CREATEROOM_Golden_Request();
  GM_LOGINROOM_Golden_Return::default_instance_ = new GM_LOGINROOM_Golden_Return();
  GM_LOGINROOM_Golden_Request::default_instance_ = new GM_LOGINROOM_Golden_Request();
  GM_LOGINCOPY_Golden_Request::default_instance_ = new GM_LOGINCOPY_Golden_Request();
  GM_LOGINCOPY_Golden_Return::default_instance_ = new GM_LOGINCOPY_Golden_Return();
  GM_GoldenData::default_instance_ = new GM_GoldenData();
  GM_Room_GoldenData::default_instance_ = new GM_Room_GoldenData();
  GM_AreaAllinfoGolden_Return::default_instance_ = new GM_AreaAllinfoGolden_Return();
  GM_AreaAllinfoGoldenRequest::default_instance_ = new GM_AreaAllinfoGoldenRequest();
  GM_leaveGoldenRequest::default_instance_ = new GM_leaveGoldenRequest();
  GM_leaveGoldenReturn::default_instance_ = new GM_leaveGoldenReturn();
  GM_Golden_All_request::default_instance_ = new GM_Golden_All_request();
  GM_Golden_Begin_return::default_instance_ = new GM_Golden_Begin_return();
  GM_Golden_Card::default_instance_ = new GM_Golden_Card();
  GM_Golden_Broad_Card::default_instance_ = new GM_Golden_Broad_Card();
  GM_Golden_add_request::default_instance_ = new GM_Golden_add_request();
  GM_Golden_add_return::default_instance_ = new GM_Golden_add_return();
  GM_Golden_Compare_request::default_instance_ = new GM_Golden_Compare_request();
  GM_Golden_Compare_return::default_instance_ = new GM_Golden_Compare_return();
  GM_Golden_maker_return::default_instance_ = new GM_Golden_maker_return();
  GM_Golden_allCard_return::default_instance_ = new GM_Golden_allCard_return();
  GM_Golden_abandon_return::default_instance_ = new GM_Golden_abandon_return();
  GM_Golden_gamble_return::default_instance_ = new GM_Golden_gamble_return();
  GM_Golden_selfGamble_return::default_instance_ = new GM_Golden_selfGamble_return();
  SM_Golden_Boun_return::default_instance_ = new SM_Golden_Boun_return();
  GM_Golden_Begin_Time_return::default_instance_ = new GM_Golden_Begin_Time_return();
  GM_Golden_Begin_Singletime_return::default_instance_ = new GM_Golden_Begin_Singletime_return();
  GM_Golden_pause_request::default_instance_ = new GM_Golden_pause_request();
  GM_Golden_pause_return::default_instance_ = new GM_Golden_pause_return();
  GM_Golden_show::default_instance_ = new GM_Golden_show();
  GM_Golden_show_return::default_instance_ = new GM_Golden_show_return();
  GM_Golden_private_request::default_instance_ = new GM_Golden_private_request();
  GM_Golden_private_return::default_instance_ = new GM_Golden_private_return();
  GM_Godlen_invite_requrest::default_instance_ = new GM_Godlen_invite_requrest();
  GM_Golden_invite_return::default_instance_ = new GM_Golden_invite_return();
  GM_Golden_invitate_roler_eturn::default_instance_ = new GM_Golden_invitate_roler_eturn();
  GM_Golden_kick::default_instance_ = new GM_Golden_kick();
  GM_Golden_kick_return::default_instance_ = new GM_Golden_kick_return();
  GM_Golden_switch_return::default_instance_ = new GM_Golden_switch_return();
  SM_Golden_Notify_leave::default_instance_ = new SM_Golden_Notify_leave();
  GM_GodlenMan_state::default_instance_ = new GM_GodlenMan_state();
  GM_GoldenRoom_state::default_instance_ = new GM_GoldenRoom_state();
  GM_Golden_offline_return::default_instance_ = new GM_Golden_offline_return();
  GM_Godlen_Charge_return::default_instance_ = new GM_Godlen_Charge_return();
  GM_Golden_prepare_request::default_instance_ = new GM_Golden_prepare_request();
  GM_Godlen_prepare_return::default_instance_ = new GM_Godlen_prepare_return();
  GM_Golden_start_request::default_instance_ = new GM_Golden_start_request();
  GM_Godlen_start_return::default_instance_ = new GM_Godlen_start_return();
  GM_Golden_charge_request::default_instance_ = new GM_Golden_charge_request();
  GM_Godlen_room_role::default_instance_ = new GM_Godlen_room_role();
  GM_Golden_roomcard_return::default_instance_ = new GM_Golden_roomcard_return();
  GM_CREATEROOM_Golden_Return::default_instance_->InitAsDefaultInstance();
  GM_CREATEROOM_Golden_Request::default_instance_->InitAsDefaultInstance();
  GM_LOGINROOM_Golden_Return::default_instance_->InitAsDefaultInstance();
  GM_LOGINROOM_Golden_Request::default_instance_->InitAsDefaultInstance();
  GM_LOGINCOPY_Golden_Request::default_instance_->InitAsDefaultInstance();
  GM_LOGINCOPY_Golden_Return::default_instance_->InitAsDefaultInstance();
  GM_GoldenData::default_instance_->InitAsDefaultInstance();
  GM_Room_GoldenData::default_instance_->InitAsDefaultInstance();
  GM_AreaAllinfoGolden_Return::default_instance_->InitAsDefaultInstance();
  GM_AreaAllinfoGoldenRequest::default_instance_->InitAsDefaultInstance();
  GM_leaveGoldenRequest::default_instance_->InitAsDefaultInstance();
  GM_leaveGoldenReturn::default_instance_->InitAsDefaultInstance();
  GM_Golden_All_request::default_instance_->InitAsDefaultInstance();
  GM_Golden_Begin_return::default_instance_->InitAsDefaultInstance();
  GM_Golden_Card::default_instance_->InitAsDefaultInstance();
  GM_Golden_Broad_Card::default_instance_->InitAsDefaultInstance();
  GM_Golden_add_request::default_instance_->InitAsDefaultInstance();
  GM_Golden_add_return::default_instance_->InitAsDefaultInstance();
  GM_Golden_Compare_request::default_instance_->InitAsDefaultInstance();
  GM_Golden_Compare_return::default_instance_->InitAsDefaultInstance();
  GM_Golden_maker_return::default_instance_->InitAsDefaultInstance();
  GM_Golden_allCard_return::default_instance_->InitAsDefaultInstance();
  GM_Golden_abandon_return::default_instance_->InitAsDefaultInstance();
  GM_Golden_gamble_return::default_instance_->InitAsDefaultInstance();
  GM_Golden_selfGamble_return::default_instance_->InitAsDefaultInstance();
  SM_Golden_Boun_return::default_instance_->InitAsDefaultInstance();
  GM_Golden_Begin_Time_return::default_instance_->InitAsDefaultInstance();
  GM_Golden_Begin_Singletime_return::default_instance_->InitAsDefaultInstance();
  GM_Golden_pause_request::default_instance_->InitAsDefaultInstance();
  GM_Golden_pause_return::default_instance_->InitAsDefaultInstance();
  GM_Golden_show::default_instance_->InitAsDefaultInstance();
  GM_Golden_show_return::default_instance_->InitAsDefaultInstance();
  GM_Golden_private_request::default_instance_->InitAsDefaultInstance();
  GM_Golden_private_return::default_instance_->InitAsDefaultInstance();
  GM_Godlen_invite_requrest::default_instance_->InitAsDefaultInstance();
  GM_Golden_invite_return::default_instance_->InitAsDefaultInstance();
  GM_Golden_invitate_roler_eturn::default_instance_->InitAsDefaultInstance();
  GM_Golden_kick::default_instance_->InitAsDefaultInstance();
  GM_Golden_kick_return::default_instance_->InitAsDefaultInstance();
  GM_Golden_switch_return::default_instance_->InitAsDefaultInstance();
  SM_Golden_Notify_leave::default_instance_->InitAsDefaultInstance();
  GM_GodlenMan_state::default_instance_->InitAsDefaultInstance();
  GM_GoldenRoom_state::default_instance_->InitAsDefaultInstance();
  GM_Golden_offline_return::default_instance_->InitAsDefaultInstance();
  GM_Godlen_Charge_return::default_instance_->InitAsDefaultInstance();
  GM_Golden_prepare_request::default_instance_->InitAsDefaultInstance();
  GM_Godlen_prepare_return::default_instance_->InitAsDefaultInstance();
  GM_Golden_start_request::default_instance_->InitAsDefaultInstance();
  GM_Godlen_start_return::default_instance_->InitAsDefaultInstance();
  GM_Golden_charge_request::default_instance_->InitAsDefaultInstance();
  GM_Godlen_room_role::default_instance_->InitAsDefaultInstance();
  GM_Golden_roomcard_return::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Golden_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Golden_2etxt {
  StaticDescriptorInitializer_Golden_2etxt() {
    protobuf_AddDesc_Golden_2etxt();
  }
} static_descriptor_initializer_Golden_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_CREATEROOM_Golden_Return::kResultFieldNumber;
const int GM_CREATEROOM_Golden_Return::kIDFieldNumber;
const int GM_CREATEROOM_Golden_Return::kAreaidFieldNumber;
#endif  // !_MSC_VER

GM_CREATEROOM_Golden_Return::GM_CREATEROOM_Golden_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_CREATEROOM_Golden_Return::InitAsDefaultInstance() {
}

GM_CREATEROOM_Golden_Return::GM_CREATEROOM_Golden_Return(const GM_CREATEROOM_Golden_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_CREATEROOM_Golden_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  id_ = 0;
  areaid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_CREATEROOM_Golden_Return::~GM_CREATEROOM_Golden_Return() {
  SharedDtor();
}

void GM_CREATEROOM_Golden_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_CREATEROOM_Golden_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_CREATEROOM_Golden_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_CREATEROOM_Golden_Return_descriptor_;
}

const GM_CREATEROOM_Golden_Return& GM_CREATEROOM_Golden_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_CREATEROOM_Golden_Return* GM_CREATEROOM_Golden_Return::default_instance_ = NULL;

GM_CREATEROOM_Golden_Return* GM_CREATEROOM_Golden_Return::New() const {
  return new GM_CREATEROOM_Golden_Return;
}

void GM_CREATEROOM_Golden_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    id_ = 0;
    areaid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_CREATEROOM_Golden_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ID;
        break;
      }

      // required int32 ID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_areaid;
        break;
      }

      // required int32 areaid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_CREATEROOM_Golden_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 ID = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // required int32 areaid = 3;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->areaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_CREATEROOM_Golden_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 ID = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // required int32 areaid = 3;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->areaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_CREATEROOM_Golden_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 ID = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 areaid = 3;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_CREATEROOM_Golden_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_CREATEROOM_Golden_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_CREATEROOM_Golden_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_CREATEROOM_Golden_Return::MergeFrom(const GM_CREATEROOM_Golden_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_CREATEROOM_Golden_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_CREATEROOM_Golden_Return::CopyFrom(const GM_CREATEROOM_Golden_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_CREATEROOM_Golden_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_CREATEROOM_Golden_Return::Swap(GM_CREATEROOM_Golden_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(areaid_, other->areaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_CREATEROOM_Golden_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_CREATEROOM_Golden_Return_descriptor_;
  metadata.reflection = GM_CREATEROOM_Golden_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_CREATEROOM_Golden_Request::kAreaidFieldNumber;
const int GM_CREATEROOM_Golden_Request::kRateFieldNumber;
#endif  // !_MSC_VER

GM_CREATEROOM_Golden_Request::GM_CREATEROOM_Golden_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_CREATEROOM_Golden_Request::InitAsDefaultInstance() {
}

GM_CREATEROOM_Golden_Request::GM_CREATEROOM_Golden_Request(const GM_CREATEROOM_Golden_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_CREATEROOM_Golden_Request::SharedCtor() {
  _cached_size_ = 0;
  areaid_ = 0;
  rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_CREATEROOM_Golden_Request::~GM_CREATEROOM_Golden_Request() {
  SharedDtor();
}

void GM_CREATEROOM_Golden_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_CREATEROOM_Golden_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_CREATEROOM_Golden_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_CREATEROOM_Golden_Request_descriptor_;
}

const GM_CREATEROOM_Golden_Request& GM_CREATEROOM_Golden_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_CREATEROOM_Golden_Request* GM_CREATEROOM_Golden_Request::default_instance_ = NULL;

GM_CREATEROOM_Golden_Request* GM_CREATEROOM_Golden_Request::New() const {
  return new GM_CREATEROOM_Golden_Request;
}

void GM_CREATEROOM_Golden_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    areaid_ = 0;
    rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_CREATEROOM_Golden_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 areaid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rate;
        break;
      }

      // optional int32 rate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_CREATEROOM_Golden_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 areaid = 1;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->areaid(), output);
  }

  // optional int32 rate = 2;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_CREATEROOM_Golden_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 areaid = 1;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->areaid(), target);
  }

  // optional int32 rate = 2;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_CREATEROOM_Golden_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 areaid = 1;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaid());
    }

    // optional int32 rate = 2;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_CREATEROOM_Golden_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_CREATEROOM_Golden_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_CREATEROOM_Golden_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_CREATEROOM_Golden_Request::MergeFrom(const GM_CREATEROOM_Golden_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_CREATEROOM_Golden_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_CREATEROOM_Golden_Request::CopyFrom(const GM_CREATEROOM_Golden_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_CREATEROOM_Golden_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_CREATEROOM_Golden_Request::Swap(GM_CREATEROOM_Golden_Request* other) {
  if (other != this) {
    std::swap(areaid_, other->areaid_);
    std::swap(rate_, other->rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_CREATEROOM_Golden_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_CREATEROOM_Golden_Request_descriptor_;
  metadata.reflection = GM_CREATEROOM_Golden_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_LOGINROOM_Golden_Return::kMResultFieldNumber;
const int GM_LOGINROOM_Golden_Return::kIDFieldNumber;
const int GM_LOGINROOM_Golden_Return::kAreaidFieldNumber;
#endif  // !_MSC_VER

GM_LOGINROOM_Golden_Return::GM_LOGINROOM_Golden_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_LOGINROOM_Golden_Return::InitAsDefaultInstance() {
}

GM_LOGINROOM_Golden_Return::GM_LOGINROOM_Golden_Return(const GM_LOGINROOM_Golden_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_LOGINROOM_Golden_Return::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  id_ = 0;
  areaid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_LOGINROOM_Golden_Return::~GM_LOGINROOM_Golden_Return() {
  SharedDtor();
}

void GM_LOGINROOM_Golden_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_LOGINROOM_Golden_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_LOGINROOM_Golden_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_LOGINROOM_Golden_Return_descriptor_;
}

const GM_LOGINROOM_Golden_Return& GM_LOGINROOM_Golden_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_LOGINROOM_Golden_Return* GM_LOGINROOM_Golden_Return::default_instance_ = NULL;

GM_LOGINROOM_Golden_Return* GM_LOGINROOM_Golden_Return::New() const {
  return new GM_LOGINROOM_Golden_Return;
}

void GM_LOGINROOM_Golden_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    id_ = 0;
    areaid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_LOGINROOM_Golden_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ID;
        break;
      }

      // required int32 ID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_areaid;
        break;
      }

      // optional int32 areaid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_LOGINROOM_Golden_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // required int32 ID = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 areaid = 3;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->areaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_LOGINROOM_Golden_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // required int32 ID = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 areaid = 3;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->areaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_LOGINROOM_Golden_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // required int32 ID = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 areaid = 3;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_LOGINROOM_Golden_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_LOGINROOM_Golden_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_LOGINROOM_Golden_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_LOGINROOM_Golden_Return::MergeFrom(const GM_LOGINROOM_Golden_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_LOGINROOM_Golden_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_LOGINROOM_Golden_Return::CopyFrom(const GM_LOGINROOM_Golden_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_LOGINROOM_Golden_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_LOGINROOM_Golden_Return::Swap(GM_LOGINROOM_Golden_Return* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(id_, other->id_);
    std::swap(areaid_, other->areaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_LOGINROOM_Golden_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_LOGINROOM_Golden_Return_descriptor_;
  metadata.reflection = GM_LOGINROOM_Golden_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_LOGINROOM_Golden_Request::kIDFieldNumber;
const int GM_LOGINROOM_Golden_Request::kAreaidFieldNumber;
#endif  // !_MSC_VER

GM_LOGINROOM_Golden_Request::GM_LOGINROOM_Golden_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_LOGINROOM_Golden_Request::InitAsDefaultInstance() {
}

GM_LOGINROOM_Golden_Request::GM_LOGINROOM_Golden_Request(const GM_LOGINROOM_Golden_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_LOGINROOM_Golden_Request::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  areaid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_LOGINROOM_Golden_Request::~GM_LOGINROOM_Golden_Request() {
  SharedDtor();
}

void GM_LOGINROOM_Golden_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_LOGINROOM_Golden_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_LOGINROOM_Golden_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_LOGINROOM_Golden_Request_descriptor_;
}

const GM_LOGINROOM_Golden_Request& GM_LOGINROOM_Golden_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_LOGINROOM_Golden_Request* GM_LOGINROOM_Golden_Request::default_instance_ = NULL;

GM_LOGINROOM_Golden_Request* GM_LOGINROOM_Golden_Request::New() const {
  return new GM_LOGINROOM_Golden_Request;
}

void GM_LOGINROOM_Golden_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    areaid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_LOGINROOM_Golden_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_areaid;
        break;
      }

      // required int32 areaid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_LOGINROOM_Golden_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 areaid = 2;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->areaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_LOGINROOM_Golden_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 areaid = 2;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->areaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_LOGINROOM_Golden_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 areaid = 2;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_LOGINROOM_Golden_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_LOGINROOM_Golden_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_LOGINROOM_Golden_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_LOGINROOM_Golden_Request::MergeFrom(const GM_LOGINROOM_Golden_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_LOGINROOM_Golden_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_LOGINROOM_Golden_Request::CopyFrom(const GM_LOGINROOM_Golden_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_LOGINROOM_Golden_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_LOGINROOM_Golden_Request::Swap(GM_LOGINROOM_Golden_Request* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(areaid_, other->areaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_LOGINROOM_Golden_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_LOGINROOM_Golden_Request_descriptor_;
  metadata.reflection = GM_LOGINROOM_Golden_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_LOGINCOPY_Golden_Request::kIDFieldNumber;
const int GM_LOGINCOPY_Golden_Request::kAreaidFieldNumber;
#endif  // !_MSC_VER

GM_LOGINCOPY_Golden_Request::GM_LOGINCOPY_Golden_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_LOGINCOPY_Golden_Request::InitAsDefaultInstance() {
}

GM_LOGINCOPY_Golden_Request::GM_LOGINCOPY_Golden_Request(const GM_LOGINCOPY_Golden_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_LOGINCOPY_Golden_Request::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  areaid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_LOGINCOPY_Golden_Request::~GM_LOGINCOPY_Golden_Request() {
  SharedDtor();
}

void GM_LOGINCOPY_Golden_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_LOGINCOPY_Golden_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_LOGINCOPY_Golden_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_LOGINCOPY_Golden_Request_descriptor_;
}

const GM_LOGINCOPY_Golden_Request& GM_LOGINCOPY_Golden_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_LOGINCOPY_Golden_Request* GM_LOGINCOPY_Golden_Request::default_instance_ = NULL;

GM_LOGINCOPY_Golden_Request* GM_LOGINCOPY_Golden_Request::New() const {
  return new GM_LOGINCOPY_Golden_Request;
}

void GM_LOGINCOPY_Golden_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    areaid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_LOGINCOPY_Golden_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_areaid;
        break;
      }

      // required int32 areaid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_LOGINCOPY_Golden_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 areaid = 2;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->areaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_LOGINCOPY_Golden_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 areaid = 2;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->areaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_LOGINCOPY_Golden_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 areaid = 2;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_LOGINCOPY_Golden_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_LOGINCOPY_Golden_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_LOGINCOPY_Golden_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_LOGINCOPY_Golden_Request::MergeFrom(const GM_LOGINCOPY_Golden_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_LOGINCOPY_Golden_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_LOGINCOPY_Golden_Request::CopyFrom(const GM_LOGINCOPY_Golden_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_LOGINCOPY_Golden_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_LOGINCOPY_Golden_Request::Swap(GM_LOGINCOPY_Golden_Request* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(areaid_, other->areaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_LOGINCOPY_Golden_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_LOGINCOPY_Golden_Request_descriptor_;
  metadata.reflection = GM_LOGINCOPY_Golden_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_LOGINCOPY_Golden_Return::kResultFieldNumber;
#endif  // !_MSC_VER

GM_LOGINCOPY_Golden_Return::GM_LOGINCOPY_Golden_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_LOGINCOPY_Golden_Return::InitAsDefaultInstance() {
}

GM_LOGINCOPY_Golden_Return::GM_LOGINCOPY_Golden_Return(const GM_LOGINCOPY_Golden_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_LOGINCOPY_Golden_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_LOGINCOPY_Golden_Return::~GM_LOGINCOPY_Golden_Return() {
  SharedDtor();
}

void GM_LOGINCOPY_Golden_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_LOGINCOPY_Golden_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_LOGINCOPY_Golden_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_LOGINCOPY_Golden_Return_descriptor_;
}

const GM_LOGINCOPY_Golden_Return& GM_LOGINCOPY_Golden_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_LOGINCOPY_Golden_Return* GM_LOGINCOPY_Golden_Return::default_instance_ = NULL;

GM_LOGINCOPY_Golden_Return* GM_LOGINCOPY_Golden_Return::New() const {
  return new GM_LOGINCOPY_Golden_Return;
}

void GM_LOGINCOPY_Golden_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_LOGINCOPY_Golden_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_LOGINCOPY_Golden_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_LOGINCOPY_Golden_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_LOGINCOPY_Golden_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_LOGINCOPY_Golden_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_LOGINCOPY_Golden_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_LOGINCOPY_Golden_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_LOGINCOPY_Golden_Return::MergeFrom(const GM_LOGINCOPY_Golden_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_LOGINCOPY_Golden_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_LOGINCOPY_Golden_Return::CopyFrom(const GM_LOGINCOPY_Golden_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_LOGINCOPY_Golden_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_LOGINCOPY_Golden_Return::Swap(GM_LOGINCOPY_Golden_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_LOGINCOPY_Golden_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_LOGINCOPY_Golden_Return_descriptor_;
  metadata.reflection = GM_LOGINCOPY_Golden_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GoldenData::kPlayeridFieldNumber;
const int GM_GoldenData::kNameFieldNumber;
const int GM_GoldenData::kPlaceFieldNumber;
const int GM_GoldenData::kGoldeFieldNumber;
const int GM_GoldenData::kHeadFieldNumber;
const int GM_GoldenData::kFrameFieldNumber;
const int GM_GoldenData::kSexFieldNumber;
const int GM_GoldenData::kQqheadFieldNumber;
#endif  // !_MSC_VER

GM_GoldenData::GM_GoldenData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GoldenData::InitAsDefaultInstance() {
}

GM_GoldenData::GM_GoldenData(const GM_GoldenData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GoldenData::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  place_ = 0;
  golde_ = GOOGLE_LONGLONG(0);
  head_ = 0;
  frame_ = 0;
  sex_ = 0;
  qqhead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GoldenData::~GM_GoldenData() {
  SharedDtor();
}

void GM_GoldenData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (qqhead_ != &::google::protobuf::internal::kEmptyString) {
    delete qqhead_;
  }
  if (this != default_instance_) {
  }
}

void GM_GoldenData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GoldenData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GoldenData_descriptor_;
}

const GM_GoldenData& GM_GoldenData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_GoldenData* GM_GoldenData::default_instance_ = NULL;

GM_GoldenData* GM_GoldenData::New() const {
  return new GM_GoldenData;
}

void GM_GoldenData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    place_ = 0;
    golde_ = GOOGLE_LONGLONG(0);
    head_ = 0;
    frame_ = 0;
    sex_ = 0;
    if (has_qqhead()) {
      if (qqhead_ != &::google::protobuf::internal::kEmptyString) {
        qqhead_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GoldenData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_place;
        break;
      }

      // optional int32 place = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_place:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &place_)));
          set_has_place();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_golde;
        break;
      }

      // optional int64 golde = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_golde:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &golde_)));
          set_has_golde();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_head;
        break;
      }

      // optional int32 head = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_frame;
        break;
      }

      // optional int32 frame = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_)));
          set_has_frame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sex;
        break;
      }

      // optional int32 sex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_qqhead;
        break;
      }

      // optional string qqhead = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qqhead:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qqhead()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->qqhead().data(), this->qqhead().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GoldenData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 place = 3;
  if (has_place()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->place(), output);
  }

  // optional int64 golde = 4;
  if (has_golde()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->golde(), output);
  }

  // optional int32 head = 5;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->head(), output);
  }

  // optional int32 frame = 6;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->frame(), output);
  }

  // optional int32 sex = 7;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sex(), output);
  }

  // optional string qqhead = 8;
  if (has_qqhead()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qqhead().data(), this->qqhead().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->qqhead(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GoldenData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 place = 3;
  if (has_place()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->place(), target);
  }

  // optional int64 golde = 4;
  if (has_golde()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->golde(), target);
  }

  // optional int32 head = 5;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->head(), target);
  }

  // optional int32 frame = 6;
  if (has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->frame(), target);
  }

  // optional int32 sex = 7;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sex(), target);
  }

  // optional string qqhead = 8;
  if (has_qqhead()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qqhead().data(), this->qqhead().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->qqhead(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GoldenData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 place = 3;
    if (has_place()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->place());
    }

    // optional int64 golde = 4;
    if (has_golde()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->golde());
    }

    // optional int32 head = 5;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head());
    }

    // optional int32 frame = 6;
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frame());
    }

    // optional int32 sex = 7;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional string qqhead = 8;
    if (has_qqhead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qqhead());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GoldenData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GoldenData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GoldenData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GoldenData::MergeFrom(const GM_GoldenData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_place()) {
      set_place(from.place());
    }
    if (from.has_golde()) {
      set_golde(from.golde());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_frame()) {
      set_frame(from.frame());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_qqhead()) {
      set_qqhead(from.qqhead());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GoldenData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GoldenData::CopyFrom(const GM_GoldenData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GoldenData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_GoldenData::Swap(GM_GoldenData* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(place_, other->place_);
    std::swap(golde_, other->golde_);
    std::swap(head_, other->head_);
    std::swap(frame_, other->frame_);
    std::swap(sex_, other->sex_);
    std::swap(qqhead_, other->qqhead_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GoldenData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GoldenData_descriptor_;
  metadata.reflection = GM_GoldenData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Room_GoldenData::kIDFieldNumber;
const int GM_Room_GoldenData::kOwnidFieldNumber;
const int GM_Room_GoldenData::kMFishmanFieldNumber;
#endif  // !_MSC_VER

GM_Room_GoldenData::GM_Room_GoldenData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Room_GoldenData::InitAsDefaultInstance() {
}

GM_Room_GoldenData::GM_Room_GoldenData(const GM_Room_GoldenData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Room_GoldenData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ownid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Room_GoldenData::~GM_Room_GoldenData() {
  SharedDtor();
}

void GM_Room_GoldenData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Room_GoldenData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Room_GoldenData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Room_GoldenData_descriptor_;
}

const GM_Room_GoldenData& GM_Room_GoldenData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Room_GoldenData* GM_Room_GoldenData::default_instance_ = NULL;

GM_Room_GoldenData* GM_Room_GoldenData::New() const {
  return new GM_Room_GoldenData;
}

void GM_Room_GoldenData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    ownid_ = 0;
  }
  m_fishman_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Room_GoldenData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ownid;
        break;
      }

      // optional int32 ownid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ownid_)));
          set_has_ownid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_fishman;
        break;
      }

      // repeated .GM_GoldenData m_fishman = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_fishman:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_fishman()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_fishman;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Room_GoldenData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 ownid = 2;
  if (has_ownid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ownid(), output);
  }

  // repeated .GM_GoldenData m_fishman = 4;
  for (int i = 0; i < this->m_fishman_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_fishman(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Room_GoldenData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 ownid = 2;
  if (has_ownid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ownid(), target);
  }

  // repeated .GM_GoldenData m_fishman = 4;
  for (int i = 0; i < this->m_fishman_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_fishman(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Room_GoldenData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 ownid = 2;
    if (has_ownid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ownid());
    }

  }
  // repeated .GM_GoldenData m_fishman = 4;
  total_size += 1 * this->m_fishman_size();
  for (int i = 0; i < this->m_fishman_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_fishman(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Room_GoldenData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Room_GoldenData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Room_GoldenData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Room_GoldenData::MergeFrom(const GM_Room_GoldenData& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_fishman_.MergeFrom(from.m_fishman_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ownid()) {
      set_ownid(from.ownid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Room_GoldenData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Room_GoldenData::CopyFrom(const GM_Room_GoldenData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Room_GoldenData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_fishman_size(); i++) {
    if (!this->m_fishman(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Room_GoldenData::Swap(GM_Room_GoldenData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ownid_, other->ownid_);
    m_fishman_.Swap(&other->m_fishman_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Room_GoldenData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Room_GoldenData_descriptor_;
  metadata.reflection = GM_Room_GoldenData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_AreaAllinfoGolden_Return::kAreaidFieldNumber;
const int GM_AreaAllinfoGolden_Return::kMDataFieldNumber;
#endif  // !_MSC_VER

GM_AreaAllinfoGolden_Return::GM_AreaAllinfoGolden_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_AreaAllinfoGolden_Return::InitAsDefaultInstance() {
}

GM_AreaAllinfoGolden_Return::GM_AreaAllinfoGolden_Return(const GM_AreaAllinfoGolden_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_AreaAllinfoGolden_Return::SharedCtor() {
  _cached_size_ = 0;
  areaid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_AreaAllinfoGolden_Return::~GM_AreaAllinfoGolden_Return() {
  SharedDtor();
}

void GM_AreaAllinfoGolden_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_AreaAllinfoGolden_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_AreaAllinfoGolden_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_AreaAllinfoGolden_Return_descriptor_;
}

const GM_AreaAllinfoGolden_Return& GM_AreaAllinfoGolden_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_AreaAllinfoGolden_Return* GM_AreaAllinfoGolden_Return::default_instance_ = NULL;

GM_AreaAllinfoGolden_Return* GM_AreaAllinfoGolden_Return::New() const {
  return new GM_AreaAllinfoGolden_Return;
}

void GM_AreaAllinfoGolden_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    areaid_ = 0;
  }
  m_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_AreaAllinfoGolden_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 areaid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_data;
        break;
      }

      // repeated .GM_Room_GoldenData m_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_AreaAllinfoGolden_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 areaid = 1;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->areaid(), output);
  }

  // repeated .GM_Room_GoldenData m_data = 2;
  for (int i = 0; i < this->m_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_AreaAllinfoGolden_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 areaid = 1;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->areaid(), target);
  }

  // repeated .GM_Room_GoldenData m_data = 2;
  for (int i = 0; i < this->m_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_AreaAllinfoGolden_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 areaid = 1;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaid());
    }

  }
  // repeated .GM_Room_GoldenData m_data = 2;
  total_size += 1 * this->m_data_size();
  for (int i = 0; i < this->m_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_AreaAllinfoGolden_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_AreaAllinfoGolden_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_AreaAllinfoGolden_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_AreaAllinfoGolden_Return::MergeFrom(const GM_AreaAllinfoGolden_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_data_.MergeFrom(from.m_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_AreaAllinfoGolden_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_AreaAllinfoGolden_Return::CopyFrom(const GM_AreaAllinfoGolden_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_AreaAllinfoGolden_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_data_size(); i++) {
    if (!this->m_data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_AreaAllinfoGolden_Return::Swap(GM_AreaAllinfoGolden_Return* other) {
  if (other != this) {
    std::swap(areaid_, other->areaid_);
    m_data_.Swap(&other->m_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_AreaAllinfoGolden_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_AreaAllinfoGolden_Return_descriptor_;
  metadata.reflection = GM_AreaAllinfoGolden_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_AreaAllinfoGoldenRequest::kAreaidFieldNumber;
#endif  // !_MSC_VER

GM_AreaAllinfoGoldenRequest::GM_AreaAllinfoGoldenRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_AreaAllinfoGoldenRequest::InitAsDefaultInstance() {
}

GM_AreaAllinfoGoldenRequest::GM_AreaAllinfoGoldenRequest(const GM_AreaAllinfoGoldenRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_AreaAllinfoGoldenRequest::SharedCtor() {
  _cached_size_ = 0;
  areaid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_AreaAllinfoGoldenRequest::~GM_AreaAllinfoGoldenRequest() {
  SharedDtor();
}

void GM_AreaAllinfoGoldenRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_AreaAllinfoGoldenRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_AreaAllinfoGoldenRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_AreaAllinfoGoldenRequest_descriptor_;
}

const GM_AreaAllinfoGoldenRequest& GM_AreaAllinfoGoldenRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_AreaAllinfoGoldenRequest* GM_AreaAllinfoGoldenRequest::default_instance_ = NULL;

GM_AreaAllinfoGoldenRequest* GM_AreaAllinfoGoldenRequest::New() const {
  return new GM_AreaAllinfoGoldenRequest;
}

void GM_AreaAllinfoGoldenRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    areaid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_AreaAllinfoGoldenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 areaid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_AreaAllinfoGoldenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 areaid = 1;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->areaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_AreaAllinfoGoldenRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 areaid = 1;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->areaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_AreaAllinfoGoldenRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 areaid = 1;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_AreaAllinfoGoldenRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_AreaAllinfoGoldenRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_AreaAllinfoGoldenRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_AreaAllinfoGoldenRequest::MergeFrom(const GM_AreaAllinfoGoldenRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_AreaAllinfoGoldenRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_AreaAllinfoGoldenRequest::CopyFrom(const GM_AreaAllinfoGoldenRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_AreaAllinfoGoldenRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_AreaAllinfoGoldenRequest::Swap(GM_AreaAllinfoGoldenRequest* other) {
  if (other != this) {
    std::swap(areaid_, other->areaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_AreaAllinfoGoldenRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_AreaAllinfoGoldenRequest_descriptor_;
  metadata.reflection = GM_AreaAllinfoGoldenRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_leaveGoldenRequest::kAreaidFieldNumber;
const int GM_leaveGoldenRequest::kRoomidFieldNumber;
#endif  // !_MSC_VER

GM_leaveGoldenRequest::GM_leaveGoldenRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_leaveGoldenRequest::InitAsDefaultInstance() {
}

GM_leaveGoldenRequest::GM_leaveGoldenRequest(const GM_leaveGoldenRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_leaveGoldenRequest::SharedCtor() {
  _cached_size_ = 0;
  areaid_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_leaveGoldenRequest::~GM_leaveGoldenRequest() {
  SharedDtor();
}

void GM_leaveGoldenRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_leaveGoldenRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_leaveGoldenRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_leaveGoldenRequest_descriptor_;
}

const GM_leaveGoldenRequest& GM_leaveGoldenRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_leaveGoldenRequest* GM_leaveGoldenRequest::default_instance_ = NULL;

GM_leaveGoldenRequest* GM_leaveGoldenRequest::New() const {
  return new GM_leaveGoldenRequest;
}

void GM_leaveGoldenRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    areaid_ = 0;
    roomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_leaveGoldenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 areaid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // required int32 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_leaveGoldenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 areaid = 1;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->areaid(), output);
  }

  // required int32 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_leaveGoldenRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 areaid = 1;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->areaid(), target);
  }

  // required int32 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_leaveGoldenRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 areaid = 1;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaid());
    }

    // required int32 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_leaveGoldenRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_leaveGoldenRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_leaveGoldenRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_leaveGoldenRequest::MergeFrom(const GM_leaveGoldenRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_leaveGoldenRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_leaveGoldenRequest::CopyFrom(const GM_leaveGoldenRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_leaveGoldenRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_leaveGoldenRequest::Swap(GM_leaveGoldenRequest* other) {
  if (other != this) {
    std::swap(areaid_, other->areaid_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_leaveGoldenRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_leaveGoldenRequest_descriptor_;
  metadata.reflection = GM_leaveGoldenRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_leaveGoldenReturn::kErroridFieldNumber;
const int GM_leaveGoldenReturn::kRoleidFieldNumber;
const int GM_leaveGoldenReturn::kAreaidFieldNumber;
const int GM_leaveGoldenReturn::kIdFieldNumber;
#endif  // !_MSC_VER

GM_leaveGoldenReturn::GM_leaveGoldenReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_leaveGoldenReturn::InitAsDefaultInstance() {
}

GM_leaveGoldenReturn::GM_leaveGoldenReturn(const GM_leaveGoldenReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_leaveGoldenReturn::SharedCtor() {
  _cached_size_ = 0;
  errorid_ = 0;
  roleid_ = 0;
  areaid_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_leaveGoldenReturn::~GM_leaveGoldenReturn() {
  SharedDtor();
}

void GM_leaveGoldenReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_leaveGoldenReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_leaveGoldenReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_leaveGoldenReturn_descriptor_;
}

const GM_leaveGoldenReturn& GM_leaveGoldenReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_leaveGoldenReturn* GM_leaveGoldenReturn::default_instance_ = NULL;

GM_leaveGoldenReturn* GM_leaveGoldenReturn::New() const {
  return new GM_leaveGoldenReturn;
}

void GM_leaveGoldenReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorid_ = 0;
    roleid_ = 0;
    areaid_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_leaveGoldenReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorid_)));
          set_has_errorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // optional int32 roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_areaid;
        break;
      }

      // optional int32 areaid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional int32 id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_leaveGoldenReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorid(), output);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  // optional int32 areaid = 3;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->areaid(), output);
  }

  // optional int32 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_leaveGoldenReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorid(), target);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleid(), target);
  }

  // optional int32 areaid = 3;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->areaid(), target);
  }

  // optional int32 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_leaveGoldenReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorid = 1;
    if (has_errorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorid());
    }

    // optional int32 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 areaid = 3;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaid());
    }

    // optional int32 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_leaveGoldenReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_leaveGoldenReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_leaveGoldenReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_leaveGoldenReturn::MergeFrom(const GM_leaveGoldenReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorid()) {
      set_errorid(from.errorid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_leaveGoldenReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_leaveGoldenReturn::CopyFrom(const GM_leaveGoldenReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_leaveGoldenReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_leaveGoldenReturn::Swap(GM_leaveGoldenReturn* other) {
  if (other != this) {
    std::swap(errorid_, other->errorid_);
    std::swap(roleid_, other->roleid_);
    std::swap(areaid_, other->areaid_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_leaveGoldenReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_leaveGoldenReturn_descriptor_;
  metadata.reflection = GM_leaveGoldenReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_All_request::kAreaidFieldNumber;
const int GM_Golden_All_request::kIdFieldNumber;
#endif  // !_MSC_VER

GM_Golden_All_request::GM_Golden_All_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_All_request::InitAsDefaultInstance() {
}

GM_Golden_All_request::GM_Golden_All_request(const GM_Golden_All_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_All_request::SharedCtor() {
  _cached_size_ = 0;
  areaid_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_All_request::~GM_Golden_All_request() {
  SharedDtor();
}

void GM_Golden_All_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Golden_All_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_All_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_All_request_descriptor_;
}

const GM_Golden_All_request& GM_Golden_All_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_All_request* GM_Golden_All_request::default_instance_ = NULL;

GM_Golden_All_request* GM_Golden_All_request::New() const {
  return new GM_Golden_All_request;
}

void GM_Golden_All_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    areaid_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_All_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 areaid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_All_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 areaid = 1;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->areaid(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_All_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 areaid = 1;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->areaid(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_All_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 areaid = 1;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaid());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_All_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_All_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_All_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_All_request::MergeFrom(const GM_Golden_All_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_All_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_All_request::CopyFrom(const GM_Golden_All_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_All_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Golden_All_request::Swap(GM_Golden_All_request* other) {
  if (other != this) {
    std::swap(areaid_, other->areaid_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_All_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_All_request_descriptor_;
  metadata.reflection = GM_Golden_All_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_Begin_return::kBackeridFieldNumber;
#endif  // !_MSC_VER

GM_Golden_Begin_return::GM_Golden_Begin_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_Begin_return::InitAsDefaultInstance() {
}

GM_Golden_Begin_return::GM_Golden_Begin_return(const GM_Golden_Begin_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_Begin_return::SharedCtor() {
  _cached_size_ = 0;
  backerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_Begin_return::~GM_Golden_Begin_return() {
  SharedDtor();
}

void GM_Golden_Begin_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Golden_Begin_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_Begin_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_Begin_return_descriptor_;
}

const GM_Golden_Begin_return& GM_Golden_Begin_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_Begin_return* GM_Golden_Begin_return::default_instance_ = NULL;

GM_Golden_Begin_return* GM_Golden_Begin_return::New() const {
  return new GM_Golden_Begin_return;
}

void GM_Golden_Begin_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    backerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_Begin_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 backerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &backerid_)));
          set_has_backerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_Begin_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 backerid = 1;
  if (has_backerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->backerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_Begin_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 backerid = 1;
  if (has_backerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->backerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_Begin_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 backerid = 1;
    if (has_backerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->backerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_Begin_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_Begin_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_Begin_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_Begin_return::MergeFrom(const GM_Golden_Begin_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_backerid()) {
      set_backerid(from.backerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_Begin_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_Begin_return::CopyFrom(const GM_Golden_Begin_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_Begin_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Golden_Begin_return::Swap(GM_Golden_Begin_return* other) {
  if (other != this) {
    std::swap(backerid_, other->backerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_Begin_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_Begin_return_descriptor_;
  metadata.reflection = GM_Golden_Begin_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_Card::kRoleidFieldNumber;
const int GM_Golden_Card::kTypeIdFieldNumber;
const int GM_Golden_Card::kCardFieldNumber;
const int GM_Golden_Card::kPosFieldNumber;
#endif  // !_MSC_VER

GM_Golden_Card::GM_Golden_Card()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_Card::InitAsDefaultInstance() {
}

GM_Golden_Card::GM_Golden_Card(const GM_Golden_Card& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_Card::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  type_id_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_Card::~GM_Golden_Card() {
  SharedDtor();
}

void GM_Golden_Card::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Golden_Card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_Card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_Card_descriptor_;
}

const GM_Golden_Card& GM_Golden_Card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_Card* GM_Golden_Card::default_instance_ = NULL;

GM_Golden_Card* GM_Golden_Card::New() const {
  return new GM_Golden_Card;
}

void GM_Golden_Card::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    type_id_ = 0;
    pos_ = 0;
  }
  card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_Card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type_id;
        break;
      }

      // optional int32 type_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_card;
        break;
      }

      // repeated int32 card = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_card())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_card;
        if (input->ExpectTag(32)) goto parse_pos;
        break;
      }

      // optional int32 pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_Card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int32 type_id = 2;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type_id(), output);
  }

  // repeated int32 card = 3;
  for (int i = 0; i < this->card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->card(i), output);
  }

  // optional int32 pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_Card::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional int32 type_id = 2;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type_id(), target);
  }

  // repeated int32 card = 3;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->card(i), target);
  }

  // optional int32 pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_Card::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 type_id = 2;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

    // optional int32 pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  // repeated int32 card = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card(i));
    }
    total_size += 1 * this->card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_Card::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_Card* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_Card*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_Card::MergeFrom(const GM_Golden_Card& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_Card::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_Card::CopyFrom(const GM_Golden_Card& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_Card::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Golden_Card::Swap(GM_Golden_Card* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(type_id_, other->type_id_);
    card_.Swap(&other->card_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_Card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_Card_descriptor_;
  metadata.reflection = GM_Golden_Card_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_Broad_Card::kRoleidFieldNumber;
#endif  // !_MSC_VER

GM_Golden_Broad_Card::GM_Golden_Broad_Card()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_Broad_Card::InitAsDefaultInstance() {
}

GM_Golden_Broad_Card::GM_Golden_Broad_Card(const GM_Golden_Broad_Card& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_Broad_Card::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_Broad_Card::~GM_Golden_Broad_Card() {
  SharedDtor();
}

void GM_Golden_Broad_Card::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Golden_Broad_Card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_Broad_Card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_Broad_Card_descriptor_;
}

const GM_Golden_Broad_Card& GM_Golden_Broad_Card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_Broad_Card* GM_Golden_Broad_Card::default_instance_ = NULL;

GM_Golden_Broad_Card* GM_Golden_Broad_Card::New() const {
  return new GM_Golden_Broad_Card;
}

void GM_Golden_Broad_Card::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_Broad_Card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_Broad_Card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_Broad_Card::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_Broad_Card::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_Broad_Card::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_Broad_Card* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_Broad_Card*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_Broad_Card::MergeFrom(const GM_Golden_Broad_Card& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_Broad_Card::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_Broad_Card::CopyFrom(const GM_Golden_Broad_Card& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_Broad_Card::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Golden_Broad_Card::Swap(GM_Golden_Broad_Card* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_Broad_Card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_Broad_Card_descriptor_;
  metadata.reflection = GM_Golden_Broad_Card_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_add_request::kMoneyFieldNumber;
#endif  // !_MSC_VER

GM_Golden_add_request::GM_Golden_add_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_add_request::InitAsDefaultInstance() {
}

GM_Golden_add_request::GM_Golden_add_request(const GM_Golden_add_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_add_request::SharedCtor() {
  _cached_size_ = 0;
  money_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_add_request::~GM_Golden_add_request() {
  SharedDtor();
}

void GM_Golden_add_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Golden_add_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_add_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_add_request_descriptor_;
}

const GM_Golden_add_request& GM_Golden_add_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_add_request* GM_Golden_add_request::default_instance_ = NULL;

GM_Golden_add_request* GM_Golden_add_request::New() const {
  return new GM_Golden_add_request;
}

void GM_Golden_add_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    money_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_add_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_add_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 money = 1;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_add_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 money = 1;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_add_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 money = 1;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_add_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_add_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_add_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_add_request::MergeFrom(const GM_Golden_add_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_add_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_add_request::CopyFrom(const GM_Golden_add_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_add_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Golden_add_request::Swap(GM_Golden_add_request* other) {
  if (other != this) {
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_add_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_add_request_descriptor_;
  metadata.reflection = GM_Golden_add_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_add_return::kErroridFieldNumber;
const int GM_Golden_add_return::kRoleidFieldNumber;
const int GM_Golden_add_return::kMoneyFieldNumber;
#endif  // !_MSC_VER

GM_Golden_add_return::GM_Golden_add_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_add_return::InitAsDefaultInstance() {
}

GM_Golden_add_return::GM_Golden_add_return(const GM_Golden_add_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_add_return::SharedCtor() {
  _cached_size_ = 0;
  errorid_ = 0;
  roleid_ = 0;
  money_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_add_return::~GM_Golden_add_return() {
  SharedDtor();
}

void GM_Golden_add_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Golden_add_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_add_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_add_return_descriptor_;
}

const GM_Golden_add_return& GM_Golden_add_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_add_return* GM_Golden_add_return::default_instance_ = NULL;

GM_Golden_add_return* GM_Golden_add_return::New() const {
  return new GM_Golden_add_return;
}

void GM_Golden_add_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorid_ = 0;
    roleid_ = 0;
    money_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_add_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorid_)));
          set_has_errorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // required int32 roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }

      // optional int64 money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_add_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorid(), output);
  }

  // required int32 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  // optional int64 money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_add_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorid(), target);
  }

  // required int32 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleid(), target);
  }

  // optional int64 money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_add_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorid = 1;
    if (has_errorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorid());
    }

    // required int32 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int64 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_add_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_add_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_add_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_add_return::MergeFrom(const GM_Golden_add_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorid()) {
      set_errorid(from.errorid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_add_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_add_return::CopyFrom(const GM_Golden_add_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_add_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_Golden_add_return::Swap(GM_Golden_add_return* other) {
  if (other != this) {
    std::swap(errorid_, other->errorid_);
    std::swap(roleid_, other->roleid_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_add_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_add_return_descriptor_;
  metadata.reflection = GM_Golden_add_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_Compare_request::kRoleidFieldNumber;
const int GM_Golden_Compare_request::kNomoneyFieldNumber;
#endif  // !_MSC_VER

GM_Golden_Compare_request::GM_Golden_Compare_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_Compare_request::InitAsDefaultInstance() {
}

GM_Golden_Compare_request::GM_Golden_Compare_request(const GM_Golden_Compare_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_Compare_request::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  nomoney_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_Compare_request::~GM_Golden_Compare_request() {
  SharedDtor();
}

void GM_Golden_Compare_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Golden_Compare_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_Compare_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_Compare_request_descriptor_;
}

const GM_Golden_Compare_request& GM_Golden_Compare_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_Compare_request* GM_Golden_Compare_request::default_instance_ = NULL;

GM_Golden_Compare_request* GM_Golden_Compare_request::New() const {
  return new GM_Golden_Compare_request;
}

void GM_Golden_Compare_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    nomoney_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_Compare_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nomoney;
        break;
      }

      // optional int32 nomoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nomoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nomoney_)));
          set_has_nomoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_Compare_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int32 nomoney = 2;
  if (has_nomoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nomoney(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_Compare_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional int32 nomoney = 2;
  if (has_nomoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nomoney(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_Compare_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 nomoney = 2;
    if (has_nomoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nomoney());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_Compare_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_Compare_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_Compare_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_Compare_request::MergeFrom(const GM_Golden_Compare_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_nomoney()) {
      set_nomoney(from.nomoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_Compare_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_Compare_request::CopyFrom(const GM_Golden_Compare_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_Compare_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Golden_Compare_request::Swap(GM_Golden_Compare_request* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(nomoney_, other->nomoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_Compare_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_Compare_request_descriptor_;
  metadata.reflection = GM_Golden_Compare_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_Compare_return::kWinidFieldNumber;
const int GM_Golden_Compare_return::kFailureidFieldNumber;
const int GM_Golden_Compare_return::kMoneyFieldNumber;
const int GM_Golden_Compare_return::kErroridFieldNumber;
const int GM_Golden_Compare_return::kNomoneyFieldNumber;
#endif  // !_MSC_VER

GM_Golden_Compare_return::GM_Golden_Compare_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_Compare_return::InitAsDefaultInstance() {
}

GM_Golden_Compare_return::GM_Golden_Compare_return(const GM_Golden_Compare_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_Compare_return::SharedCtor() {
  _cached_size_ = 0;
  winid_ = 0;
  failureid_ = 0;
  money_ = GOOGLE_LONGLONG(0);
  errorid_ = 0;
  nomoney_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_Compare_return::~GM_Golden_Compare_return() {
  SharedDtor();
}

void GM_Golden_Compare_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Golden_Compare_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_Compare_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_Compare_return_descriptor_;
}

const GM_Golden_Compare_return& GM_Golden_Compare_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_Compare_return* GM_Golden_Compare_return::default_instance_ = NULL;

GM_Golden_Compare_return* GM_Golden_Compare_return::New() const {
  return new GM_Golden_Compare_return;
}

void GM_Golden_Compare_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    winid_ = 0;
    failureid_ = 0;
    money_ = GOOGLE_LONGLONG(0);
    errorid_ = 0;
    nomoney_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_Compare_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 winid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winid_)));
          set_has_winid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_failureid;
        break;
      }

      // required int32 failureid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failureid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &failureid_)));
          set_has_failureid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }

      // required int64 money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_errorid;
        break;
      }

      // optional int32 errorid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorid_)));
          set_has_errorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nomoney;
        break;
      }

      // optional int32 nomoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nomoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nomoney_)));
          set_has_nomoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_Compare_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 winid = 1;
  if (has_winid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->winid(), output);
  }

  // required int32 failureid = 2;
  if (has_failureid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->failureid(), output);
  }

  // required int64 money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->money(), output);
  }

  // optional int32 errorid = 4;
  if (has_errorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->errorid(), output);
  }

  // optional int32 nomoney = 5;
  if (has_nomoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nomoney(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_Compare_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 winid = 1;
  if (has_winid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->winid(), target);
  }

  // required int32 failureid = 2;
  if (has_failureid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->failureid(), target);
  }

  // required int64 money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->money(), target);
  }

  // optional int32 errorid = 4;
  if (has_errorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->errorid(), target);
  }

  // optional int32 nomoney = 5;
  if (has_nomoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nomoney(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_Compare_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 winid = 1;
    if (has_winid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winid());
    }

    // required int32 failureid = 2;
    if (has_failureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->failureid());
    }

    // required int64 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

    // optional int32 errorid = 4;
    if (has_errorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorid());
    }

    // optional int32 nomoney = 5;
    if (has_nomoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nomoney());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_Compare_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_Compare_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_Compare_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_Compare_return::MergeFrom(const GM_Golden_Compare_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winid()) {
      set_winid(from.winid());
    }
    if (from.has_failureid()) {
      set_failureid(from.failureid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_errorid()) {
      set_errorid(from.errorid());
    }
    if (from.has_nomoney()) {
      set_nomoney(from.nomoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_Compare_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_Compare_return::CopyFrom(const GM_Golden_Compare_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_Compare_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_Golden_Compare_return::Swap(GM_Golden_Compare_return* other) {
  if (other != this) {
    std::swap(winid_, other->winid_);
    std::swap(failureid_, other->failureid_);
    std::swap(money_, other->money_);
    std::swap(errorid_, other->errorid_);
    std::swap(nomoney_, other->nomoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_Compare_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_Compare_return_descriptor_;
  metadata.reflection = GM_Golden_Compare_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_maker_return::kMakeridFieldNumber;
#endif  // !_MSC_VER

GM_Golden_maker_return::GM_Golden_maker_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_maker_return::InitAsDefaultInstance() {
}

GM_Golden_maker_return::GM_Golden_maker_return(const GM_Golden_maker_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_maker_return::SharedCtor() {
  _cached_size_ = 0;
  makerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_maker_return::~GM_Golden_maker_return() {
  SharedDtor();
}

void GM_Golden_maker_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Golden_maker_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_maker_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_maker_return_descriptor_;
}

const GM_Golden_maker_return& GM_Golden_maker_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_maker_return* GM_Golden_maker_return::default_instance_ = NULL;

GM_Golden_maker_return* GM_Golden_maker_return::New() const {
  return new GM_Golden_maker_return;
}

void GM_Golden_maker_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    makerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_maker_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 makerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &makerid_)));
          set_has_makerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_maker_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 makerid = 1;
  if (has_makerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->makerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_maker_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 makerid = 1;
  if (has_makerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->makerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_maker_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 makerid = 1;
    if (has_makerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->makerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_maker_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_maker_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_maker_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_maker_return::MergeFrom(const GM_Golden_maker_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_makerid()) {
      set_makerid(from.makerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_maker_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_maker_return::CopyFrom(const GM_Golden_maker_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_maker_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Golden_maker_return::Swap(GM_Golden_maker_return* other) {
  if (other != this) {
    std::swap(makerid_, other->makerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_maker_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_maker_return_descriptor_;
  metadata.reflection = GM_Golden_maker_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_allCard_return::kWineridFieldNumber;
const int GM_Golden_allCard_return::kShouldgetFieldNumber;
const int GM_Golden_allCard_return::kGetFieldNumber;
const int GM_Golden_allCard_return::kMDataFieldNumber;
#endif  // !_MSC_VER

GM_Golden_allCard_return::GM_Golden_allCard_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_allCard_return::InitAsDefaultInstance() {
}

GM_Golden_allCard_return::GM_Golden_allCard_return(const GM_Golden_allCard_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_allCard_return::SharedCtor() {
  _cached_size_ = 0;
  winerid_ = 0;
  shouldget_ = GOOGLE_LONGLONG(0);
  get_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_allCard_return::~GM_Golden_allCard_return() {
  SharedDtor();
}

void GM_Golden_allCard_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Golden_allCard_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_allCard_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_allCard_return_descriptor_;
}

const GM_Golden_allCard_return& GM_Golden_allCard_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_allCard_return* GM_Golden_allCard_return::default_instance_ = NULL;

GM_Golden_allCard_return* GM_Golden_allCard_return::New() const {
  return new GM_Golden_allCard_return;
}

void GM_Golden_allCard_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    winerid_ = 0;
    shouldget_ = GOOGLE_LONGLONG(0);
    get_ = GOOGLE_LONGLONG(0);
  }
  m_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_allCard_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 winerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winerid_)));
          set_has_winerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shouldget;
        break;
      }

      // optional int64 shouldget = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shouldget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shouldget_)));
          set_has_shouldget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_get;
        break;
      }

      // optional int64 get = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &get_)));
          set_has_get();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_data;
        break;
      }

      // repeated .GM_Golden_Card m_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_allCard_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 winerid = 1;
  if (has_winerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->winerid(), output);
  }

  // optional int64 shouldget = 2;
  if (has_shouldget()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->shouldget(), output);
  }

  // optional int64 get = 3;
  if (has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->get(), output);
  }

  // repeated .GM_Golden_Card m_data = 4;
  for (int i = 0; i < this->m_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_allCard_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 winerid = 1;
  if (has_winerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->winerid(), target);
  }

  // optional int64 shouldget = 2;
  if (has_shouldget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->shouldget(), target);
  }

  // optional int64 get = 3;
  if (has_get()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->get(), target);
  }

  // repeated .GM_Golden_Card m_data = 4;
  for (int i = 0; i < this->m_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_allCard_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 winerid = 1;
    if (has_winerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winerid());
    }

    // optional int64 shouldget = 2;
    if (has_shouldget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->shouldget());
    }

    // optional int64 get = 3;
    if (has_get()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->get());
    }

  }
  // repeated .GM_Golden_Card m_data = 4;
  total_size += 1 * this->m_data_size();
  for (int i = 0; i < this->m_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_allCard_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_allCard_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_allCard_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_allCard_return::MergeFrom(const GM_Golden_allCard_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_data_.MergeFrom(from.m_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winerid()) {
      set_winerid(from.winerid());
    }
    if (from.has_shouldget()) {
      set_shouldget(from.shouldget());
    }
    if (from.has_get()) {
      set_get(from.get());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_allCard_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_allCard_return::CopyFrom(const GM_Golden_allCard_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_allCard_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_data_size(); i++) {
    if (!this->m_data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Golden_allCard_return::Swap(GM_Golden_allCard_return* other) {
  if (other != this) {
    std::swap(winerid_, other->winerid_);
    std::swap(shouldget_, other->shouldget_);
    std::swap(get_, other->get_);
    m_data_.Swap(&other->m_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_allCard_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_allCard_return_descriptor_;
  metadata.reflection = GM_Golden_allCard_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_abandon_return::kErroridFieldNumber;
const int GM_Golden_abandon_return::kRoleidFieldNumber;
#endif  // !_MSC_VER

GM_Golden_abandon_return::GM_Golden_abandon_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_abandon_return::InitAsDefaultInstance() {
}

GM_Golden_abandon_return::GM_Golden_abandon_return(const GM_Golden_abandon_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_abandon_return::SharedCtor() {
  _cached_size_ = 0;
  errorid_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_abandon_return::~GM_Golden_abandon_return() {
  SharedDtor();
}

void GM_Golden_abandon_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Golden_abandon_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_abandon_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_abandon_return_descriptor_;
}

const GM_Golden_abandon_return& GM_Golden_abandon_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_abandon_return* GM_Golden_abandon_return::default_instance_ = NULL;

GM_Golden_abandon_return* GM_Golden_abandon_return::New() const {
  return new GM_Golden_abandon_return;
}

void GM_Golden_abandon_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorid_ = 0;
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_abandon_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorid_)));
          set_has_errorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // optional int32 roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_abandon_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorid(), output);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_abandon_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorid(), target);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_abandon_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorid = 1;
    if (has_errorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorid());
    }

    // optional int32 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_abandon_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_abandon_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_abandon_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_abandon_return::MergeFrom(const GM_Golden_abandon_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorid()) {
      set_errorid(from.errorid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_abandon_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_abandon_return::CopyFrom(const GM_Golden_abandon_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_abandon_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Golden_abandon_return::Swap(GM_Golden_abandon_return* other) {
  if (other != this) {
    std::swap(errorid_, other->errorid_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_abandon_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_abandon_return_descriptor_;
  metadata.reflection = GM_Golden_abandon_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_gamble_return::kGambleFieldNumber;
#endif  // !_MSC_VER

GM_Golden_gamble_return::GM_Golden_gamble_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_gamble_return::InitAsDefaultInstance() {
}

GM_Golden_gamble_return::GM_Golden_gamble_return(const GM_Golden_gamble_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_gamble_return::SharedCtor() {
  _cached_size_ = 0;
  gamble_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_gamble_return::~GM_Golden_gamble_return() {
  SharedDtor();
}

void GM_Golden_gamble_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Golden_gamble_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_gamble_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_gamble_return_descriptor_;
}

const GM_Golden_gamble_return& GM_Golden_gamble_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_gamble_return* GM_Golden_gamble_return::default_instance_ = NULL;

GM_Golden_gamble_return* GM_Golden_gamble_return::New() const {
  return new GM_Golden_gamble_return;
}

void GM_Golden_gamble_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gamble_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_gamble_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gamble = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gamble_)));
          set_has_gamble();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_gamble_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 gamble = 1;
  if (has_gamble()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gamble(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_gamble_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 gamble = 1;
  if (has_gamble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gamble(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_gamble_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gamble = 1;
    if (has_gamble()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gamble());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_gamble_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_gamble_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_gamble_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_gamble_return::MergeFrom(const GM_Golden_gamble_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamble()) {
      set_gamble(from.gamble());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_gamble_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_gamble_return::CopyFrom(const GM_Golden_gamble_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_gamble_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Golden_gamble_return::Swap(GM_Golden_gamble_return* other) {
  if (other != this) {
    std::swap(gamble_, other->gamble_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_gamble_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_gamble_return_descriptor_;
  metadata.reflection = GM_Golden_gamble_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_selfGamble_return::kGambleFieldNumber;
const int GM_Golden_selfGamble_return::kRoleidFieldNumber;
#endif  // !_MSC_VER

GM_Golden_selfGamble_return::GM_Golden_selfGamble_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_selfGamble_return::InitAsDefaultInstance() {
}

GM_Golden_selfGamble_return::GM_Golden_selfGamble_return(const GM_Golden_selfGamble_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_selfGamble_return::SharedCtor() {
  _cached_size_ = 0;
  gamble_ = GOOGLE_LONGLONG(0);
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_selfGamble_return::~GM_Golden_selfGamble_return() {
  SharedDtor();
}

void GM_Golden_selfGamble_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Golden_selfGamble_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_selfGamble_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_selfGamble_return_descriptor_;
}

const GM_Golden_selfGamble_return& GM_Golden_selfGamble_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_selfGamble_return* GM_Golden_selfGamble_return::default_instance_ = NULL;

GM_Golden_selfGamble_return* GM_Golden_selfGamble_return::New() const {
  return new GM_Golden_selfGamble_return;
}

void GM_Golden_selfGamble_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gamble_ = GOOGLE_LONGLONG(0);
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_selfGamble_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gamble = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gamble_)));
          set_has_gamble();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // optional int32 roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_selfGamble_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 gamble = 1;
  if (has_gamble()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gamble(), output);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_selfGamble_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 gamble = 1;
  if (has_gamble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gamble(), target);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_selfGamble_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gamble = 1;
    if (has_gamble()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gamble());
    }

    // optional int32 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_selfGamble_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_selfGamble_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_selfGamble_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_selfGamble_return::MergeFrom(const GM_Golden_selfGamble_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamble()) {
      set_gamble(from.gamble());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_selfGamble_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_selfGamble_return::CopyFrom(const GM_Golden_selfGamble_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_selfGamble_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Golden_selfGamble_return::Swap(GM_Golden_selfGamble_return* other) {
  if (other != this) {
    std::swap(gamble_, other->gamble_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_selfGamble_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_selfGamble_return_descriptor_;
  metadata.reflection = GM_Golden_selfGamble_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Golden_Boun_return::kBoutFieldNumber;
#endif  // !_MSC_VER

SM_Golden_Boun_return::SM_Golden_Boun_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Golden_Boun_return::InitAsDefaultInstance() {
}

SM_Golden_Boun_return::SM_Golden_Boun_return(const SM_Golden_Boun_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Golden_Boun_return::SharedCtor() {
  _cached_size_ = 0;
  bout_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Golden_Boun_return::~SM_Golden_Boun_return() {
  SharedDtor();
}

void SM_Golden_Boun_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Golden_Boun_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Golden_Boun_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Golden_Boun_return_descriptor_;
}

const SM_Golden_Boun_return& SM_Golden_Boun_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

SM_Golden_Boun_return* SM_Golden_Boun_return::default_instance_ = NULL;

SM_Golden_Boun_return* SM_Golden_Boun_return::New() const {
  return new SM_Golden_Boun_return;
}

void SM_Golden_Boun_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bout_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Golden_Boun_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bout = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bout_)));
          set_has_bout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Golden_Boun_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bout = 1;
  if (has_bout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Golden_Boun_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bout = 1;
  if (has_bout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Golden_Boun_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bout = 1;
    if (has_bout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Golden_Boun_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Golden_Boun_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Golden_Boun_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Golden_Boun_return::MergeFrom(const SM_Golden_Boun_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bout()) {
      set_bout(from.bout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Golden_Boun_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Golden_Boun_return::CopyFrom(const SM_Golden_Boun_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Golden_Boun_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Golden_Boun_return::Swap(SM_Golden_Boun_return* other) {
  if (other != this) {
    std::swap(bout_, other->bout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Golden_Boun_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Golden_Boun_return_descriptor_;
  metadata.reflection = SM_Golden_Boun_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_Begin_Time_return::kTimeFieldNumber;
#endif  // !_MSC_VER

GM_Golden_Begin_Time_return::GM_Golden_Begin_Time_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_Begin_Time_return::InitAsDefaultInstance() {
}

GM_Golden_Begin_Time_return::GM_Golden_Begin_Time_return(const GM_Golden_Begin_Time_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_Begin_Time_return::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_Begin_Time_return::~GM_Golden_Begin_Time_return() {
  SharedDtor();
}

void GM_Golden_Begin_Time_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Golden_Begin_Time_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_Begin_Time_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_Begin_Time_return_descriptor_;
}

const GM_Golden_Begin_Time_return& GM_Golden_Begin_Time_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_Begin_Time_return* GM_Golden_Begin_Time_return::default_instance_ = NULL;

GM_Golden_Begin_Time_return* GM_Golden_Begin_Time_return::New() const {
  return new GM_Golden_Begin_Time_return;
}

void GM_Golden_Begin_Time_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_Begin_Time_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_Begin_Time_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_Begin_Time_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_Begin_Time_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_Begin_Time_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_Begin_Time_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_Begin_Time_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_Begin_Time_return::MergeFrom(const GM_Golden_Begin_Time_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_Begin_Time_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_Begin_Time_return::CopyFrom(const GM_Golden_Begin_Time_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_Begin_Time_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Golden_Begin_Time_return::Swap(GM_Golden_Begin_Time_return* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_Begin_Time_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_Begin_Time_return_descriptor_;
  metadata.reflection = GM_Golden_Begin_Time_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_Begin_Singletime_return::kTimeFieldNumber;
#endif  // !_MSC_VER

GM_Golden_Begin_Singletime_return::GM_Golden_Begin_Singletime_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_Begin_Singletime_return::InitAsDefaultInstance() {
}

GM_Golden_Begin_Singletime_return::GM_Golden_Begin_Singletime_return(const GM_Golden_Begin_Singletime_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_Begin_Singletime_return::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_Begin_Singletime_return::~GM_Golden_Begin_Singletime_return() {
  SharedDtor();
}

void GM_Golden_Begin_Singletime_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Golden_Begin_Singletime_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_Begin_Singletime_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_Begin_Singletime_return_descriptor_;
}

const GM_Golden_Begin_Singletime_return& GM_Golden_Begin_Singletime_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_Begin_Singletime_return* GM_Golden_Begin_Singletime_return::default_instance_ = NULL;

GM_Golden_Begin_Singletime_return* GM_Golden_Begin_Singletime_return::New() const {
  return new GM_Golden_Begin_Singletime_return;
}

void GM_Golden_Begin_Singletime_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_Begin_Singletime_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_Begin_Singletime_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_Begin_Singletime_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_Begin_Singletime_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_Begin_Singletime_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_Begin_Singletime_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_Begin_Singletime_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_Begin_Singletime_return::MergeFrom(const GM_Golden_Begin_Singletime_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_Begin_Singletime_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_Begin_Singletime_return::CopyFrom(const GM_Golden_Begin_Singletime_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_Begin_Singletime_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Golden_Begin_Singletime_return::Swap(GM_Golden_Begin_Singletime_return* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_Begin_Singletime_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_Begin_Singletime_return_descriptor_;
  metadata.reflection = GM_Golden_Begin_Singletime_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_pause_request::kPauseFieldNumber;
#endif  // !_MSC_VER

GM_Golden_pause_request::GM_Golden_pause_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_pause_request::InitAsDefaultInstance() {
}

GM_Golden_pause_request::GM_Golden_pause_request(const GM_Golden_pause_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_pause_request::SharedCtor() {
  _cached_size_ = 0;
  pause_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_pause_request::~GM_Golden_pause_request() {
  SharedDtor();
}

void GM_Golden_pause_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Golden_pause_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_pause_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_pause_request_descriptor_;
}

const GM_Golden_pause_request& GM_Golden_pause_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_pause_request* GM_Golden_pause_request::default_instance_ = NULL;

GM_Golden_pause_request* GM_Golden_pause_request::New() const {
  return new GM_Golden_pause_request;
}

void GM_Golden_pause_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pause_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_pause_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pause = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pause_)));
          set_has_pause();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_pause_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pause = 1;
  if (has_pause()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pause(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_pause_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pause = 1;
  if (has_pause()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pause(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_pause_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pause = 1;
    if (has_pause()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pause());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_pause_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_pause_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_pause_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_pause_request::MergeFrom(const GM_Golden_pause_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pause()) {
      set_pause(from.pause());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_pause_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_pause_request::CopyFrom(const GM_Golden_pause_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_pause_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Golden_pause_request::Swap(GM_Golden_pause_request* other) {
  if (other != this) {
    std::swap(pause_, other->pause_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_pause_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_pause_request_descriptor_;
  metadata.reflection = GM_Golden_pause_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_pause_return::kPauseFieldNumber;
#endif  // !_MSC_VER

GM_Golden_pause_return::GM_Golden_pause_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_pause_return::InitAsDefaultInstance() {
}

GM_Golden_pause_return::GM_Golden_pause_return(const GM_Golden_pause_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_pause_return::SharedCtor() {
  _cached_size_ = 0;
  pause_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_pause_return::~GM_Golden_pause_return() {
  SharedDtor();
}

void GM_Golden_pause_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Golden_pause_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_pause_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_pause_return_descriptor_;
}

const GM_Golden_pause_return& GM_Golden_pause_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_pause_return* GM_Golden_pause_return::default_instance_ = NULL;

GM_Golden_pause_return* GM_Golden_pause_return::New() const {
  return new GM_Golden_pause_return;
}

void GM_Golden_pause_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pause_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_pause_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pause = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pause_)));
          set_has_pause();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_pause_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pause = 1;
  if (has_pause()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pause(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_pause_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pause = 1;
  if (has_pause()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pause(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_pause_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pause = 1;
    if (has_pause()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pause());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_pause_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_pause_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_pause_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_pause_return::MergeFrom(const GM_Golden_pause_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pause()) {
      set_pause(from.pause());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_pause_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_pause_return::CopyFrom(const GM_Golden_pause_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_pause_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Golden_pause_return::Swap(GM_Golden_pause_return* other) {
  if (other != this) {
    std::swap(pause_, other->pause_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_pause_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_pause_return_descriptor_;
  metadata.reflection = GM_Golden_pause_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_show::kRoleidFieldNumber;
#endif  // !_MSC_VER

GM_Golden_show::GM_Golden_show()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_show::InitAsDefaultInstance() {
}

GM_Golden_show::GM_Golden_show(const GM_Golden_show& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_show::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_show::~GM_Golden_show() {
  SharedDtor();
}

void GM_Golden_show::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Golden_show::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_show::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_show_descriptor_;
}

const GM_Golden_show& GM_Golden_show::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_show* GM_Golden_show::default_instance_ = NULL;

GM_Golden_show* GM_Golden_show::New() const {
  return new GM_Golden_show;
}

void GM_Golden_show::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_show::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_show::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_show::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_show::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_show::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_show* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_show*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_show::MergeFrom(const GM_Golden_show& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_show::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_show::CopyFrom(const GM_Golden_show& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_show::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Golden_show::Swap(GM_Golden_show* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_show::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_show_descriptor_;
  metadata.reflection = GM_Golden_show_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_show_return::kRoleidFieldNumber;
const int GM_Golden_show_return::kDataFieldNumber;
#endif  // !_MSC_VER

GM_Golden_show_return::GM_Golden_show_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_show_return::InitAsDefaultInstance() {
  data_ = const_cast< ::GM_Golden_Card*>(&::GM_Golden_Card::default_instance());
}

GM_Golden_show_return::GM_Golden_show_return(const GM_Golden_show_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_show_return::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_show_return::~GM_Golden_show_return() {
  SharedDtor();
}

void GM_Golden_show_return::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void GM_Golden_show_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_show_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_show_return_descriptor_;
}

const GM_Golden_show_return& GM_Golden_show_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_show_return* GM_Golden_show_return::default_instance_ = NULL;

GM_Golden_show_return* GM_Golden_show_return::New() const {
  return new GM_Golden_show_return;
}

void GM_Golden_show_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::GM_Golden_Card::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_show_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .GM_Golden_Card data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_show_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional .GM_Golden_Card data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_show_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional .GM_Golden_Card data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_show_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional .GM_Golden_Card data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_show_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_show_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_show_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_show_return::MergeFrom(const GM_Golden_show_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_data()) {
      mutable_data()->::GM_Golden_Card::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_show_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_show_return::CopyFrom(const GM_Golden_show_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_show_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void GM_Golden_show_return::Swap(GM_Golden_show_return* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_show_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_show_return_descriptor_;
  metadata.reflection = GM_Golden_show_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_private_request::kRateFieldNumber;
#endif  // !_MSC_VER

GM_Golden_private_request::GM_Golden_private_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_private_request::InitAsDefaultInstance() {
}

GM_Golden_private_request::GM_Golden_private_request(const GM_Golden_private_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_private_request::SharedCtor() {
  _cached_size_ = 0;
  rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_private_request::~GM_Golden_private_request() {
  SharedDtor();
}

void GM_Golden_private_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Golden_private_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_private_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_private_request_descriptor_;
}

const GM_Golden_private_request& GM_Golden_private_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_private_request* GM_Golden_private_request::default_instance_ = NULL;

GM_Golden_private_request* GM_Golden_private_request::New() const {
  return new GM_Golden_private_request;
}

void GM_Golden_private_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_private_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_private_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rate = 1;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_private_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rate = 1;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_private_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rate = 1;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_private_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_private_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_private_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_private_request::MergeFrom(const GM_Golden_private_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_private_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_private_request::CopyFrom(const GM_Golden_private_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_private_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Golden_private_request::Swap(GM_Golden_private_request* other) {
  if (other != this) {
    std::swap(rate_, other->rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_private_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_private_request_descriptor_;
  metadata.reflection = GM_Golden_private_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_private_return::kErroridFieldNumber;
const int GM_Golden_private_return::kIdFieldNumber;
const int GM_Golden_private_return::kAreaidFieldNumber;
#endif  // !_MSC_VER

GM_Golden_private_return::GM_Golden_private_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_private_return::InitAsDefaultInstance() {
}

GM_Golden_private_return::GM_Golden_private_return(const GM_Golden_private_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_private_return::SharedCtor() {
  _cached_size_ = 0;
  errorid_ = 0;
  id_ = 0;
  areaid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_private_return::~GM_Golden_private_return() {
  SharedDtor();
}

void GM_Golden_private_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Golden_private_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_private_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_private_return_descriptor_;
}

const GM_Golden_private_return& GM_Golden_private_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_private_return* GM_Golden_private_return::default_instance_ = NULL;

GM_Golden_private_return* GM_Golden_private_return::New() const {
  return new GM_Golden_private_return;
}

void GM_Golden_private_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorid_ = 0;
    id_ = 0;
    areaid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_private_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorid_)));
          set_has_errorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_areaid;
        break;
      }

      // optional int32 areaid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_private_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorid(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 areaid = 3;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->areaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_private_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorid(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 areaid = 3;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->areaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_private_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorid = 1;
    if (has_errorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorid());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 areaid = 3;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_private_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_private_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_private_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_private_return::MergeFrom(const GM_Golden_private_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorid()) {
      set_errorid(from.errorid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_private_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_private_return::CopyFrom(const GM_Golden_private_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_private_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Golden_private_return::Swap(GM_Golden_private_return* other) {
  if (other != this) {
    std::swap(errorid_, other->errorid_);
    std::swap(id_, other->id_);
    std::swap(areaid_, other->areaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_private_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_private_return_descriptor_;
  metadata.reflection = GM_Golden_private_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Godlen_invite_requrest::kIdFieldNumber;
const int GM_Godlen_invite_requrest::kRoleidFieldNumber;
#endif  // !_MSC_VER

GM_Godlen_invite_requrest::GM_Godlen_invite_requrest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Godlen_invite_requrest::InitAsDefaultInstance() {
}

GM_Godlen_invite_requrest::GM_Godlen_invite_requrest(const GM_Godlen_invite_requrest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Godlen_invite_requrest::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Godlen_invite_requrest::~GM_Godlen_invite_requrest() {
  SharedDtor();
}

void GM_Godlen_invite_requrest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Godlen_invite_requrest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Godlen_invite_requrest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Godlen_invite_requrest_descriptor_;
}

const GM_Godlen_invite_requrest& GM_Godlen_invite_requrest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Godlen_invite_requrest* GM_Godlen_invite_requrest::default_instance_ = NULL;

GM_Godlen_invite_requrest* GM_Godlen_invite_requrest::New() const {
  return new GM_Godlen_invite_requrest;
}

void GM_Godlen_invite_requrest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Godlen_invite_requrest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // optional int32 roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Godlen_invite_requrest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Godlen_invite_requrest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Godlen_invite_requrest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Godlen_invite_requrest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Godlen_invite_requrest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Godlen_invite_requrest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Godlen_invite_requrest::MergeFrom(const GM_Godlen_invite_requrest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Godlen_invite_requrest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Godlen_invite_requrest::CopyFrom(const GM_Godlen_invite_requrest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Godlen_invite_requrest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Godlen_invite_requrest::Swap(GM_Godlen_invite_requrest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Godlen_invite_requrest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Godlen_invite_requrest_descriptor_;
  metadata.reflection = GM_Godlen_invite_requrest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_invite_return::kErroridFieldNumber;
#endif  // !_MSC_VER

GM_Golden_invite_return::GM_Golden_invite_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_invite_return::InitAsDefaultInstance() {
}

GM_Golden_invite_return::GM_Golden_invite_return(const GM_Golden_invite_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_invite_return::SharedCtor() {
  _cached_size_ = 0;
  errorid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_invite_return::~GM_Golden_invite_return() {
  SharedDtor();
}

void GM_Golden_invite_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Golden_invite_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_invite_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_invite_return_descriptor_;
}

const GM_Golden_invite_return& GM_Golden_invite_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_invite_return* GM_Golden_invite_return::default_instance_ = NULL;

GM_Golden_invite_return* GM_Golden_invite_return::New() const {
  return new GM_Golden_invite_return;
}

void GM_Golden_invite_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_invite_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorid_)));
          set_has_errorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_invite_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_invite_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_invite_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorid = 1;
    if (has_errorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_invite_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_invite_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_invite_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_invite_return::MergeFrom(const GM_Golden_invite_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorid()) {
      set_errorid(from.errorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_invite_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_invite_return::CopyFrom(const GM_Golden_invite_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_invite_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Golden_invite_return::Swap(GM_Golden_invite_return* other) {
  if (other != this) {
    std::swap(errorid_, other->errorid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_invite_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_invite_return_descriptor_;
  metadata.reflection = GM_Golden_invite_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_invitate_roler_eturn::kRoleidFieldNumber;
const int GM_Golden_invitate_roler_eturn::kNameFieldNumber;
const int GM_Golden_invitate_roler_eturn::kRateFieldNumber;
const int GM_Golden_invitate_roler_eturn::kHeadFieldNumber;
const int GM_Golden_invitate_roler_eturn::kFrameFieldNumber;
const int GM_Golden_invitate_roler_eturn::kIdFieldNumber;
#endif  // !_MSC_VER

GM_Golden_invitate_roler_eturn::GM_Golden_invitate_roler_eturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_invitate_roler_eturn::InitAsDefaultInstance() {
}

GM_Golden_invitate_roler_eturn::GM_Golden_invitate_roler_eturn(const GM_Golden_invitate_roler_eturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_invitate_roler_eturn::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rate_ = 0;
  head_ = 0;
  frame_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_invitate_roler_eturn::~GM_Golden_invitate_roler_eturn() {
  SharedDtor();
}

void GM_Golden_invitate_roler_eturn::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GM_Golden_invitate_roler_eturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_invitate_roler_eturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_invitate_roler_eturn_descriptor_;
}

const GM_Golden_invitate_roler_eturn& GM_Golden_invitate_roler_eturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_invitate_roler_eturn* GM_Golden_invitate_roler_eturn::default_instance_ = NULL;

GM_Golden_invitate_roler_eturn* GM_Golden_invitate_roler_eturn::New() const {
  return new GM_Golden_invitate_roler_eturn;
}

void GM_Golden_invitate_roler_eturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    rate_ = 0;
    head_ = 0;
    frame_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_invitate_roler_eturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rate;
        break;
      }

      // optional int32 rate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_head;
        break;
      }

      // optional int32 head = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_frame;
        break;
      }

      // optional int32 frame = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_)));
          set_has_frame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_id;
        break;
      }

      // optional int32 id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_invitate_roler_eturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 rate = 3;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rate(), output);
  }

  // optional int32 head = 4;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->head(), output);
  }

  // optional int32 frame = 5;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->frame(), output);
  }

  // optional int32 id = 6;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_invitate_roler_eturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 rate = 3;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rate(), target);
  }

  // optional int32 head = 4;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->head(), target);
  }

  // optional int32 frame = 5;
  if (has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->frame(), target);
  }

  // optional int32 id = 6;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_invitate_roler_eturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 rate = 3;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

    // optional int32 head = 4;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head());
    }

    // optional int32 frame = 5;
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frame());
    }

    // optional int32 id = 6;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_invitate_roler_eturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_invitate_roler_eturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_invitate_roler_eturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_invitate_roler_eturn::MergeFrom(const GM_Golden_invitate_roler_eturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_frame()) {
      set_frame(from.frame());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_invitate_roler_eturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_invitate_roler_eturn::CopyFrom(const GM_Golden_invitate_roler_eturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_invitate_roler_eturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Golden_invitate_roler_eturn::Swap(GM_Golden_invitate_roler_eturn* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(name_, other->name_);
    std::swap(rate_, other->rate_);
    std::swap(head_, other->head_);
    std::swap(frame_, other->frame_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_invitate_roler_eturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_invitate_roler_eturn_descriptor_;
  metadata.reflection = GM_Golden_invitate_roler_eturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_kick::kRoleidFieldNumber;
const int GM_Golden_kick::kMakeidFieldNumber;
const int GM_Golden_kick::kIdFieldNumber;
#endif  // !_MSC_VER

GM_Golden_kick::GM_Golden_kick()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_kick::InitAsDefaultInstance() {
}

GM_Golden_kick::GM_Golden_kick(const GM_Golden_kick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_kick::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  makeid_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_kick::~GM_Golden_kick() {
  SharedDtor();
}

void GM_Golden_kick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Golden_kick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_kick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_kick_descriptor_;
}

const GM_Golden_kick& GM_Golden_kick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_kick* GM_Golden_kick::default_instance_ = NULL;

GM_Golden_kick* GM_Golden_kick::New() const {
  return new GM_Golden_kick;
}

void GM_Golden_kick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    makeid_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_kick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_makeid;
        break;
      }

      // optional int32 makeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_makeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &makeid_)));
          set_has_makeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_kick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int32 makeid = 2;
  if (has_makeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->makeid(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_kick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional int32 makeid = 2;
  if (has_makeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->makeid(), target);
  }

  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_kick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 makeid = 2;
    if (has_makeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->makeid());
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_kick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_kick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_kick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_kick::MergeFrom(const GM_Golden_kick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_makeid()) {
      set_makeid(from.makeid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_kick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_kick::CopyFrom(const GM_Golden_kick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_kick::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Golden_kick::Swap(GM_Golden_kick* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(makeid_, other->makeid_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_kick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_kick_descriptor_;
  metadata.reflection = GM_Golden_kick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_kick_return::kErroridFieldNumber;
const int GM_Golden_kick_return::kRoleidFieldNumber;
const int GM_Golden_kick_return::kMakeidFieldNumber;
#endif  // !_MSC_VER

GM_Golden_kick_return::GM_Golden_kick_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_kick_return::InitAsDefaultInstance() {
}

GM_Golden_kick_return::GM_Golden_kick_return(const GM_Golden_kick_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_kick_return::SharedCtor() {
  _cached_size_ = 0;
  errorid_ = 0;
  roleid_ = 0;
  makeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_kick_return::~GM_Golden_kick_return() {
  SharedDtor();
}

void GM_Golden_kick_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Golden_kick_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_kick_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_kick_return_descriptor_;
}

const GM_Golden_kick_return& GM_Golden_kick_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_kick_return* GM_Golden_kick_return::default_instance_ = NULL;

GM_Golden_kick_return* GM_Golden_kick_return::New() const {
  return new GM_Golden_kick_return;
}

void GM_Golden_kick_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorid_ = 0;
    roleid_ = 0;
    makeid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_kick_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorid_)));
          set_has_errorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // required int32 roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_makeid;
        break;
      }

      // optional int32 makeid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_makeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &makeid_)));
          set_has_makeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_kick_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorid(), output);
  }

  // required int32 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  // optional int32 makeid = 3;
  if (has_makeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->makeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_kick_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorid(), target);
  }

  // required int32 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleid(), target);
  }

  // optional int32 makeid = 3;
  if (has_makeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->makeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_kick_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorid = 1;
    if (has_errorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorid());
    }

    // required int32 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 makeid = 3;
    if (has_makeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->makeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_kick_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_kick_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_kick_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_kick_return::MergeFrom(const GM_Golden_kick_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorid()) {
      set_errorid(from.errorid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_makeid()) {
      set_makeid(from.makeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_kick_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_kick_return::CopyFrom(const GM_Golden_kick_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_kick_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_Golden_kick_return::Swap(GM_Golden_kick_return* other) {
  if (other != this) {
    std::swap(errorid_, other->errorid_);
    std::swap(roleid_, other->roleid_);
    std::swap(makeid_, other->makeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_kick_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_kick_return_descriptor_;
  metadata.reflection = GM_Golden_kick_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_switch_return::kErroridFieldNumber;
#endif  // !_MSC_VER

GM_Golden_switch_return::GM_Golden_switch_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_switch_return::InitAsDefaultInstance() {
}

GM_Golden_switch_return::GM_Golden_switch_return(const GM_Golden_switch_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_switch_return::SharedCtor() {
  _cached_size_ = 0;
  errorid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_switch_return::~GM_Golden_switch_return() {
  SharedDtor();
}

void GM_Golden_switch_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Golden_switch_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_switch_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_switch_return_descriptor_;
}

const GM_Golden_switch_return& GM_Golden_switch_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_switch_return* GM_Golden_switch_return::default_instance_ = NULL;

GM_Golden_switch_return* GM_Golden_switch_return::New() const {
  return new GM_Golden_switch_return;
}

void GM_Golden_switch_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_switch_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorid_)));
          set_has_errorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_switch_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_switch_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_switch_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorid = 1;
    if (has_errorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_switch_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_switch_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_switch_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_switch_return::MergeFrom(const GM_Golden_switch_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorid()) {
      set_errorid(from.errorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_switch_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_switch_return::CopyFrom(const GM_Golden_switch_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_switch_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Golden_switch_return::Swap(GM_Golden_switch_return* other) {
  if (other != this) {
    std::swap(errorid_, other->errorid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_switch_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_switch_return_descriptor_;
  metadata.reflection = GM_Golden_switch_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Golden_Notify_leave::kCopyidFieldNumber;
const int SM_Golden_Notify_leave::kFbidFieldNumber;
const int SM_Golden_Notify_leave::kRoleidFieldNumber;
#endif  // !_MSC_VER

SM_Golden_Notify_leave::SM_Golden_Notify_leave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Golden_Notify_leave::InitAsDefaultInstance() {
}

SM_Golden_Notify_leave::SM_Golden_Notify_leave(const SM_Golden_Notify_leave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Golden_Notify_leave::SharedCtor() {
  _cached_size_ = 0;
  copyid_ = 0;
  fbid_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Golden_Notify_leave::~SM_Golden_Notify_leave() {
  SharedDtor();
}

void SM_Golden_Notify_leave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Golden_Notify_leave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Golden_Notify_leave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Golden_Notify_leave_descriptor_;
}

const SM_Golden_Notify_leave& SM_Golden_Notify_leave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

SM_Golden_Notify_leave* SM_Golden_Notify_leave::default_instance_ = NULL;

SM_Golden_Notify_leave* SM_Golden_Notify_leave::New() const {
  return new SM_Golden_Notify_leave;
}

void SM_Golden_Notify_leave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copyid_ = 0;
    fbid_ = 0;
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Golden_Notify_leave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 copyid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copyid_)));
          set_has_copyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fbid;
        break;
      }

      // optional int32 fbid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fbid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fbid_)));
          set_has_fbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roleid;
        break;
      }

      // optional int32 roleid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Golden_Notify_leave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 copyid = 1;
  if (has_copyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->copyid(), output);
  }

  // optional int32 fbid = 2;
  if (has_fbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fbid(), output);
  }

  // optional int32 roleid = 3;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Golden_Notify_leave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 copyid = 1;
  if (has_copyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->copyid(), target);
  }

  // optional int32 fbid = 2;
  if (has_fbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fbid(), target);
  }

  // optional int32 roleid = 3;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Golden_Notify_leave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 copyid = 1;
    if (has_copyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copyid());
    }

    // optional int32 fbid = 2;
    if (has_fbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fbid());
    }

    // optional int32 roleid = 3;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Golden_Notify_leave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Golden_Notify_leave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Golden_Notify_leave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Golden_Notify_leave::MergeFrom(const SM_Golden_Notify_leave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copyid()) {
      set_copyid(from.copyid());
    }
    if (from.has_fbid()) {
      set_fbid(from.fbid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Golden_Notify_leave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Golden_Notify_leave::CopyFrom(const SM_Golden_Notify_leave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Golden_Notify_leave::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Golden_Notify_leave::Swap(SM_Golden_Notify_leave* other) {
  if (other != this) {
    std::swap(copyid_, other->copyid_);
    std::swap(fbid_, other->fbid_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Golden_Notify_leave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Golden_Notify_leave_descriptor_;
  metadata.reflection = SM_Golden_Notify_leave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GodlenMan_state::kRoleidFieldNumber;
const int GM_GodlenMan_state::kMGambleFieldNumber;
const int GM_GodlenMan_state::kMAbandonFieldNumber;
const int GM_GodlenMan_state::kMHascardFieldNumber;
const int GM_GodlenMan_state::kMIsCompareFieldNumber;
const int GM_GodlenMan_state::kMMoneyFieldNumber;
#endif  // !_MSC_VER

GM_GodlenMan_state::GM_GodlenMan_state()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GodlenMan_state::InitAsDefaultInstance() {
}

GM_GodlenMan_state::GM_GodlenMan_state(const GM_GodlenMan_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GodlenMan_state::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  m_gamble_ = 0;
  m_abandon_ = 0;
  m_hascard_ = 0;
  m_iscompare_ = 0;
  m_money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GodlenMan_state::~GM_GodlenMan_state() {
  SharedDtor();
}

void GM_GodlenMan_state::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GodlenMan_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GodlenMan_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GodlenMan_state_descriptor_;
}

const GM_GodlenMan_state& GM_GodlenMan_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_GodlenMan_state* GM_GodlenMan_state::default_instance_ = NULL;

GM_GodlenMan_state* GM_GodlenMan_state::New() const {
  return new GM_GodlenMan_state;
}

void GM_GodlenMan_state::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    m_gamble_ = 0;
    m_abandon_ = 0;
    m_hascard_ = 0;
    m_iscompare_ = 0;
    m_money_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GodlenMan_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_gamble;
        break;
      }

      // optional int32 m_gamble = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gamble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gamble_)));
          set_has_m_gamble();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_abandon;
        break;
      }

      // optional int32 m_abandon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_abandon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_abandon_)));
          set_has_m_abandon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_hascard;
        break;
      }

      // optional int32 m_hascard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_hascard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_hascard_)));
          set_has_m_hascard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_isCompare;
        break;
      }

      // optional int32 m_isCompare = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_isCompare:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_iscompare_)));
          set_has_m_iscompare();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_money;
        break;
      }

      // optional int32 m_money = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_money_)));
          set_has_m_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GodlenMan_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int32 m_gamble = 2;
  if (has_m_gamble()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_gamble(), output);
  }

  // optional int32 m_abandon = 3;
  if (has_m_abandon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_abandon(), output);
  }

  // optional int32 m_hascard = 4;
  if (has_m_hascard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_hascard(), output);
  }

  // optional int32 m_isCompare = 5;
  if (has_m_iscompare()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_iscompare(), output);
  }

  // optional int32 m_money = 6;
  if (has_m_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GodlenMan_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional int32 m_gamble = 2;
  if (has_m_gamble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_gamble(), target);
  }

  // optional int32 m_abandon = 3;
  if (has_m_abandon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_abandon(), target);
  }

  // optional int32 m_hascard = 4;
  if (has_m_hascard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_hascard(), target);
  }

  // optional int32 m_isCompare = 5;
  if (has_m_iscompare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_iscompare(), target);
  }

  // optional int32 m_money = 6;
  if (has_m_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GodlenMan_state::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 m_gamble = 2;
    if (has_m_gamble()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gamble());
    }

    // optional int32 m_abandon = 3;
    if (has_m_abandon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_abandon());
    }

    // optional int32 m_hascard = 4;
    if (has_m_hascard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_hascard());
    }

    // optional int32 m_isCompare = 5;
    if (has_m_iscompare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_iscompare());
    }

    // optional int32 m_money = 6;
    if (has_m_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GodlenMan_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GodlenMan_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GodlenMan_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GodlenMan_state::MergeFrom(const GM_GodlenMan_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_m_gamble()) {
      set_m_gamble(from.m_gamble());
    }
    if (from.has_m_abandon()) {
      set_m_abandon(from.m_abandon());
    }
    if (from.has_m_hascard()) {
      set_m_hascard(from.m_hascard());
    }
    if (from.has_m_iscompare()) {
      set_m_iscompare(from.m_iscompare());
    }
    if (from.has_m_money()) {
      set_m_money(from.m_money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GodlenMan_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GodlenMan_state::CopyFrom(const GM_GodlenMan_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GodlenMan_state::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_GodlenMan_state::Swap(GM_GodlenMan_state* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(m_gamble_, other->m_gamble_);
    std::swap(m_abandon_, other->m_abandon_);
    std::swap(m_hascard_, other->m_hascard_);
    std::swap(m_iscompare_, other->m_iscompare_);
    std::swap(m_money_, other->m_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GodlenMan_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GodlenMan_state_descriptor_;
  metadata.reflection = GM_GodlenMan_state_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GoldenRoom_state::kMSinggambleFieldNumber;
const int GM_GoldenRoom_state::kMTotalgambleFieldNumber;
const int GM_GoldenRoom_state::kMSingroleidFieldNumber;
const int GM_GoldenRoom_state::kMDataFieldNumber;
const int GM_GoldenRoom_state::kMGroupgambleFieldNumber;
const int GM_GoldenRoom_state::kMSingtimeFieldNumber;
const int GM_GoldenRoom_state::kMBoutFieldNumber;
#endif  // !_MSC_VER

GM_GoldenRoom_state::GM_GoldenRoom_state()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GoldenRoom_state::InitAsDefaultInstance() {
}

GM_GoldenRoom_state::GM_GoldenRoom_state(const GM_GoldenRoom_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GoldenRoom_state::SharedCtor() {
  _cached_size_ = 0;
  m_singgamble_ = 0;
  m_totalgamble_ = 0;
  m_singroleid_ = 0;
  m_singtime_ = 0;
  m_bout_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GoldenRoom_state::~GM_GoldenRoom_state() {
  SharedDtor();
}

void GM_GoldenRoom_state::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GoldenRoom_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GoldenRoom_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GoldenRoom_state_descriptor_;
}

const GM_GoldenRoom_state& GM_GoldenRoom_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_GoldenRoom_state* GM_GoldenRoom_state::default_instance_ = NULL;

GM_GoldenRoom_state* GM_GoldenRoom_state::New() const {
  return new GM_GoldenRoom_state;
}

void GM_GoldenRoom_state::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_singgamble_ = 0;
    m_totalgamble_ = 0;
    m_singroleid_ = 0;
    m_singtime_ = 0;
    m_bout_ = 0;
  }
  m_data_.Clear();
  m_groupgamble_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GoldenRoom_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_singgamble = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_singgamble_)));
          set_has_m_singgamble();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_totalgamble;
        break;
      }

      // optional int32 m_totalgamble = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_totalgamble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_totalgamble_)));
          set_has_m_totalgamble();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_Singroleid;
        break;
      }

      // optional int32 m_Singroleid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Singroleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_singroleid_)));
          set_has_m_singroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_data;
        break;
      }

      // repeated .GM_GodlenMan_state m_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_data;
        if (input->ExpectTag(40)) goto parse_m_groupgamble;
        break;
      }

      // repeated int32 m_groupgamble = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupgamble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_m_groupgamble())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_groupgamble())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_groupgamble;
        if (input->ExpectTag(48)) goto parse_m_singtime;
        break;
      }

      // optional int32 m_singtime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_singtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_singtime_)));
          set_has_m_singtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_bout;
        break;
      }

      // optional int32 m_bout = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bout_)));
          set_has_m_bout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GoldenRoom_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_singgamble = 1;
  if (has_m_singgamble()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_singgamble(), output);
  }

  // optional int32 m_totalgamble = 2;
  if (has_m_totalgamble()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_totalgamble(), output);
  }

  // optional int32 m_Singroleid = 3;
  if (has_m_singroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_singroleid(), output);
  }

  // repeated .GM_GodlenMan_state m_data = 4;
  for (int i = 0; i < this->m_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_data(i), output);
  }

  // repeated int32 m_groupgamble = 5;
  for (int i = 0; i < this->m_groupgamble_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->m_groupgamble(i), output);
  }

  // optional int32 m_singtime = 6;
  if (has_m_singtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_singtime(), output);
  }

  // optional int32 m_bout = 7;
  if (has_m_bout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_bout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GoldenRoom_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_singgamble = 1;
  if (has_m_singgamble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_singgamble(), target);
  }

  // optional int32 m_totalgamble = 2;
  if (has_m_totalgamble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_totalgamble(), target);
  }

  // optional int32 m_Singroleid = 3;
  if (has_m_singroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_singroleid(), target);
  }

  // repeated .GM_GodlenMan_state m_data = 4;
  for (int i = 0; i < this->m_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_data(i), target);
  }

  // repeated int32 m_groupgamble = 5;
  for (int i = 0; i < this->m_groupgamble_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->m_groupgamble(i), target);
  }

  // optional int32 m_singtime = 6;
  if (has_m_singtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_singtime(), target);
  }

  // optional int32 m_bout = 7;
  if (has_m_bout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_bout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GoldenRoom_state::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_singgamble = 1;
    if (has_m_singgamble()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_singgamble());
    }

    // optional int32 m_totalgamble = 2;
    if (has_m_totalgamble()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_totalgamble());
    }

    // optional int32 m_Singroleid = 3;
    if (has_m_singroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_singroleid());
    }

    // optional int32 m_singtime = 6;
    if (has_m_singtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_singtime());
    }

    // optional int32 m_bout = 7;
    if (has_m_bout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bout());
    }

  }
  // repeated .GM_GodlenMan_state m_data = 4;
  total_size += 1 * this->m_data_size();
  for (int i = 0; i < this->m_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_data(i));
  }

  // repeated int32 m_groupgamble = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_groupgamble_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_groupgamble(i));
    }
    total_size += 1 * this->m_groupgamble_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GoldenRoom_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GoldenRoom_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GoldenRoom_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GoldenRoom_state::MergeFrom(const GM_GoldenRoom_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_data_.MergeFrom(from.m_data_);
  m_groupgamble_.MergeFrom(from.m_groupgamble_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_singgamble()) {
      set_m_singgamble(from.m_singgamble());
    }
    if (from.has_m_totalgamble()) {
      set_m_totalgamble(from.m_totalgamble());
    }
    if (from.has_m_singroleid()) {
      set_m_singroleid(from.m_singroleid());
    }
    if (from.has_m_singtime()) {
      set_m_singtime(from.m_singtime());
    }
    if (from.has_m_bout()) {
      set_m_bout(from.m_bout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GoldenRoom_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GoldenRoom_state::CopyFrom(const GM_GoldenRoom_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GoldenRoom_state::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_data_size(); i++) {
    if (!this->m_data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_GoldenRoom_state::Swap(GM_GoldenRoom_state* other) {
  if (other != this) {
    std::swap(m_singgamble_, other->m_singgamble_);
    std::swap(m_totalgamble_, other->m_totalgamble_);
    std::swap(m_singroleid_, other->m_singroleid_);
    m_data_.Swap(&other->m_data_);
    m_groupgamble_.Swap(&other->m_groupgamble_);
    std::swap(m_singtime_, other->m_singtime_);
    std::swap(m_bout_, other->m_bout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GoldenRoom_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GoldenRoom_state_descriptor_;
  metadata.reflection = GM_GoldenRoom_state_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_offline_return::kRoleidFieldNumber;
#endif  // !_MSC_VER

GM_Golden_offline_return::GM_Golden_offline_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_offline_return::InitAsDefaultInstance() {
}

GM_Golden_offline_return::GM_Golden_offline_return(const GM_Golden_offline_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_offline_return::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_offline_return::~GM_Golden_offline_return() {
  SharedDtor();
}

void GM_Golden_offline_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Golden_offline_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_offline_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_offline_return_descriptor_;
}

const GM_Golden_offline_return& GM_Golden_offline_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_offline_return* GM_Golden_offline_return::default_instance_ = NULL;

GM_Golden_offline_return* GM_Golden_offline_return::New() const {
  return new GM_Golden_offline_return;
}

void GM_Golden_offline_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_offline_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_offline_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_offline_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_offline_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_offline_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_offline_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_offline_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_offline_return::MergeFrom(const GM_Golden_offline_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_offline_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_offline_return::CopyFrom(const GM_Golden_offline_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_offline_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Golden_offline_return::Swap(GM_Golden_offline_return* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_offline_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_offline_return_descriptor_;
  metadata.reflection = GM_Golden_offline_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Godlen_Charge_return::kRoleidFieldNumber;
#endif  // !_MSC_VER

GM_Godlen_Charge_return::GM_Godlen_Charge_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Godlen_Charge_return::InitAsDefaultInstance() {
}

GM_Godlen_Charge_return::GM_Godlen_Charge_return(const GM_Godlen_Charge_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Godlen_Charge_return::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Godlen_Charge_return::~GM_Godlen_Charge_return() {
  SharedDtor();
}

void GM_Godlen_Charge_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Godlen_Charge_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Godlen_Charge_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Godlen_Charge_return_descriptor_;
}

const GM_Godlen_Charge_return& GM_Godlen_Charge_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Godlen_Charge_return* GM_Godlen_Charge_return::default_instance_ = NULL;

GM_Godlen_Charge_return* GM_Godlen_Charge_return::New() const {
  return new GM_Godlen_Charge_return;
}

void GM_Godlen_Charge_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Godlen_Charge_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Godlen_Charge_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Godlen_Charge_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Godlen_Charge_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Godlen_Charge_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Godlen_Charge_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Godlen_Charge_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Godlen_Charge_return::MergeFrom(const GM_Godlen_Charge_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Godlen_Charge_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Godlen_Charge_return::CopyFrom(const GM_Godlen_Charge_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Godlen_Charge_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Godlen_Charge_return::Swap(GM_Godlen_Charge_return* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Godlen_Charge_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Godlen_Charge_return_descriptor_;
  metadata.reflection = GM_Godlen_Charge_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_prepare_request::kIdFieldNumber;
const int GM_Golden_prepare_request::kTypeFieldNumber;
#endif  // !_MSC_VER

GM_Golden_prepare_request::GM_Golden_prepare_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_prepare_request::InitAsDefaultInstance() {
}

GM_Golden_prepare_request::GM_Golden_prepare_request(const GM_Golden_prepare_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_prepare_request::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_prepare_request::~GM_Golden_prepare_request() {
  SharedDtor();
}

void GM_Golden_prepare_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Golden_prepare_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_prepare_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_prepare_request_descriptor_;
}

const GM_Golden_prepare_request& GM_Golden_prepare_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_prepare_request* GM_Golden_prepare_request::default_instance_ = NULL;

GM_Golden_prepare_request* GM_Golden_prepare_request::New() const {
  return new GM_Golden_prepare_request;
}

void GM_Golden_prepare_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_prepare_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_prepare_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_prepare_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_prepare_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_prepare_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_prepare_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_prepare_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_prepare_request::MergeFrom(const GM_Golden_prepare_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_prepare_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_prepare_request::CopyFrom(const GM_Golden_prepare_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_prepare_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Golden_prepare_request::Swap(GM_Golden_prepare_request* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_prepare_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_prepare_request_descriptor_;
  metadata.reflection = GM_Golden_prepare_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Godlen_prepare_return::kErroridFieldNumber;
const int GM_Godlen_prepare_return::kRoleidFieldNumber;
const int GM_Godlen_prepare_return::kTypeFieldNumber;
#endif  // !_MSC_VER

GM_Godlen_prepare_return::GM_Godlen_prepare_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Godlen_prepare_return::InitAsDefaultInstance() {
}

GM_Godlen_prepare_return::GM_Godlen_prepare_return(const GM_Godlen_prepare_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Godlen_prepare_return::SharedCtor() {
  _cached_size_ = 0;
  errorid_ = 0;
  roleid_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Godlen_prepare_return::~GM_Godlen_prepare_return() {
  SharedDtor();
}

void GM_Godlen_prepare_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Godlen_prepare_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Godlen_prepare_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Godlen_prepare_return_descriptor_;
}

const GM_Godlen_prepare_return& GM_Godlen_prepare_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Godlen_prepare_return* GM_Godlen_prepare_return::default_instance_ = NULL;

GM_Godlen_prepare_return* GM_Godlen_prepare_return::New() const {
  return new GM_Godlen_prepare_return;
}

void GM_Godlen_prepare_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorid_ = 0;
    roleid_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Godlen_prepare_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorid_)));
          set_has_errorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // optional int32 roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Godlen_prepare_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorid(), output);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Godlen_prepare_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorid(), target);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleid(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Godlen_prepare_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorid = 1;
    if (has_errorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorid());
    }

    // optional int32 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Godlen_prepare_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Godlen_prepare_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Godlen_prepare_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Godlen_prepare_return::MergeFrom(const GM_Godlen_prepare_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorid()) {
      set_errorid(from.errorid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Godlen_prepare_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Godlen_prepare_return::CopyFrom(const GM_Godlen_prepare_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Godlen_prepare_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Godlen_prepare_return::Swap(GM_Godlen_prepare_return* other) {
  if (other != this) {
    std::swap(errorid_, other->errorid_);
    std::swap(roleid_, other->roleid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Godlen_prepare_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Godlen_prepare_return_descriptor_;
  metadata.reflection = GM_Godlen_prepare_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_start_request::kIdFieldNumber;
#endif  // !_MSC_VER

GM_Golden_start_request::GM_Golden_start_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_start_request::InitAsDefaultInstance() {
}

GM_Golden_start_request::GM_Golden_start_request(const GM_Golden_start_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_start_request::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_start_request::~GM_Golden_start_request() {
  SharedDtor();
}

void GM_Golden_start_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Golden_start_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_start_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_start_request_descriptor_;
}

const GM_Golden_start_request& GM_Golden_start_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_start_request* GM_Golden_start_request::default_instance_ = NULL;

GM_Golden_start_request* GM_Golden_start_request::New() const {
  return new GM_Golden_start_request;
}

void GM_Golden_start_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_start_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_start_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_start_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_start_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_start_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_start_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_start_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_start_request::MergeFrom(const GM_Golden_start_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_start_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_start_request::CopyFrom(const GM_Golden_start_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_start_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Golden_start_request::Swap(GM_Golden_start_request* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_start_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_start_request_descriptor_;
  metadata.reflection = GM_Golden_start_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Godlen_start_return::kErroridFieldNumber;
const int GM_Godlen_start_return::kRoleidFieldNumber;
const int GM_Godlen_start_return::kLasttimeFieldNumber;
#endif  // !_MSC_VER

GM_Godlen_start_return::GM_Godlen_start_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Godlen_start_return::InitAsDefaultInstance() {
}

GM_Godlen_start_return::GM_Godlen_start_return(const GM_Godlen_start_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Godlen_start_return::SharedCtor() {
  _cached_size_ = 0;
  errorid_ = 0;
  roleid_ = 0;
  lasttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Godlen_start_return::~GM_Godlen_start_return() {
  SharedDtor();
}

void GM_Godlen_start_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Godlen_start_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Godlen_start_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Godlen_start_return_descriptor_;
}

const GM_Godlen_start_return& GM_Godlen_start_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Godlen_start_return* GM_Godlen_start_return::default_instance_ = NULL;

GM_Godlen_start_return* GM_Godlen_start_return::New() const {
  return new GM_Godlen_start_return;
}

void GM_Godlen_start_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorid_ = 0;
    roleid_ = 0;
    lasttime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Godlen_start_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorid_)));
          set_has_errorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // optional int32 roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lasttime;
        break;
      }

      // optional int32 lasttime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lasttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Godlen_start_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorid(), output);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  // optional int32 lasttime = 3;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lasttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Godlen_start_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorid(), target);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleid(), target);
  }

  // optional int32 lasttime = 3;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lasttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Godlen_start_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorid = 1;
    if (has_errorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorid());
    }

    // optional int32 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 lasttime = 3;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Godlen_start_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Godlen_start_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Godlen_start_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Godlen_start_return::MergeFrom(const GM_Godlen_start_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorid()) {
      set_errorid(from.errorid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Godlen_start_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Godlen_start_return::CopyFrom(const GM_Godlen_start_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Godlen_start_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Godlen_start_return::Swap(GM_Godlen_start_return* other) {
  if (other != this) {
    std::swap(errorid_, other->errorid_);
    std::swap(roleid_, other->roleid_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Godlen_start_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Godlen_start_return_descriptor_;
  metadata.reflection = GM_Godlen_start_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_charge_request::kTypechargeFieldNumber;
#endif  // !_MSC_VER

GM_Golden_charge_request::GM_Golden_charge_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_charge_request::InitAsDefaultInstance() {
}

GM_Golden_charge_request::GM_Golden_charge_request(const GM_Golden_charge_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_charge_request::SharedCtor() {
  _cached_size_ = 0;
  typecharge_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_charge_request::~GM_Golden_charge_request() {
  SharedDtor();
}

void GM_Golden_charge_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Golden_charge_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_charge_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_charge_request_descriptor_;
}

const GM_Golden_charge_request& GM_Golden_charge_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_charge_request* GM_Golden_charge_request::default_instance_ = NULL;

GM_Golden_charge_request* GM_Golden_charge_request::New() const {
  return new GM_Golden_charge_request;
}

void GM_Golden_charge_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    typecharge_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_charge_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 typecharge = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typecharge_)));
          set_has_typecharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_charge_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 typecharge = 1;
  if (has_typecharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->typecharge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_charge_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 typecharge = 1;
  if (has_typecharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->typecharge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_charge_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 typecharge = 1;
    if (has_typecharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typecharge());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_charge_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_charge_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_charge_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_charge_request::MergeFrom(const GM_Golden_charge_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typecharge()) {
      set_typecharge(from.typecharge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_charge_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_charge_request::CopyFrom(const GM_Golden_charge_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_charge_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Golden_charge_request::Swap(GM_Golden_charge_request* other) {
  if (other != this) {
    std::swap(typecharge_, other->typecharge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_charge_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_charge_request_descriptor_;
  metadata.reflection = GM_Golden_charge_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Godlen_room_role::kRoleidFieldNumber;
#endif  // !_MSC_VER

GM_Godlen_room_role::GM_Godlen_room_role()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Godlen_room_role::InitAsDefaultInstance() {
}

GM_Godlen_room_role::GM_Godlen_room_role(const GM_Godlen_room_role& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Godlen_room_role::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Godlen_room_role::~GM_Godlen_room_role() {
  SharedDtor();
}

void GM_Godlen_room_role::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Godlen_room_role::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Godlen_room_role::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Godlen_room_role_descriptor_;
}

const GM_Godlen_room_role& GM_Godlen_room_role::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Godlen_room_role* GM_Godlen_room_role::default_instance_ = NULL;

GM_Godlen_room_role* GM_Godlen_room_role::New() const {
  return new GM_Godlen_room_role;
}

void GM_Godlen_room_role::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Godlen_room_role::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Godlen_room_role::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Godlen_room_role::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Godlen_room_role::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Godlen_room_role::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Godlen_room_role* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Godlen_room_role*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Godlen_room_role::MergeFrom(const GM_Godlen_room_role& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Godlen_room_role::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Godlen_room_role::CopyFrom(const GM_Godlen_room_role& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Godlen_room_role::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Godlen_room_role::Swap(GM_Godlen_room_role* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Godlen_room_role::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Godlen_room_role_descriptor_;
  metadata.reflection = GM_Godlen_room_role_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Golden_roomcard_return::kMonsteridFieldNumber;
const int GM_Golden_roomcard_return::kRoomidFieldNumber;
const int GM_Golden_roomcard_return::kCopyidFieldNumber;
const int GM_Golden_roomcard_return::kRateFieldNumber;
const int GM_Golden_roomcard_return::kRoleinfoFieldNumber;
#endif  // !_MSC_VER

GM_Golden_roomcard_return::GM_Golden_roomcard_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Golden_roomcard_return::InitAsDefaultInstance() {
}

GM_Golden_roomcard_return::GM_Golden_roomcard_return(const GM_Golden_roomcard_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Golden_roomcard_return::SharedCtor() {
  _cached_size_ = 0;
  monsterid_ = 0;
  roomid_ = 0;
  copyid_ = 0;
  rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Golden_roomcard_return::~GM_Golden_roomcard_return() {
  SharedDtor();
}

void GM_Golden_roomcard_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Golden_roomcard_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Golden_roomcard_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Golden_roomcard_return_descriptor_;
}

const GM_Golden_roomcard_return& GM_Golden_roomcard_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Golden_2etxt();
  return *default_instance_;
}

GM_Golden_roomcard_return* GM_Golden_roomcard_return::default_instance_ = NULL;

GM_Golden_roomcard_return* GM_Golden_roomcard_return::New() const {
  return new GM_Golden_roomcard_return;
}

void GM_Golden_roomcard_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monsterid_ = 0;
    roomid_ = 0;
    copyid_ = 0;
    rate_ = 0;
  }
  roleinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Golden_roomcard_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 monsterid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // required int32 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_copyid;
        break;
      }

      // optional int32 copyid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copyid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copyid_)));
          set_has_copyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rate;
        break;
      }

      // optional int32 rate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_roleinfo;
        break;
      }

      // repeated .GM_Godlen_room_role roleinfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_roleinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Golden_roomcard_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 monsterid = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->monsterid(), output);
  }

  // required int32 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // optional int32 copyid = 3;
  if (has_copyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->copyid(), output);
  }

  // optional int32 rate = 4;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rate(), output);
  }

  // repeated .GM_Godlen_room_role roleinfo = 5;
  for (int i = 0; i < this->roleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->roleinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Golden_roomcard_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 monsterid = 1;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->monsterid(), target);
  }

  // required int32 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // optional int32 copyid = 3;
  if (has_copyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->copyid(), target);
  }

  // optional int32 rate = 4;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rate(), target);
  }

  // repeated .GM_Godlen_room_role roleinfo = 5;
  for (int i = 0; i < this->roleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->roleinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Golden_roomcard_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 monsterid = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monsterid());
    }

    // required int32 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 copyid = 3;
    if (has_copyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copyid());
    }

    // optional int32 rate = 4;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

  }
  // repeated .GM_Godlen_room_role roleinfo = 5;
  total_size += 1 * this->roleinfo_size();
  for (int i = 0; i < this->roleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roleinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Golden_roomcard_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Golden_roomcard_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Golden_roomcard_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Golden_roomcard_return::MergeFrom(const GM_Golden_roomcard_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleinfo_.MergeFrom(from.roleinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_copyid()) {
      set_copyid(from.copyid());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Golden_roomcard_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Golden_roomcard_return::CopyFrom(const GM_Golden_roomcard_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Golden_roomcard_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < roleinfo_size(); i++) {
    if (!this->roleinfo(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Golden_roomcard_return::Swap(GM_Golden_roomcard_return* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(roomid_, other->roomid_);
    std::swap(copyid_, other->copyid_);
    std::swap(rate_, other->rate_);
    roleinfo_.Swap(&other->roleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Golden_roomcard_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Golden_roomcard_return_descriptor_;
  metadata.reflection = GM_Golden_roomcard_return_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
