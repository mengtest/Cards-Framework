// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_Fish.txt

#ifndef PROTOBUF_SP_5fFish_2etxt__INCLUDED
#define PROTOBUF_SP_5fFish_2etxt__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SP_5fFish_2etxt();
void protobuf_AssignDesc_SP_5fFish_2etxt();
void protobuf_ShutdownFile_SP_5fFish_2etxt();

class SM_FishDb_request;
class SM_FishDb_return;
class SM_Fish_CommonDb;
class SM_Fish_Common_info;
class SM_Fish_Common_return;

// ===================================================================

class SM_FishDb_request : public ::google::protobuf::Message {
 public:
  SM_FishDb_request();
  virtual ~SM_FishDb_request();

  SM_FishDb_request(const SM_FishDb_request& from);

  inline SM_FishDb_request& operator=(const SM_FishDb_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_FishDb_request& default_instance();

  void Swap(SM_FishDb_request* other);

  // implements Message ----------------------------------------------

  SM_FishDb_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_FishDb_request& from);
  void MergeFrom(const SM_FishDb_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SM_FishDb_request)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fFish_2etxt();
  friend void protobuf_AssignDesc_SP_5fFish_2etxt();
  friend void protobuf_ShutdownFile_SP_5fFish_2etxt();

  void InitAsDefaultInstance();
  static SM_FishDb_request* default_instance_;
};
// -------------------------------------------------------------------

class SM_FishDb_return : public ::google::protobuf::Message {
 public:
  SM_FishDb_return();
  virtual ~SM_FishDb_return();

  SM_FishDb_return(const SM_FishDb_return& from);

  inline SM_FishDb_return& operator=(const SM_FishDb_return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_FishDb_return& default_instance();

  void Swap(SM_FishDb_return* other);

  // implements Message ----------------------------------------------

  SM_FishDb_return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_FishDb_return& from);
  void MergeFrom(const SM_FishDb_return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional string debockgun = 2;
  inline bool has_debockgun() const;
  inline void clear_debockgun();
  static const int kDebockgunFieldNumber = 2;
  inline const ::std::string& debockgun() const;
  inline void set_debockgun(const ::std::string& value);
  inline void set_debockgun(const char* value);
  inline void set_debockgun(const char* value, size_t size);
  inline ::std::string* mutable_debockgun();
  inline ::std::string* release_debockgun();
  inline void set_allocated_debockgun(::std::string* debockgun);

  // optional int32 gunid = 3;
  inline bool has_gunid() const;
  inline void clear_gunid();
  static const int kGunidFieldNumber = 3;
  inline ::google::protobuf::int32 gunid() const;
  inline void set_gunid(::google::protobuf::int32 value);

  // optional int32 debolckrate = 4;
  inline bool has_debolckrate() const;
  inline void clear_debolckrate();
  static const int kDebolckrateFieldNumber = 4;
  inline ::google::protobuf::int32 debolckrate() const;
  inline void set_debolckrate(::google::protobuf::int32 value);

  // optional int32 rate = 5;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 5;
  inline ::google::protobuf::int32 rate() const;
  inline void set_rate(::google::protobuf::int32 value);

  // optional int32 power = 6;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 6;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SM_FishDb_return)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_debockgun();
  inline void clear_has_debockgun();
  inline void set_has_gunid();
  inline void clear_has_gunid();
  inline void set_has_debolckrate();
  inline void clear_has_debolckrate();
  inline void set_has_rate();
  inline void clear_has_rate();
  inline void set_has_power();
  inline void clear_has_power();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* debockgun_;
  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 gunid_;
  ::google::protobuf::int32 debolckrate_;
  ::google::protobuf::int32 rate_;
  ::google::protobuf::int32 power_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fFish_2etxt();
  friend void protobuf_AssignDesc_SP_5fFish_2etxt();
  friend void protobuf_ShutdownFile_SP_5fFish_2etxt();

  void InitAsDefaultInstance();
  static SM_FishDb_return* default_instance_;
};
// -------------------------------------------------------------------

class SM_Fish_CommonDb : public ::google::protobuf::Message {
 public:
  SM_Fish_CommonDb();
  virtual ~SM_Fish_CommonDb();

  SM_Fish_CommonDb(const SM_Fish_CommonDb& from);

  inline SM_Fish_CommonDb& operator=(const SM_Fish_CommonDb& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_Fish_CommonDb& default_instance();

  void Swap(SM_Fish_CommonDb* other);

  // implements Message ----------------------------------------------

  SM_Fish_CommonDb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_Fish_CommonDb& from);
  void MergeFrom(const SM_Fish_CommonDb& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SM_Fish_CommonDb)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fFish_2etxt();
  friend void protobuf_AssignDesc_SP_5fFish_2etxt();
  friend void protobuf_ShutdownFile_SP_5fFish_2etxt();

  void InitAsDefaultInstance();
  static SM_Fish_CommonDb* default_instance_;
};
// -------------------------------------------------------------------

class SM_Fish_Common_info : public ::google::protobuf::Message {
 public:
  SM_Fish_Common_info();
  virtual ~SM_Fish_Common_info();

  SM_Fish_Common_info(const SM_Fish_Common_info& from);

  inline SM_Fish_Common_info& operator=(const SM_Fish_Common_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_Fish_Common_info& default_instance();

  void Swap(SM_Fish_Common_info* other);

  // implements Message ----------------------------------------------

  SM_Fish_Common_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_Fish_Common_info& from);
  void MergeFrom(const SM_Fish_Common_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type_id = 1;
  inline bool has_type_id() const;
  inline void clear_type_id();
  static const int kTypeIdFieldNumber = 1;
  inline ::google::protobuf::int32 type_id() const;
  inline void set_type_id(::google::protobuf::int32 value);

  // optional int32 type_value = 2;
  inline bool has_type_value() const;
  inline void clear_type_value();
  static const int kTypeValueFieldNumber = 2;
  inline ::google::protobuf::int32 type_value() const;
  inline void set_type_value(::google::protobuf::int32 value);

  // optional int32 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SM_Fish_Common_info)
 private:
  inline void set_has_type_id();
  inline void clear_has_type_id();
  inline void set_has_type_value();
  inline void clear_has_type_value();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_id_;
  ::google::protobuf::int32 type_value_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fFish_2etxt();
  friend void protobuf_AssignDesc_SP_5fFish_2etxt();
  friend void protobuf_ShutdownFile_SP_5fFish_2etxt();

  void InitAsDefaultInstance();
  static SM_Fish_Common_info* default_instance_;
};
// -------------------------------------------------------------------

class SM_Fish_Common_return : public ::google::protobuf::Message {
 public:
  SM_Fish_Common_return();
  virtual ~SM_Fish_Common_return();

  SM_Fish_Common_return(const SM_Fish_Common_return& from);

  inline SM_Fish_Common_return& operator=(const SM_Fish_Common_return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_Fish_Common_return& default_instance();

  void Swap(SM_Fish_Common_return* other);

  // implements Message ----------------------------------------------

  SM_Fish_Common_return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_Fish_Common_return& from);
  void MergeFrom(const SM_Fish_Common_return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // repeated .SM_Fish_Common_info data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::SM_Fish_Common_info& data(int index) const;
  inline ::SM_Fish_Common_info* mutable_data(int index);
  inline ::SM_Fish_Common_info* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SM_Fish_Common_info >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SM_Fish_Common_info >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:SM_Fish_Common_return)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SM_Fish_Common_info > data_;
  ::google::protobuf::int32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fFish_2etxt();
  friend void protobuf_AssignDesc_SP_5fFish_2etxt();
  friend void protobuf_ShutdownFile_SP_5fFish_2etxt();

  void InitAsDefaultInstance();
  static SM_Fish_Common_return* default_instance_;
};
// ===================================================================


// ===================================================================

// SM_FishDb_request

// required int32 roleid = 1;
inline bool SM_FishDb_request::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_FishDb_request::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_FishDb_request::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_FishDb_request::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 SM_FishDb_request::roleid() const {
  return roleid_;
}
inline void SM_FishDb_request::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// -------------------------------------------------------------------

// SM_FishDb_return

// required int32 roleid = 1;
inline bool SM_FishDb_return::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_FishDb_return::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_FishDb_return::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_FishDb_return::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 SM_FishDb_return::roleid() const {
  return roleid_;
}
inline void SM_FishDb_return::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional string debockgun = 2;
inline bool SM_FishDb_return::has_debockgun() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_FishDb_return::set_has_debockgun() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_FishDb_return::clear_has_debockgun() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_FishDb_return::clear_debockgun() {
  if (debockgun_ != &::google::protobuf::internal::kEmptyString) {
    debockgun_->clear();
  }
  clear_has_debockgun();
}
inline const ::std::string& SM_FishDb_return::debockgun() const {
  return *debockgun_;
}
inline void SM_FishDb_return::set_debockgun(const ::std::string& value) {
  set_has_debockgun();
  if (debockgun_ == &::google::protobuf::internal::kEmptyString) {
    debockgun_ = new ::std::string;
  }
  debockgun_->assign(value);
}
inline void SM_FishDb_return::set_debockgun(const char* value) {
  set_has_debockgun();
  if (debockgun_ == &::google::protobuf::internal::kEmptyString) {
    debockgun_ = new ::std::string;
  }
  debockgun_->assign(value);
}
inline void SM_FishDb_return::set_debockgun(const char* value, size_t size) {
  set_has_debockgun();
  if (debockgun_ == &::google::protobuf::internal::kEmptyString) {
    debockgun_ = new ::std::string;
  }
  debockgun_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SM_FishDb_return::mutable_debockgun() {
  set_has_debockgun();
  if (debockgun_ == &::google::protobuf::internal::kEmptyString) {
    debockgun_ = new ::std::string;
  }
  return debockgun_;
}
inline ::std::string* SM_FishDb_return::release_debockgun() {
  clear_has_debockgun();
  if (debockgun_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = debockgun_;
    debockgun_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SM_FishDb_return::set_allocated_debockgun(::std::string* debockgun) {
  if (debockgun_ != &::google::protobuf::internal::kEmptyString) {
    delete debockgun_;
  }
  if (debockgun) {
    set_has_debockgun();
    debockgun_ = debockgun;
  } else {
    clear_has_debockgun();
    debockgun_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 gunid = 3;
inline bool SM_FishDb_return::has_gunid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SM_FishDb_return::set_has_gunid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SM_FishDb_return::clear_has_gunid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SM_FishDb_return::clear_gunid() {
  gunid_ = 0;
  clear_has_gunid();
}
inline ::google::protobuf::int32 SM_FishDb_return::gunid() const {
  return gunid_;
}
inline void SM_FishDb_return::set_gunid(::google::protobuf::int32 value) {
  set_has_gunid();
  gunid_ = value;
}

// optional int32 debolckrate = 4;
inline bool SM_FishDb_return::has_debolckrate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SM_FishDb_return::set_has_debolckrate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SM_FishDb_return::clear_has_debolckrate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SM_FishDb_return::clear_debolckrate() {
  debolckrate_ = 0;
  clear_has_debolckrate();
}
inline ::google::protobuf::int32 SM_FishDb_return::debolckrate() const {
  return debolckrate_;
}
inline void SM_FishDb_return::set_debolckrate(::google::protobuf::int32 value) {
  set_has_debolckrate();
  debolckrate_ = value;
}

// optional int32 rate = 5;
inline bool SM_FishDb_return::has_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SM_FishDb_return::set_has_rate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SM_FishDb_return::clear_has_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SM_FishDb_return::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
inline ::google::protobuf::int32 SM_FishDb_return::rate() const {
  return rate_;
}
inline void SM_FishDb_return::set_rate(::google::protobuf::int32 value) {
  set_has_rate();
  rate_ = value;
}

// optional int32 power = 6;
inline bool SM_FishDb_return::has_power() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SM_FishDb_return::set_has_power() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SM_FishDb_return::clear_has_power() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SM_FishDb_return::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 SM_FishDb_return::power() const {
  return power_;
}
inline void SM_FishDb_return::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// -------------------------------------------------------------------

// SM_Fish_CommonDb

// required int32 roleid = 1;
inline bool SM_Fish_CommonDb::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_Fish_CommonDb::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_Fish_CommonDb::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_Fish_CommonDb::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 SM_Fish_CommonDb::roleid() const {
  return roleid_;
}
inline void SM_Fish_CommonDb::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// -------------------------------------------------------------------

// SM_Fish_Common_info

// required int32 type_id = 1;
inline bool SM_Fish_Common_info::has_type_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_Fish_Common_info::set_has_type_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_Fish_Common_info::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_Fish_Common_info::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
inline ::google::protobuf::int32 SM_Fish_Common_info::type_id() const {
  return type_id_;
}
inline void SM_Fish_Common_info::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
}

// optional int32 type_value = 2;
inline bool SM_Fish_Common_info::has_type_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_Fish_Common_info::set_has_type_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_Fish_Common_info::clear_has_type_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_Fish_Common_info::clear_type_value() {
  type_value_ = 0;
  clear_has_type_value();
}
inline ::google::protobuf::int32 SM_Fish_Common_info::type_value() const {
  return type_value_;
}
inline void SM_Fish_Common_info::set_type_value(::google::protobuf::int32 value) {
  set_has_type_value();
  type_value_ = value;
}

// optional int32 value = 3;
inline bool SM_Fish_Common_info::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SM_Fish_Common_info::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SM_Fish_Common_info::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SM_Fish_Common_info::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 SM_Fish_Common_info::value() const {
  return value_;
}
inline void SM_Fish_Common_info::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// SM_Fish_Common_return

// required int32 roleid = 1;
inline bool SM_Fish_Common_return::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_Fish_Common_return::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_Fish_Common_return::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_Fish_Common_return::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 SM_Fish_Common_return::roleid() const {
  return roleid_;
}
inline void SM_Fish_Common_return::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// repeated .SM_Fish_Common_info data = 2;
inline int SM_Fish_Common_return::data_size() const {
  return data_.size();
}
inline void SM_Fish_Common_return::clear_data() {
  data_.Clear();
}
inline const ::SM_Fish_Common_info& SM_Fish_Common_return::data(int index) const {
  return data_.Get(index);
}
inline ::SM_Fish_Common_info* SM_Fish_Common_return::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::SM_Fish_Common_info* SM_Fish_Common_return::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SM_Fish_Common_info >&
SM_Fish_Common_return::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SM_Fish_Common_info >*
SM_Fish_Common_return::mutable_data() {
  return &data_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_SP_5fFish_2etxt__INCLUDED
