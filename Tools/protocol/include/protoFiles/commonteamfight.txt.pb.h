// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commonteamfight.txt

#ifndef PROTOBUF_commonteamfight_2etxt__INCLUDED
#define PROTOBUF_commonteamfight_2etxt__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_commonteamfight_2etxt();
void protobuf_AssignDesc_commonteamfight_2etxt();
void protobuf_ShutdownFile_commonteamfight_2etxt();

class GMFirstBloodPerson;
class GMFirstBloodRequest;
class GMFirstBloodResult;
class GMFightMatch;
class GMMatchOperResult;
class GMMatchingNotify;

// ===================================================================

class GMFirstBloodPerson : public ::google::protobuf::Message {
 public:
  GMFirstBloodPerson();
  virtual ~GMFirstBloodPerson();

  GMFirstBloodPerson(const GMFirstBloodPerson& from);

  inline GMFirstBloodPerson& operator=(const GMFirstBloodPerson& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMFirstBloodPerson& default_instance();

  void Swap(GMFirstBloodPerson* other);

  // implements Message ----------------------------------------------

  GMFirstBloodPerson* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMFirstBloodPerson& from);
  void MergeFrom(const GMFirstBloodPerson& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string rolename = 1;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRolenameFieldNumber = 1;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // required int32 rolelv = 2;
  inline bool has_rolelv() const;
  inline void clear_rolelv();
  static const int kRolelvFieldNumber = 2;
  inline ::google::protobuf::int32 rolelv() const;
  inline void set_rolelv(::google::protobuf::int32 value);

  // required int32 fightvalue = 3;
  inline bool has_fightvalue() const;
  inline void clear_fightvalue();
  static const int kFightvalueFieldNumber = 3;
  inline ::google::protobuf::int32 fightvalue() const;
  inline void set_fightvalue(::google::protobuf::int32 value);

  // required int64 killtime = 4;
  inline bool has_killtime() const;
  inline void clear_killtime();
  static const int kKilltimeFieldNumber = 4;
  inline ::google::protobuf::int64 killtime() const;
  inline void set_killtime(::google::protobuf::int64 value);

  // required int32 profession = 5;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 5;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GMFirstBloodPerson)
 private:
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_rolelv();
  inline void clear_has_rolelv();
  inline void set_has_fightvalue();
  inline void clear_has_fightvalue();
  inline void set_has_killtime();
  inline void clear_has_killtime();
  inline void set_has_profession();
  inline void clear_has_profession();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* rolename_;
  ::google::protobuf::int32 rolelv_;
  ::google::protobuf::int32 fightvalue_;
  ::google::protobuf::int64 killtime_;
  ::google::protobuf::int32 profession_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_commonteamfight_2etxt();
  friend void protobuf_AssignDesc_commonteamfight_2etxt();
  friend void protobuf_ShutdownFile_commonteamfight_2etxt();

  void InitAsDefaultInstance();
  static GMFirstBloodPerson* default_instance_;
};
// -------------------------------------------------------------------

class GMFirstBloodRequest : public ::google::protobuf::Message {
 public:
  GMFirstBloodRequest();
  virtual ~GMFirstBloodRequest();

  GMFirstBloodRequest(const GMFirstBloodRequest& from);

  inline GMFirstBloodRequest& operator=(const GMFirstBloodRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMFirstBloodRequest& default_instance();

  void Swap(GMFirstBloodRequest* other);

  // implements Message ----------------------------------------------

  GMFirstBloodRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMFirstBloodRequest& from);
  void MergeFrom(const GMFirstBloodRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_fbtypeid = 1;
  inline bool has_m_fbtypeid() const;
  inline void clear_m_fbtypeid();
  static const int kMFbtypeidFieldNumber = 1;
  inline ::google::protobuf::int32 m_fbtypeid() const;
  inline void set_m_fbtypeid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GMFirstBloodRequest)
 private:
  inline void set_has_m_fbtypeid();
  inline void clear_has_m_fbtypeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_fbtypeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_commonteamfight_2etxt();
  friend void protobuf_AssignDesc_commonteamfight_2etxt();
  friend void protobuf_ShutdownFile_commonteamfight_2etxt();

  void InitAsDefaultInstance();
  static GMFirstBloodRequest* default_instance_;
};
// -------------------------------------------------------------------

class GMFirstBloodResult : public ::google::protobuf::Message {
 public:
  GMFirstBloodResult();
  virtual ~GMFirstBloodResult();

  GMFirstBloodResult(const GMFirstBloodResult& from);

  inline GMFirstBloodResult& operator=(const GMFirstBloodResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMFirstBloodResult& default_instance();

  void Swap(GMFirstBloodResult* other);

  // implements Message ----------------------------------------------

  GMFirstBloodResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMFirstBloodResult& from);
  void MergeFrom(const GMFirstBloodResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_result = 1;
  inline bool has_m_result() const;
  inline void clear_m_result();
  static const int kMResultFieldNumber = 1;
  inline ::google::protobuf::int32 m_result() const;
  inline void set_m_result(::google::protobuf::int32 value);

  // required int32 m_fbtypeid = 2;
  inline bool has_m_fbtypeid() const;
  inline void clear_m_fbtypeid();
  static const int kMFbtypeidFieldNumber = 2;
  inline ::google::protobuf::int32 m_fbtypeid() const;
  inline void set_m_fbtypeid(::google::protobuf::int32 value);

  // repeated .GMFirstBloodPerson m_person = 3;
  inline int m_person_size() const;
  inline void clear_m_person();
  static const int kMPersonFieldNumber = 3;
  inline const ::GMFirstBloodPerson& m_person(int index) const;
  inline ::GMFirstBloodPerson* mutable_m_person(int index);
  inline ::GMFirstBloodPerson* add_m_person();
  inline const ::google::protobuf::RepeatedPtrField< ::GMFirstBloodPerson >&
      m_person() const;
  inline ::google::protobuf::RepeatedPtrField< ::GMFirstBloodPerson >*
      mutable_m_person();

  // @@protoc_insertion_point(class_scope:GMFirstBloodResult)
 private:
  inline void set_has_m_result();
  inline void clear_has_m_result();
  inline void set_has_m_fbtypeid();
  inline void clear_has_m_fbtypeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_result_;
  ::google::protobuf::int32 m_fbtypeid_;
  ::google::protobuf::RepeatedPtrField< ::GMFirstBloodPerson > m_person_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_commonteamfight_2etxt();
  friend void protobuf_AssignDesc_commonteamfight_2etxt();
  friend void protobuf_ShutdownFile_commonteamfight_2etxt();

  void InitAsDefaultInstance();
  static GMFirstBloodResult* default_instance_;
};
// -------------------------------------------------------------------

class GMFightMatch : public ::google::protobuf::Message {
 public:
  GMFightMatch();
  virtual ~GMFightMatch();

  GMFightMatch(const GMFightMatch& from);

  inline GMFightMatch& operator=(const GMFightMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMFightMatch& default_instance();

  void Swap(GMFightMatch* other);

  // implements Message ----------------------------------------------

  GMFightMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMFightMatch& from);
  void MergeFrom(const GMFightMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_teamid = 1;
  inline bool has_m_teamid() const;
  inline void clear_m_teamid();
  static const int kMTeamidFieldNumber = 1;
  inline ::google::protobuf::int32 m_teamid() const;
  inline void set_m_teamid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GMFightMatch)
 private:
  inline void set_has_m_teamid();
  inline void clear_has_m_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_teamid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_commonteamfight_2etxt();
  friend void protobuf_AssignDesc_commonteamfight_2etxt();
  friend void protobuf_ShutdownFile_commonteamfight_2etxt();

  void InitAsDefaultInstance();
  static GMFightMatch* default_instance_;
};
// -------------------------------------------------------------------

class GMMatchOperResult : public ::google::protobuf::Message {
 public:
  GMMatchOperResult();
  virtual ~GMMatchOperResult();

  GMMatchOperResult(const GMMatchOperResult& from);

  inline GMMatchOperResult& operator=(const GMMatchOperResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMMatchOperResult& default_instance();

  void Swap(GMMatchOperResult* other);

  // implements Message ----------------------------------------------

  GMMatchOperResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMMatchOperResult& from);
  void MergeFrom(const GMMatchOperResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_result = 1;
  inline bool has_m_result() const;
  inline void clear_m_result();
  static const int kMResultFieldNumber = 1;
  inline ::google::protobuf::int32 m_result() const;
  inline void set_m_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GMMatchOperResult)
 private:
  inline void set_has_m_result();
  inline void clear_has_m_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_commonteamfight_2etxt();
  friend void protobuf_AssignDesc_commonteamfight_2etxt();
  friend void protobuf_ShutdownFile_commonteamfight_2etxt();

  void InitAsDefaultInstance();
  static GMMatchOperResult* default_instance_;
};
// -------------------------------------------------------------------

class GMMatchingNotify : public ::google::protobuf::Message {
 public:
  GMMatchingNotify();
  virtual ~GMMatchingNotify();

  GMMatchingNotify(const GMMatchingNotify& from);

  inline GMMatchingNotify& operator=(const GMMatchingNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMMatchingNotify& default_instance();

  void Swap(GMMatchingNotify* other);

  // implements Message ----------------------------------------------

  GMMatchingNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMMatchingNotify& from);
  void MergeFrom(const GMMatchingNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_result = 1;
  inline bool has_m_result() const;
  inline void clear_m_result();
  static const int kMResultFieldNumber = 1;
  inline ::google::protobuf::int32 m_result() const;
  inline void set_m_result(::google::protobuf::int32 value);

  // required int32 m_teamid = 2;
  inline bool has_m_teamid() const;
  inline void clear_m_teamid();
  static const int kMTeamidFieldNumber = 2;
  inline ::google::protobuf::int32 m_teamid() const;
  inline void set_m_teamid(::google::protobuf::int32 value);

  // required string m_name = 3;
  inline bool has_m_name() const;
  inline void clear_m_name();
  static const int kMNameFieldNumber = 3;
  inline const ::std::string& m_name() const;
  inline void set_m_name(const ::std::string& value);
  inline void set_m_name(const char* value);
  inline void set_m_name(const char* value, size_t size);
  inline ::std::string* mutable_m_name();
  inline ::std::string* release_m_name();
  inline void set_allocated_m_name(::std::string* m_name);

  // optional int32 m_time = 4;
  inline bool has_m_time() const;
  inline void clear_m_time();
  static const int kMTimeFieldNumber = 4;
  inline ::google::protobuf::int32 m_time() const;
  inline void set_m_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GMMatchingNotify)
 private:
  inline void set_has_m_result();
  inline void clear_has_m_result();
  inline void set_has_m_teamid();
  inline void clear_has_m_teamid();
  inline void set_has_m_name();
  inline void clear_has_m_name();
  inline void set_has_m_time();
  inline void clear_has_m_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_result_;
  ::google::protobuf::int32 m_teamid_;
  ::std::string* m_name_;
  ::google::protobuf::int32 m_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_commonteamfight_2etxt();
  friend void protobuf_AssignDesc_commonteamfight_2etxt();
  friend void protobuf_ShutdownFile_commonteamfight_2etxt();

  void InitAsDefaultInstance();
  static GMMatchingNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// GMFirstBloodPerson

// required string rolename = 1;
inline bool GMFirstBloodPerson::has_rolename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMFirstBloodPerson::set_has_rolename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMFirstBloodPerson::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMFirstBloodPerson::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& GMFirstBloodPerson::rolename() const {
  return *rolename_;
}
inline void GMFirstBloodPerson::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void GMFirstBloodPerson::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void GMFirstBloodPerson::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMFirstBloodPerson::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* GMFirstBloodPerson::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMFirstBloodPerson::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 rolelv = 2;
inline bool GMFirstBloodPerson::has_rolelv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMFirstBloodPerson::set_has_rolelv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMFirstBloodPerson::clear_has_rolelv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMFirstBloodPerson::clear_rolelv() {
  rolelv_ = 0;
  clear_has_rolelv();
}
inline ::google::protobuf::int32 GMFirstBloodPerson::rolelv() const {
  return rolelv_;
}
inline void GMFirstBloodPerson::set_rolelv(::google::protobuf::int32 value) {
  set_has_rolelv();
  rolelv_ = value;
}

// required int32 fightvalue = 3;
inline bool GMFirstBloodPerson::has_fightvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMFirstBloodPerson::set_has_fightvalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMFirstBloodPerson::clear_has_fightvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMFirstBloodPerson::clear_fightvalue() {
  fightvalue_ = 0;
  clear_has_fightvalue();
}
inline ::google::protobuf::int32 GMFirstBloodPerson::fightvalue() const {
  return fightvalue_;
}
inline void GMFirstBloodPerson::set_fightvalue(::google::protobuf::int32 value) {
  set_has_fightvalue();
  fightvalue_ = value;
}

// required int64 killtime = 4;
inline bool GMFirstBloodPerson::has_killtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GMFirstBloodPerson::set_has_killtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GMFirstBloodPerson::clear_has_killtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GMFirstBloodPerson::clear_killtime() {
  killtime_ = GOOGLE_LONGLONG(0);
  clear_has_killtime();
}
inline ::google::protobuf::int64 GMFirstBloodPerson::killtime() const {
  return killtime_;
}
inline void GMFirstBloodPerson::set_killtime(::google::protobuf::int64 value) {
  set_has_killtime();
  killtime_ = value;
}

// required int32 profession = 5;
inline bool GMFirstBloodPerson::has_profession() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GMFirstBloodPerson::set_has_profession() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GMFirstBloodPerson::clear_has_profession() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GMFirstBloodPerson::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 GMFirstBloodPerson::profession() const {
  return profession_;
}
inline void GMFirstBloodPerson::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
}

// -------------------------------------------------------------------

// GMFirstBloodRequest

// required int32 m_fbtypeid = 1;
inline bool GMFirstBloodRequest::has_m_fbtypeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMFirstBloodRequest::set_has_m_fbtypeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMFirstBloodRequest::clear_has_m_fbtypeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMFirstBloodRequest::clear_m_fbtypeid() {
  m_fbtypeid_ = 0;
  clear_has_m_fbtypeid();
}
inline ::google::protobuf::int32 GMFirstBloodRequest::m_fbtypeid() const {
  return m_fbtypeid_;
}
inline void GMFirstBloodRequest::set_m_fbtypeid(::google::protobuf::int32 value) {
  set_has_m_fbtypeid();
  m_fbtypeid_ = value;
}

// -------------------------------------------------------------------

// GMFirstBloodResult

// required int32 m_result = 1;
inline bool GMFirstBloodResult::has_m_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMFirstBloodResult::set_has_m_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMFirstBloodResult::clear_has_m_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMFirstBloodResult::clear_m_result() {
  m_result_ = 0;
  clear_has_m_result();
}
inline ::google::protobuf::int32 GMFirstBloodResult::m_result() const {
  return m_result_;
}
inline void GMFirstBloodResult::set_m_result(::google::protobuf::int32 value) {
  set_has_m_result();
  m_result_ = value;
}

// required int32 m_fbtypeid = 2;
inline bool GMFirstBloodResult::has_m_fbtypeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMFirstBloodResult::set_has_m_fbtypeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMFirstBloodResult::clear_has_m_fbtypeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMFirstBloodResult::clear_m_fbtypeid() {
  m_fbtypeid_ = 0;
  clear_has_m_fbtypeid();
}
inline ::google::protobuf::int32 GMFirstBloodResult::m_fbtypeid() const {
  return m_fbtypeid_;
}
inline void GMFirstBloodResult::set_m_fbtypeid(::google::protobuf::int32 value) {
  set_has_m_fbtypeid();
  m_fbtypeid_ = value;
}

// repeated .GMFirstBloodPerson m_person = 3;
inline int GMFirstBloodResult::m_person_size() const {
  return m_person_.size();
}
inline void GMFirstBloodResult::clear_m_person() {
  m_person_.Clear();
}
inline const ::GMFirstBloodPerson& GMFirstBloodResult::m_person(int index) const {
  return m_person_.Get(index);
}
inline ::GMFirstBloodPerson* GMFirstBloodResult::mutable_m_person(int index) {
  return m_person_.Mutable(index);
}
inline ::GMFirstBloodPerson* GMFirstBloodResult::add_m_person() {
  return m_person_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GMFirstBloodPerson >&
GMFirstBloodResult::m_person() const {
  return m_person_;
}
inline ::google::protobuf::RepeatedPtrField< ::GMFirstBloodPerson >*
GMFirstBloodResult::mutable_m_person() {
  return &m_person_;
}

// -------------------------------------------------------------------

// GMFightMatch

// required int32 m_teamid = 1;
inline bool GMFightMatch::has_m_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMFightMatch::set_has_m_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMFightMatch::clear_has_m_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMFightMatch::clear_m_teamid() {
  m_teamid_ = 0;
  clear_has_m_teamid();
}
inline ::google::protobuf::int32 GMFightMatch::m_teamid() const {
  return m_teamid_;
}
inline void GMFightMatch::set_m_teamid(::google::protobuf::int32 value) {
  set_has_m_teamid();
  m_teamid_ = value;
}

// -------------------------------------------------------------------

// GMMatchOperResult

// required int32 m_result = 1;
inline bool GMMatchOperResult::has_m_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMMatchOperResult::set_has_m_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMMatchOperResult::clear_has_m_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMMatchOperResult::clear_m_result() {
  m_result_ = 0;
  clear_has_m_result();
}
inline ::google::protobuf::int32 GMMatchOperResult::m_result() const {
  return m_result_;
}
inline void GMMatchOperResult::set_m_result(::google::protobuf::int32 value) {
  set_has_m_result();
  m_result_ = value;
}

// -------------------------------------------------------------------

// GMMatchingNotify

// required int32 m_result = 1;
inline bool GMMatchingNotify::has_m_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMMatchingNotify::set_has_m_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMMatchingNotify::clear_has_m_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMMatchingNotify::clear_m_result() {
  m_result_ = 0;
  clear_has_m_result();
}
inline ::google::protobuf::int32 GMMatchingNotify::m_result() const {
  return m_result_;
}
inline void GMMatchingNotify::set_m_result(::google::protobuf::int32 value) {
  set_has_m_result();
  m_result_ = value;
}

// required int32 m_teamid = 2;
inline bool GMMatchingNotify::has_m_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMMatchingNotify::set_has_m_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMMatchingNotify::clear_has_m_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMMatchingNotify::clear_m_teamid() {
  m_teamid_ = 0;
  clear_has_m_teamid();
}
inline ::google::protobuf::int32 GMMatchingNotify::m_teamid() const {
  return m_teamid_;
}
inline void GMMatchingNotify::set_m_teamid(::google::protobuf::int32 value) {
  set_has_m_teamid();
  m_teamid_ = value;
}

// required string m_name = 3;
inline bool GMMatchingNotify::has_m_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMMatchingNotify::set_has_m_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMMatchingNotify::clear_has_m_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMMatchingNotify::clear_m_name() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    m_name_->clear();
  }
  clear_has_m_name();
}
inline const ::std::string& GMMatchingNotify::m_name() const {
  return *m_name_;
}
inline void GMMatchingNotify::set_m_name(const ::std::string& value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void GMMatchingNotify::set_m_name(const char* value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void GMMatchingNotify::set_m_name(const char* value, size_t size) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMMatchingNotify::mutable_m_name() {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  return m_name_;
}
inline ::std::string* GMMatchingNotify::release_m_name() {
  clear_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_name_;
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMMatchingNotify::set_allocated_m_name(::std::string* m_name) {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_name) {
    set_has_m_name();
    m_name_ = m_name;
  } else {
    clear_has_m_name();
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_time = 4;
inline bool GMMatchingNotify::has_m_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GMMatchingNotify::set_has_m_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GMMatchingNotify::clear_has_m_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GMMatchingNotify::clear_m_time() {
  m_time_ = 0;
  clear_has_m_time();
}
inline ::google::protobuf::int32 GMMatchingNotify::m_time() const {
  return m_time_;
}
inline void GMMatchingNotify::set_m_time(::google::protobuf::int32 value) {
  set_has_m_time();
  m_time_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_commonteamfight_2etxt__INCLUDED
