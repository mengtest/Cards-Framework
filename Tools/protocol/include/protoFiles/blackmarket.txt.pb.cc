// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blackmarket.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "blackmarket.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_BlackMarketObjInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_BlackMarketObjInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_BlackMarketInfo_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_BlackMarketInfo_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_BlackMarket_Refresh_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_BlackMarket_Refresh_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_BlackMarket_Buy_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_BlackMarket_Buy_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_BlackMarket_Buy_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_BlackMarket_Buy_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_BlackMarket_Return_obj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_BlackMarket_Return_obj_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_BlackMarket_SmeltRecast_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_BlackMarket_SmeltRecast_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_BlackMarket_Smelt_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_BlackMarket_Smelt_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_BlackMarket_Recast_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_BlackMarket_Recast_Return_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_blackmarket_2etxt() {
  protobuf_AddDesc_blackmarket_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "blackmarket.txt");
  GOOGLE_CHECK(file != NULL);
  GM_BlackMarketObjInfo_descriptor_ = file->message_type(0);
  static const int GM_BlackMarketObjInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarketObjInfo, m_objpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarketObjInfo, m_objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarketObjInfo, m_objbuy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarketObjInfo, m_objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarketObjInfo, m_objectnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarketObjInfo, m_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarketObjInfo, m_costid_),
  };
  GM_BlackMarketObjInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_BlackMarketObjInfo_descriptor_,
      GM_BlackMarketObjInfo::default_instance_,
      GM_BlackMarketObjInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarketObjInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarketObjInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_BlackMarketObjInfo));
  GM_BlackMarketInfo_Return_descriptor_ = file->message_type(1);
  static const int GM_BlackMarketInfo_Return_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarketInfo_Return, m_refreshmaxtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarketInfo_Return, m_refreshcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarketInfo_Return, m_spar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarketInfo_Return, m_refreshcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarketInfo_Return, m_tokencount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarketInfo_Return, m_lefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarketInfo_Return, m_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarketInfo_Return, m_blackmarketobjinfo_),
  };
  GM_BlackMarketInfo_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_BlackMarketInfo_Return_descriptor_,
      GM_BlackMarketInfo_Return::default_instance_,
      GM_BlackMarketInfo_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarketInfo_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarketInfo_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_BlackMarketInfo_Return));
  GM_BlackMarket_Refresh_Return_descriptor_ = file->message_type(2);
  static const int GM_BlackMarket_Refresh_Return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarket_Refresh_Return, m_result_),
  };
  GM_BlackMarket_Refresh_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_BlackMarket_Refresh_Return_descriptor_,
      GM_BlackMarket_Refresh_Return::default_instance_,
      GM_BlackMarket_Refresh_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarket_Refresh_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarket_Refresh_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_BlackMarket_Refresh_Return));
  GM_BlackMarket_Buy_Request_descriptor_ = file->message_type(3);
  static const int GM_BlackMarket_Buy_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarket_Buy_Request, m_objpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarket_Buy_Request, m_objid_),
  };
  GM_BlackMarket_Buy_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_BlackMarket_Buy_Request_descriptor_,
      GM_BlackMarket_Buy_Request::default_instance_,
      GM_BlackMarket_Buy_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarket_Buy_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarket_Buy_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_BlackMarket_Buy_Request));
  GM_BlackMarket_Buy_Return_descriptor_ = file->message_type(4);
  static const int GM_BlackMarket_Buy_Return_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarket_Buy_Return, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarket_Buy_Return, m_spar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarket_Buy_Return, m_objpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarket_Buy_Return, m_objectid_),
  };
  GM_BlackMarket_Buy_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_BlackMarket_Buy_Return_descriptor_,
      GM_BlackMarket_Buy_Return::default_instance_,
      GM_BlackMarket_Buy_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarket_Buy_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarket_Buy_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_BlackMarket_Buy_Return));
  GM_BlackMarket_Return_obj_descriptor_ = file->message_type(5);
  static const int GM_BlackMarket_Return_obj_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarket_Return_obj, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarket_Return_obj, number_),
  };
  GM_BlackMarket_Return_obj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_BlackMarket_Return_obj_descriptor_,
      GM_BlackMarket_Return_obj::default_instance_,
      GM_BlackMarket_Return_obj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarket_Return_obj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarket_Return_obj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_BlackMarket_Return_obj));
  GM_BlackMarket_SmeltRecast_Request_descriptor_ = file->message_type(6);
  static const int GM_BlackMarket_SmeltRecast_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarket_SmeltRecast_Request, m_gmid_),
  };
  GM_BlackMarket_SmeltRecast_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_BlackMarket_SmeltRecast_Request_descriptor_,
      GM_BlackMarket_SmeltRecast_Request::default_instance_,
      GM_BlackMarket_SmeltRecast_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarket_SmeltRecast_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarket_SmeltRecast_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_BlackMarket_SmeltRecast_Request));
  GM_BlackMarket_Smelt_Return_descriptor_ = file->message_type(7);
  static const int GM_BlackMarket_Smelt_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarket_Smelt_Return, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarket_Smelt_Return, spartotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarket_Smelt_Return, data_),
  };
  GM_BlackMarket_Smelt_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_BlackMarket_Smelt_Return_descriptor_,
      GM_BlackMarket_Smelt_Return::default_instance_,
      GM_BlackMarket_Smelt_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarket_Smelt_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarket_Smelt_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_BlackMarket_Smelt_Return));
  GM_BlackMarket_Recast_Return_descriptor_ = file->message_type(8);
  static const int GM_BlackMarket_Recast_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarket_Recast_Return, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarket_Recast_Return, data_),
  };
  GM_BlackMarket_Recast_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_BlackMarket_Recast_Return_descriptor_,
      GM_BlackMarket_Recast_Return::default_instance_,
      GM_BlackMarket_Recast_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarket_Recast_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlackMarket_Recast_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_BlackMarket_Recast_Return));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_blackmarket_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_BlackMarketObjInfo_descriptor_, &GM_BlackMarketObjInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_BlackMarketInfo_Return_descriptor_, &GM_BlackMarketInfo_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_BlackMarket_Refresh_Return_descriptor_, &GM_BlackMarket_Refresh_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_BlackMarket_Buy_Request_descriptor_, &GM_BlackMarket_Buy_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_BlackMarket_Buy_Return_descriptor_, &GM_BlackMarket_Buy_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_BlackMarket_Return_obj_descriptor_, &GM_BlackMarket_Return_obj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_BlackMarket_SmeltRecast_Request_descriptor_, &GM_BlackMarket_SmeltRecast_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_BlackMarket_Smelt_Return_descriptor_, &GM_BlackMarket_Smelt_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_BlackMarket_Recast_Return_descriptor_, &GM_BlackMarket_Recast_Return::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_blackmarket_2etxt() {
  delete GM_BlackMarketObjInfo::default_instance_;
  delete GM_BlackMarketObjInfo_reflection_;
  delete GM_BlackMarketInfo_Return::default_instance_;
  delete GM_BlackMarketInfo_Return_reflection_;
  delete GM_BlackMarket_Refresh_Return::default_instance_;
  delete GM_BlackMarket_Refresh_Return_reflection_;
  delete GM_BlackMarket_Buy_Request::default_instance_;
  delete GM_BlackMarket_Buy_Request_reflection_;
  delete GM_BlackMarket_Buy_Return::default_instance_;
  delete GM_BlackMarket_Buy_Return_reflection_;
  delete GM_BlackMarket_Return_obj::default_instance_;
  delete GM_BlackMarket_Return_obj_reflection_;
  delete GM_BlackMarket_SmeltRecast_Request::default_instance_;
  delete GM_BlackMarket_SmeltRecast_Request_reflection_;
  delete GM_BlackMarket_Smelt_Return::default_instance_;
  delete GM_BlackMarket_Smelt_Return_reflection_;
  delete GM_BlackMarket_Recast_Return::default_instance_;
  delete GM_BlackMarket_Recast_Return_reflection_;
}

void protobuf_AddDesc_blackmarket_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017blackmarket.txt\"\230\001\n\025GM_BlackMarketObjI"
    "nfo\022\020\n\010m_objPos\030\001 \002(\005\022\017\n\007m_objId\030\002 \001(\005\022\020"
    "\n\010m_objBuy\030\003 \001(\005\022\022\n\nm_objectId\030\004 \001(\005\022\023\n\013"
    "m_objectNum\030\005 \001(\005\022\017\n\007m_price\030\006 \001(\005\022\020\n\010m_"
    "costId\030\007 \001(\005\"\345\001\n\031GM_BlackMarketInfo_Retu"
    "rn\022\030\n\020m_refreshMaxTime\030\001 \002(\005\022\026\n\016m_refres"
    "hCount\030\002 \001(\005\022\016\n\006m_spar\030\003 \001(\005\022\025\n\rm_refres"
    "hCost\030\004 \001(\005\022\024\n\014m_tokenCount\030\005 \001(\005\022\022\n\nm_l"
    "eftTime\030\006 \001(\005\022\017\n\007m_count\030\007 \001(\005\0224\n\024m_blac"
    "kMarketObjInfo\030\010 \003(\0132\026.GM_BlackMarketObj"
    "Info\"1\n\035GM_BlackMarket_Refresh_Return\022\020\n"
    "\010m_result\030\001 \002(\005\"\?\n\032GM_BlackMarket_Buy_Re"
    "quest\022\020\n\010m_objPos\030\001 \002(\005\022\017\n\007m_objId\030\002 \001(\005"
    "\"c\n\031GM_BlackMarket_Buy_Return\022\020\n\010m_resul"
    "t\030\001 \002(\005\022\016\n\006m_spar\030\002 \001(\005\022\020\n\010m_objPos\030\003 \001("
    "\005\022\022\n\nm_objectId\030\004 \001(\005\"=\n\031GM_BlackMarket_"
    "Return_obj\022\020\n\010objectid\030\001 \002(\005\022\016\n\006number\030\002"
    " \001(\005\"4\n\"GM_BlackMarket_SmeltRecast_Reque"
    "st\022\016\n\006m_gmid\030\001 \003(\003\"l\n\033GM_BlackMarket_Sme"
    "lt_Return\022\020\n\010m_result\030\001 \002(\005\022\021\n\tsparTotal"
    "\030\002 \001(\005\022(\n\004data\030\003 \003(\0132\032.GM_BlackMarket_Re"
    "turn_obj\"Z\n\034GM_BlackMarket_Recast_Return"
    "\022\020\n\010m_result\030\001 \002(\005\022(\n\004data\030\002 \003(\0132\032.GM_Bl"
    "ackMarket_Return_obj", 940);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "blackmarket.txt", &protobuf_RegisterTypes);
  GM_BlackMarketObjInfo::default_instance_ = new GM_BlackMarketObjInfo();
  GM_BlackMarketInfo_Return::default_instance_ = new GM_BlackMarketInfo_Return();
  GM_BlackMarket_Refresh_Return::default_instance_ = new GM_BlackMarket_Refresh_Return();
  GM_BlackMarket_Buy_Request::default_instance_ = new GM_BlackMarket_Buy_Request();
  GM_BlackMarket_Buy_Return::default_instance_ = new GM_BlackMarket_Buy_Return();
  GM_BlackMarket_Return_obj::default_instance_ = new GM_BlackMarket_Return_obj();
  GM_BlackMarket_SmeltRecast_Request::default_instance_ = new GM_BlackMarket_SmeltRecast_Request();
  GM_BlackMarket_Smelt_Return::default_instance_ = new GM_BlackMarket_Smelt_Return();
  GM_BlackMarket_Recast_Return::default_instance_ = new GM_BlackMarket_Recast_Return();
  GM_BlackMarketObjInfo::default_instance_->InitAsDefaultInstance();
  GM_BlackMarketInfo_Return::default_instance_->InitAsDefaultInstance();
  GM_BlackMarket_Refresh_Return::default_instance_->InitAsDefaultInstance();
  GM_BlackMarket_Buy_Request::default_instance_->InitAsDefaultInstance();
  GM_BlackMarket_Buy_Return::default_instance_->InitAsDefaultInstance();
  GM_BlackMarket_Return_obj::default_instance_->InitAsDefaultInstance();
  GM_BlackMarket_SmeltRecast_Request::default_instance_->InitAsDefaultInstance();
  GM_BlackMarket_Smelt_Return::default_instance_->InitAsDefaultInstance();
  GM_BlackMarket_Recast_Return::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_blackmarket_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_blackmarket_2etxt {
  StaticDescriptorInitializer_blackmarket_2etxt() {
    protobuf_AddDesc_blackmarket_2etxt();
  }
} static_descriptor_initializer_blackmarket_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_BlackMarketObjInfo::kMObjPosFieldNumber;
const int GM_BlackMarketObjInfo::kMObjIdFieldNumber;
const int GM_BlackMarketObjInfo::kMObjBuyFieldNumber;
const int GM_BlackMarketObjInfo::kMObjectIdFieldNumber;
const int GM_BlackMarketObjInfo::kMObjectNumFieldNumber;
const int GM_BlackMarketObjInfo::kMPriceFieldNumber;
const int GM_BlackMarketObjInfo::kMCostIdFieldNumber;
#endif  // !_MSC_VER

GM_BlackMarketObjInfo::GM_BlackMarketObjInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_BlackMarketObjInfo::InitAsDefaultInstance() {
}

GM_BlackMarketObjInfo::GM_BlackMarketObjInfo(const GM_BlackMarketObjInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_BlackMarketObjInfo::SharedCtor() {
  _cached_size_ = 0;
  m_objpos_ = 0;
  m_objid_ = 0;
  m_objbuy_ = 0;
  m_objectid_ = 0;
  m_objectnum_ = 0;
  m_price_ = 0;
  m_costid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_BlackMarketObjInfo::~GM_BlackMarketObjInfo() {
  SharedDtor();
}

void GM_BlackMarketObjInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_BlackMarketObjInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_BlackMarketObjInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_BlackMarketObjInfo_descriptor_;
}

const GM_BlackMarketObjInfo& GM_BlackMarketObjInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_blackmarket_2etxt();
  return *default_instance_;
}

GM_BlackMarketObjInfo* GM_BlackMarketObjInfo::default_instance_ = NULL;

GM_BlackMarketObjInfo* GM_BlackMarketObjInfo::New() const {
  return new GM_BlackMarketObjInfo;
}

void GM_BlackMarketObjInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objpos_ = 0;
    m_objid_ = 0;
    m_objbuy_ = 0;
    m_objectid_ = 0;
    m_objectnum_ = 0;
    m_price_ = 0;
    m_costid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_BlackMarketObjInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_objPos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objpos_)));
          set_has_m_objpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_objId;
        break;
      }

      // optional int32 m_objId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_objId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objid_)));
          set_has_m_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_objBuy;
        break;
      }

      // optional int32 m_objBuy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_objBuy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objbuy_)));
          set_has_m_objbuy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_objectId;
        break;
      }

      // optional int32 m_objectId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_objectId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objectid_)));
          set_has_m_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_objectNum;
        break;
      }

      // optional int32 m_objectNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_objectNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objectnum_)));
          set_has_m_objectnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_price;
        break;
      }

      // optional int32 m_price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_price_)));
          set_has_m_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_costId;
        break;
      }

      // optional int32 m_costId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_costId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_costid_)));
          set_has_m_costid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_BlackMarketObjInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_objPos = 1;
  if (has_m_objpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objpos(), output);
  }

  // optional int32 m_objId = 2;
  if (has_m_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_objid(), output);
  }

  // optional int32 m_objBuy = 3;
  if (has_m_objbuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_objbuy(), output);
  }

  // optional int32 m_objectId = 4;
  if (has_m_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_objectid(), output);
  }

  // optional int32 m_objectNum = 5;
  if (has_m_objectnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_objectnum(), output);
  }

  // optional int32 m_price = 6;
  if (has_m_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_price(), output);
  }

  // optional int32 m_costId = 7;
  if (has_m_costid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_costid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_BlackMarketObjInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_objPos = 1;
  if (has_m_objpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objpos(), target);
  }

  // optional int32 m_objId = 2;
  if (has_m_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_objid(), target);
  }

  // optional int32 m_objBuy = 3;
  if (has_m_objbuy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_objbuy(), target);
  }

  // optional int32 m_objectId = 4;
  if (has_m_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_objectid(), target);
  }

  // optional int32 m_objectNum = 5;
  if (has_m_objectnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_objectnum(), target);
  }

  // optional int32 m_price = 6;
  if (has_m_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_price(), target);
  }

  // optional int32 m_costId = 7;
  if (has_m_costid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_costid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_BlackMarketObjInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_objPos = 1;
    if (has_m_objpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objpos());
    }

    // optional int32 m_objId = 2;
    if (has_m_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objid());
    }

    // optional int32 m_objBuy = 3;
    if (has_m_objbuy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objbuy());
    }

    // optional int32 m_objectId = 4;
    if (has_m_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objectid());
    }

    // optional int32 m_objectNum = 5;
    if (has_m_objectnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objectnum());
    }

    // optional int32 m_price = 6;
    if (has_m_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_price());
    }

    // optional int32 m_costId = 7;
    if (has_m_costid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_costid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_BlackMarketObjInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_BlackMarketObjInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_BlackMarketObjInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_BlackMarketObjInfo::MergeFrom(const GM_BlackMarketObjInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objpos()) {
      set_m_objpos(from.m_objpos());
    }
    if (from.has_m_objid()) {
      set_m_objid(from.m_objid());
    }
    if (from.has_m_objbuy()) {
      set_m_objbuy(from.m_objbuy());
    }
    if (from.has_m_objectid()) {
      set_m_objectid(from.m_objectid());
    }
    if (from.has_m_objectnum()) {
      set_m_objectnum(from.m_objectnum());
    }
    if (from.has_m_price()) {
      set_m_price(from.m_price());
    }
    if (from.has_m_costid()) {
      set_m_costid(from.m_costid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_BlackMarketObjInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_BlackMarketObjInfo::CopyFrom(const GM_BlackMarketObjInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_BlackMarketObjInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_BlackMarketObjInfo::Swap(GM_BlackMarketObjInfo* other) {
  if (other != this) {
    std::swap(m_objpos_, other->m_objpos_);
    std::swap(m_objid_, other->m_objid_);
    std::swap(m_objbuy_, other->m_objbuy_);
    std::swap(m_objectid_, other->m_objectid_);
    std::swap(m_objectnum_, other->m_objectnum_);
    std::swap(m_price_, other->m_price_);
    std::swap(m_costid_, other->m_costid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_BlackMarketObjInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_BlackMarketObjInfo_descriptor_;
  metadata.reflection = GM_BlackMarketObjInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_BlackMarketInfo_Return::kMRefreshMaxTimeFieldNumber;
const int GM_BlackMarketInfo_Return::kMRefreshCountFieldNumber;
const int GM_BlackMarketInfo_Return::kMSparFieldNumber;
const int GM_BlackMarketInfo_Return::kMRefreshCostFieldNumber;
const int GM_BlackMarketInfo_Return::kMTokenCountFieldNumber;
const int GM_BlackMarketInfo_Return::kMLeftTimeFieldNumber;
const int GM_BlackMarketInfo_Return::kMCountFieldNumber;
const int GM_BlackMarketInfo_Return::kMBlackMarketObjInfoFieldNumber;
#endif  // !_MSC_VER

GM_BlackMarketInfo_Return::GM_BlackMarketInfo_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_BlackMarketInfo_Return::InitAsDefaultInstance() {
}

GM_BlackMarketInfo_Return::GM_BlackMarketInfo_Return(const GM_BlackMarketInfo_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_BlackMarketInfo_Return::SharedCtor() {
  _cached_size_ = 0;
  m_refreshmaxtime_ = 0;
  m_refreshcount_ = 0;
  m_spar_ = 0;
  m_refreshcost_ = 0;
  m_tokencount_ = 0;
  m_lefttime_ = 0;
  m_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_BlackMarketInfo_Return::~GM_BlackMarketInfo_Return() {
  SharedDtor();
}

void GM_BlackMarketInfo_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_BlackMarketInfo_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_BlackMarketInfo_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_BlackMarketInfo_Return_descriptor_;
}

const GM_BlackMarketInfo_Return& GM_BlackMarketInfo_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_blackmarket_2etxt();
  return *default_instance_;
}

GM_BlackMarketInfo_Return* GM_BlackMarketInfo_Return::default_instance_ = NULL;

GM_BlackMarketInfo_Return* GM_BlackMarketInfo_Return::New() const {
  return new GM_BlackMarketInfo_Return;
}

void GM_BlackMarketInfo_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_refreshmaxtime_ = 0;
    m_refreshcount_ = 0;
    m_spar_ = 0;
    m_refreshcost_ = 0;
    m_tokencount_ = 0;
    m_lefttime_ = 0;
    m_count_ = 0;
  }
  m_blackmarketobjinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_BlackMarketInfo_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_refreshMaxTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_refreshmaxtime_)));
          set_has_m_refreshmaxtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_refreshCount;
        break;
      }

      // optional int32 m_refreshCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_refreshCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_refreshcount_)));
          set_has_m_refreshcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_spar;
        break;
      }

      // optional int32 m_spar = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_spar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_spar_)));
          set_has_m_spar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_refreshCost;
        break;
      }

      // optional int32 m_refreshCost = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_refreshCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_refreshcost_)));
          set_has_m_refreshcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_tokenCount;
        break;
      }

      // optional int32 m_tokenCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_tokenCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tokencount_)));
          set_has_m_tokencount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_leftTime;
        break;
      }

      // optional int32 m_leftTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_leftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lefttime_)));
          set_has_m_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_count;
        break;
      }

      // optional int32 m_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_blackMarketObjInfo;
        break;
      }

      // repeated .GM_BlackMarketObjInfo m_blackMarketObjInfo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_blackMarketObjInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_blackmarketobjinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_blackMarketObjInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_BlackMarketInfo_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_refreshMaxTime = 1;
  if (has_m_refreshmaxtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_refreshmaxtime(), output);
  }

  // optional int32 m_refreshCount = 2;
  if (has_m_refreshcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_refreshcount(), output);
  }

  // optional int32 m_spar = 3;
  if (has_m_spar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_spar(), output);
  }

  // optional int32 m_refreshCost = 4;
  if (has_m_refreshcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_refreshcost(), output);
  }

  // optional int32 m_tokenCount = 5;
  if (has_m_tokencount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_tokencount(), output);
  }

  // optional int32 m_leftTime = 6;
  if (has_m_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_lefttime(), output);
  }

  // optional int32 m_count = 7;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_count(), output);
  }

  // repeated .GM_BlackMarketObjInfo m_blackMarketObjInfo = 8;
  for (int i = 0; i < this->m_blackmarketobjinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->m_blackmarketobjinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_BlackMarketInfo_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_refreshMaxTime = 1;
  if (has_m_refreshmaxtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_refreshmaxtime(), target);
  }

  // optional int32 m_refreshCount = 2;
  if (has_m_refreshcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_refreshcount(), target);
  }

  // optional int32 m_spar = 3;
  if (has_m_spar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_spar(), target);
  }

  // optional int32 m_refreshCost = 4;
  if (has_m_refreshcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_refreshcost(), target);
  }

  // optional int32 m_tokenCount = 5;
  if (has_m_tokencount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_tokencount(), target);
  }

  // optional int32 m_leftTime = 6;
  if (has_m_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_lefttime(), target);
  }

  // optional int32 m_count = 7;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_count(), target);
  }

  // repeated .GM_BlackMarketObjInfo m_blackMarketObjInfo = 8;
  for (int i = 0; i < this->m_blackmarketobjinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->m_blackmarketobjinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_BlackMarketInfo_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_refreshMaxTime = 1;
    if (has_m_refreshmaxtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_refreshmaxtime());
    }

    // optional int32 m_refreshCount = 2;
    if (has_m_refreshcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_refreshcount());
    }

    // optional int32 m_spar = 3;
    if (has_m_spar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_spar());
    }

    // optional int32 m_refreshCost = 4;
    if (has_m_refreshcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_refreshcost());
    }

    // optional int32 m_tokenCount = 5;
    if (has_m_tokencount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tokencount());
    }

    // optional int32 m_leftTime = 6;
    if (has_m_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lefttime());
    }

    // optional int32 m_count = 7;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_count());
    }

  }
  // repeated .GM_BlackMarketObjInfo m_blackMarketObjInfo = 8;
  total_size += 1 * this->m_blackmarketobjinfo_size();
  for (int i = 0; i < this->m_blackmarketobjinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_blackmarketobjinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_BlackMarketInfo_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_BlackMarketInfo_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_BlackMarketInfo_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_BlackMarketInfo_Return::MergeFrom(const GM_BlackMarketInfo_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_blackmarketobjinfo_.MergeFrom(from.m_blackmarketobjinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_refreshmaxtime()) {
      set_m_refreshmaxtime(from.m_refreshmaxtime());
    }
    if (from.has_m_refreshcount()) {
      set_m_refreshcount(from.m_refreshcount());
    }
    if (from.has_m_spar()) {
      set_m_spar(from.m_spar());
    }
    if (from.has_m_refreshcost()) {
      set_m_refreshcost(from.m_refreshcost());
    }
    if (from.has_m_tokencount()) {
      set_m_tokencount(from.m_tokencount());
    }
    if (from.has_m_lefttime()) {
      set_m_lefttime(from.m_lefttime());
    }
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_BlackMarketInfo_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_BlackMarketInfo_Return::CopyFrom(const GM_BlackMarketInfo_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_BlackMarketInfo_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_blackmarketobjinfo_size(); i++) {
    if (!this->m_blackmarketobjinfo(i).IsInitialized()) return false;
  }
  return true;
}

void GM_BlackMarketInfo_Return::Swap(GM_BlackMarketInfo_Return* other) {
  if (other != this) {
    std::swap(m_refreshmaxtime_, other->m_refreshmaxtime_);
    std::swap(m_refreshcount_, other->m_refreshcount_);
    std::swap(m_spar_, other->m_spar_);
    std::swap(m_refreshcost_, other->m_refreshcost_);
    std::swap(m_tokencount_, other->m_tokencount_);
    std::swap(m_lefttime_, other->m_lefttime_);
    std::swap(m_count_, other->m_count_);
    m_blackmarketobjinfo_.Swap(&other->m_blackmarketobjinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_BlackMarketInfo_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_BlackMarketInfo_Return_descriptor_;
  metadata.reflection = GM_BlackMarketInfo_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_BlackMarket_Refresh_Return::kMResultFieldNumber;
#endif  // !_MSC_VER

GM_BlackMarket_Refresh_Return::GM_BlackMarket_Refresh_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_BlackMarket_Refresh_Return::InitAsDefaultInstance() {
}

GM_BlackMarket_Refresh_Return::GM_BlackMarket_Refresh_Return(const GM_BlackMarket_Refresh_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_BlackMarket_Refresh_Return::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_BlackMarket_Refresh_Return::~GM_BlackMarket_Refresh_Return() {
  SharedDtor();
}

void GM_BlackMarket_Refresh_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_BlackMarket_Refresh_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_BlackMarket_Refresh_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_BlackMarket_Refresh_Return_descriptor_;
}

const GM_BlackMarket_Refresh_Return& GM_BlackMarket_Refresh_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_blackmarket_2etxt();
  return *default_instance_;
}

GM_BlackMarket_Refresh_Return* GM_BlackMarket_Refresh_Return::default_instance_ = NULL;

GM_BlackMarket_Refresh_Return* GM_BlackMarket_Refresh_Return::New() const {
  return new GM_BlackMarket_Refresh_Return;
}

void GM_BlackMarket_Refresh_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_BlackMarket_Refresh_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_BlackMarket_Refresh_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_BlackMarket_Refresh_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_BlackMarket_Refresh_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_BlackMarket_Refresh_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_BlackMarket_Refresh_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_BlackMarket_Refresh_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_BlackMarket_Refresh_Return::MergeFrom(const GM_BlackMarket_Refresh_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_BlackMarket_Refresh_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_BlackMarket_Refresh_Return::CopyFrom(const GM_BlackMarket_Refresh_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_BlackMarket_Refresh_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_BlackMarket_Refresh_Return::Swap(GM_BlackMarket_Refresh_Return* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_BlackMarket_Refresh_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_BlackMarket_Refresh_Return_descriptor_;
  metadata.reflection = GM_BlackMarket_Refresh_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_BlackMarket_Buy_Request::kMObjPosFieldNumber;
const int GM_BlackMarket_Buy_Request::kMObjIdFieldNumber;
#endif  // !_MSC_VER

GM_BlackMarket_Buy_Request::GM_BlackMarket_Buy_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_BlackMarket_Buy_Request::InitAsDefaultInstance() {
}

GM_BlackMarket_Buy_Request::GM_BlackMarket_Buy_Request(const GM_BlackMarket_Buy_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_BlackMarket_Buy_Request::SharedCtor() {
  _cached_size_ = 0;
  m_objpos_ = 0;
  m_objid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_BlackMarket_Buy_Request::~GM_BlackMarket_Buy_Request() {
  SharedDtor();
}

void GM_BlackMarket_Buy_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_BlackMarket_Buy_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_BlackMarket_Buy_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_BlackMarket_Buy_Request_descriptor_;
}

const GM_BlackMarket_Buy_Request& GM_BlackMarket_Buy_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_blackmarket_2etxt();
  return *default_instance_;
}

GM_BlackMarket_Buy_Request* GM_BlackMarket_Buy_Request::default_instance_ = NULL;

GM_BlackMarket_Buy_Request* GM_BlackMarket_Buy_Request::New() const {
  return new GM_BlackMarket_Buy_Request;
}

void GM_BlackMarket_Buy_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objpos_ = 0;
    m_objid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_BlackMarket_Buy_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_objPos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objpos_)));
          set_has_m_objpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_objId;
        break;
      }

      // optional int32 m_objId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_objId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objid_)));
          set_has_m_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_BlackMarket_Buy_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_objPos = 1;
  if (has_m_objpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objpos(), output);
  }

  // optional int32 m_objId = 2;
  if (has_m_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_objid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_BlackMarket_Buy_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_objPos = 1;
  if (has_m_objpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objpos(), target);
  }

  // optional int32 m_objId = 2;
  if (has_m_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_objid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_BlackMarket_Buy_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_objPos = 1;
    if (has_m_objpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objpos());
    }

    // optional int32 m_objId = 2;
    if (has_m_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_BlackMarket_Buy_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_BlackMarket_Buy_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_BlackMarket_Buy_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_BlackMarket_Buy_Request::MergeFrom(const GM_BlackMarket_Buy_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objpos()) {
      set_m_objpos(from.m_objpos());
    }
    if (from.has_m_objid()) {
      set_m_objid(from.m_objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_BlackMarket_Buy_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_BlackMarket_Buy_Request::CopyFrom(const GM_BlackMarket_Buy_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_BlackMarket_Buy_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_BlackMarket_Buy_Request::Swap(GM_BlackMarket_Buy_Request* other) {
  if (other != this) {
    std::swap(m_objpos_, other->m_objpos_);
    std::swap(m_objid_, other->m_objid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_BlackMarket_Buy_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_BlackMarket_Buy_Request_descriptor_;
  metadata.reflection = GM_BlackMarket_Buy_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_BlackMarket_Buy_Return::kMResultFieldNumber;
const int GM_BlackMarket_Buy_Return::kMSparFieldNumber;
const int GM_BlackMarket_Buy_Return::kMObjPosFieldNumber;
const int GM_BlackMarket_Buy_Return::kMObjectIdFieldNumber;
#endif  // !_MSC_VER

GM_BlackMarket_Buy_Return::GM_BlackMarket_Buy_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_BlackMarket_Buy_Return::InitAsDefaultInstance() {
}

GM_BlackMarket_Buy_Return::GM_BlackMarket_Buy_Return(const GM_BlackMarket_Buy_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_BlackMarket_Buy_Return::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  m_spar_ = 0;
  m_objpos_ = 0;
  m_objectid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_BlackMarket_Buy_Return::~GM_BlackMarket_Buy_Return() {
  SharedDtor();
}

void GM_BlackMarket_Buy_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_BlackMarket_Buy_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_BlackMarket_Buy_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_BlackMarket_Buy_Return_descriptor_;
}

const GM_BlackMarket_Buy_Return& GM_BlackMarket_Buy_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_blackmarket_2etxt();
  return *default_instance_;
}

GM_BlackMarket_Buy_Return* GM_BlackMarket_Buy_Return::default_instance_ = NULL;

GM_BlackMarket_Buy_Return* GM_BlackMarket_Buy_Return::New() const {
  return new GM_BlackMarket_Buy_Return;
}

void GM_BlackMarket_Buy_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    m_spar_ = 0;
    m_objpos_ = 0;
    m_objectid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_BlackMarket_Buy_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_spar;
        break;
      }

      // optional int32 m_spar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_spar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_spar_)));
          set_has_m_spar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_objPos;
        break;
      }

      // optional int32 m_objPos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_objPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objpos_)));
          set_has_m_objpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_objectId;
        break;
      }

      // optional int32 m_objectId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_objectId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objectid_)));
          set_has_m_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_BlackMarket_Buy_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // optional int32 m_spar = 2;
  if (has_m_spar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_spar(), output);
  }

  // optional int32 m_objPos = 3;
  if (has_m_objpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_objpos(), output);
  }

  // optional int32 m_objectId = 4;
  if (has_m_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_objectid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_BlackMarket_Buy_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // optional int32 m_spar = 2;
  if (has_m_spar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_spar(), target);
  }

  // optional int32 m_objPos = 3;
  if (has_m_objpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_objpos(), target);
  }

  // optional int32 m_objectId = 4;
  if (has_m_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_objectid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_BlackMarket_Buy_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // optional int32 m_spar = 2;
    if (has_m_spar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_spar());
    }

    // optional int32 m_objPos = 3;
    if (has_m_objpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objpos());
    }

    // optional int32 m_objectId = 4;
    if (has_m_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objectid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_BlackMarket_Buy_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_BlackMarket_Buy_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_BlackMarket_Buy_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_BlackMarket_Buy_Return::MergeFrom(const GM_BlackMarket_Buy_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_spar()) {
      set_m_spar(from.m_spar());
    }
    if (from.has_m_objpos()) {
      set_m_objpos(from.m_objpos());
    }
    if (from.has_m_objectid()) {
      set_m_objectid(from.m_objectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_BlackMarket_Buy_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_BlackMarket_Buy_Return::CopyFrom(const GM_BlackMarket_Buy_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_BlackMarket_Buy_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_BlackMarket_Buy_Return::Swap(GM_BlackMarket_Buy_Return* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(m_spar_, other->m_spar_);
    std::swap(m_objpos_, other->m_objpos_);
    std::swap(m_objectid_, other->m_objectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_BlackMarket_Buy_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_BlackMarket_Buy_Return_descriptor_;
  metadata.reflection = GM_BlackMarket_Buy_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_BlackMarket_Return_obj::kObjectidFieldNumber;
const int GM_BlackMarket_Return_obj::kNumberFieldNumber;
#endif  // !_MSC_VER

GM_BlackMarket_Return_obj::GM_BlackMarket_Return_obj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_BlackMarket_Return_obj::InitAsDefaultInstance() {
}

GM_BlackMarket_Return_obj::GM_BlackMarket_Return_obj(const GM_BlackMarket_Return_obj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_BlackMarket_Return_obj::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = 0;
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_BlackMarket_Return_obj::~GM_BlackMarket_Return_obj() {
  SharedDtor();
}

void GM_BlackMarket_Return_obj::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_BlackMarket_Return_obj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_BlackMarket_Return_obj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_BlackMarket_Return_obj_descriptor_;
}

const GM_BlackMarket_Return_obj& GM_BlackMarket_Return_obj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_blackmarket_2etxt();
  return *default_instance_;
}

GM_BlackMarket_Return_obj* GM_BlackMarket_Return_obj::default_instance_ = NULL;

GM_BlackMarket_Return_obj* GM_BlackMarket_Return_obj::New() const {
  return new GM_BlackMarket_Return_obj;
}

void GM_BlackMarket_Return_obj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = 0;
    number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_BlackMarket_Return_obj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_number;
        break;
      }

      // optional int32 number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_BlackMarket_Return_obj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objectid(), output);
  }

  // optional int32 number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_BlackMarket_Return_obj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objectid(), target);
  }

  // optional int32 number = 2;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_BlackMarket_Return_obj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objectid = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // optional int32 number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_BlackMarket_Return_obj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_BlackMarket_Return_obj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_BlackMarket_Return_obj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_BlackMarket_Return_obj::MergeFrom(const GM_BlackMarket_Return_obj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_BlackMarket_Return_obj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_BlackMarket_Return_obj::CopyFrom(const GM_BlackMarket_Return_obj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_BlackMarket_Return_obj::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_BlackMarket_Return_obj::Swap(GM_BlackMarket_Return_obj* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_BlackMarket_Return_obj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_BlackMarket_Return_obj_descriptor_;
  metadata.reflection = GM_BlackMarket_Return_obj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_BlackMarket_SmeltRecast_Request::kMGmidFieldNumber;
#endif  // !_MSC_VER

GM_BlackMarket_SmeltRecast_Request::GM_BlackMarket_SmeltRecast_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_BlackMarket_SmeltRecast_Request::InitAsDefaultInstance() {
}

GM_BlackMarket_SmeltRecast_Request::GM_BlackMarket_SmeltRecast_Request(const GM_BlackMarket_SmeltRecast_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_BlackMarket_SmeltRecast_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_BlackMarket_SmeltRecast_Request::~GM_BlackMarket_SmeltRecast_Request() {
  SharedDtor();
}

void GM_BlackMarket_SmeltRecast_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_BlackMarket_SmeltRecast_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_BlackMarket_SmeltRecast_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_BlackMarket_SmeltRecast_Request_descriptor_;
}

const GM_BlackMarket_SmeltRecast_Request& GM_BlackMarket_SmeltRecast_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_blackmarket_2etxt();
  return *default_instance_;
}

GM_BlackMarket_SmeltRecast_Request* GM_BlackMarket_SmeltRecast_Request::default_instance_ = NULL;

GM_BlackMarket_SmeltRecast_Request* GM_BlackMarket_SmeltRecast_Request::New() const {
  return new GM_BlackMarket_SmeltRecast_Request;
}

void GM_BlackMarket_SmeltRecast_Request::Clear() {
  m_gmid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_BlackMarket_SmeltRecast_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 m_gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_m_gmid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_m_gmid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_m_gmid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_BlackMarket_SmeltRecast_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 m_gmid = 1;
  for (int i = 0; i < this->m_gmid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->m_gmid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_BlackMarket_SmeltRecast_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 m_gmid = 1;
  for (int i = 0; i < this->m_gmid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->m_gmid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_BlackMarket_SmeltRecast_Request::ByteSize() const {
  int total_size = 0;

  // repeated int64 m_gmid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_gmid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->m_gmid(i));
    }
    total_size += 1 * this->m_gmid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_BlackMarket_SmeltRecast_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_BlackMarket_SmeltRecast_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_BlackMarket_SmeltRecast_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_BlackMarket_SmeltRecast_Request::MergeFrom(const GM_BlackMarket_SmeltRecast_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_gmid_.MergeFrom(from.m_gmid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_BlackMarket_SmeltRecast_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_BlackMarket_SmeltRecast_Request::CopyFrom(const GM_BlackMarket_SmeltRecast_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_BlackMarket_SmeltRecast_Request::IsInitialized() const {

  return true;
}

void GM_BlackMarket_SmeltRecast_Request::Swap(GM_BlackMarket_SmeltRecast_Request* other) {
  if (other != this) {
    m_gmid_.Swap(&other->m_gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_BlackMarket_SmeltRecast_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_BlackMarket_SmeltRecast_Request_descriptor_;
  metadata.reflection = GM_BlackMarket_SmeltRecast_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_BlackMarket_Smelt_Return::kMResultFieldNumber;
const int GM_BlackMarket_Smelt_Return::kSparTotalFieldNumber;
const int GM_BlackMarket_Smelt_Return::kDataFieldNumber;
#endif  // !_MSC_VER

GM_BlackMarket_Smelt_Return::GM_BlackMarket_Smelt_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_BlackMarket_Smelt_Return::InitAsDefaultInstance() {
}

GM_BlackMarket_Smelt_Return::GM_BlackMarket_Smelt_Return(const GM_BlackMarket_Smelt_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_BlackMarket_Smelt_Return::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  spartotal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_BlackMarket_Smelt_Return::~GM_BlackMarket_Smelt_Return() {
  SharedDtor();
}

void GM_BlackMarket_Smelt_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_BlackMarket_Smelt_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_BlackMarket_Smelt_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_BlackMarket_Smelt_Return_descriptor_;
}

const GM_BlackMarket_Smelt_Return& GM_BlackMarket_Smelt_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_blackmarket_2etxt();
  return *default_instance_;
}

GM_BlackMarket_Smelt_Return* GM_BlackMarket_Smelt_Return::default_instance_ = NULL;

GM_BlackMarket_Smelt_Return* GM_BlackMarket_Smelt_Return::New() const {
  return new GM_BlackMarket_Smelt_Return;
}

void GM_BlackMarket_Smelt_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    spartotal_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_BlackMarket_Smelt_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sparTotal;
        break;
      }

      // optional int32 sparTotal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sparTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spartotal_)));
          set_has_spartotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated .GM_BlackMarket_Return_obj data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_BlackMarket_Smelt_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // optional int32 sparTotal = 2;
  if (has_spartotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->spartotal(), output);
  }

  // repeated .GM_BlackMarket_Return_obj data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_BlackMarket_Smelt_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // optional int32 sparTotal = 2;
  if (has_spartotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->spartotal(), target);
  }

  // repeated .GM_BlackMarket_Return_obj data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_BlackMarket_Smelt_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // optional int32 sparTotal = 2;
    if (has_spartotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spartotal());
    }

  }
  // repeated .GM_BlackMarket_Return_obj data = 3;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_BlackMarket_Smelt_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_BlackMarket_Smelt_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_BlackMarket_Smelt_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_BlackMarket_Smelt_Return::MergeFrom(const GM_BlackMarket_Smelt_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_spartotal()) {
      set_spartotal(from.spartotal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_BlackMarket_Smelt_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_BlackMarket_Smelt_Return::CopyFrom(const GM_BlackMarket_Smelt_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_BlackMarket_Smelt_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_BlackMarket_Smelt_Return::Swap(GM_BlackMarket_Smelt_Return* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(spartotal_, other->spartotal_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_BlackMarket_Smelt_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_BlackMarket_Smelt_Return_descriptor_;
  metadata.reflection = GM_BlackMarket_Smelt_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_BlackMarket_Recast_Return::kMResultFieldNumber;
const int GM_BlackMarket_Recast_Return::kDataFieldNumber;
#endif  // !_MSC_VER

GM_BlackMarket_Recast_Return::GM_BlackMarket_Recast_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_BlackMarket_Recast_Return::InitAsDefaultInstance() {
}

GM_BlackMarket_Recast_Return::GM_BlackMarket_Recast_Return(const GM_BlackMarket_Recast_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_BlackMarket_Recast_Return::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_BlackMarket_Recast_Return::~GM_BlackMarket_Recast_Return() {
  SharedDtor();
}

void GM_BlackMarket_Recast_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_BlackMarket_Recast_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_BlackMarket_Recast_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_BlackMarket_Recast_Return_descriptor_;
}

const GM_BlackMarket_Recast_Return& GM_BlackMarket_Recast_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_blackmarket_2etxt();
  return *default_instance_;
}

GM_BlackMarket_Recast_Return* GM_BlackMarket_Recast_Return::default_instance_ = NULL;

GM_BlackMarket_Recast_Return* GM_BlackMarket_Recast_Return::New() const {
  return new GM_BlackMarket_Recast_Return;
}

void GM_BlackMarket_Recast_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_BlackMarket_Recast_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .GM_BlackMarket_Return_obj data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_BlackMarket_Recast_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // repeated .GM_BlackMarket_Return_obj data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_BlackMarket_Recast_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // repeated .GM_BlackMarket_Return_obj data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_BlackMarket_Recast_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

  }
  // repeated .GM_BlackMarket_Return_obj data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_BlackMarket_Recast_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_BlackMarket_Recast_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_BlackMarket_Recast_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_BlackMarket_Recast_Return::MergeFrom(const GM_BlackMarket_Recast_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_BlackMarket_Recast_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_BlackMarket_Recast_Return::CopyFrom(const GM_BlackMarket_Recast_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_BlackMarket_Recast_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_BlackMarket_Recast_Return::Swap(GM_BlackMarket_Recast_Return* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_BlackMarket_Recast_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_BlackMarket_Recast_Return_descriptor_;
  metadata.reflection = GM_BlackMarket_Recast_Return_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
