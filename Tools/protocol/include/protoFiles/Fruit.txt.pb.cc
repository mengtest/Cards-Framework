// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Fruit.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Fruit.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_Fruit_Login_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Fruit_Login_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Fruit_Login_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Fruit_Login_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Fruit_Gamble_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Fruit_Gamble_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Fruit_Gamble_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Fruit_Gamble_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Fruit_Gamble_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Fruit_Gamble_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Fruit_Gamble_Go_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Fruit_Gamble_Go_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Fruit_Pos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Fruit_Pos_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Fruit_plus_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Fruit_plus_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Fruit_plus_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Fruit_plus_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Fruit_Figure_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Fruit_Figure_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Fruit_Money_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Fruit_Money_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Fruit_Money_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Fruit_Money_return_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Fruit_2etxt() {
  protobuf_AddDesc_Fruit_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Fruit.txt");
  GOOGLE_CHECK(file != NULL);
  GM_Fruit_Login_request_descriptor_ = file->message_type(0);
  static const int GM_Fruit_Login_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fruit_Login_request, roomtype_),
  };
  GM_Fruit_Login_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Fruit_Login_request_descriptor_,
      GM_Fruit_Login_request::default_instance_,
      GM_Fruit_Login_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fruit_Login_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fruit_Login_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Fruit_Login_request));
  GM_Fruit_Login_return_descriptor_ = file->message_type(1);
  static const int GM_Fruit_Login_return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fruit_Login_return, errorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fruit_Login_return, rate_),
  };
  GM_Fruit_Login_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Fruit_Login_return_descriptor_,
      GM_Fruit_Login_return::default_instance_,
      GM_Fruit_Login_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fruit_Login_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fruit_Login_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Fruit_Login_return));
  SM_Fruit_Gamble_descriptor_ = file->message_type(2);
  static const int SM_Fruit_Gamble_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fruit_Gamble, objecytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fruit_Gamble, monrey_),
  };
  SM_Fruit_Gamble_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Fruit_Gamble_descriptor_,
      SM_Fruit_Gamble::default_instance_,
      SM_Fruit_Gamble_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fruit_Gamble, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fruit_Gamble, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Fruit_Gamble));
  SM_Fruit_Gamble_Request_descriptor_ = file->message_type(3);
  static const int SM_Fruit_Gamble_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fruit_Gamble_Request, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fruit_Gamble_Request, data_),
  };
  SM_Fruit_Gamble_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Fruit_Gamble_Request_descriptor_,
      SM_Fruit_Gamble_Request::default_instance_,
      SM_Fruit_Gamble_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fruit_Gamble_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fruit_Gamble_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Fruit_Gamble_Request));
  SM_Fruit_Gamble_return_descriptor_ = file->message_type(4);
  static const int SM_Fruit_Gamble_return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fruit_Gamble_return, errorid_),
  };
  SM_Fruit_Gamble_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Fruit_Gamble_return_descriptor_,
      SM_Fruit_Gamble_return::default_instance_,
      SM_Fruit_Gamble_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fruit_Gamble_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fruit_Gamble_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Fruit_Gamble_return));
  SM_Fruit_Gamble_Go_Return_descriptor_ = file->message_type(5);
  static const int SM_Fruit_Gamble_Go_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fruit_Gamble_Go_Return, fortuntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fruit_Gamble_Go_Return, pos_),
  };
  SM_Fruit_Gamble_Go_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Fruit_Gamble_Go_Return_descriptor_,
      SM_Fruit_Gamble_Go_Return::default_instance_,
      SM_Fruit_Gamble_Go_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fruit_Gamble_Go_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fruit_Gamble_Go_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Fruit_Gamble_Go_Return));
  GM_Fruit_Pos_descriptor_ = file->message_type(6);
  static const int GM_Fruit_Pos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fruit_Pos, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fruit_Pos, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fruit_Pos, get_),
  };
  GM_Fruit_Pos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Fruit_Pos_descriptor_,
      GM_Fruit_Pos::default_instance_,
      GM_Fruit_Pos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fruit_Pos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fruit_Pos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Fruit_Pos));
  SM_Fruit_plus_request_descriptor_ = file->message_type(7);
  static const int SM_Fruit_plus_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fruit_plus_request, plusmin_),
  };
  SM_Fruit_plus_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Fruit_plus_request_descriptor_,
      SM_Fruit_plus_request::default_instance_,
      SM_Fruit_plus_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fruit_plus_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fruit_plus_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Fruit_plus_request));
  SM_Fruit_plus_return_descriptor_ = file->message_type(8);
  static const int SM_Fruit_plus_return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fruit_plus_return, errorid_),
  };
  SM_Fruit_plus_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Fruit_plus_return_descriptor_,
      SM_Fruit_plus_return::default_instance_,
      SM_Fruit_plus_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fruit_plus_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fruit_plus_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Fruit_plus_return));
  SM_Fruit_Figure_return_descriptor_ = file->message_type(9);
  static const int SM_Fruit_Figure_return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fruit_Figure_return, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fruit_Figure_return, win_),
  };
  SM_Fruit_Figure_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Fruit_Figure_return_descriptor_,
      SM_Fruit_Figure_return::default_instance_,
      SM_Fruit_Figure_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fruit_Figure_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fruit_Figure_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Fruit_Figure_return));
  SM_Fruit_Money_return_descriptor_ = file->message_type(10);
  static const int SM_Fruit_Money_return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fruit_Money_return, money_),
  };
  SM_Fruit_Money_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Fruit_Money_return_descriptor_,
      SM_Fruit_Money_return::default_instance_,
      SM_Fruit_Money_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fruit_Money_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fruit_Money_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Fruit_Money_return));
  GM_Fruit_Money_return_descriptor_ = file->message_type(11);
  static const int GM_Fruit_Money_return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fruit_Money_return, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fruit_Money_return, win_),
  };
  GM_Fruit_Money_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Fruit_Money_return_descriptor_,
      GM_Fruit_Money_return::default_instance_,
      GM_Fruit_Money_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fruit_Money_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fruit_Money_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Fruit_Money_return));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Fruit_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Fruit_Login_request_descriptor_, &GM_Fruit_Login_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Fruit_Login_return_descriptor_, &GM_Fruit_Login_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Fruit_Gamble_descriptor_, &SM_Fruit_Gamble::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Fruit_Gamble_Request_descriptor_, &SM_Fruit_Gamble_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Fruit_Gamble_return_descriptor_, &SM_Fruit_Gamble_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Fruit_Gamble_Go_Return_descriptor_, &SM_Fruit_Gamble_Go_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Fruit_Pos_descriptor_, &GM_Fruit_Pos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Fruit_plus_request_descriptor_, &SM_Fruit_plus_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Fruit_plus_return_descriptor_, &SM_Fruit_plus_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Fruit_Figure_return_descriptor_, &SM_Fruit_Figure_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Fruit_Money_return_descriptor_, &SM_Fruit_Money_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Fruit_Money_return_descriptor_, &GM_Fruit_Money_return::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Fruit_2etxt() {
  delete GM_Fruit_Login_request::default_instance_;
  delete GM_Fruit_Login_request_reflection_;
  delete GM_Fruit_Login_return::default_instance_;
  delete GM_Fruit_Login_return_reflection_;
  delete SM_Fruit_Gamble::default_instance_;
  delete SM_Fruit_Gamble_reflection_;
  delete SM_Fruit_Gamble_Request::default_instance_;
  delete SM_Fruit_Gamble_Request_reflection_;
  delete SM_Fruit_Gamble_return::default_instance_;
  delete SM_Fruit_Gamble_return_reflection_;
  delete SM_Fruit_Gamble_Go_Return::default_instance_;
  delete SM_Fruit_Gamble_Go_Return_reflection_;
  delete GM_Fruit_Pos::default_instance_;
  delete GM_Fruit_Pos_reflection_;
  delete SM_Fruit_plus_request::default_instance_;
  delete SM_Fruit_plus_request_reflection_;
  delete SM_Fruit_plus_return::default_instance_;
  delete SM_Fruit_plus_return_reflection_;
  delete SM_Fruit_Figure_return::default_instance_;
  delete SM_Fruit_Figure_return_reflection_;
  delete SM_Fruit_Money_return::default_instance_;
  delete SM_Fruit_Money_return_reflection_;
  delete GM_Fruit_Money_return::default_instance_;
  delete GM_Fruit_Money_return_reflection_;
}

void protobuf_AddDesc_Fruit_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tFruit.txt\"*\n\026GM_Fruit_Login_request\022\020\n"
    "\010roomtype\030\001 \002(\005\"6\n\025GM_Fruit_Login_return"
    "\022\017\n\007errorid\030\001 \002(\005\022\014\n\004rate\030\002 \001(\005\"5\n\017SM_Fr"
    "uit_Gamble\022\022\n\nobjecytype\030\001 \002(\005\022\016\n\006monrey"
    "\030\002 \001(\005\"E\n\027SM_Fruit_Gamble_Request\022\n\n\002id\030"
    "\001 \002(\005\022\036\n\004data\030\002 \003(\0132\020.SM_Fruit_Gamble\")\n"
    "\026SM_Fruit_Gamble_return\022\017\n\007errorid\030\001 \002(\005"
    "\"K\n\031SM_Fruit_Gamble_Go_Return\022\022\n\nfortunt"
    "ype\030\001 \002(\005\022\032\n\003pos\030\002 \003(\0132\r.GM_Fruit_Pos\"6\n"
    "\014GM_Fruit_Pos\022\013\n\003pos\030\001 \002(\005\022\014\n\004rate\030\002 \001(\005"
    "\022\013\n\003get\030\003 \001(\005\"(\n\025SM_Fruit_plus_request\022\017"
    "\n\007plusmin\030\001 \002(\005\"\'\n\024SM_Fruit_plus_return\022"
    "\017\n\007errorid\030\001 \002(\005\"6\n\026SM_Fruit_Figure_retu"
    "rn\022\017\n\007success\030\001 \002(\005\022\013\n\003win\030\002 \001(\005\"&\n\025SM_F"
    "ruit_Money_return\022\r\n\005money\030\001 \002(\005\"3\n\025GM_F"
    "ruit_Money_return\022\r\n\005money\030\001 \002(\005\022\013\n\003win\030"
    "\002 \001(\005", 645);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Fruit.txt", &protobuf_RegisterTypes);
  GM_Fruit_Login_request::default_instance_ = new GM_Fruit_Login_request();
  GM_Fruit_Login_return::default_instance_ = new GM_Fruit_Login_return();
  SM_Fruit_Gamble::default_instance_ = new SM_Fruit_Gamble();
  SM_Fruit_Gamble_Request::default_instance_ = new SM_Fruit_Gamble_Request();
  SM_Fruit_Gamble_return::default_instance_ = new SM_Fruit_Gamble_return();
  SM_Fruit_Gamble_Go_Return::default_instance_ = new SM_Fruit_Gamble_Go_Return();
  GM_Fruit_Pos::default_instance_ = new GM_Fruit_Pos();
  SM_Fruit_plus_request::default_instance_ = new SM_Fruit_plus_request();
  SM_Fruit_plus_return::default_instance_ = new SM_Fruit_plus_return();
  SM_Fruit_Figure_return::default_instance_ = new SM_Fruit_Figure_return();
  SM_Fruit_Money_return::default_instance_ = new SM_Fruit_Money_return();
  GM_Fruit_Money_return::default_instance_ = new GM_Fruit_Money_return();
  GM_Fruit_Login_request::default_instance_->InitAsDefaultInstance();
  GM_Fruit_Login_return::default_instance_->InitAsDefaultInstance();
  SM_Fruit_Gamble::default_instance_->InitAsDefaultInstance();
  SM_Fruit_Gamble_Request::default_instance_->InitAsDefaultInstance();
  SM_Fruit_Gamble_return::default_instance_->InitAsDefaultInstance();
  SM_Fruit_Gamble_Go_Return::default_instance_->InitAsDefaultInstance();
  GM_Fruit_Pos::default_instance_->InitAsDefaultInstance();
  SM_Fruit_plus_request::default_instance_->InitAsDefaultInstance();
  SM_Fruit_plus_return::default_instance_->InitAsDefaultInstance();
  SM_Fruit_Figure_return::default_instance_->InitAsDefaultInstance();
  SM_Fruit_Money_return::default_instance_->InitAsDefaultInstance();
  GM_Fruit_Money_return::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Fruit_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Fruit_2etxt {
  StaticDescriptorInitializer_Fruit_2etxt() {
    protobuf_AddDesc_Fruit_2etxt();
  }
} static_descriptor_initializer_Fruit_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_Fruit_Login_request::kRoomtypeFieldNumber;
#endif  // !_MSC_VER

GM_Fruit_Login_request::GM_Fruit_Login_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Fruit_Login_request::InitAsDefaultInstance() {
}

GM_Fruit_Login_request::GM_Fruit_Login_request(const GM_Fruit_Login_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Fruit_Login_request::SharedCtor() {
  _cached_size_ = 0;
  roomtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Fruit_Login_request::~GM_Fruit_Login_request() {
  SharedDtor();
}

void GM_Fruit_Login_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Fruit_Login_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Fruit_Login_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Fruit_Login_request_descriptor_;
}

const GM_Fruit_Login_request& GM_Fruit_Login_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fruit_2etxt();
  return *default_instance_;
}

GM_Fruit_Login_request* GM_Fruit_Login_request::default_instance_ = NULL;

GM_Fruit_Login_request* GM_Fruit_Login_request::New() const {
  return new GM_Fruit_Login_request;
}

void GM_Fruit_Login_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Fruit_Login_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Fruit_Login_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomtype = 1;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Fruit_Login_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomtype = 1;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Fruit_Login_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomtype = 1;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Fruit_Login_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Fruit_Login_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Fruit_Login_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Fruit_Login_request::MergeFrom(const GM_Fruit_Login_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Fruit_Login_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Fruit_Login_request::CopyFrom(const GM_Fruit_Login_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Fruit_Login_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Fruit_Login_request::Swap(GM_Fruit_Login_request* other) {
  if (other != this) {
    std::swap(roomtype_, other->roomtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Fruit_Login_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Fruit_Login_request_descriptor_;
  metadata.reflection = GM_Fruit_Login_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Fruit_Login_return::kErroridFieldNumber;
const int GM_Fruit_Login_return::kRateFieldNumber;
#endif  // !_MSC_VER

GM_Fruit_Login_return::GM_Fruit_Login_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Fruit_Login_return::InitAsDefaultInstance() {
}

GM_Fruit_Login_return::GM_Fruit_Login_return(const GM_Fruit_Login_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Fruit_Login_return::SharedCtor() {
  _cached_size_ = 0;
  errorid_ = 0;
  rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Fruit_Login_return::~GM_Fruit_Login_return() {
  SharedDtor();
}

void GM_Fruit_Login_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Fruit_Login_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Fruit_Login_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Fruit_Login_return_descriptor_;
}

const GM_Fruit_Login_return& GM_Fruit_Login_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fruit_2etxt();
  return *default_instance_;
}

GM_Fruit_Login_return* GM_Fruit_Login_return::default_instance_ = NULL;

GM_Fruit_Login_return* GM_Fruit_Login_return::New() const {
  return new GM_Fruit_Login_return;
}

void GM_Fruit_Login_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorid_ = 0;
    rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Fruit_Login_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorid_)));
          set_has_errorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rate;
        break;
      }

      // optional int32 rate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Fruit_Login_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorid(), output);
  }

  // optional int32 rate = 2;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Fruit_Login_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorid(), target);
  }

  // optional int32 rate = 2;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Fruit_Login_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorid = 1;
    if (has_errorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorid());
    }

    // optional int32 rate = 2;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Fruit_Login_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Fruit_Login_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Fruit_Login_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Fruit_Login_return::MergeFrom(const GM_Fruit_Login_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorid()) {
      set_errorid(from.errorid());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Fruit_Login_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Fruit_Login_return::CopyFrom(const GM_Fruit_Login_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Fruit_Login_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Fruit_Login_return::Swap(GM_Fruit_Login_return* other) {
  if (other != this) {
    std::swap(errorid_, other->errorid_);
    std::swap(rate_, other->rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Fruit_Login_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Fruit_Login_return_descriptor_;
  metadata.reflection = GM_Fruit_Login_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Fruit_Gamble::kObjecytypeFieldNumber;
const int SM_Fruit_Gamble::kMonreyFieldNumber;
#endif  // !_MSC_VER

SM_Fruit_Gamble::SM_Fruit_Gamble()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Fruit_Gamble::InitAsDefaultInstance() {
}

SM_Fruit_Gamble::SM_Fruit_Gamble(const SM_Fruit_Gamble& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Fruit_Gamble::SharedCtor() {
  _cached_size_ = 0;
  objecytype_ = 0;
  monrey_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Fruit_Gamble::~SM_Fruit_Gamble() {
  SharedDtor();
}

void SM_Fruit_Gamble::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Fruit_Gamble::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Fruit_Gamble::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Fruit_Gamble_descriptor_;
}

const SM_Fruit_Gamble& SM_Fruit_Gamble::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fruit_2etxt();
  return *default_instance_;
}

SM_Fruit_Gamble* SM_Fruit_Gamble::default_instance_ = NULL;

SM_Fruit_Gamble* SM_Fruit_Gamble::New() const {
  return new SM_Fruit_Gamble;
}

void SM_Fruit_Gamble::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objecytype_ = 0;
    monrey_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Fruit_Gamble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objecytype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objecytype_)));
          set_has_objecytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_monrey;
        break;
      }

      // optional int32 monrey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monrey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monrey_)));
          set_has_monrey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Fruit_Gamble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objecytype = 1;
  if (has_objecytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objecytype(), output);
  }

  // optional int32 monrey = 2;
  if (has_monrey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->monrey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Fruit_Gamble::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objecytype = 1;
  if (has_objecytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objecytype(), target);
  }

  // optional int32 monrey = 2;
  if (has_monrey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->monrey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Fruit_Gamble::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objecytype = 1;
    if (has_objecytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objecytype());
    }

    // optional int32 monrey = 2;
    if (has_monrey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monrey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Fruit_Gamble::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Fruit_Gamble* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Fruit_Gamble*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Fruit_Gamble::MergeFrom(const SM_Fruit_Gamble& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objecytype()) {
      set_objecytype(from.objecytype());
    }
    if (from.has_monrey()) {
      set_monrey(from.monrey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Fruit_Gamble::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Fruit_Gamble::CopyFrom(const SM_Fruit_Gamble& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Fruit_Gamble::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Fruit_Gamble::Swap(SM_Fruit_Gamble* other) {
  if (other != this) {
    std::swap(objecytype_, other->objecytype_);
    std::swap(monrey_, other->monrey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Fruit_Gamble::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Fruit_Gamble_descriptor_;
  metadata.reflection = SM_Fruit_Gamble_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Fruit_Gamble_Request::kIdFieldNumber;
const int SM_Fruit_Gamble_Request::kDataFieldNumber;
#endif  // !_MSC_VER

SM_Fruit_Gamble_Request::SM_Fruit_Gamble_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Fruit_Gamble_Request::InitAsDefaultInstance() {
}

SM_Fruit_Gamble_Request::SM_Fruit_Gamble_Request(const SM_Fruit_Gamble_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Fruit_Gamble_Request::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Fruit_Gamble_Request::~SM_Fruit_Gamble_Request() {
  SharedDtor();
}

void SM_Fruit_Gamble_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Fruit_Gamble_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Fruit_Gamble_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Fruit_Gamble_Request_descriptor_;
}

const SM_Fruit_Gamble_Request& SM_Fruit_Gamble_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fruit_2etxt();
  return *default_instance_;
}

SM_Fruit_Gamble_Request* SM_Fruit_Gamble_Request::default_instance_ = NULL;

SM_Fruit_Gamble_Request* SM_Fruit_Gamble_Request::New() const {
  return new SM_Fruit_Gamble_Request;
}

void SM_Fruit_Gamble_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Fruit_Gamble_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .SM_Fruit_Gamble data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Fruit_Gamble_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .SM_Fruit_Gamble data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Fruit_Gamble_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .SM_Fruit_Gamble data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Fruit_Gamble_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated .SM_Fruit_Gamble data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Fruit_Gamble_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Fruit_Gamble_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Fruit_Gamble_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Fruit_Gamble_Request::MergeFrom(const SM_Fruit_Gamble_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Fruit_Gamble_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Fruit_Gamble_Request::CopyFrom(const SM_Fruit_Gamble_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Fruit_Gamble_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void SM_Fruit_Gamble_Request::Swap(SM_Fruit_Gamble_Request* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Fruit_Gamble_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Fruit_Gamble_Request_descriptor_;
  metadata.reflection = SM_Fruit_Gamble_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Fruit_Gamble_return::kErroridFieldNumber;
#endif  // !_MSC_VER

SM_Fruit_Gamble_return::SM_Fruit_Gamble_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Fruit_Gamble_return::InitAsDefaultInstance() {
}

SM_Fruit_Gamble_return::SM_Fruit_Gamble_return(const SM_Fruit_Gamble_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Fruit_Gamble_return::SharedCtor() {
  _cached_size_ = 0;
  errorid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Fruit_Gamble_return::~SM_Fruit_Gamble_return() {
  SharedDtor();
}

void SM_Fruit_Gamble_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Fruit_Gamble_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Fruit_Gamble_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Fruit_Gamble_return_descriptor_;
}

const SM_Fruit_Gamble_return& SM_Fruit_Gamble_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fruit_2etxt();
  return *default_instance_;
}

SM_Fruit_Gamble_return* SM_Fruit_Gamble_return::default_instance_ = NULL;

SM_Fruit_Gamble_return* SM_Fruit_Gamble_return::New() const {
  return new SM_Fruit_Gamble_return;
}

void SM_Fruit_Gamble_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Fruit_Gamble_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorid_)));
          set_has_errorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Fruit_Gamble_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Fruit_Gamble_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Fruit_Gamble_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorid = 1;
    if (has_errorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Fruit_Gamble_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Fruit_Gamble_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Fruit_Gamble_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Fruit_Gamble_return::MergeFrom(const SM_Fruit_Gamble_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorid()) {
      set_errorid(from.errorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Fruit_Gamble_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Fruit_Gamble_return::CopyFrom(const SM_Fruit_Gamble_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Fruit_Gamble_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Fruit_Gamble_return::Swap(SM_Fruit_Gamble_return* other) {
  if (other != this) {
    std::swap(errorid_, other->errorid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Fruit_Gamble_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Fruit_Gamble_return_descriptor_;
  metadata.reflection = SM_Fruit_Gamble_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Fruit_Gamble_Go_Return::kFortuntypeFieldNumber;
const int SM_Fruit_Gamble_Go_Return::kPosFieldNumber;
#endif  // !_MSC_VER

SM_Fruit_Gamble_Go_Return::SM_Fruit_Gamble_Go_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Fruit_Gamble_Go_Return::InitAsDefaultInstance() {
}

SM_Fruit_Gamble_Go_Return::SM_Fruit_Gamble_Go_Return(const SM_Fruit_Gamble_Go_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Fruit_Gamble_Go_Return::SharedCtor() {
  _cached_size_ = 0;
  fortuntype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Fruit_Gamble_Go_Return::~SM_Fruit_Gamble_Go_Return() {
  SharedDtor();
}

void SM_Fruit_Gamble_Go_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Fruit_Gamble_Go_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Fruit_Gamble_Go_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Fruit_Gamble_Go_Return_descriptor_;
}

const SM_Fruit_Gamble_Go_Return& SM_Fruit_Gamble_Go_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fruit_2etxt();
  return *default_instance_;
}

SM_Fruit_Gamble_Go_Return* SM_Fruit_Gamble_Go_Return::default_instance_ = NULL;

SM_Fruit_Gamble_Go_Return* SM_Fruit_Gamble_Go_Return::New() const {
  return new SM_Fruit_Gamble_Go_Return;
}

void SM_Fruit_Gamble_Go_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fortuntype_ = 0;
  }
  pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Fruit_Gamble_Go_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fortuntype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fortuntype_)));
          set_has_fortuntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // repeated .GM_Fruit_Pos pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Fruit_Gamble_Go_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 fortuntype = 1;
  if (has_fortuntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fortuntype(), output);
  }

  // repeated .GM_Fruit_Pos pos = 2;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Fruit_Gamble_Go_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 fortuntype = 1;
  if (has_fortuntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fortuntype(), target);
  }

  // repeated .GM_Fruit_Pos pos = 2;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Fruit_Gamble_Go_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fortuntype = 1;
    if (has_fortuntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fortuntype());
    }

  }
  // repeated .GM_Fruit_Pos pos = 2;
  total_size += 1 * this->pos_size();
  for (int i = 0; i < this->pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Fruit_Gamble_Go_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Fruit_Gamble_Go_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Fruit_Gamble_Go_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Fruit_Gamble_Go_Return::MergeFrom(const SM_Fruit_Gamble_Go_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_.MergeFrom(from.pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fortuntype()) {
      set_fortuntype(from.fortuntype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Fruit_Gamble_Go_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Fruit_Gamble_Go_Return::CopyFrom(const SM_Fruit_Gamble_Go_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Fruit_Gamble_Go_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < pos_size(); i++) {
    if (!this->pos(i).IsInitialized()) return false;
  }
  return true;
}

void SM_Fruit_Gamble_Go_Return::Swap(SM_Fruit_Gamble_Go_Return* other) {
  if (other != this) {
    std::swap(fortuntype_, other->fortuntype_);
    pos_.Swap(&other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Fruit_Gamble_Go_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Fruit_Gamble_Go_Return_descriptor_;
  metadata.reflection = SM_Fruit_Gamble_Go_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Fruit_Pos::kPosFieldNumber;
const int GM_Fruit_Pos::kRateFieldNumber;
const int GM_Fruit_Pos::kGetFieldNumber;
#endif  // !_MSC_VER

GM_Fruit_Pos::GM_Fruit_Pos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Fruit_Pos::InitAsDefaultInstance() {
}

GM_Fruit_Pos::GM_Fruit_Pos(const GM_Fruit_Pos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Fruit_Pos::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  rate_ = 0;
  get_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Fruit_Pos::~GM_Fruit_Pos() {
  SharedDtor();
}

void GM_Fruit_Pos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Fruit_Pos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Fruit_Pos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Fruit_Pos_descriptor_;
}

const GM_Fruit_Pos& GM_Fruit_Pos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fruit_2etxt();
  return *default_instance_;
}

GM_Fruit_Pos* GM_Fruit_Pos::default_instance_ = NULL;

GM_Fruit_Pos* GM_Fruit_Pos::New() const {
  return new GM_Fruit_Pos;
}

void GM_Fruit_Pos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    rate_ = 0;
    get_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Fruit_Pos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rate;
        break;
      }

      // optional int32 rate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_get;
        break;
      }

      // optional int32 get = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_)));
          set_has_get();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Fruit_Pos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // optional int32 rate = 2;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rate(), output);
  }

  // optional int32 get = 3;
  if (has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->get(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Fruit_Pos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  // optional int32 rate = 2;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rate(), target);
  }

  // optional int32 get = 3;
  if (has_get()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->get(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Fruit_Pos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional int32 rate = 2;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

    // optional int32 get = 3;
    if (has_get()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->get());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Fruit_Pos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Fruit_Pos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Fruit_Pos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Fruit_Pos::MergeFrom(const GM_Fruit_Pos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_get()) {
      set_get(from.get());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Fruit_Pos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Fruit_Pos::CopyFrom(const GM_Fruit_Pos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Fruit_Pos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Fruit_Pos::Swap(GM_Fruit_Pos* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(rate_, other->rate_);
    std::swap(get_, other->get_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Fruit_Pos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Fruit_Pos_descriptor_;
  metadata.reflection = GM_Fruit_Pos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Fruit_plus_request::kPlusminFieldNumber;
#endif  // !_MSC_VER

SM_Fruit_plus_request::SM_Fruit_plus_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Fruit_plus_request::InitAsDefaultInstance() {
}

SM_Fruit_plus_request::SM_Fruit_plus_request(const SM_Fruit_plus_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Fruit_plus_request::SharedCtor() {
  _cached_size_ = 0;
  plusmin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Fruit_plus_request::~SM_Fruit_plus_request() {
  SharedDtor();
}

void SM_Fruit_plus_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Fruit_plus_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Fruit_plus_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Fruit_plus_request_descriptor_;
}

const SM_Fruit_plus_request& SM_Fruit_plus_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fruit_2etxt();
  return *default_instance_;
}

SM_Fruit_plus_request* SM_Fruit_plus_request::default_instance_ = NULL;

SM_Fruit_plus_request* SM_Fruit_plus_request::New() const {
  return new SM_Fruit_plus_request;
}

void SM_Fruit_plus_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plusmin_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Fruit_plus_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 plusmin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plusmin_)));
          set_has_plusmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Fruit_plus_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 plusmin = 1;
  if (has_plusmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->plusmin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Fruit_plus_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 plusmin = 1;
  if (has_plusmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->plusmin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Fruit_plus_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 plusmin = 1;
    if (has_plusmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plusmin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Fruit_plus_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Fruit_plus_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Fruit_plus_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Fruit_plus_request::MergeFrom(const SM_Fruit_plus_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plusmin()) {
      set_plusmin(from.plusmin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Fruit_plus_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Fruit_plus_request::CopyFrom(const SM_Fruit_plus_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Fruit_plus_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Fruit_plus_request::Swap(SM_Fruit_plus_request* other) {
  if (other != this) {
    std::swap(plusmin_, other->plusmin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Fruit_plus_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Fruit_plus_request_descriptor_;
  metadata.reflection = SM_Fruit_plus_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Fruit_plus_return::kErroridFieldNumber;
#endif  // !_MSC_VER

SM_Fruit_plus_return::SM_Fruit_plus_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Fruit_plus_return::InitAsDefaultInstance() {
}

SM_Fruit_plus_return::SM_Fruit_plus_return(const SM_Fruit_plus_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Fruit_plus_return::SharedCtor() {
  _cached_size_ = 0;
  errorid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Fruit_plus_return::~SM_Fruit_plus_return() {
  SharedDtor();
}

void SM_Fruit_plus_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Fruit_plus_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Fruit_plus_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Fruit_plus_return_descriptor_;
}

const SM_Fruit_plus_return& SM_Fruit_plus_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fruit_2etxt();
  return *default_instance_;
}

SM_Fruit_plus_return* SM_Fruit_plus_return::default_instance_ = NULL;

SM_Fruit_plus_return* SM_Fruit_plus_return::New() const {
  return new SM_Fruit_plus_return;
}

void SM_Fruit_plus_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Fruit_plus_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorid_)));
          set_has_errorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Fruit_plus_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Fruit_plus_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Fruit_plus_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorid = 1;
    if (has_errorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Fruit_plus_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Fruit_plus_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Fruit_plus_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Fruit_plus_return::MergeFrom(const SM_Fruit_plus_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorid()) {
      set_errorid(from.errorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Fruit_plus_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Fruit_plus_return::CopyFrom(const SM_Fruit_plus_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Fruit_plus_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Fruit_plus_return::Swap(SM_Fruit_plus_return* other) {
  if (other != this) {
    std::swap(errorid_, other->errorid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Fruit_plus_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Fruit_plus_return_descriptor_;
  metadata.reflection = SM_Fruit_plus_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Fruit_Figure_return::kSuccessFieldNumber;
const int SM_Fruit_Figure_return::kWinFieldNumber;
#endif  // !_MSC_VER

SM_Fruit_Figure_return::SM_Fruit_Figure_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Fruit_Figure_return::InitAsDefaultInstance() {
}

SM_Fruit_Figure_return::SM_Fruit_Figure_return(const SM_Fruit_Figure_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Fruit_Figure_return::SharedCtor() {
  _cached_size_ = 0;
  success_ = 0;
  win_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Fruit_Figure_return::~SM_Fruit_Figure_return() {
  SharedDtor();
}

void SM_Fruit_Figure_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Fruit_Figure_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Fruit_Figure_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Fruit_Figure_return_descriptor_;
}

const SM_Fruit_Figure_return& SM_Fruit_Figure_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fruit_2etxt();
  return *default_instance_;
}

SM_Fruit_Figure_return* SM_Fruit_Figure_return::default_instance_ = NULL;

SM_Fruit_Figure_return* SM_Fruit_Figure_return::New() const {
  return new SM_Fruit_Figure_return;
}

void SM_Fruit_Figure_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = 0;
    win_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Fruit_Figure_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_win;
        break;
      }

      // optional int32 win = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Fruit_Figure_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->success(), output);
  }

  // optional int32 win = 2;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->win(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Fruit_Figure_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->success(), target);
  }

  // optional int32 win = 2;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->win(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Fruit_Figure_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 success = 1;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->success());
    }

    // optional int32 win = 2;
    if (has_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Fruit_Figure_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Fruit_Figure_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Fruit_Figure_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Fruit_Figure_return::MergeFrom(const SM_Fruit_Figure_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Fruit_Figure_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Fruit_Figure_return::CopyFrom(const SM_Fruit_Figure_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Fruit_Figure_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Fruit_Figure_return::Swap(SM_Fruit_Figure_return* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(win_, other->win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Fruit_Figure_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Fruit_Figure_return_descriptor_;
  metadata.reflection = SM_Fruit_Figure_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Fruit_Money_return::kMoneyFieldNumber;
#endif  // !_MSC_VER

SM_Fruit_Money_return::SM_Fruit_Money_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Fruit_Money_return::InitAsDefaultInstance() {
}

SM_Fruit_Money_return::SM_Fruit_Money_return(const SM_Fruit_Money_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Fruit_Money_return::SharedCtor() {
  _cached_size_ = 0;
  money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Fruit_Money_return::~SM_Fruit_Money_return() {
  SharedDtor();
}

void SM_Fruit_Money_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Fruit_Money_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Fruit_Money_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Fruit_Money_return_descriptor_;
}

const SM_Fruit_Money_return& SM_Fruit_Money_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fruit_2etxt();
  return *default_instance_;
}

SM_Fruit_Money_return* SM_Fruit_Money_return::default_instance_ = NULL;

SM_Fruit_Money_return* SM_Fruit_Money_return::New() const {
  return new SM_Fruit_Money_return;
}

void SM_Fruit_Money_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    money_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Fruit_Money_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Fruit_Money_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 money = 1;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Fruit_Money_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 money = 1;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Fruit_Money_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 money = 1;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Fruit_Money_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Fruit_Money_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Fruit_Money_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Fruit_Money_return::MergeFrom(const SM_Fruit_Money_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Fruit_Money_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Fruit_Money_return::CopyFrom(const SM_Fruit_Money_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Fruit_Money_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Fruit_Money_return::Swap(SM_Fruit_Money_return* other) {
  if (other != this) {
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Fruit_Money_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Fruit_Money_return_descriptor_;
  metadata.reflection = SM_Fruit_Money_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Fruit_Money_return::kMoneyFieldNumber;
const int GM_Fruit_Money_return::kWinFieldNumber;
#endif  // !_MSC_VER

GM_Fruit_Money_return::GM_Fruit_Money_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Fruit_Money_return::InitAsDefaultInstance() {
}

GM_Fruit_Money_return::GM_Fruit_Money_return(const GM_Fruit_Money_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Fruit_Money_return::SharedCtor() {
  _cached_size_ = 0;
  money_ = 0;
  win_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Fruit_Money_return::~GM_Fruit_Money_return() {
  SharedDtor();
}

void GM_Fruit_Money_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Fruit_Money_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Fruit_Money_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Fruit_Money_return_descriptor_;
}

const GM_Fruit_Money_return& GM_Fruit_Money_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fruit_2etxt();
  return *default_instance_;
}

GM_Fruit_Money_return* GM_Fruit_Money_return::default_instance_ = NULL;

GM_Fruit_Money_return* GM_Fruit_Money_return::New() const {
  return new GM_Fruit_Money_return;
}

void GM_Fruit_Money_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    money_ = 0;
    win_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Fruit_Money_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_win;
        break;
      }

      // optional int32 win = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Fruit_Money_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 money = 1;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->money(), output);
  }

  // optional int32 win = 2;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->win(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Fruit_Money_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 money = 1;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->money(), target);
  }

  // optional int32 win = 2;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->win(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Fruit_Money_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 money = 1;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional int32 win = 2;
    if (has_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Fruit_Money_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Fruit_Money_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Fruit_Money_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Fruit_Money_return::MergeFrom(const GM_Fruit_Money_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Fruit_Money_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Fruit_Money_return::CopyFrom(const GM_Fruit_Money_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Fruit_Money_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Fruit_Money_return::Swap(GM_Fruit_Money_return* other) {
  if (other != this) {
    std::swap(money_, other->money_);
    std::swap(win_, other->win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Fruit_Money_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Fruit_Money_return_descriptor_;
  metadata.reflection = GM_Fruit_Money_return_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
